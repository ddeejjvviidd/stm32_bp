
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d718  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800d8d4  0800d8d4  0000e8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d98c  0800d98c  0000f10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d98c  0800d98c  0000e98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d994  0800d994  0000f10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d994  0800d994  0000e994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d998  0800d998  0000e998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800d99c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000507c  2000010c  0800daa8  0000f10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005188  0800daa8  0000f188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002461b  00000000  00000000  0000f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e41  00000000  00000000  00033757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00038598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015f9  00000000  00000000  0003a1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff2b  00000000  00000000  0003b7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000237ec  00000000  00000000  0006b714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d89e  00000000  00000000  0008ef00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac79e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007780  00000000  00000000  001ac7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b3f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800d8bc 	.word	0x0800d8bc

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800d8bc 	.word	0x0800d8bc

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2201      	movs	r2, #1
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fc73 	bl	8001e54 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 fe6d 	bl	8001252 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f001 ffef 	bl	8002578 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fe57 	bl	8001252 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f001 ffe1 	bl	8002578 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 fe49 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00d f925 	bl	800d848 <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fd99 	bl	8006170 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 fe05 	bl	8001252 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f003 fa2d 	bl	8003af0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 fe97 	bl	8003404 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 fdb9 	bl	8001252 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 fe50 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 fe69 	bl	80033ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 fe3a 	bl	8003404 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 fd5c 	bl	8001252 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 fdf9 	bl	8003396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 fe12 	bl	80033ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 fdf1 	bl	8003396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 fe0a 	bl	80033ce <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800085e:	f004 fd9f 	bl	80053a0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 fac7 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 fac2 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 fabd 	bl	8003e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f003 f91d 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f003 f90e 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f003 f902 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f003 f8f4 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f003 f8e6 	bl	8003af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fd34 	bl	8003396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fd4d 	bl	80033ce <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d125      	bne.n	80009aa <HAL_GPIO_EXTI_Callback+0x5e>
		static bool previous;
		if(previous == false){
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000974:	f003 fa4e 	bl	8003e14 <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		} else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000988:	f003 fa44 	bl	8003e14 <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
		}

		int test = 1984;
 8000992:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000996:	60fb      	str	r3, [r7, #12]
		comms_append_int32(10, 1, &test);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	461a      	mov	r2, r3
 800099e:	2101      	movs	r1, #1
 80009a0:	200a      	movs	r0, #10
 80009a2:	f000 f881 	bl	8000aa8 <comms_append_int32>
		comms_send();
 80009a6:	f000 f8f3 	bl	8000b90 <comms_send>
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000250 	.word	0x20000250
 80009b8:	48000400 	.word	0x48000400

080009bc <comms_reset_active_buffer>:
	DataValue data[255];
} CommsData;

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);

void comms_reset_active_buffer() {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_active_buffer)) = START_HEADER; // start bits
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <comms_reset_active_buffer+0x38>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 80009c8:	801a      	strh	r2, [r3, #0]
	comms_active_buffer[2] = 0; // buffer id
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <comms_reset_active_buffer+0x38>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3302      	adds	r3, #2
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	*((uint16_t*) (comms_active_buffer + 3)) = 0; // num of elements
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <comms_reset_active_buffer+0x38>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3303      	adds	r3, #3
 80009da:	2200      	movs	r2, #0
 80009dc:	801a      	strh	r2, [r3, #0]
	comms_active_wr_pointer = comms_active_buffer + 5; // first empty position for data
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <comms_reset_active_buffer+0x38>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3305      	adds	r3, #5
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <comms_reset_active_buffer+0x3c>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000a54 	.word	0x20000a54
 80009f8:	20000a58 	.word	0x20000a58

080009fc <comms_init>:

void comms_init() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	comms_active_buffer = comms_tx_buffer1;
 8000a00:	4b07      	ldr	r3, [pc, #28]	@ (8000a20 <comms_init+0x24>)
 8000a02:	4a08      	ldr	r2, [pc, #32]	@ (8000a24 <comms_init+0x28>)
 8000a04:	601a      	str	r2, [r3, #0]
	comms_prepared_buffer = comms_tx_buffer2;
 8000a06:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <comms_init+0x2c>)
 8000a08:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <comms_init+0x30>)
 8000a0a:	601a      	str	r2, [r3, #0]

	comms_reset_active_buffer();
 8000a0c:	f7ff ffd6 	bl	80009bc <comms_reset_active_buffer>
	comms_prepared_wr_pointer = comms_prepared_buffer + 5;
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <comms_init+0x2c>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	3305      	adds	r3, #5
 8000a16:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <comms_init+0x34>)
 8000a18:	6013      	str	r3, [r2, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000a54 	.word	0x20000a54
 8000a24:	20000254 	.word	0x20000254
 8000a28:	20000a5c 	.word	0x20000a5c
 8000a2c:	20000654 	.word	0x20000654
 8000a30:	20000a60 	.word	0x20000a60

08000a34 <comms_purge_id_register>:

void comms_purge_id_register() {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	memset(comms_id_register, NULL, sizeof(comms_id_register));
 8000a38:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4802      	ldr	r0, [pc, #8]	@ (8000a48 <comms_purge_id_register+0x14>)
 8000a40:	f00c ff02 	bl	800d848 <memset>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000a64 	.word	0x20000a64

08000a4c <comms_find_existing_data>:

void* comms_find_existing_data(uint8_t data_id) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	if (comms_id_register[data_id] != NULL) {
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <comms_find_existing_data+0x30>)
 8000a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d004      	beq.n	8000a6c <comms_find_existing_data+0x20>
		return comms_id_register[data_id];
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <comms_find_existing_data+0x30>)
 8000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6a:	e000      	b.n	8000a6e <comms_find_existing_data+0x22>
	}
	return NULL;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000a64 	.word	0x20000a64

08000a80 <comms_increment_active_buffer_data>:

void comms_increment_active_buffer_data() {
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_active_buffer + 3)) += 1;
 8000a84:	4b07      	ldr	r3, [pc, #28]	@ (8000aa4 <comms_increment_active_buffer_data+0x24>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3303      	adds	r3, #3
 8000a8a:	881a      	ldrh	r2, [r3, #0]
 8000a8c:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <comms_increment_active_buffer_data+0x24>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3303      	adds	r3, #3
 8000a92:	3201      	adds	r2, #1
 8000a94:	b292      	uxth	r2, r2
 8000a96:	801a      	strh	r2, [r3, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000a54 	.word	0x20000a54

08000aa8 <comms_append_int32>:

int comms_append_int32(uint8_t data_id, uint8_t data_count, int *data) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	603a      	str	r2, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	71bb      	strb	r3, [r7, #6]
	// dissable interrupts
//	uint32_t primask = __get_PRIMASK();
//	__disable_irq();

	//check tx_register for same data id, return if existing
	if (comms_find_existing_data(data_id) != NULL) {
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff ffc6 	bl	8000a4c <comms_find_existing_data>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <comms_append_int32+0x22>
		return 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e02a      	b.n	8000b20 <comms_append_int32+0x78>
	}

	if (wr_status) {
 8000aca:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <comms_append_int32+0x80>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <comms_append_int32+0x2e>
		return COMMS_WR_LOCKED;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	e024      	b.n	8000b20 <comms_append_int32+0x78>
//	else {
//		wr_status = COMMS_INPROGRESS;
//	}

	// save the pointer to new data to register
	comms_id_register[data_id] = (void*) comms_active_wr_pointer;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4a14      	ldr	r2, [pc, #80]	@ (8000b2c <comms_append_int32+0x84>)
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	4914      	ldr	r1, [pc, #80]	@ (8000b30 <comms_append_int32+0x88>)
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// increment total data in buffer
	comms_increment_active_buffer_data();
 8000ae2:	f7ff ffcd 	bl	8000a80 <comms_increment_active_buffer_data>

	// write id, bytes and count
	*comms_active_wr_pointer = data_id;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <comms_append_int32+0x84>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	79fa      	ldrb	r2, [r7, #7]
 8000aec:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer + 1) = (uint8_t) sizeof(*data);
 8000aee:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <comms_append_int32+0x84>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3301      	adds	r3, #1
 8000af4:	2204      	movs	r2, #4
 8000af6:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer + 2) = data_count;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <comms_append_int32+0x84>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3302      	adds	r3, #2
 8000afe:	79ba      	ldrb	r2, [r7, #6]
 8000b00:	701a      	strb	r2, [r3, #0]

	// write integer as 4 uint8_t to tx_buffer
	*((int*) (comms_active_wr_pointer + 3)) = *data;
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <comms_append_int32+0x84>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3303      	adds	r3, #3
 8000b08:	683a      	ldr	r2, [r7, #0]
 8000b0a:	6812      	ldr	r2, [r2, #0]
 8000b0c:	601a      	str	r2, [r3, #0]

	// move pointer comms_tx_buffer_wr_pointer
	comms_active_wr_pointer = (comms_active_wr_pointer + 3 + sizeof(*data));
 8000b0e:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <comms_append_int32+0x84>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3307      	adds	r3, #7
 8000b14:	4a05      	ldr	r2, [pc, #20]	@ (8000b2c <comms_append_int32+0x84>)
 8000b16:	6013      	str	r3, [r2, #0]

	wr_status = COMMS_READY;
 8000b18:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <comms_append_int32+0x80>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]

	// restore interrupts
//	__set_PRIMASK(primask);

	return 0;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20001268 	.word	0x20001268
 8000b2c:	20000a58 	.word	0x20000a58
 8000b30:	20000a64 	.word	0x20000a64

08000b34 <comms_switch_buffers>:

void comms_switch_buffers() {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8000b3e:	603b      	str	r3, [r7, #0]
  return(result);
 8000b40:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000b42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b44:	b672      	cpsid	i
}
 8000b46:	bf00      	nop
	__disable_irq();

	// switch buffers
	uint8_t *_temp = comms_prepared_buffer;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <comms_switch_buffers+0x4c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	60bb      	str	r3, [r7, #8]
	comms_prepared_buffer = comms_active_buffer;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b84 <comms_switch_buffers+0x50>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a0b      	ldr	r2, [pc, #44]	@ (8000b80 <comms_switch_buffers+0x4c>)
 8000b54:	6013      	str	r3, [r2, #0]
	comms_active_buffer = _temp;
 8000b56:	4a0b      	ldr	r2, [pc, #44]	@ (8000b84 <comms_switch_buffers+0x50>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	6013      	str	r3, [r2, #0]

	// set pointer to the end of prepared buffer data
	comms_prepared_wr_pointer = comms_active_wr_pointer;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <comms_switch_buffers+0x54>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <comms_switch_buffers+0x58>)
 8000b62:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_buffer();
 8000b64:	f7ff ff2a 	bl	80009bc <comms_reset_active_buffer>
	comms_purge_id_register();
 8000b68:	f7ff ff64 	bl	8000a34 <comms_purge_id_register>
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f383 8810 	msr	PRIMASK, r3
}
 8000b76:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000a5c 	.word	0x20000a5c
 8000b84:	20000a54 	.word	0x20000a54
 8000b88:	20000a58 	.word	0x20000a58
 8000b8c:	20000a60 	.word	0x20000a60

08000b90 <comms_send>:

int comms_send() {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

	if (tx_status > 0) {
 8000b96:	4b26      	ldr	r3, [pc, #152]	@ (8000c30 <comms_send+0xa0>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <comms_send+0x12>
		return COMMS_TX_LOCKED;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	e041      	b.n	8000c26 <comms_send+0x96>
	}

	tx_status = COMMS_INPROGRESS;
 8000ba2:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <comms_send+0xa0>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]

	// need to switch buffers
	comms_switch_buffers();
 8000ba8:	f7ff ffc4 	bl	8000b34 <comms_switch_buffers>

	// terminator at the end
	*comms_prepared_wr_pointer = END_CR;
 8000bac:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <comms_send+0xa4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	220d      	movs	r2, #13
 8000bb2:	701a      	strb	r2, [r3, #0]
	*(comms_prepared_wr_pointer + 1) = END_LF;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <comms_send+0xa4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	220a      	movs	r2, #10
 8000bbc:	701a      	strb	r2, [r3, #0]
	comms_prepared_wr_pointer += 2;
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <comms_send+0xa4>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <comms_send+0xa4>)
 8000bc6:	6013      	str	r3, [r2, #0]

	// buffer is empty
	if (comms_prepared_buffer[3] == 0) {
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c38 <comms_send+0xa8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3303      	adds	r3, #3
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d109      	bne.n	8000be8 <comms_send+0x58>
		++empty; //DEBUG
 8000bd4:	4b19      	ldr	r3, [pc, #100]	@ (8000c3c <comms_send+0xac>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	4a18      	ldr	r2, [pc, #96]	@ (8000c3c <comms_send+0xac>)
 8000bdc:	6013      	str	r3, [r2, #0]
		tx_status = COMMS_READY;
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <comms_send+0xa0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
		return COMMS_TX_BUFFER_EMPTY;
 8000be4:	2303      	movs	r3, #3
 8000be6:	e01e      	b.n	8000c26 <comms_send+0x96>
	}

	// send data
	USBD_StatusTypeDef cdc_return = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_return = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	71bb      	strb	r3, [r7, #6]

	if(1){
		cdc_return = CDC_Transmit_FS(comms_prepared_buffer, comms_prepared_wr_pointer - comms_prepared_buffer);
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <comms_send+0xa8>)
 8000bf2:	6818      	ldr	r0, [r3, #0]
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <comms_send+0xa4>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <comms_send+0xa8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	f00c f881 	bl	800cd08 <CDC_Transmit_FS>
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
	} else {
		uart_return = HAL_UART_Transmit(&hlpuart1, comms_prepared_buffer, comms_prepared_wr_pointer - comms_prepared_buffer, 100);
	}

	tx_status = COMMS_READY;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <comms_send+0xa0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]

	if (cdc_return) {
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <comms_send+0x8a>
		return COMMS_TX_CDC_FAIL;
 8000c16:	2302      	movs	r3, #2
 8000c18:	e005      	b.n	8000c26 <comms_send+0x96>
	}

	if (uart_return) {
 8000c1a:	79bb      	ldrb	r3, [r7, #6]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <comms_send+0x94>
		return COMMS_TX_UART_FAIL;
 8000c20:	2306      	movs	r3, #6
 8000c22:	e000      	b.n	8000c26 <comms_send+0x96>
	}

	return COMMS_SUCCESS;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20001269 	.word	0x20001269
 8000c34:	20000a60 	.word	0x20000a60
 8000c38:	20000a5c 	.word	0x20000a5c
 8000c3c:	20001264 	.word	0x20001264

08000c40 <comms_cdc_rx_callback>:

void comms_cdc_rx_callback(uint8_t *buffer, uint32_t length) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
	// call this func inside of usbd_cdc_if.c in CDC_Receive_FS()

	if (rx_status) {
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <comms_cdc_rx_callback+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d111      	bne.n	8000c76 <comms_cdc_rx_callback+0x36>
		// not ready yet
		return;
	}

	if (length < 3) {
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d910      	bls.n	8000c7a <comms_cdc_rx_callback+0x3a>
		// invalid
		return;
	}

	rx_status = COMMS_INPROGRESS;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <comms_cdc_rx_callback+0x44>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]

	//comms_rx_buffer = buffer;
	memcpy(comms_rx_buffer1, buffer, length);
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <comms_cdc_rx_callback+0x48>)
 8000c64:	f00c fe1c 	bl	800d8a0 <memcpy>
	comms_rx_read_pointer = comms_rx_buffer1 + 3;
 8000c68:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <comms_cdc_rx_callback+0x4c>)
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <comms_cdc_rx_callback+0x50>)
 8000c6c:	601a      	str	r2, [r3, #0]

	rx_status = COMMS_RECEIVED;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <comms_cdc_rx_callback+0x44>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e002      	b.n	8000c7c <comms_cdc_rx_callback+0x3c>
		return;
 8000c76:	bf00      	nop
 8000c78:	e000      	b.n	8000c7c <comms_cdc_rx_callback+0x3c>
		return;
 8000c7a:	bf00      	nop
}
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2000126a 	.word	0x2000126a
 8000c88:	20000e60 	.word	0x20000e60
 8000c8c:	20000e63 	.word	0x20000e63
 8000c90:	20001260 	.word	0x20001260

08000c94 <comms_data_handler>:

__weak void comms_data_handler(CommsData *data) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

	if (data == NULL) {
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00c      	beq.n	8000cbc <comms_data_handler+0x28>
		return;
	}

	switch (data->data_id) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b05      	cmp	r3, #5
 8000ca8:	d10a      	bne.n	8000cc0 <comms_data_handler+0x2c>
	case 5:
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
				(GPIO_PinState) (data->data[0].u8));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	791b      	ldrb	r3, [r3, #4]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cb4:	4804      	ldr	r0, [pc, #16]	@ (8000cc8 <comms_data_handler+0x34>)
 8000cb6:	f003 f8ad 	bl	8003e14 <HAL_GPIO_WritePin>
		break;
 8000cba:	e002      	b.n	8000cc2 <comms_data_handler+0x2e>
		return;
 8000cbc:	bf00      	nop
 8000cbe:	e000      	b.n	8000cc2 <comms_data_handler+0x2e>
	default:
		break;
 8000cc0:	bf00      	nop
	}

}
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	48000400 	.word	0x48000400

08000ccc <comms_rx_process>:

void comms_rx_process() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000cd2:	af00      	add	r7, sp, #0
	if (!rx_status) {
 8000cd4:	4b4f      	ldr	r3, [pc, #316]	@ (8000e14 <comms_rx_process+0x148>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f000 8093 	beq.w	8000e04 <comms_rx_process+0x138>
		// no data yet
		return;
	}

	if (comms_rx_buffer1[0] == 0) {
 8000cde:	4b4e      	ldr	r3, [pc, #312]	@ (8000e18 <comms_rx_process+0x14c>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 808a 	bne.w	8000dfc <comms_rx_process+0x130>
		uint16_t elements = *((uint16_t*) (comms_rx_buffer1 + 1));
 8000ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8000e18 <comms_rx_process+0x14c>)
 8000cea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000cee:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406

		for (; elements > 0; --elements) {
 8000cf2:	e07e      	b.n	8000df2 <comms_rx_process+0x126>
			CommsData data;
			data.data_id = *comms_rx_read_pointer;
 8000cf4:	4b49      	ldr	r3, [pc, #292]	@ (8000e1c <comms_rx_process+0x150>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000cfe:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d02:	701a      	strb	r2, [r3, #0]
			data.data_size = *(comms_rx_read_pointer + 1);
 8000d04:	4b45      	ldr	r3, [pc, #276]	@ (8000e1c <comms_rx_process+0x150>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	785a      	ldrb	r2, [r3, #1]
 8000d0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d0e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d12:	705a      	strb	r2, [r3, #1]
			data.data_count = *(comms_rx_read_pointer + 2);
 8000d14:	4b41      	ldr	r3, [pc, #260]	@ (8000e1c <comms_rx_process+0x150>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	789a      	ldrb	r2, [r3, #2]
 8000d1a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d1e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d22:	709a      	strb	r2, [r3, #2]

			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000d2a:	e03d      	b.n	8000da8 <comms_rx_process+0xdc>
				switch (data.data_size) {
 8000d2c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d30:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d34:	785b      	ldrb	r3, [r3, #1]
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	d023      	beq.n	8000d82 <comms_rx_process+0xb6>
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	dc64      	bgt.n	8000e08 <comms_rx_process+0x13c>
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d002      	beq.n	8000d48 <comms_rx_process+0x7c>
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d00e      	beq.n	8000d64 <comms_rx_process+0x98>
				case 4:
					data.data[x].u32 =
							*((uint32_t*) (comms_rx_read_pointer + 3));
					break;
				default:
					return;
 8000d46:	e05f      	b.n	8000e08 <comms_rx_process+0x13c>
					data.data[x].u8 = *(comms_rx_read_pointer + 3);
 8000d48:	4b34      	ldr	r3, [pc, #208]	@ (8000e1c <comms_rx_process+0x150>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d50:	78d1      	ldrb	r1, [r2, #3]
 8000d52:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000d56:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	4413      	add	r3, r2
 8000d5e:	460a      	mov	r2, r1
 8000d60:	711a      	strb	r2, [r3, #4]
					break;
 8000d62:	e01c      	b.n	8000d9e <comms_rx_process+0xd2>
					data.data[x].u16 =
 8000d64:	4b2d      	ldr	r3, [pc, #180]	@ (8000e1c <comms_rx_process+0x150>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d6c:	f8b2 1003 	ldrh.w	r1, [r2, #3]
 8000d70:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000d74:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	4413      	add	r3, r2
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	809a      	strh	r2, [r3, #4]
					break;
 8000d80:	e00d      	b.n	8000d9e <comms_rx_process+0xd2>
					data.data[x].u32 =
 8000d82:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <comms_rx_process+0x150>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d8a:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8000d8e:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8000d92:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	440b      	add	r3, r1
 8000d9a:	605a      	str	r2, [r3, #4]
					break;
 8000d9c:	bf00      	nop
			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000d9e:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000da2:	3301      	adds	r3, #1
 8000da4:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000da8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000dac:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000db0:	789b      	ldrb	r3, [r3, #2]
 8000db2:	f897 2405 	ldrb.w	r2, [r7, #1029]	@ 0x405
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d3b8      	bcc.n	8000d2c <comms_rx_process+0x60>
				}
			}

			comms_data_handler(&data);
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff69 	bl	8000c94 <comms_data_handler>

			comms_rx_read_pointer = (comms_rx_read_pointer + 3
					+ (data.data_size * data.data_count));
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <comms_rx_process+0x150>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000dca:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000dd6:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000dda:	789b      	ldrb	r3, [r3, #2]
 8000ddc:	fb01 f303 	mul.w	r3, r1, r3
 8000de0:	3303      	adds	r3, #3
 8000de2:	4413      	add	r3, r2
			comms_rx_read_pointer = (comms_rx_read_pointer + 3
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <comms_rx_process+0x150>)
 8000de6:	6013      	str	r3, [r2, #0]
		for (; elements > 0; --elements) {
 8000de8:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000dec:	3b01      	subs	r3, #1
 8000dee:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406
 8000df2:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f47f af7c 	bne.w	8000cf4 <comms_rx_process+0x28>
		}
	}

	rx_status = COMMS_READY;
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <comms_rx_process+0x148>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e002      	b.n	8000e0a <comms_rx_process+0x13e>
		return;
 8000e04:	bf00      	nop
 8000e06:	e000      	b.n	8000e0a <comms_rx_process+0x13e>
					return;
 8000e08:	bf00      	nop
}
 8000e0a:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000126a 	.word	0x2000126a
 8000e18:	20000e60 	.word	0x20000e60
 8000e1c:	20001260 	.word	0x20001260

08000e20 <comms_uart_init>:

void comms_uart_init() {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_buffer1,
 8000e26:	2203      	movs	r2, #3
 8000e28:	4904      	ldr	r1, [pc, #16]	@ (8000e3c <comms_uart_init+0x1c>)
 8000e2a:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <comms_uart_init+0x20>)
 8000e2c:	f006 fc06 	bl	800763c <HAL_UART_Receive_IT>
 8000e30:	4603      	mov	r3, r0
 8000e32:	71fb      	strb	r3, [r7, #7]
			3);
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000e60 	.word	0x20000e60
 8000e40:	20003450 	.word	0x20003450

08000e44 <comms_lpuart_rx_callback>:

void comms_lpuart_rx_callback(UART_HandleTypeDef *huart) {
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	// FOR ELEMENT LOOP:
	//		load packet head
	//		load data
	static uint16_t elements = 0;

}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	// user defined __weak callback from stm32l4xx_hal_uart.c
	// uart loaded data
	if (huart == &hlpuart1) {
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a05      	ldr	r2, [pc, #20]	@ (8000e78 <HAL_UART_RxCpltCallback+0x20>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d102      	bne.n	8000e6e <HAL_UART_RxCpltCallback+0x16>
		comms_lpuart_rx_callback(huart);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ffeb 	bl	8000e44 <comms_lpuart_rx_callback>
	}
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20003450 	.word	0x20003450

08000e7c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d10f      	bne.n	8000eac <HAL_TIM_PeriodElapsedCallback+0x30>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e8c:	2180      	movs	r1, #128	@ 0x80
 8000e8e:	480a      	ldr	r0, [pc, #40]	@ (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e90:	f002 ffd8 	bl	8003e44 <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8000e94:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a08      	ldr	r2, [pc, #32]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000e9c:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		comms_append_int32(1, 1, &periodical);
 8000e9e:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff fe00 	bl	8000aa8 <comms_append_int32>
		comms_send();
 8000ea8:	f7ff fe72 	bl	8000b90 <comms_send>
	}
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20003404 	.word	0x20003404
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	2000126c 	.word	0x2000126c

08000ec0 <myDmaFunction>:

char testdata[10];

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <myDmaFunction+0x28>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ece:	4a07      	ldr	r2, [pc, #28]	@ (8000eec <myDmaFunction+0x2c>)
 8000ed0:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <myDmaFunction+0x28>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed8:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <myDmaFunction+0x30>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	200033b8 	.word	0x200033b8
 8000eec:	20001278 	.word	0x20001278
 8000ef0:	2000127c 	.word	0x2000127c

08000ef4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);

    ++call_count;
 8000efc:	4b54      	ldr	r3, [pc, #336]	@ (8001050 <HAL_ADC_ConvCpltCallback+0x15c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	4a53      	ldr	r2, [pc, #332]	@ (8001050 <HAL_ADC_ConvCpltCallback+0x15c>)
 8000f04:	6013      	str	r3, [r2, #0]

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 8000f06:	4b53      	ldr	r3, [pc, #332]	@ (8001054 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 8000f0e:	4b52      	ldr	r3, [pc, #328]	@ (8001058 <HAL_ADC_ConvCpltCallback+0x164>)
 8000f10:	f04f 0200 	mov.w	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 100; i++) {
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	e027      	b.n	8000f6c <HAL_ADC_ConvCpltCallback+0x78>
        adcValue += dma_data_buffer[i + 100]; // Použití druhé poloviny DMA bufferu
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3364      	adds	r3, #100	@ 0x64
 8000f20:	4a4e      	ldr	r2, [pc, #312]	@ (800105c <HAL_ADC_ConvCpltCallback+0x168>)
 8000f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f26:	ee07 3a90 	vmov	s15, r3
 8000f2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2e:	4b49      	ldr	r3, [pc, #292]	@ (8001054 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f30:	edd3 7a00 	vldr	s15, [r3]
 8000f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f38:	4b46      	ldr	r3, [pc, #280]	@ (8001054 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f3a:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 100];
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3365      	adds	r3, #101	@ 0x65
 8000f42:	4a46      	ldr	r2, [pc, #280]	@ (800105c <HAL_ADC_ConvCpltCallback+0x168>)
 8000f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f50:	4b41      	ldr	r3, [pc, #260]	@ (8001058 <HAL_ADC_ConvCpltCallback+0x164>)
 8000f52:	edd3 7a00 	vldr	s15, [r3]
 8000f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001058 <HAL_ADC_ConvCpltCallback+0x164>)
 8000f5c:	edc3 7a00 	vstr	s15, [r3]
        i++;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	3301      	adds	r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 100; i++) {
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	2b63      	cmp	r3, #99	@ 0x63
 8000f70:	ddd4      	ble.n	8000f1c <HAL_ADC_ConvCpltCallback+0x28>
    }
    adcValue /= 50.0f;
 8000f72:	4b38      	ldr	r3, [pc, #224]	@ (8001054 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f74:	ed93 7a00 	vldr	s14, [r3]
 8000f78:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8001060 <HAL_ADC_ConvCpltCallback+0x16c>
 8000f7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f80:	4b34      	ldr	r3, [pc, #208]	@ (8001054 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f82:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 8000f86:	4b34      	ldr	r3, [pc, #208]	@ (8001058 <HAL_ADC_ConvCpltCallback+0x164>)
 8000f88:	ed93 7a00 	vldr	s14, [r3]
 8000f8c:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001060 <HAL_ADC_ConvCpltCallback+0x16c>
 8000f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f94:	4b30      	ldr	r3, [pc, #192]	@ (8001058 <HAL_ADC_ConvCpltCallback+0x164>)
 8000f96:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8000f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001054 <HAL_ADC_ConvCpltCallback+0x160>)
 8000f9c:	ed93 7a00 	vldr	s14, [r3]
 8000fa0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001064 <HAL_ADC_ConvCpltCallback+0x170>
 8000fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001068 <HAL_ADC_ConvCpltCallback+0x174>
 8000fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fb0:	edc7 7a04 	vstr	s15, [r7, #16]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800106c <HAL_ADC_ConvCpltCallback+0x178>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	ee07 3a90 	vmov	s15, r3
 8000fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fc0:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001064 <HAL_ADC_ConvCpltCallback+0x170>
 8000fc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001068 <HAL_ADC_ConvCpltCallback+0x174>
 8000fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd0:	edc7 7a03 	vstr	s15, [r7, #12]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 8000fd4:	4b26      	ldr	r3, [pc, #152]	@ (8001070 <HAL_ADC_ConvCpltCallback+0x17c>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fe0:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001064 <HAL_ADC_ConvCpltCallback+0x170>
 8000fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001068 <HAL_ADC_ConvCpltCallback+0x174>
 8000fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff0:	edc7 7a02 	vstr	s15, [r7, #8]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 8000ff4:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001000:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001074 <HAL_ADC_ConvCpltCallback+0x180>
 8001004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001008:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800100c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001010:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_ADC_ConvCpltCallback+0x184>)
 8001012:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 8001016:	4b19      	ldr	r3, [pc, #100]	@ (800107c <HAL_ADC_ConvCpltCallback+0x188>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	4a17      	ldr	r2, [pc, #92]	@ (800107c <HAL_ADC_ConvCpltCallback+0x188>)
 800101e:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    temperatureInt = (int)temperature;
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_ADC_ConvCpltCallback+0x184>)
 8001022:	edd3 7a00 	vldr	s15, [r3]
 8001026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800102a:	ee17 2a90 	vmov	r2, s15
 800102e:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001030:	601a      	str	r2, [r3, #0]

    adcIn1Int = (int)adcIn1;
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <HAL_ADC_ConvCpltCallback+0x164>)
 8001034:	edd3 7a00 	vldr	s15, [r3]
 8001038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800103c:	ee17 2a90 	vmov	r2, s15
 8001040:	4b10      	ldr	r3, [pc, #64]	@ (8001084 <HAL_ADC_ConvCpltCallback+0x190>)
 8001042:	601a      	str	r2, [r3, #0]


    //comms_append_int32(2, 1, &temperatureInt);
    //comms_append_int32(23, 1, &adcIn1Int);
}
 8001044:	bf00      	nop
 8001046:	371c      	adds	r7, #28
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	20003368 	.word	0x20003368
 8001054:	20003350 	.word	0x20003350
 8001058:	20003358 	.word	0x20003358
 800105c:	200031c0 	.word	0x200031c0
 8001060:	42480000 	.word	0x42480000
 8001064:	45800000 	.word	0x45800000
 8001068:	40533333 	.word	0x40533333
 800106c:	1fff75a8 	.word	0x1fff75a8
 8001070:	1fff75ca 	.word	0x1fff75ca
 8001074:	42a00000 	.word	0x42a00000
 8001078:	20003354 	.word	0x20003354
 800107c:	2000335c 	.word	0x2000335c
 8001080:	20003360 	.word	0x20003360
 8001084:	20003364 	.word	0x20003364

08001088 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
//		adcValue = adcValue + dma_data_buffer[i];
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a2:	f000 fc2a 	bl	80018fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a6:	f000 f881 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010aa:	f7ff fb91 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ae:	f7ff fb33 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 80010b2:	f000 fa25 	bl	8001500 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80010b6:	f00b fd63 	bl	800cb80 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 80010ba:	f000 f9d3 	bl	8001464 <MX_TIM5_Init>
  MX_ADC1_Init();
 80010be:	f7ff fa15 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 80010c2:	f000 f981 	bl	80013c8 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80010c6:	f000 faf5 	bl	80016b4 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 80010ca:	f000 faa7 	bl	800161c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2180      	movs	r1, #128	@ 0x80
 80010d2:	4829      	ldr	r0, [pc, #164]	@ (8001178 <main+0xdc>)
 80010d4:	f002 fe9e 	bl	8003e14 <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 80010d8:	4828      	ldr	r0, [pc, #160]	@ (800117c <main+0xe0>)
 80010da:	f005 fe21 	bl	8006d20 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 80010de:	4828      	ldr	r0, [pc, #160]	@ (8001180 <main+0xe4>)
 80010e0:	f005 fdb6 	bl	8006c50 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	e00d      	b.n	8001106 <main+0x6a>
		dma[i] = i;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f4:	4a23      	ldr	r2, [pc, #140]	@ (8001184 <main+0xe8>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800110c:	dbed      	blt.n	80010ea <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 800110e:	4a1e      	ldr	r2, [pc, #120]	@ (8001188 <main+0xec>)
 8001110:	2100      	movs	r1, #0
 8001112:	481e      	ldr	r0, [pc, #120]	@ (800118c <main+0xf0>)
 8001114:	f002 fc04 	bl	8003920 <HAL_DMA_RegisterCallback>
 8001118:	4603      	mov	r3, r0
 800111a:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <main+0xe4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	4a1b      	ldr	r2, [pc, #108]	@ (8001190 <main+0xf4>)
 8001124:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8001126:	4917      	ldr	r1, [pc, #92]	@ (8001184 <main+0xe8>)
 8001128:	4a1a      	ldr	r2, [pc, #104]	@ (8001194 <main+0xf8>)
 800112a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112e:	4817      	ldr	r0, [pc, #92]	@ (800118c <main+0xf0>)
 8001130:	f002 fa10 	bl	8003554 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <main+0xe4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113a:	4a17      	ldr	r2, [pc, #92]	@ (8001198 <main+0xfc>)
 800113c:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <main+0xe4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001144:	4a15      	ldr	r2, [pc, #84]	@ (800119c <main+0x100>)
 8001146:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim3);
 8001148:	4815      	ldr	r0, [pc, #84]	@ (80011a0 <main+0x104>)
 800114a:	f005 fde9 	bl	8006d20 <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800114e:	217f      	movs	r1, #127	@ 0x7f
 8001150:	4814      	ldr	r0, [pc, #80]	@ (80011a4 <main+0x108>)
 8001152:	f001 ffb3 	bl	80030bc <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 8001156:	2032      	movs	r0, #50	@ 0x32
 8001158:	f000 fc44 	bl	80019e4 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 200);
 800115c:	22c8      	movs	r2, #200	@ 0xc8
 800115e:	4912      	ldr	r1, [pc, #72]	@ (80011a8 <main+0x10c>)
 8001160:	4810      	ldr	r0, [pc, #64]	@ (80011a4 <main+0x108>)
 8001162:	f000 ffbd 	bl	80020e0 <HAL_ADC_Start_DMA>
 8001166:	4603      	mov	r3, r0
 8001168:	70bb      	strb	r3, [r7, #2]

	comms_init();
 800116a:	f7ff fc47 	bl	80009fc <comms_init>
	comms_uart_init();
 800116e:	f7ff fe57 	bl	8000e20 <comms_uart_init>
//	    comms_append_int32(2, 1, &temperatureInt);
//	    comms_append_int32(23, 1, &adcIn1Int);
//	    comms_send();

		//load_CPU();
		comms_rx_process();
 8001172:	f7ff fdab 	bl	8000ccc <comms_rx_process>
 8001176:	e7fc      	b.n	8001172 <main+0xd6>
 8001178:	48000800 	.word	0x48000800
 800117c:	20003404 	.word	0x20003404
 8001180:	200033b8 	.word	0x200033b8
 8001184:	20001280 	.word	0x20001280
 8001188:	08000ec1 	.word	0x08000ec1
 800118c:	200001f0 	.word	0x200001f0
 8001190:	20001270 	.word	0x20001270
 8001194:	20002220 	.word	0x20002220
 8001198:	2000127c 	.word	0x2000127c
 800119c:	20001274 	.word	0x20001274
 80011a0:	2000336c 	.word	0x2000336c
 80011a4:	20000128 	.word	0x20000128
 80011a8:	200031c0 	.word	0x200031c0

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b096      	sub	sp, #88	@ 0x58
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2244      	movs	r2, #68	@ 0x44
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f00c fb44 	bl	800d848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80011ce:	2000      	movs	r0, #0
 80011d0:	f004 f832 	bl	8005238 <HAL_PWREx_ControlVoltageScaling>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <SystemClock_Config+0x32>
  {
    Error_Handler();
 80011da:	f000 f83a 	bl	8001252 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80011de:	2322      	movs	r3, #34	@ 0x22
 80011e0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011e8:	2301      	movs	r3, #1
 80011ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ec:	2340      	movs	r3, #64	@ 0x40
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	2302      	movs	r3, #2
 80011f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f4:	2302      	movs	r3, #2
 80011f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80011fc:	231e      	movs	r3, #30
 80011fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001200:	2302      	movs	r3, #2
 8001202:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001204:	2302      	movs	r3, #2
 8001206:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001208:	2302      	movs	r3, #2
 800120a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4618      	mov	r0, r3
 8001212:	f004 f8d5 	bl	80053c0 <HAL_RCC_OscConfig>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800121c:	f000 f819 	bl	8001252 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001220:	230f      	movs	r3, #15
 8001222:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001224:	2303      	movs	r3, #3
 8001226:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800122c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001230:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	2105      	movs	r1, #5
 800123a:	4618      	mov	r0, r3
 800123c:	f004 fcda 	bl	8005bf4 <HAL_RCC_ClockConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001246:	f000 f804 	bl	8001252 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	3758      	adds	r7, #88	@ 0x58
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001256:	b672      	cpsid	i
}
 8001258:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800125a:	bf00      	nop
 800125c:	e7fd      	b.n	800125a <Error_Handler+0x8>
	...

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <HAL_MspInit+0x44>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126a:	4a0e      	ldr	r2, [pc, #56]	@ (80012a4 <HAL_MspInit+0x44>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6613      	str	r3, [r2, #96]	@ 0x60
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <HAL_MspInit+0x44>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_MspInit+0x44>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_MspInit+0x44>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6593      	str	r3, [r2, #88]	@ 0x58
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_MspInit+0x44>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <NMI_Handler+0x4>

080012b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <MemManage_Handler+0x4>

080012c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <UsageFault_Handler+0x4>

080012d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fe:	f000 fb51 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <DMA1_Channel1_IRQHandler+0x10>)
 800130e:	f002 fa57 	bl	80037c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000190 	.word	0x20000190

0800131c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <DMA1_Channel2_IRQHandler+0x10>)
 8001322:	f002 fa4d 	bl	80037c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200001f0 	.word	0x200001f0

08001330 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <ADC1_IRQHandler+0x10>)
 8001336:	f000 ff57 	bl	80021e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000128 	.word	0x20000128

08001344 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <TIM3_IRQHandler+0x10>)
 800134a:	f005 fd59 	bl	8006e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000336c 	.word	0x2000336c

08001358 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800135c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001360:	f002 fd8a 	bl	8003e78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}

08001368 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <TIM6_DAC_IRQHandler+0x10>)
 800136e:	f005 fd47 	bl	8006e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20003404 	.word	0x20003404

0800137c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <OTG_FS_IRQHandler+0x10>)
 8001382:	f002 fee4 	bl	800414e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20004a5c 	.word	0x20004a5c

08001390 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <LPUART1_IRQHandler+0x10>)
 8001396:	f006 f99d 	bl	80076d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20003450 	.word	0x20003450

080013a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	@ (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013e6:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <MX_TIM3_Init+0x94>)
 80013e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001460 <MX_TIM3_Init+0x98>)
 80013ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <MX_TIM3_Init+0x94>)
 80013ee:	22c7      	movs	r2, #199	@ 0xc7
 80013f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <MX_TIM3_Init+0x94>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80013f8:	4b18      	ldr	r3, [pc, #96]	@ (800145c <MX_TIM3_Init+0x94>)
 80013fa:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80013fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <MX_TIM3_Init+0x94>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <MX_TIM3_Init+0x94>)
 8001408:	2280      	movs	r2, #128	@ 0x80
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800140c:	4813      	ldr	r0, [pc, #76]	@ (800145c <MX_TIM3_Init+0x94>)
 800140e:	f005 fbc7 	bl	8006ba0 <HAL_TIM_Base_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001418:	f7ff ff1b 	bl	8001252 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001420:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	4619      	mov	r1, r3
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <MX_TIM3_Init+0x94>)
 800142a:	f005 fdeb 	bl	8007004 <HAL_TIM_ConfigClockSource>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001434:	f7ff ff0d 	bl	8001252 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001438:	2320      	movs	r3, #32
 800143a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	@ (800145c <MX_TIM3_Init+0x94>)
 8001446:	f006 f803 	bl	8007450 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001450:	f7ff feff 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3720      	adds	r7, #32
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000336c 	.word	0x2000336c
 8001460:	40000400 	.word	0x40000400

08001464 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001482:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <MX_TIM5_Init+0x94>)
 8001484:	4a1d      	ldr	r2, [pc, #116]	@ (80014fc <MX_TIM5_Init+0x98>)
 8001486:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <MX_TIM5_Init+0x94>)
 800148a:	2200      	movs	r2, #0
 800148c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148e:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_TIM5_Init+0x94>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001494:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <MX_TIM5_Init+0x94>)
 8001496:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800149a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <MX_TIM5_Init+0x94>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <MX_TIM5_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80014a8:	4813      	ldr	r0, [pc, #76]	@ (80014f8 <MX_TIM5_Init+0x94>)
 80014aa:	f005 fb79 	bl	8006ba0 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80014b4:	f7ff fecd 	bl	8001252 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	4619      	mov	r1, r3
 80014c4:	480c      	ldr	r0, [pc, #48]	@ (80014f8 <MX_TIM5_Init+0x94>)
 80014c6:	f005 fd9d 	bl	8007004 <HAL_TIM_ConfigClockSource>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80014d0:	f7ff febf 	bl	8001252 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_TIM5_Init+0x94>)
 80014e2:	f005 ffb5 	bl	8007450 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80014ec:	f7ff feb1 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200033b8 	.word	0x200033b8
 80014fc:	40000c00 	.word	0x40000c00

08001500 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001510:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <MX_TIM6_Init+0x68>)
 8001512:	4a16      	ldr	r2, [pc, #88]	@ (800156c <MX_TIM6_Init+0x6c>)
 8001514:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8001516:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <MX_TIM6_Init+0x68>)
 8001518:	f242 7210 	movw	r2, #10000	@ 0x2710
 800151c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <MX_TIM6_Init+0x68>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 8001524:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <MX_TIM6_Init+0x68>)
 8001526:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800152a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_TIM6_Init+0x68>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001532:	480d      	ldr	r0, [pc, #52]	@ (8001568 <MX_TIM6_Init+0x68>)
 8001534:	f005 fb34 	bl	8006ba0 <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800153e:	f7ff fe88 	bl	8001252 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	@ (8001568 <MX_TIM6_Init+0x68>)
 8001550:	f005 ff7e 	bl	8007450 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800155a:	f7ff fe7a 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20003404 	.word	0x20003404
 800156c:	40001000 	.word	0x40001000

08001570 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a23      	ldr	r2, [pc, #140]	@ (800160c <HAL_TIM_Base_MspInit+0x9c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d114      	bne.n	80015ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001582:	4b23      	ldr	r3, [pc, #140]	@ (8001610 <HAL_TIM_Base_MspInit+0xa0>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001586:	4a22      	ldr	r2, [pc, #136]	@ (8001610 <HAL_TIM_Base_MspInit+0xa0>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6593      	str	r3, [r2, #88]	@ 0x58
 800158e:	4b20      	ldr	r3, [pc, #128]	@ (8001610 <HAL_TIM_Base_MspInit+0xa0>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	201d      	movs	r0, #29
 80015a0:	f001 fef9 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015a4:	201d      	movs	r0, #29
 80015a6:	f001 ff12 	bl	80033ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80015aa:	e02a      	b.n	8001602 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a18      	ldr	r2, [pc, #96]	@ (8001614 <HAL_TIM_Base_MspInit+0xa4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d10c      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015b6:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <HAL_TIM_Base_MspInit+0xa0>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	4a15      	ldr	r2, [pc, #84]	@ (8001610 <HAL_TIM_Base_MspInit+0xa0>)
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <HAL_TIM_Base_MspInit+0xa0>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
}
 80015ce:	e018      	b.n	8001602 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a10      	ldr	r2, [pc, #64]	@ (8001618 <HAL_TIM_Base_MspInit+0xa8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d113      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <HAL_TIM_Base_MspInit+0xa0>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015de:	4a0c      	ldr	r2, [pc, #48]	@ (8001610 <HAL_TIM_Base_MspInit+0xa0>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_TIM_Base_MspInit+0xa0>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2036      	movs	r0, #54	@ 0x36
 80015f8:	f001 fecd 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015fc:	2036      	movs	r0, #54	@ 0x36
 80015fe:	f001 fee6 	bl	80033ce <HAL_NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40000400 	.word	0x40000400
 8001610:	40021000 	.word	0x40021000
 8001614:	40000c00 	.word	0x40000c00
 8001618:	40001000 	.word	0x40001000

0800161c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001620:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 8001622:	4a23      	ldr	r2, [pc, #140]	@ (80016b0 <MX_LPUART1_UART_Init+0x94>)
 8001624:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001626:	4b21      	ldr	r3, [pc, #132]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800163a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b1a      	ldr	r3, [pc, #104]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164c:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001664:	4811      	ldr	r0, [pc, #68]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 8001666:	f005 ff99 	bl	800759c <HAL_UART_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001670:	f7ff fdef 	bl	8001252 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	480d      	ldr	r0, [pc, #52]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 8001678:	f007 ff65 	bl	8009546 <HAL_UARTEx_SetTxFifoThreshold>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001682:	f7ff fde6 	bl	8001252 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	4808      	ldr	r0, [pc, #32]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 800168a:	f007 ff9a 	bl	80095c2 <HAL_UARTEx_SetRxFifoThreshold>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001694:	f7ff fddd 	bl	8001252 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	@ (80016ac <MX_LPUART1_UART_Init+0x90>)
 800169a:	f007 ff1b 	bl	80094d4 <HAL_UARTEx_DisableFifoMode>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016a4:	f7ff fdd5 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20003450 	.word	0x20003450
 80016b0:	40008000 	.word	0x40008000

080016b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016b8:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 80016ba:	4a23      	ldr	r2, [pc, #140]	@ (8001748 <MX_USART3_UART_Init+0x94>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016be:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ea:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f0:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016fc:	4811      	ldr	r0, [pc, #68]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 80016fe:	f005 ff4d 	bl	800759c <HAL_UART_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001708:	f7ff fda3 	bl	8001252 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170c:	2100      	movs	r1, #0
 800170e:	480d      	ldr	r0, [pc, #52]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 8001710:	f007 ff19 	bl	8009546 <HAL_UARTEx_SetTxFifoThreshold>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800171a:	f7ff fd9a 	bl	8001252 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171e:	2100      	movs	r1, #0
 8001720:	4808      	ldr	r0, [pc, #32]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 8001722:	f007 ff4e 	bl	80095c2 <HAL_UARTEx_SetRxFifoThreshold>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800172c:	f7ff fd91 	bl	8001252 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <MX_USART3_UART_Init+0x90>)
 8001732:	f007 fecf 	bl	80094d4 <HAL_UARTEx_DisableFifoMode>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800173c:	f7ff fd89 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200034e4 	.word	0x200034e4
 8001748:	40004800 	.word	0x40004800

0800174c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b0b0      	sub	sp, #192	@ 0xc0
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	2294      	movs	r2, #148	@ 0x94
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f00c f86b 	bl	800d848 <memset>
  if(uartHandle->Instance==LPUART1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a47      	ldr	r2, [pc, #284]	@ (8001894 <HAL_UART_MspInit+0x148>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d146      	bne.n	800180a <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800177c:	2320      	movs	r3, #32
 800177e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001780:	2300      	movs	r3, #0
 8001782:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001784:	f107 0318 	add.w	r3, r7, #24
 8001788:	4618      	mov	r0, r3
 800178a:	f004 fcf1 	bl	8006170 <HAL_RCCEx_PeriphCLKConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001794:	f7ff fd5d 	bl	8001252 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001798:	4b3f      	ldr	r3, [pc, #252]	@ (8001898 <HAL_UART_MspInit+0x14c>)
 800179a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179c:	4a3e      	ldr	r2, [pc, #248]	@ (8001898 <HAL_UART_MspInit+0x14c>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80017a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001898 <HAL_UART_MspInit+0x14c>)
 80017a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b0:	4b39      	ldr	r3, [pc, #228]	@ (8001898 <HAL_UART_MspInit+0x14c>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b4:	4a38      	ldr	r2, [pc, #224]	@ (8001898 <HAL_UART_MspInit+0x14c>)
 80017b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017bc:	4b36      	ldr	r3, [pc, #216]	@ (8001898 <HAL_UART_MspInit+0x14c>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80017c8:	f003 fdea 	bl	80053a0 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80017cc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80017d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80017e6:	2308      	movs	r3, #8
 80017e8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80017f0:	4619      	mov	r1, r3
 80017f2:	482a      	ldr	r0, [pc, #168]	@ (800189c <HAL_UART_MspInit+0x150>)
 80017f4:	f002 f97c 	bl	8003af0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	2046      	movs	r0, #70	@ 0x46
 80017fe:	f001 fdca 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001802:	2046      	movs	r0, #70	@ 0x46
 8001804:	f001 fde3 	bl	80033ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001808:	e040      	b.n	800188c <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART3)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a24      	ldr	r2, [pc, #144]	@ (80018a0 <HAL_UART_MspInit+0x154>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d13b      	bne.n	800188c <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001814:	2304      	movs	r3, #4
 8001816:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001818:	2300      	movs	r3, #0
 800181a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	f107 0318 	add.w	r3, r7, #24
 8001820:	4618      	mov	r0, r3
 8001822:	f004 fca5 	bl	8006170 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 800182c:	f7ff fd11 	bl	8001252 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_UART_MspInit+0x14c>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001834:	4a18      	ldr	r2, [pc, #96]	@ (8001898 <HAL_UART_MspInit+0x14c>)
 8001836:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800183a:	6593      	str	r3, [r2, #88]	@ 0x58
 800183c:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <HAL_UART_MspInit+0x14c>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001840:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001848:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <HAL_UART_MspInit+0x14c>)
 800184a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800184c:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <HAL_UART_MspInit+0x14c>)
 800184e:	f043 0308 	orr.w	r3, r3, #8
 8001852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <HAL_UART_MspInit+0x14c>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001860:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001864:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800187a:	2307      	movs	r3, #7
 800187c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001880:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001884:	4619      	mov	r1, r3
 8001886:	4807      	ldr	r0, [pc, #28]	@ (80018a4 <HAL_UART_MspInit+0x158>)
 8001888:	f002 f932 	bl	8003af0 <HAL_GPIO_Init>
}
 800188c:	bf00      	nop
 800188e:	37c0      	adds	r7, #192	@ 0xc0
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40008000 	.word	0x40008000
 8001898:	40021000 	.word	0x40021000
 800189c:	48001800 	.word	0x48001800
 80018a0:	40004800 	.word	0x40004800
 80018a4:	48000c00 	.word	0x48000c00

080018a8 <Reset_Handler>:
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e0 <LoopForever+0x2>
 80018ac:	f7ff fd7a 	bl	80013a4 <SystemInit>
 80018b0:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <LoopForever+0x6>)
 80018b2:	490d      	ldr	r1, [pc, #52]	@ (80018e8 <LoopForever+0xa>)
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <LoopForever+0xe>)
 80018b6:	2300      	movs	r3, #0
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:
 80018ba:	58d4      	ldr	r4, [r2, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:
 80018c0:	18c4      	adds	r4, r0, r3
 80018c2:	428c      	cmp	r4, r1
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
 80018c6:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <LoopForever+0x12>)
 80018c8:	4c0a      	ldr	r4, [pc, #40]	@ (80018f4 <LoopForever+0x16>)
 80018ca:	2300      	movs	r3, #0
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:
 80018d2:	42a2      	cmp	r2, r4
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>
 80018d6:	f00b ffbf 	bl	800d858 <__libc_init_array>
 80018da:	f7ff fbdf 	bl	800109c <main>

080018de <LoopForever>:
 80018de:	e7fe      	b.n	80018de <LoopForever>
 80018e0:	200a0000 	.word	0x200a0000
 80018e4:	20000000 	.word	0x20000000
 80018e8:	2000010c 	.word	0x2000010c
 80018ec:	0800d99c 	.word	0x0800d99c
 80018f0:	2000010c 	.word	0x2000010c
 80018f4:	20005188 	.word	0x20005188

080018f8 <CAN1_RX0_IRQHandler>:
 80018f8:	e7fe      	b.n	80018f8 <CAN1_RX0_IRQHandler>

080018fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f001 fd3b 	bl	8003380 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800190a:	2000      	movs	r0, #0
 800190c:	f000 f80e 	bl	800192c <HAL_InitTick>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	71fb      	strb	r3, [r7, #7]
 800191a:	e001      	b.n	8001920 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800191c:	f7ff fca0 	bl	8001260 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001920:	79fb      	ldrb	r3, [r7, #7]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001938:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <HAL_InitTick+0x6c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d023      	beq.n	8001988 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001940:	4b16      	ldr	r3, [pc, #88]	@ (800199c <HAL_InitTick+0x70>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <HAL_InitTick+0x6c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f001 fd47 	bl	80033ea <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10f      	bne.n	8001982 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d809      	bhi.n	800197c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001970:	f001 fd11 	bl	8003396 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001974:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <HAL_InitTick+0x74>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e007      	b.n	800198c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e004      	b.n	800198c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e001      	b.n	800198c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000008 	.word	0x20000008
 80019c8:	20003578 	.word	0x20003578

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	@ (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20003578 	.word	0x20003578

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff ffee 	bl	80019cc <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019fc:	d005      	beq.n	8001a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_Delay+0x44>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0a:	bf00      	nop
 8001a0c:	f7ff ffde 	bl	80019cc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d8f7      	bhi.n	8001a0c <HAL_Delay+0x28>
  {
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000008 	.word	0x20000008

08001a2c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	609a      	str	r2, [r3, #8]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3360      	adds	r3, #96	@ 0x60
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <LL_ADC_SetOffset+0x44>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001acc:	bf00      	nop
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	03fff000 	.word	0x03fff000

08001adc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3360      	adds	r3, #96	@ 0x60
 8001aea:	461a      	mov	r2, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b087      	sub	sp, #28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3360      	adds	r3, #96	@ 0x60
 8001b18:	461a      	mov	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
 8001b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	615a      	str	r2, [r3, #20]
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d101      	bne.n	8001b7c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b087      	sub	sp, #28
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3330      	adds	r3, #48	@ 0x30
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	4413      	add	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f003 031f 	and.w	r3, r3, #31
 8001bb4:	211f      	movs	r1, #31
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	0e9b      	lsrs	r3, r3, #26
 8001bc2:	f003 011f 	and.w	r1, r3, #31
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bd6:	bf00      	nop
 8001bd8:	371c      	adds	r7, #28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	3314      	adds	r3, #20
 8001c18:	461a      	mov	r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	0e5b      	lsrs	r3, r3, #25
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	4413      	add	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	0d1b      	lsrs	r3, r3, #20
 8001c30:	f003 031f 	and.w	r3, r3, #31
 8001c34:	2107      	movs	r1, #7
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	0d1b      	lsrs	r3, r3, #20
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c52:	bf00      	nop
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0318 	and.w	r3, r3, #24
 8001c82:	4908      	ldr	r1, [pc, #32]	@ (8001ca4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c84:	40d9      	lsrs	r1, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	400b      	ands	r3, r1
 8001c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	0007ffff 	.word	0x0007ffff

08001ca8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001cb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6093      	str	r3, [r2, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001cdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ce0:	d101      	bne.n	8001ce6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d08:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d30:	d101      	bne.n	8001d36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d80:	f043 0202 	orr.w	r2, r3, #2
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <LL_ADC_IsEnabled+0x18>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <LL_ADC_IsEnabled+0x1a>
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d101      	bne.n	8001dd2 <LL_ADC_IsDisableOngoing+0x18>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <LL_ADC_IsDisableOngoing+0x1a>
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001df0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001df4:	f043 0204 	orr.w	r2, r3, #4
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d101      	bne.n	8001e20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d101      	bne.n	8001e46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e129      	b.n	80020c2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7fe fbab 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff19 	bl	8001ccc <LL_ADC_IsDeepPowerDownEnabled>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff feff 	bl	8001ca8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff34 	bl	8001d1c <LL_ADC_IsInternalRegulatorEnabled>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d115      	bne.n	8001ee6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff18 	bl	8001cf4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ec4:	4b81      	ldr	r3, [pc, #516]	@ (80020cc <HAL_ADC_Init+0x278>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	099b      	lsrs	r3, r3, #6
 8001eca:	4a81      	ldr	r2, [pc, #516]	@ (80020d0 <HAL_ADC_Init+0x27c>)
 8001ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ed8:	e002      	b.n	8001ee0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f9      	bne.n	8001eda <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ff16 	bl	8001d1c <LL_ADC_IsInternalRegulatorEnabled>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10d      	bne.n	8001f12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efa:	f043 0210 	orr.w	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff76 	bl	8001e08 <LL_ADC_REG_IsConversionOngoing>
 8001f1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f040 80c2 	bne.w	80020b0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 80be 	bne.w	80020b0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f38:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f3c:	f043 0202 	orr.w	r2, r3, #2
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff23 	bl	8001d94 <LL_ADC_IsEnabled>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f54:	485f      	ldr	r0, [pc, #380]	@ (80020d4 <HAL_ADC_Init+0x280>)
 8001f56:	f7ff ff1d 	bl	8001d94 <LL_ADC_IsEnabled>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4619      	mov	r1, r3
 8001f66:	485c      	ldr	r0, [pc, #368]	@ (80020d8 <HAL_ADC_Init+0x284>)
 8001f68:	f7ff fd60 	bl	8001a2c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7e5b      	ldrb	r3, [r3, #25]
 8001f70:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f76:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f7c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f82:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f8a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d106      	bne.n	8001fa8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	045b      	lsls	r3, r3, #17
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d009      	beq.n	8001fc4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	4b44      	ldr	r3, [pc, #272]	@ (80020dc <HAL_ADC_Init+0x288>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	69b9      	ldr	r1, [r7, #24]
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff26 	bl	8001e2e <LL_ADC_INJ_IsConversionOngoing>
 8001fe2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d140      	bne.n	800206c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d13d      	bne.n	800206c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7e1b      	ldrb	r3, [r3, #24]
 8001ff8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ffa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002002:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002012:	f023 0306 	bic.w	r3, r3, #6
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	69b9      	ldr	r1, [r7, #24]
 800201c:	430b      	orrs	r3, r1
 800201e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002026:	2b01      	cmp	r3, #1
 8002028:	d118      	bne.n	800205c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002034:	f023 0304 	bic.w	r3, r3, #4
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002040:	4311      	orrs	r1, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002046:	4311      	orrs	r1, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800204c:	430a      	orrs	r2, r1
 800204e:	431a      	orrs	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f042 0201 	orr.w	r2, r2, #1
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	e007      	b.n	800206c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d10c      	bne.n	800208e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f023 010f 	bic.w	r1, r3, #15
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	1e5a      	subs	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30
 800208c:	e007      	b.n	800209e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 020f 	bic.w	r2, r2, #15
 800209c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80020ae:	e007      	b.n	80020c0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b4:	f043 0210 	orr.w	r2, r3, #16
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80020c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000000 	.word	0x20000000
 80020d0:	053e2d63 	.word	0x053e2d63
 80020d4:	50040000 	.word	0x50040000
 80020d8:	50040300 	.word	0x50040300
 80020dc:	fff0c007 	.word	0xfff0c007

080020e0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fe89 	bl	8001e08 <LL_ADC_REG_IsConversionOngoing>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d167      	bne.n	80021cc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_ADC_Start_DMA+0x2a>
 8002106:	2302      	movs	r3, #2
 8002108:	e063      	b.n	80021d2 <HAL_ADC_Start_DMA+0xf2>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 fe2c 	bl	8002d70 <ADC_Enable>
 8002118:	4603      	mov	r3, r0
 800211a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d14f      	bne.n	80021c2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002126:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800212a:	f023 0301 	bic.w	r3, r3, #1
 800212e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	f023 0206 	bic.w	r2, r3, #6
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800214e:	e002      	b.n	8002156 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800215a:	4a20      	ldr	r2, [pc, #128]	@ (80021dc <HAL_ADC_Start_DMA+0xfc>)
 800215c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002162:	4a1f      	ldr	r2, [pc, #124]	@ (80021e0 <HAL_ADC_Start_DMA+0x100>)
 8002164:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216a:	4a1e      	ldr	r2, [pc, #120]	@ (80021e4 <HAL_ADC_Start_DMA+0x104>)
 800216c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	221c      	movs	r2, #28
 8002174:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0210 	orr.w	r2, r2, #16
 800218c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3340      	adds	r3, #64	@ 0x40
 80021a8:	4619      	mov	r1, r3
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f001 f9d1 	bl	8003554 <HAL_DMA_Start_IT>
 80021b2:	4603      	mov	r3, r0
 80021b4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fe10 	bl	8001de0 <LL_ADC_REG_StartConversion>
 80021c0:	e006      	b.n	80021d0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80021ca:	e001      	b.n	80021d0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021cc:	2302      	movs	r3, #2
 80021ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	08002f3b 	.word	0x08002f3b
 80021e0:	08003013 	.word	0x08003013
 80021e4:	0800302f 	.word	0x0800302f

080021e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d017      	beq.n	800223e <HAL_ADC_IRQHandler+0x56>
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d012      	beq.n	800223e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	f003 0310 	and.w	r3, r3, #16
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 ffcb 	bl	80031cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2202      	movs	r2, #2
 800223c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d004      	beq.n	8002252 <HAL_ADC_IRQHandler+0x6a>
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002258:	2b00      	cmp	r3, #0
 800225a:	d05e      	beq.n	800231a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d059      	beq.n	800231a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fc6e 	bl	8001b64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d03e      	beq.n	800230c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d135      	bne.n	800230c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b08      	cmp	r3, #8
 80022ac:	d12e      	bne.n	800230c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fda8 	bl	8001e08 <LL_ADC_REG_IsConversionOngoing>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d11a      	bne.n	80022f4 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 020c 	bic.w	r2, r2, #12
 80022cc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d112      	bne.n	800230c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80022f2:	e00b      	b.n	800230c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f8:	f043 0210 	orr.w	r2, r3, #16
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002304:	f043 0201 	orr.w	r2, r3, #1
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7fe fdf1 	bl	8000ef4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	220c      	movs	r2, #12
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d004      	beq.n	800232e <HAL_ADC_IRQHandler+0x146>
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002334:	2b00      	cmp	r3, #0
 8002336:	d072      	beq.n	800241e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d06d      	beq.n	800241e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002352:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fc3f 	bl	8001be2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002364:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fbfa 	bl	8001b64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002370:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d047      	beq.n	8002410 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_ADC_IRQHandler+0x1b2>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d03f      	beq.n	8002410 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002396:	2b00      	cmp	r3, #0
 8002398:	d13a      	bne.n	8002410 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a4:	2b40      	cmp	r3, #64	@ 0x40
 80023a6:	d133      	bne.n	8002410 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d12e      	bne.n	8002410 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fd39 	bl	8001e2e <LL_ADC_INJ_IsConversionOngoing>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d11a      	bne.n	80023f8 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023d0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d112      	bne.n	8002410 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80023f6:	e00b      	b.n	8002410 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	f043 0210 	orr.w	r2, r3, #16
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002408:	f043 0201 	orr.w	r2, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 feb3 	bl	800317c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2260      	movs	r2, #96	@ 0x60
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002424:	2b00      	cmp	r3, #0
 8002426:	d011      	beq.n	800244c <HAL_ADC_IRQHandler+0x264>
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00c      	beq.n	800244c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f886 	bl	8002550 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2280      	movs	r2, #128	@ 0x80
 800244a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d012      	beq.n	800247c <HAL_ADC_IRQHandler+0x294>
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00d      	beq.n	800247c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002464:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fe99 	bl	80031a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800247a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002482:	2b00      	cmp	r3, #0
 8002484:	d012      	beq.n	80024ac <HAL_ADC_IRQHandler+0x2c4>
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00d      	beq.n	80024ac <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002494:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fe8b 	bl	80031b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d02a      	beq.n	800250c <HAL_ADC_IRQHandler+0x324>
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d025      	beq.n	800250c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80024c8:	2301      	movs	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	e008      	b.n	80024e0 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80024dc:	2301      	movs	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d10e      	bne.n	8002504 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ea:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f6:	f043 0202 	orr.w	r2, r3, #2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f830 	bl	8002564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2210      	movs	r2, #16
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002512:	2b00      	cmp	r3, #0
 8002514:	d018      	beq.n	8002548 <HAL_ADC_IRQHandler+0x360>
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002530:	f043 0208 	orr.w	r2, r3, #8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002540:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fe24 	bl	8003190 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002548:	bf00      	nop
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b0b6      	sub	sp, #216	@ 0xd8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_ADC_ConfigChannel+0x22>
 8002596:	2302      	movs	r3, #2
 8002598:	e3d5      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x7ce>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fc2e 	bl	8001e08 <LL_ADC_REG_IsConversionOngoing>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 83ba 	bne.w	8002d28 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d824      	bhi.n	800260e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	3b02      	subs	r3, #2
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d81b      	bhi.n	8002606 <HAL_ADC_ConfigChannel+0x8e>
 80025ce:	a201      	add	r2, pc, #4	@ (adr r2, 80025d4 <HAL_ADC_ConfigChannel+0x5c>)
 80025d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d4:	080025e5 	.word	0x080025e5
 80025d8:	080025ed 	.word	0x080025ed
 80025dc:	080025f5 	.word	0x080025f5
 80025e0:	080025fd 	.word	0x080025fd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80025e4:	230c      	movs	r3, #12
 80025e6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025ea:	e010      	b.n	800260e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80025ec:	2312      	movs	r3, #18
 80025ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025f2:	e00c      	b.n	800260e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80025f4:	2318      	movs	r3, #24
 80025f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80025fa:	e008      	b.n	800260e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80025fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002600:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002604:	e003      	b.n	800260e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002606:	2306      	movs	r3, #6
 8002608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800260c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800261c:	f7ff fab5 	bl	8001b8a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff fbef 	bl	8001e08 <LL_ADC_REG_IsConversionOngoing>
 800262a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fbfb 	bl	8001e2e <LL_ADC_INJ_IsConversionOngoing>
 8002638:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800263c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 81bf 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002646:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 81ba 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002658:	d10f      	bne.n	800267a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2200      	movs	r2, #0
 8002664:	4619      	mov	r1, r3
 8002666:	f7ff facf 	bl	8001c08 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff fa63 	bl	8001b3e <LL_ADC_SetSamplingTimeCommonConfig>
 8002678:	e00e      	b.n	8002698 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	461a      	mov	r2, r3
 8002688:	f7ff fabe 	bl	8001c08 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fa53 	bl	8001b3e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	08db      	lsrs	r3, r3, #3
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d00a      	beq.n	80026d0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	6919      	ldr	r1, [r3, #16]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ca:	f7ff f9e3 	bl	8001a94 <LL_ADC_SetOffset>
 80026ce:	e179      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fa00 	bl	8001adc <LL_ADC_GetOffsetChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10a      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x184>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff f9f5 	bl	8001adc <LL_ADC_GetOffsetChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	0e9b      	lsrs	r3, r3, #26
 80026f6:	f003 021f 	and.w	r2, r3, #31
 80026fa:	e01e      	b.n	800273a <HAL_ADC_ConfigChannel+0x1c2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2100      	movs	r1, #0
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f9ea 	bl	8001adc <LL_ADC_GetOffsetChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800271a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800271e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002722:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800272a:	2320      	movs	r3, #32
 800272c:	e004      	b.n	8002738 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800272e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x1da>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	0e9b      	lsrs	r3, r3, #26
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	e018      	b.n	8002784 <HAL_ADC_ConfigChannel+0x20c>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002766:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800276a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800276e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002776:	2320      	movs	r3, #32
 8002778:	e004      	b.n	8002784 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800277a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800277e:	fab3 f383 	clz	r3, r3
 8002782:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002784:	429a      	cmp	r2, r3
 8002786:	d106      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2200      	movs	r2, #0
 800278e:	2100      	movs	r1, #0
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff f9b9 	bl	8001b08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2101      	movs	r1, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f99d 	bl	8001adc <LL_ADC_GetOffsetChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10a      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x24a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff f992 	bl	8001adc <LL_ADC_GetOffsetChannel>
 80027b8:	4603      	mov	r3, r0
 80027ba:	0e9b      	lsrs	r3, r3, #26
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	e01e      	b.n	8002800 <HAL_ADC_ConfigChannel+0x288>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2101      	movs	r1, #1
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff f987 	bl	8001adc <LL_ADC_GetOffsetChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80027e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80027e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e004      	b.n	80027fe <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80027f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002808:	2b00      	cmp	r3, #0
 800280a:	d105      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x2a0>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0e9b      	lsrs	r3, r3, #26
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	e018      	b.n	800284a <HAL_ADC_ConfigChannel+0x2d2>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800282c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002830:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002834:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800283c:	2320      	movs	r3, #32
 800283e:	e004      	b.n	800284a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002844:	fab3 f383 	clz	r3, r3
 8002848:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800284a:	429a      	cmp	r2, r3
 800284c:	d106      	bne.n	800285c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	2101      	movs	r1, #1
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f956 	bl	8001b08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2102      	movs	r1, #2
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f93a 	bl	8001adc <LL_ADC_GetOffsetChannel>
 8002868:	4603      	mov	r3, r0
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x310>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2102      	movs	r1, #2
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff f92f 	bl	8001adc <LL_ADC_GetOffsetChannel>
 800287e:	4603      	mov	r3, r0
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	f003 021f 	and.w	r2, r3, #31
 8002886:	e01e      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x34e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2102      	movs	r1, #2
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff f924 	bl	8001adc <LL_ADC_GetOffsetChannel>
 8002894:	4603      	mov	r3, r0
 8002896:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80028a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80028ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e004      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80028ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d105      	bne.n	80028de <HAL_ADC_ConfigChannel+0x366>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	0e9b      	lsrs	r3, r3, #26
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	e014      	b.n	8002908 <HAL_ADC_ConfigChannel+0x390>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80028ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80028f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e004      	b.n	8002908 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80028fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002908:	429a      	cmp	r2, r3
 800290a:	d106      	bne.n	800291a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	2102      	movs	r1, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff f8f7 	bl	8001b08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2103      	movs	r1, #3
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff f8db 	bl	8001adc <LL_ADC_GetOffsetChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x3ce>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2103      	movs	r1, #3
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff f8d0 	bl	8001adc <LL_ADC_GetOffsetChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	e017      	b.n	8002976 <HAL_ADC_ConfigChannel+0x3fe>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2103      	movs	r1, #3
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff f8c5 	bl	8001adc <LL_ADC_GetOffsetChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800295e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002960:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002962:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e003      	b.n	8002974 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800296c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <HAL_ADC_ConfigChannel+0x416>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	e011      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x43a>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800299c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800299e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80029a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80029aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d106      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	2103      	movs	r1, #3
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff f8a2 	bl	8001b08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f9e3 	bl	8001d94 <LL_ADC_IsEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 813f 	bne.w	8002c54 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7ff f93c 	bl	8001c60 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4a8e      	ldr	r2, [pc, #568]	@ (8002c28 <HAL_ADC_ConfigChannel+0x6b0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	f040 8130 	bne.w	8002c54 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x4a4>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2b09      	cmp	r3, #9
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e019      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x4d8>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002a38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2b09      	cmp	r3, #9
 8002a48:	bf94      	ite	ls
 8002a4a:	2301      	movls	r3, #1
 8002a4c:	2300      	movhi	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d079      	beq.n	8002b48 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x4f8>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	069b      	lsls	r3, r3, #26
 8002a6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a6e:	e015      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x524>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002a7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a80:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	069b      	lsls	r3, r3, #26
 8002a98:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x544>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	e017      	b.n	8002aec <HAL_ADC_ConfigChannel+0x574>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002acc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	e003      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002ad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	ea42 0103 	orr.w	r1, r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x59a>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	051b      	lsls	r3, r3, #20
 8002b10:	e018      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x5cc>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b22:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e003      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b44:	430b      	orrs	r3, r1
 8002b46:	e080      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x5ec>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	069b      	lsls	r3, r3, #26
 8002b5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b62:	e015      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x618>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	e003      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	069b      	lsls	r3, r3, #26
 8002b8c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x638>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	e017      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x668>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	61bb      	str	r3, [r7, #24]
  return result;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e003      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	ea42 0103 	orr.w	r1, r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10d      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x694>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	3b1e      	subs	r3, #30
 8002c04:	051b      	lsls	r3, r3, #20
 8002c06:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c0a:	e01d      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x6d0>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	60fb      	str	r3, [r7, #12]
  return result;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d103      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e005      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x6bc>
 8002c28:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	f003 021f 	and.w	r2, r3, #31
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	3b1e      	subs	r3, #30
 8002c42:	051b      	lsls	r3, r3, #20
 8002c44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c48:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f7fe ffda 	bl	8001c08 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b3d      	ldr	r3, [pc, #244]	@ (8002d50 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d06c      	beq.n	8002d3a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c60:	483c      	ldr	r0, [pc, #240]	@ (8002d54 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c62:	f7fe ff09 	bl	8001a78 <LL_ADC_GetCommonPathInternalCh>
 8002c66:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a3a      	ldr	r2, [pc, #232]	@ (8002d58 <HAL_ADC_ConfigChannel+0x7e0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d127      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d121      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a35      	ldr	r2, [pc, #212]	@ (8002d5c <HAL_ADC_ConfigChannel+0x7e4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d157      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002c8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c92:	4619      	mov	r1, r3
 8002c94:	482f      	ldr	r0, [pc, #188]	@ (8002d54 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c96:	f7fe fedc 	bl	8001a52 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c9a:	4b31      	ldr	r3, [pc, #196]	@ (8002d60 <HAL_ADC_ConfigChannel+0x7e8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	4a30      	ldr	r2, [pc, #192]	@ (8002d64 <HAL_ADC_ConfigChannel+0x7ec>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cb4:	e002      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f9      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cc2:	e03a      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a27      	ldr	r2, [pc, #156]	@ (8002d68 <HAL_ADC_ConfigChannel+0x7f0>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d113      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10d      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1f      	ldr	r2, [pc, #124]	@ (8002d5c <HAL_ADC_ConfigChannel+0x7e4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d12a      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ce4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ce8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cec:	4619      	mov	r1, r3
 8002cee:	4819      	ldr	r0, [pc, #100]	@ (8002d54 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cf0:	f7fe feaf 	bl	8001a52 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002cf4:	e021      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8002d6c <HAL_ADC_ConfigChannel+0x7f4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d11c      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d116      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a12      	ldr	r2, [pc, #72]	@ (8002d5c <HAL_ADC_ConfigChannel+0x7e4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d111      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d1e:	4619      	mov	r1, r3
 8002d20:	480c      	ldr	r0, [pc, #48]	@ (8002d54 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d22:	f7fe fe96 	bl	8001a52 <LL_ADC_SetCommonPathInternalCh>
 8002d26:	e008      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002d42:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	37d8      	adds	r7, #216	@ 0xd8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	80080000 	.word	0x80080000
 8002d54:	50040300 	.word	0x50040300
 8002d58:	c7520000 	.word	0xc7520000
 8002d5c:	50040000 	.word	0x50040000
 8002d60:	20000000 	.word	0x20000000
 8002d64:	053e2d63 	.word	0x053e2d63
 8002d68:	cb840000 	.word	0xcb840000
 8002d6c:	80000001 	.word	0x80000001

08002d70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff f807 	bl	8001d94 <LL_ADC_IsEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d169      	bne.n	8002e60 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	4b36      	ldr	r3, [pc, #216]	@ (8002e6c <ADC_Enable+0xfc>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	f043 0201 	orr.w	r2, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e055      	b.n	8002e62 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fe ffc2 	bl	8001d44 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dc0:	482b      	ldr	r0, [pc, #172]	@ (8002e70 <ADC_Enable+0x100>)
 8002dc2:	f7fe fe59 	bl	8001a78 <LL_ADC_GetCommonPathInternalCh>
 8002dc6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002dc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d013      	beq.n	8002df8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dd0:	4b28      	ldr	r3, [pc, #160]	@ (8002e74 <ADC_Enable+0x104>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	4a28      	ldr	r2, [pc, #160]	@ (8002e78 <ADC_Enable+0x108>)
 8002dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	4613      	mov	r3, r2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002dea:	e002      	b.n	8002df2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f9      	bne.n	8002dec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002df8:	f7fe fde8 	bl	80019cc <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002dfe:	e028      	b.n	8002e52 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe ffc5 	bl	8001d94 <LL_ADC_IsEnabled>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d104      	bne.n	8002e1a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fe ff95 	bl	8001d44 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e1a:	f7fe fdd7 	bl	80019cc <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d914      	bls.n	8002e52 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d00d      	beq.n	8002e52 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3a:	f043 0210 	orr.w	r2, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e46:	f043 0201 	orr.w	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e007      	b.n	8002e62 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d1cf      	bne.n	8002e00 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	8000003f 	.word	0x8000003f
 8002e70:	50040300 	.word	0x50040300
 8002e74:	20000000 	.word	0x20000000
 8002e78:	053e2d63 	.word	0x053e2d63

08002e7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fe ff96 	bl	8001dba <LL_ADC_IsDisableOngoing>
 8002e8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fe ff7d 	bl	8001d94 <LL_ADC_IsEnabled>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d047      	beq.n	8002f30 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d144      	bne.n	8002f30 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 030d 	and.w	r3, r3, #13
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d10c      	bne.n	8002ece <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe ff57 	bl	8001d6c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ec6:	f7fe fd81 	bl	80019cc <HAL_GetTick>
 8002eca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ecc:	e029      	b.n	8002f22 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed2:	f043 0210 	orr.w	r2, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ede:	f043 0201 	orr.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e023      	b.n	8002f32 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002eea:	f7fe fd6f 	bl	80019cc <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d914      	bls.n	8002f22 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00d      	beq.n	8002f22 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0a:	f043 0210 	orr.w	r2, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f16:	f043 0201 	orr.w	r2, r3, #1
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e007      	b.n	8002f32 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1dc      	bne.n	8002eea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d14b      	bne.n	8002fec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f58:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d021      	beq.n	8002fb2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fdf6 	bl	8001b64 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d032      	beq.n	8002fe4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d12b      	bne.n	8002fe4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d11f      	bne.n	8002fe4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fb0:	e018      	b.n	8002fe4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d111      	bne.n	8002fe4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d105      	bne.n	8002fe4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f7fd ff85 	bl	8000ef4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fea:	e00e      	b.n	800300a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff fab3 	bl	8002564 <HAL_ADC_ErrorCallback>
}
 8002ffe:	e004      	b.n	800300a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
}
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7fe f831 	bl	8001088 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304c:	f043 0204 	orr.w	r2, r3, #4
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f7ff fa85 	bl	8002564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <LL_ADC_StartCalibration>:
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003074:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800307e:	4313      	orrs	r3, r2
 8003080:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_ADC_IsCalibrationOnGoing>:
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80030a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80030a8:	d101      	bne.n	80030ae <LL_ADC_IsCalibrationOnGoing+0x1a>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e04d      	b.n	8003174 <HAL_ADCEx_Calibration_Start+0xb8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff fecb 	bl	8002e7c <ADC_Disable>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d136      	bne.n	800315e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030f8:	f023 0302 	bic.w	r3, r3, #2
 80030fc:	f043 0202 	orr.w	r2, r3, #2
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6839      	ldr	r1, [r7, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ffa9 	bl	8003062 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003110:	e014      	b.n	800313c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3301      	adds	r3, #1
 8003116:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800311e:	d30d      	bcc.n	800313c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003124:	f023 0312 	bic.w	r3, r3, #18
 8003128:	f043 0210 	orr.w	r2, r3, #16
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e01b      	b.n	8003174 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ffa7 	bl	8003094 <LL_ADC_IsCalibrationOnGoing>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e2      	bne.n	8003112 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003150:	f023 0303 	bic.w	r3, r3, #3
 8003154:	f043 0201 	orr.w	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	659a      	str	r2, [r3, #88]	@ 0x58
 800315c:	e005      	b.n	800316a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	f043 0210 	orr.w	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031fc:	4013      	ands	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800320c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003212:	4a04      	ldr	r2, [pc, #16]	@ (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	60d3      	str	r3, [r2, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800322c:	4b04      	ldr	r3, [pc, #16]	@ (8003240 <__NVIC_GetPriorityGrouping+0x18>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 0307 	and.w	r3, r3, #7
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db0b      	blt.n	800326e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	4907      	ldr	r1, [pc, #28]	@ (800327c <__NVIC_EnableIRQ+0x38>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2001      	movs	r0, #1
 8003266:	fa00 f202 	lsl.w	r2, r0, r2
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000e100 	.word	0xe000e100

08003280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003290:	2b00      	cmp	r3, #0
 8003292:	db0a      	blt.n	80032aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	490c      	ldr	r1, [pc, #48]	@ (80032cc <__NVIC_SetPriority+0x4c>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	440b      	add	r3, r1
 80032a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a8:	e00a      	b.n	80032c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4908      	ldr	r1, [pc, #32]	@ (80032d0 <__NVIC_SetPriority+0x50>)
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	3b04      	subs	r3, #4
 80032b8:	0112      	lsls	r2, r2, #4
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	440b      	add	r3, r1
 80032be:	761a      	strb	r2, [r3, #24]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000e100 	.word	0xe000e100
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	@ 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f1c3 0307 	rsb	r3, r3, #7
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	bf28      	it	cs
 80032f2:	2304      	movcs	r3, #4
 80032f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d902      	bls.n	8003304 <NVIC_EncodePriority+0x30>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3b03      	subs	r3, #3
 8003302:	e000      	b.n	8003306 <NVIC_EncodePriority+0x32>
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	401a      	ands	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800331c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43d9      	mvns	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	4313      	orrs	r3, r2
         );
}
 800332e:	4618      	mov	r0, r3
 8003330:	3724      	adds	r7, #36	@ 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800334c:	d301      	bcc.n	8003352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800334e:	2301      	movs	r3, #1
 8003350:	e00f      	b.n	8003372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003352:	4a0a      	ldr	r2, [pc, #40]	@ (800337c <SysTick_Config+0x40>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3b01      	subs	r3, #1
 8003358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800335a:	210f      	movs	r1, #15
 800335c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003360:	f7ff ff8e 	bl	8003280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <SysTick_Config+0x40>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800336a:	4b04      	ldr	r3, [pc, #16]	@ (800337c <SysTick_Config+0x40>)
 800336c:	2207      	movs	r2, #7
 800336e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	e000e010 	.word	0xe000e010

08003380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ff29 	bl	80031e0 <__NVIC_SetPriorityGrouping>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033a8:	f7ff ff3e 	bl	8003228 <__NVIC_GetPriorityGrouping>
 80033ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	6978      	ldr	r0, [r7, #20]
 80033b4:	f7ff ff8e 	bl	80032d4 <NVIC_EncodePriority>
 80033b8:	4602      	mov	r2, r0
 80033ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff5d 	bl	8003280 <__NVIC_SetPriority>
}
 80033c6:	bf00      	nop
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff31 	bl	8003244 <__NVIC_EnableIRQ>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ffa2 	bl	800333c <SysTick_Config>
 80033f8:	4603      	mov	r3, r0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e08d      	b.n	8003532 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	4b47      	ldr	r3, [pc, #284]	@ (800353c <HAL_DMA_Init+0x138>)
 800341e:	429a      	cmp	r2, r3
 8003420:	d80f      	bhi.n	8003442 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	4b45      	ldr	r3, [pc, #276]	@ (8003540 <HAL_DMA_Init+0x13c>)
 800342a:	4413      	add	r3, r2
 800342c:	4a45      	ldr	r2, [pc, #276]	@ (8003544 <HAL_DMA_Init+0x140>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	009a      	lsls	r2, r3, #2
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a42      	ldr	r2, [pc, #264]	@ (8003548 <HAL_DMA_Init+0x144>)
 800343e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003440:	e00e      	b.n	8003460 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	4b40      	ldr	r3, [pc, #256]	@ (800354c <HAL_DMA_Init+0x148>)
 800344a:	4413      	add	r3, r2
 800344c:	4a3d      	ldr	r2, [pc, #244]	@ (8003544 <HAL_DMA_Init+0x140>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	009a      	lsls	r2, r3, #2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a3c      	ldr	r2, [pc, #240]	@ (8003550 <HAL_DMA_Init+0x14c>)
 800345e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2202      	movs	r2, #2
 8003464:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800347a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 faba 	bl	8003a2c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034c0:	d102      	bne.n	80034c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034dc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d010      	beq.n	8003508 <HAL_DMA_Init+0x104>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d80c      	bhi.n	8003508 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fada 	bl	8003aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	e008      	b.n	800351a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40020407 	.word	0x40020407
 8003540:	bffdfff8 	.word	0xbffdfff8
 8003544:	cccccccd 	.word	0xcccccccd
 8003548:	40020000 	.word	0x40020000
 800354c:	bffdfbf8 	.word	0xbffdfbf8
 8003550:	40020400 	.word	0x40020400

08003554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
 8003560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_DMA_Start_IT+0x20>
 8003570:	2302      	movs	r3, #2
 8003572:	e066      	b.n	8003642 <HAL_DMA_Start_IT+0xee>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d155      	bne.n	8003634 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f9ff 	bl	80039b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 020e 	orr.w	r2, r2, #14
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e00f      	b.n	80035ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 0204 	bic.w	r2, r2, #4
 80035da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 020a 	orr.w	r2, r2, #10
 80035ea:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003604:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003608:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003620:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e005      	b.n	8003640 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800363c:	2302      	movs	r3, #2
 800363e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003640:	7dfb      	ldrb	r3, [r7, #23]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800364a:	b480      	push	{r7}
 800364c:	b085      	sub	sp, #20
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d008      	beq.n	8003674 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2204      	movs	r2, #4
 8003666:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e040      	b.n	80036f6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 020e 	bic.w	r2, r2, #14
 8003682:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800368e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003692:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a8:	f003 021c 	and.w	r2, r3, #28
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	2101      	movs	r1, #1
 80036b2:	fa01 f202 	lsl.w	r2, r1, r2
 80036b6:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036e2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d005      	beq.n	8003726 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2204      	movs	r2, #4
 800371e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
 8003724:	e047      	b.n	80037b6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 020e 	bic.w	r2, r2, #14
 8003734:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003750:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003754:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375a:	f003 021c 	and.w	r2, r3, #28
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	2101      	movs	r1, #1
 8003764:	fa01 f202 	lsl.w	r2, r1, r2
 8003768:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003772:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00c      	beq.n	8003796 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003786:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800378a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003794:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
    }
  }
  return status;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037dc:	f003 031c 	and.w	r3, r3, #28
 80037e0:	2204      	movs	r2, #4
 80037e2:	409a      	lsls	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d026      	beq.n	800383a <HAL_DMA_IRQHandler+0x7a>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d021      	beq.n	800383a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d107      	bne.n	8003814 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0204 	bic.w	r2, r2, #4
 8003812:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003818:	f003 021c 	and.w	r2, r3, #28
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003820:	2104      	movs	r1, #4
 8003822:	fa01 f202 	lsl.w	r2, r1, r2
 8003826:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382c:	2b00      	cmp	r3, #0
 800382e:	d071      	beq.n	8003914 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003838:	e06c      	b.n	8003914 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	f003 031c 	and.w	r3, r3, #28
 8003842:	2202      	movs	r2, #2
 8003844:	409a      	lsls	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d02e      	beq.n	80038ac <HAL_DMA_IRQHandler+0xec>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d029      	beq.n	80038ac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 020a 	bic.w	r2, r2, #10
 8003874:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003882:	f003 021c 	and.w	r2, r3, #28
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	2102      	movs	r1, #2
 800388c:	fa01 f202 	lsl.w	r2, r1, r2
 8003890:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d038      	beq.n	8003914 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80038aa:	e033      	b.n	8003914 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	f003 031c 	and.w	r3, r3, #28
 80038b4:	2208      	movs	r2, #8
 80038b6:	409a      	lsls	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d02a      	beq.n	8003916 <HAL_DMA_IRQHandler+0x156>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d025      	beq.n	8003916 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 020e 	bic.w	r2, r2, #14
 80038d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038de:	f003 021c 	and.w	r2, r3, #28
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	2101      	movs	r1, #1
 80038e8:	fa01 f202 	lsl.w	r2, r1, r2
 80038ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003914:	bf00      	nop
 8003916:	bf00      	nop
}
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	460b      	mov	r3, r1
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_DMA_RegisterCallback+0x20>
 800393c:	2302      	movs	r3, #2
 800393e:	e031      	b.n	80039a4 <HAL_DMA_RegisterCallback+0x84>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	d120      	bne.n	8003996 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003954:	7afb      	ldrb	r3, [r7, #11]
 8003956:	2b03      	cmp	r3, #3
 8003958:	d81a      	bhi.n	8003990 <HAL_DMA_RegisterCallback+0x70>
 800395a:	a201      	add	r2, pc, #4	@ (adr r2, 8003960 <HAL_DMA_RegisterCallback+0x40>)
 800395c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003960:	08003971 	.word	0x08003971
 8003964:	08003979 	.word	0x08003979
 8003968:	08003981 	.word	0x08003981
 800396c:	08003989 	.word	0x08003989
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003976:	e010      	b.n	800399a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 800397e:	e00c      	b.n	800399a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003986:	e008      	b.n	800399a <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 800398e:	e004      	b.n	800399a <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
        break;
 8003994:	e001      	b.n	800399a <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80039d8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039de:	f003 021c 	and.w	r2, r3, #28
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	2101      	movs	r1, #1
 80039e8:	fa01 f202 	lsl.w	r2, r1, r2
 80039ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b10      	cmp	r3, #16
 80039fc:	d108      	bne.n	8003a10 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a0e:	e007      	b.n	8003a20 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	60da      	str	r2, [r3, #12]
}
 8003a20:	bf00      	nop
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b17      	ldr	r3, [pc, #92]	@ (8003a98 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d80a      	bhi.n	8003a56 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a4c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a54:	e007      	b.n	8003a66 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	089b      	lsrs	r3, r3, #2
 8003a5c:	009a      	lsls	r2, r3, #2
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a60:	4413      	add	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	3b08      	subs	r3, #8
 8003a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	2201      	movs	r2, #1
 8003a86:	409a      	lsls	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40020407 	.word	0x40020407
 8003a9c:	4002081c 	.word	0x4002081c
 8003aa0:	cccccccd 	.word	0xcccccccd
 8003aa4:	40020880 	.word	0x40020880

08003aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a08      	ldr	r2, [pc, #32]	@ (8003aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003aca:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	1000823f 	.word	0x1000823f
 8003aec:	40020940 	.word	0x40020940

08003af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003afe:	e166      	b.n	8003dce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	2101      	movs	r1, #1
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8158 	beq.w	8003dc8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d005      	beq.n	8003b30 <HAL_GPIO_Init+0x40>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 0303 	and.w	r3, r3, #3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d130      	bne.n	8003b92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b66:	2201      	movs	r2, #1
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4013      	ands	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	091b      	lsrs	r3, r3, #4
 8003b7c:	f003 0201 	and.w	r2, r3, #1
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d017      	beq.n	8003bce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	2203      	movs	r2, #3
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d123      	bne.n	8003c22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	08da      	lsrs	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	3208      	adds	r2, #8
 8003be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	220f      	movs	r2, #15
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	08da      	lsrs	r2, r3, #3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3208      	adds	r2, #8
 8003c1c:	6939      	ldr	r1, [r7, #16]
 8003c1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 0203 	and.w	r2, r3, #3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 80b2 	beq.w	8003dc8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c64:	4b61      	ldr	r3, [pc, #388]	@ (8003dec <HAL_GPIO_Init+0x2fc>)
 8003c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c68:	4a60      	ldr	r2, [pc, #384]	@ (8003dec <HAL_GPIO_Init+0x2fc>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c70:	4b5e      	ldr	r3, [pc, #376]	@ (8003dec <HAL_GPIO_Init+0x2fc>)
 8003c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c7c:	4a5c      	ldr	r2, [pc, #368]	@ (8003df0 <HAL_GPIO_Init+0x300>)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	220f      	movs	r2, #15
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ca6:	d02b      	beq.n	8003d00 <HAL_GPIO_Init+0x210>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a52      	ldr	r2, [pc, #328]	@ (8003df4 <HAL_GPIO_Init+0x304>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d025      	beq.n	8003cfc <HAL_GPIO_Init+0x20c>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a51      	ldr	r2, [pc, #324]	@ (8003df8 <HAL_GPIO_Init+0x308>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d01f      	beq.n	8003cf8 <HAL_GPIO_Init+0x208>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a50      	ldr	r2, [pc, #320]	@ (8003dfc <HAL_GPIO_Init+0x30c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d019      	beq.n	8003cf4 <HAL_GPIO_Init+0x204>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a4f      	ldr	r2, [pc, #316]	@ (8003e00 <HAL_GPIO_Init+0x310>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <HAL_GPIO_Init+0x200>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a4e      	ldr	r2, [pc, #312]	@ (8003e04 <HAL_GPIO_Init+0x314>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00d      	beq.n	8003cec <HAL_GPIO_Init+0x1fc>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a4d      	ldr	r2, [pc, #308]	@ (8003e08 <HAL_GPIO_Init+0x318>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <HAL_GPIO_Init+0x1f8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a4c      	ldr	r2, [pc, #304]	@ (8003e0c <HAL_GPIO_Init+0x31c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d101      	bne.n	8003ce4 <HAL_GPIO_Init+0x1f4>
 8003ce0:	2307      	movs	r3, #7
 8003ce2:	e00e      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003ce4:	2308      	movs	r3, #8
 8003ce6:	e00c      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003ce8:	2306      	movs	r3, #6
 8003cea:	e00a      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003cec:	2305      	movs	r3, #5
 8003cee:	e008      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	e006      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e004      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e002      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_GPIO_Init+0x212>
 8003d00:	2300      	movs	r3, #0
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	f002 0203 	and.w	r2, r2, #3
 8003d08:	0092      	lsls	r2, r2, #2
 8003d0a:	4093      	lsls	r3, r2
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d12:	4937      	ldr	r1, [pc, #220]	@ (8003df0 <HAL_GPIO_Init+0x300>)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	089b      	lsrs	r3, r3, #2
 8003d18:	3302      	adds	r3, #2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d20:	4b3b      	ldr	r3, [pc, #236]	@ (8003e10 <HAL_GPIO_Init+0x320>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d44:	4a32      	ldr	r2, [pc, #200]	@ (8003e10 <HAL_GPIO_Init+0x320>)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d4a:	4b31      	ldr	r3, [pc, #196]	@ (8003e10 <HAL_GPIO_Init+0x320>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	43db      	mvns	r3, r3
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4013      	ands	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d6e:	4a28      	ldr	r2, [pc, #160]	@ (8003e10 <HAL_GPIO_Init+0x320>)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d74:	4b26      	ldr	r3, [pc, #152]	@ (8003e10 <HAL_GPIO_Init+0x320>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4013      	ands	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d98:	4a1d      	ldr	r2, [pc, #116]	@ (8003e10 <HAL_GPIO_Init+0x320>)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8003e10 <HAL_GPIO_Init+0x320>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4013      	ands	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dc2:	4a13      	ldr	r2, [pc, #76]	@ (8003e10 <HAL_GPIO_Init+0x320>)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f47f ae91 	bne.w	8003b00 <HAL_GPIO_Init+0x10>
  }
}
 8003dde:	bf00      	nop
 8003de0:	bf00      	nop
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40010000 	.word	0x40010000
 8003df4:	48000400 	.word	0x48000400
 8003df8:	48000800 	.word	0x48000800
 8003dfc:	48000c00 	.word	0x48000c00
 8003e00:	48001000 	.word	0x48001000
 8003e04:	48001400 	.word	0x48001400
 8003e08:	48001800 	.word	0x48001800
 8003e0c:	48001c00 	.word	0x48001c00
 8003e10:	40010400 	.word	0x40010400

08003e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	807b      	strh	r3, [r7, #2]
 8003e20:	4613      	mov	r3, r2
 8003e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e24:	787b      	ldrb	r3, [r7, #1]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e2a:	887a      	ldrh	r2, [r7, #2]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e30:	e002      	b.n	8003e38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e32:	887a      	ldrh	r2, [r7, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e56:	887a      	ldrh	r2, [r7, #2]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	041a      	lsls	r2, r3, #16
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	43d9      	mvns	r1, r3
 8003e62:	887b      	ldrh	r3, [r7, #2]
 8003e64:	400b      	ands	r3, r1
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	619a      	str	r2, [r3, #24]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e82:	4b08      	ldr	r3, [pc, #32]	@ (8003ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e84:	695a      	ldr	r2, [r3, #20]
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d006      	beq.n	8003e9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e8e:	4a05      	ldr	r2, [pc, #20]	@ (8003ea4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fc fd58 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40010400 	.word	0x40010400

08003ea8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eaa:	b08f      	sub	sp, #60	@ 0x3c
 8003eac:	af0a      	add	r7, sp, #40	@ 0x28
 8003eae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e116      	b.n	80040e8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f009 f871 	bl	800cfbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2203      	movs	r2, #3
 8003ede:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f005 fcc8 	bl	800988e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	687e      	ldr	r6, [r7, #4]
 8003f06:	466d      	mov	r5, sp
 8003f08:	f106 0410 	add.w	r4, r6, #16
 8003f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f18:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f1c:	1d33      	adds	r3, r6, #4
 8003f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f20:	6838      	ldr	r0, [r7, #0]
 8003f22:	f005 fbdb 	bl	80096dc <USB_CoreInit>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0d7      	b.n	80040e8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f005 fcb6 	bl	80098b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f44:	2300      	movs	r3, #0
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	e04a      	b.n	8003fe0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	333d      	adds	r3, #61	@ 0x3d
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	333c      	adds	r3, #60	@ 0x3c
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f72:	7bfa      	ldrb	r2, [r7, #15]
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	b298      	uxth	r0, r3
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	3356      	adds	r3, #86	@ 0x56
 8003f86:	4602      	mov	r2, r0
 8003f88:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	3340      	adds	r3, #64	@ 0x40
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	3344      	adds	r3, #68	@ 0x44
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3348      	adds	r3, #72	@ 0x48
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	334c      	adds	r3, #76	@ 0x4c
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
 8003fe0:	7bfa      	ldrb	r2, [r7, #15]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d3af      	bcc.n	8003f4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	73fb      	strb	r3, [r7, #15]
 8003fee:	e044      	b.n	800407a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004018:	7bfa      	ldrb	r2, [r7, #15]
 800401a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	3301      	adds	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	d3b5      	bcc.n	8003ff0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	687e      	ldr	r6, [r7, #4]
 800408c:	466d      	mov	r5, sp
 800408e:	f106 0410 	add.w	r4, r6, #16
 8004092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800409a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800409e:	e885 0003 	stmia.w	r5, {r0, r1}
 80040a2:	1d33      	adds	r3, r6, #4
 80040a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040a6:	6838      	ldr	r0, [r7, #0]
 80040a8:	f005 fc4e 	bl	8009948 <USB_DevInit>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e014      	b.n	80040e8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d102      	bne.n	80040dc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f001 f86a 	bl	80051b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f006 fbfc 	bl	800a8de <USB_DevDisconnect>

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_PCD_Start+0x1c>
 8004108:	2302      	movs	r3, #2
 800410a:	e01c      	b.n	8004146 <HAL_PCD_Start+0x56>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004118:	2b01      	cmp	r3, #1
 800411a:	d105      	bne.n	8004128 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f005 fb9d 	bl	800986c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f006 fbb0 	bl	800a89c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800414e:	b590      	push	{r4, r7, lr}
 8004150:	b08d      	sub	sp, #52	@ 0x34
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f006 fc6e 	bl	800aa46 <USB_GetMode>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	f040 847e 	bne.w	8004a6e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f006 fbd2 	bl	800a920 <USB_ReadInterrupts>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 8474 	beq.w	8004a6c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f006 fbbf 	bl	800a920 <USB_ReadInterrupts>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d107      	bne.n	80041bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f002 0202 	and.w	r2, r2, #2
 80041ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f006 fbad 	bl	800a920 <USB_ReadInterrupts>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d161      	bne.n	8004294 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0210 	bic.w	r2, r2, #16
 80041de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f003 020f 	and.w	r2, r3, #15
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	3304      	adds	r3, #4
 80041fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	0c5b      	lsrs	r3, r3, #17
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	2b02      	cmp	r3, #2
 800420a:	d124      	bne.n	8004256 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004212:	4013      	ands	r3, r2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d035      	beq.n	8004284 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	091b      	lsrs	r3, r3, #4
 8004220:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004226:	b29b      	uxth	r3, r3
 8004228:	461a      	mov	r2, r3
 800422a:	6a38      	ldr	r0, [r7, #32]
 800422c:	f006 f9e4 	bl	800a5f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	091b      	lsrs	r3, r3, #4
 8004238:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800423c:	441a      	add	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800424e:	441a      	add	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	615a      	str	r2, [r3, #20]
 8004254:	e016      	b.n	8004284 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	0c5b      	lsrs	r3, r3, #17
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	2b06      	cmp	r3, #6
 8004260:	d110      	bne.n	8004284 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004268:	2208      	movs	r2, #8
 800426a:	4619      	mov	r1, r3
 800426c:	6a38      	ldr	r0, [r7, #32]
 800426e:	f006 f9c3 	bl	800a5f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	695a      	ldr	r2, [r3, #20]
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800427e:	441a      	add	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699a      	ldr	r2, [r3, #24]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0210 	orr.w	r2, r2, #16
 8004292:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f006 fb41 	bl	800a920 <USB_ReadInterrupts>
 800429e:	4603      	mov	r3, r0
 80042a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042a8:	f040 80a7 	bne.w	80043fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f006 fb46 	bl	800a946 <USB_ReadDevAllOutEpInterrupt>
 80042ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80042bc:	e099      	b.n	80043f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 808e 	beq.w	80043e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	4611      	mov	r1, r2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f006 fb6a 	bl	800a9ae <USB_ReadDevOutEPInterrupt>
 80042da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00c      	beq.n	8004300 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f2:	461a      	mov	r2, r3
 80042f4:	2301      	movs	r3, #1
 80042f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80042f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fe7e 	bl	8004ffc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00c      	beq.n	8004324 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004316:	461a      	mov	r2, r3
 8004318:	2308      	movs	r3, #8
 800431a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800431c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 feba 	bl	8005098 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f003 0310 	and.w	r3, r3, #16
 800432a:	2b00      	cmp	r3, #0
 800432c:	d008      	beq.n	8004340 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800433a:	461a      	mov	r2, r3
 800433c:	2310      	movs	r3, #16
 800433e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d030      	beq.n	80043ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004352:	2b80      	cmp	r3, #128	@ 0x80
 8004354:	d109      	bne.n	800436a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004364:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004368:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800436a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436c:	4613      	mov	r3, r2
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4413      	add	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	4413      	add	r3, r2
 800437c:	3304      	adds	r3, #4
 800437e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	78db      	ldrb	r3, [r3, #3]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d108      	bne.n	800439a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	2200      	movs	r2, #0
 800438c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	b2db      	uxtb	r3, r3
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f008 ff67 	bl	800d268 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a6:	461a      	mov	r2, r3
 80043a8:	2302      	movs	r3, #2
 80043aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c2:	461a      	mov	r2, r3
 80043c4:	2320      	movs	r3, #32
 80043c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d009      	beq.n	80043e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043de:	461a      	mov	r2, r3
 80043e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e8:	3301      	adds	r3, #1
 80043ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ee:	085b      	lsrs	r3, r3, #1
 80043f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f47f af62 	bne.w	80042be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f006 fa8e 	bl	800a920 <USB_ReadInterrupts>
 8004404:	4603      	mov	r3, r0
 8004406:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800440a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800440e:	f040 80a4 	bne.w	800455a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f006 faaf 	bl	800a97a <USB_ReadDevAllInEpInterrupt>
 800441c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004422:	e096      	b.n	8004552 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 808b 	beq.w	8004546 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	4611      	mov	r1, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f006 fad5 	bl	800a9ea <USB_ReadDevInEPInterrupt>
 8004440:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d020      	beq.n	800448e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800444c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	2201      	movs	r2, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	43db      	mvns	r3, r3
 8004466:	69f9      	ldr	r1, [r7, #28]
 8004468:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800446c:	4013      	ands	r3, r2
 800446e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800447c:	461a      	mov	r2, r3
 800447e:	2301      	movs	r3, #1
 8004480:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	b2db      	uxtb	r3, r3
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f008 fe58 	bl	800d13e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d008      	beq.n	80044aa <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a4:	461a      	mov	r2, r3
 80044a6:	2308      	movs	r3, #8
 80044a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c0:	461a      	mov	r2, r3
 80044c2:	2310      	movs	r3, #16
 80044c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044dc:	461a      	mov	r2, r3
 80044de:	2340      	movs	r3, #64	@ 0x40
 80044e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d023      	beq.n	8004534 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80044ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044ee:	6a38      	ldr	r0, [r7, #32]
 80044f0:	f005 fb6c 	bl	8009bcc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80044f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	3338      	adds	r3, #56	@ 0x38
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	4413      	add	r3, r2
 8004504:	3304      	adds	r3, #4
 8004506:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	78db      	ldrb	r3, [r3, #3]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d108      	bne.n	8004522 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2200      	movs	r2, #0
 8004514:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	b2db      	uxtb	r3, r3
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f008 feb5 	bl	800d28c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800452e:	461a      	mov	r2, r3
 8004530:	2302      	movs	r3, #2
 8004532:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800453e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fcd2 	bl	8004eea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	3301      	adds	r3, #1
 800454a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800454c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004554:	2b00      	cmp	r3, #0
 8004556:	f47f af65 	bne.w	8004424 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f006 f9de 	bl	800a920 <USB_ReadInterrupts>
 8004564:	4603      	mov	r3, r0
 8004566:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800456a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800456e:	d122      	bne.n	80045b6 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800457e:	f023 0301 	bic.w	r3, r3, #1
 8004582:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800458a:	2b01      	cmp	r3, #1
 800458c:	d108      	bne.n	80045a0 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004596:	2100      	movs	r1, #0
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f009 f8e9 	bl	800d770 <HAL_PCDEx_LPM_Callback>
 800459e:	e002      	b.n	80045a6 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f008 fe39 	bl	800d218 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695a      	ldr	r2, [r3, #20]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80045b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f006 f9b0 	bl	800a920 <USB_ReadInterrupts>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ca:	d112      	bne.n	80045f2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d102      	bne.n	80045e2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f008 fdf5 	bl	800d1cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80045f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f006 f992 	bl	800a920 <USB_ReadInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004602:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004606:	d121      	bne.n	800464c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695a      	ldr	r2, [r3, #20]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004616:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800461e:	2b00      	cmp	r3, #0
 8004620:	d111      	bne.n	8004646 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004630:	089b      	lsrs	r3, r3, #2
 8004632:	f003 020f 	and.w	r2, r3, #15
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800463c:	2101      	movs	r1, #1
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f009 f896 	bl	800d770 <HAL_PCDEx_LPM_Callback>
 8004644:	e002      	b.n	800464c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f008 fdc0 	bl	800d1cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f006 f965 	bl	800a920 <USB_ReadInterrupts>
 8004656:	4603      	mov	r3, r0
 8004658:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800465c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004660:	f040 80b5 	bne.w	80047ce <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004672:	f023 0301 	bic.w	r3, r3, #1
 8004676:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2110      	movs	r1, #16
 800467e:	4618      	mov	r0, r3
 8004680:	f005 faa4 	bl	8009bcc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004684:	2300      	movs	r3, #0
 8004686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004688:	e046      	b.n	8004718 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800468a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004696:	461a      	mov	r2, r3
 8004698:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800469c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800469e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ae:	0151      	lsls	r1, r2, #5
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	440a      	add	r2, r1
 80046b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ca:	461a      	mov	r2, r3
 80046cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046e2:	0151      	lsls	r1, r2, #5
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	440a      	add	r2, r1
 80046e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80046ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	69fa      	ldr	r2, [r7, #28]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800470c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004710:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004714:	3301      	adds	r3, #1
 8004716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800471e:	429a      	cmp	r2, r3
 8004720:	d3b3      	bcc.n	800468a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004730:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004734:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473a:	2b00      	cmp	r3, #0
 800473c:	d016      	beq.n	800476c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004748:	69fa      	ldr	r2, [r7, #28]
 800474a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800474e:	f043 030b 	orr.w	r3, r3, #11
 8004752:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	69fa      	ldr	r2, [r7, #28]
 8004760:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004764:	f043 030b 	orr.w	r3, r3, #11
 8004768:	6453      	str	r3, [r2, #68]	@ 0x44
 800476a:	e015      	b.n	8004798 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800477a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800477e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004782:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	69fa      	ldr	r2, [r7, #28]
 800478e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004792:	f043 030b 	orr.w	r3, r3, #11
 8004796:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80047aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f006 f975 	bl	800aaa8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80047cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f006 f8a4 	bl	800a920 <USB_ReadInterrupts>
 80047d8:	4603      	mov	r3, r0
 80047da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047e2:	d124      	bne.n	800482e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f006 f93a 	bl	800aa62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f005 fa67 	bl	8009cc6 <USB_GetDevSpeed>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681c      	ldr	r4, [r3, #0]
 8004804:	f001 fbbc 	bl	8005f80 <HAL_RCC_GetHCLKFreq>
 8004808:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800480e:	b2db      	uxtb	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	4620      	mov	r0, r4
 8004814:	f004 ff8e 	bl	8009734 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f008 fcb8 	bl	800d18e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800482c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f006 f874 	bl	800a920 <USB_ReadInterrupts>
 8004838:	4603      	mov	r3, r0
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b08      	cmp	r3, #8
 8004840:	d10a      	bne.n	8004858 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f008 fc95 	bl	800d172 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695a      	ldr	r2, [r3, #20]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f002 0208 	and.w	r2, r2, #8
 8004856:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f006 f85f 	bl	800a920 <USB_ReadInterrupts>
 8004862:	4603      	mov	r3, r0
 8004864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004868:	2b80      	cmp	r3, #128	@ 0x80
 800486a:	d122      	bne.n	80048b2 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004878:	2301      	movs	r3, #1
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
 800487c:	e014      	b.n	80048a8 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004882:	4613      	mov	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4413      	add	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	440b      	add	r3, r1
 800488c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d105      	bne.n	80048a2 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	b2db      	uxtb	r3, r3
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 faf3 	bl	8004e88 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	3301      	adds	r3, #1
 80048a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d3e5      	bcc.n	800487e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f006 f832 	bl	800a920 <USB_ReadInterrupts>
 80048bc:	4603      	mov	r3, r0
 80048be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048c6:	d13b      	bne.n	8004940 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048c8:	2301      	movs	r3, #1
 80048ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80048cc:	e02b      	b.n	8004926 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	015a      	lsls	r2, r3, #5
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	4413      	add	r3, r2
 80048d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	3340      	adds	r3, #64	@ 0x40
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d115      	bne.n	8004920 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80048f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	da12      	bge.n	8004920 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fe:	4613      	mov	r3, r2
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	333f      	adds	r3, #63	@ 0x3f
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	b2db      	uxtb	r3, r3
 8004912:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004916:	b2db      	uxtb	r3, r3
 8004918:	4619      	mov	r1, r3
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fab4 	bl	8004e88 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004922:	3301      	adds	r3, #1
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800492c:	429a      	cmp	r2, r3
 800492e:	d3ce      	bcc.n	80048ce <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800493e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f005 ffeb 	bl	800a920 <USB_ReadInterrupts>
 800494a:	4603      	mov	r3, r0
 800494c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004950:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004954:	d155      	bne.n	8004a02 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004956:	2301      	movs	r3, #1
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
 800495a:	e045      	b.n	80049e8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d12e      	bne.n	80049e2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004984:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004986:	2b00      	cmp	r3, #0
 8004988:	da2b      	bge.n	80049e2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004996:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800499a:	429a      	cmp	r2, r3
 800499c:	d121      	bne.n	80049e2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049a2:	4613      	mov	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80049b0:	2201      	movs	r2, #1
 80049b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10a      	bne.n	80049e2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049de:	6053      	str	r3, [r2, #4]
            break;
 80049e0:	e007      	b.n	80049f2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	3301      	adds	r3, #1
 80049e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d3b4      	bcc.n	800495c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f005 ff8a 	bl	800a920 <USB_ReadInterrupts>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a16:	d10a      	bne.n	8004a2e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f008 fc49 	bl	800d2b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f005 ff74 	bl	800a920 <USB_ReadInterrupts>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d115      	bne.n	8004a6e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f008 fc39 	bl	800d2cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	e000      	b.n	8004a6e <HAL_PCD_IRQHandler+0x920>
      return;
 8004a6c:	bf00      	nop
    }
  }
}
 8004a6e:	3734      	adds	r7, #52	@ 0x34
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd90      	pop	{r4, r7, pc}

08004a74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_PCD_SetAddress+0x1a>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e013      	b.n	8004ab6 <HAL_PCD_SetAddress+0x42>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	78fa      	ldrb	r2, [r7, #3]
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f005 fed2 	bl	800a850 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	4608      	mov	r0, r1
 8004ac8:	4611      	mov	r1, r2
 8004aca:	461a      	mov	r2, r3
 8004acc:	4603      	mov	r3, r0
 8004ace:	70fb      	strb	r3, [r7, #3]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	803b      	strh	r3, [r7, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	da0f      	bge.n	8004b04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	f003 020f 	and.w	r2, r3, #15
 8004aea:	4613      	mov	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	3338      	adds	r3, #56	@ 0x38
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	4413      	add	r3, r2
 8004af8:	3304      	adds	r3, #4
 8004afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	705a      	strb	r2, [r3, #1]
 8004b02:	e00f      	b.n	8004b24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	f003 020f 	and.w	r2, r3, #15
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	4413      	add	r3, r2
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b30:	883a      	ldrh	r2, [r7, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	78ba      	ldrb	r2, [r7, #2]
 8004b3a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	785b      	ldrb	r3, [r3, #1]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d004      	beq.n	8004b4e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	461a      	mov	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b4e:	78bb      	ldrb	r3, [r7, #2]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d102      	bne.n	8004b5a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_PCD_EP_Open+0xaa>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e00e      	b.n	8004b86 <HAL_PCD_EP_Open+0xc8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68f9      	ldr	r1, [r7, #12]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f005 f8c4 	bl	8009d04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004b84:	7afb      	ldrb	r3, [r7, #11]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b084      	sub	sp, #16
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	da0f      	bge.n	8004bc2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	f003 020f 	and.w	r2, r3, #15
 8004ba8:	4613      	mov	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	3338      	adds	r3, #56	@ 0x38
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	705a      	strb	r2, [r3, #1]
 8004bc0:	e00f      	b.n	8004be2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bc2:	78fb      	ldrb	r3, [r7, #3]
 8004bc4:	f003 020f 	and.w	r2, r3, #15
 8004bc8:	4613      	mov	r3, r2
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	4413      	add	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3304      	adds	r3, #4
 8004bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_PCD_EP_Close+0x6e>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e00e      	b.n	8004c1a <HAL_PCD_EP_Close+0x8c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68f9      	ldr	r1, [r7, #12]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f005 f902 	bl	8009e14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b086      	sub	sp, #24
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	460b      	mov	r3, r1
 8004c30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c32:	7afb      	ldrb	r3, [r7, #11]
 8004c34:	f003 020f 	and.w	r2, r3, #15
 8004c38:	4613      	mov	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	3304      	adds	r3, #4
 8004c4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2200      	movs	r2, #0
 8004c62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c64:	7afb      	ldrb	r3, [r7, #11]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6979      	ldr	r1, [r7, #20]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f005 f9a8 	bl	8009fcc <USB_EPStartXfer>

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c92:	78fb      	ldrb	r3, [r7, #3]
 8004c94:	f003 020f 	and.w	r2, r3, #15
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004ca8:	681b      	ldr	r3, [r3, #0]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc6:	7afb      	ldrb	r3, [r7, #11]
 8004cc8:	f003 020f 	and.w	r2, r3, #15
 8004ccc:	4613      	mov	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	3338      	adds	r3, #56	@ 0x38
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4413      	add	r3, r2
 8004cda:	3304      	adds	r3, #4
 8004cdc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2200      	movs	r2, #0
 8004cee:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cf6:	7afb      	ldrb	r3, [r7, #11]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6979      	ldr	r1, [r7, #20]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f005 f95f 	bl	8009fcc <USB_EPStartXfer>

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	f003 020f 	and.w	r2, r3, #15
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d901      	bls.n	8004d36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e04e      	b.n	8004dd4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da0f      	bge.n	8004d5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	f003 020f 	and.w	r2, r3, #15
 8004d44:	4613      	mov	r3, r2
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	3338      	adds	r3, #56	@ 0x38
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	4413      	add	r3, r2
 8004d52:	3304      	adds	r3, #4
 8004d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	705a      	strb	r2, [r3, #1]
 8004d5c:	e00d      	b.n	8004d7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d5e:	78fa      	ldrb	r2, [r7, #3]
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	3304      	adds	r3, #4
 8004d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_PCD_EP_SetStall+0x82>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e01c      	b.n	8004dd4 <HAL_PCD_EP_SetStall+0xbc>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f005 fc7d 	bl	800a6a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	f003 030f 	and.w	r3, r3, #15
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d108      	bne.n	8004dca <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f005 fe6f 	bl	800aaa8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004de8:	78fb      	ldrb	r3, [r7, #3]
 8004dea:	f003 020f 	and.w	r2, r3, #15
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d901      	bls.n	8004dfa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e042      	b.n	8004e80 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da0f      	bge.n	8004e22 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	f003 020f 	and.w	r2, r3, #15
 8004e08:	4613      	mov	r3, r2
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	3338      	adds	r3, #56	@ 0x38
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	4413      	add	r3, r2
 8004e16:	3304      	adds	r3, #4
 8004e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	705a      	strb	r2, [r3, #1]
 8004e20:	e00f      	b.n	8004e42 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e22:	78fb      	ldrb	r3, [r7, #3]
 8004e24:	f003 020f 	and.w	r2, r3, #15
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	4413      	add	r3, r2
 8004e38:	3304      	adds	r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_PCD_EP_ClrStall+0x86>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e00e      	b.n	8004e80 <HAL_PCD_EP_ClrStall+0xa4>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68f9      	ldr	r1, [r7, #12]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f005 fc87 	bl	800a784 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	da0c      	bge.n	8004eb6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	f003 020f 	and.w	r2, r3, #15
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	3338      	adds	r3, #56	@ 0x38
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	4413      	add	r3, r2
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e00c      	b.n	8004ed0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	f003 020f 	and.w	r2, r3, #15
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	4413      	add	r3, r2
 8004ecc:	3304      	adds	r3, #4
 8004ece:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68f9      	ldr	r1, [r7, #12]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f005 faaa 	bl	800a430 <USB_EPStopXfer>
 8004edc:	4603      	mov	r3, r0
 8004ede:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004ee0:	7afb      	ldrb	r3, [r7, #11]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b088      	sub	sp, #32
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	3338      	adds	r3, #56	@ 0x38
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3304      	adds	r3, #4
 8004f10:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	695a      	ldr	r2, [r3, #20]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d901      	bls.n	8004f22 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e067      	b.n	8004ff2 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d902      	bls.n	8004f3e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	3303      	adds	r3, #3
 8004f42:	089b      	lsrs	r3, r3, #2
 8004f44:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f46:	e026      	b.n	8004f96 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	69fa      	ldr	r2, [r7, #28]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d902      	bls.n	8004f64 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	3303      	adds	r3, #3
 8004f68:	089b      	lsrs	r3, r3, #2
 8004f6a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68d9      	ldr	r1, [r3, #12]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	6978      	ldr	r0, [r7, #20]
 8004f7a:	f005 fb03 	bl	800a584 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	441a      	add	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	441a      	add	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d809      	bhi.n	8004fc0 <PCD_WriteEmptyTxFifo+0xd6>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d203      	bcs.n	8004fc0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1c3      	bne.n	8004f48 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d811      	bhi.n	8004ff0 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	6939      	ldr	r1, [r7, #16]
 8004fe8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fec:	4013      	ands	r3, r2
 8004fee:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	333c      	adds	r3, #60	@ 0x3c
 8005014:	3304      	adds	r3, #4
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4a19      	ldr	r2, [pc, #100]	@ (8005094 <PCD_EP_OutXfrComplete_int+0x98>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d124      	bne.n	800507c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005048:	461a      	mov	r2, r3
 800504a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800504e:	6093      	str	r3, [r2, #8]
 8005050:	e01a      	b.n	8005088 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005068:	461a      	mov	r2, r3
 800506a:	2320      	movs	r3, #32
 800506c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	b2db      	uxtb	r3, r3
 8005072:	4619      	mov	r1, r3
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f008 f847 	bl	800d108 <HAL_PCD_DataOutStageCallback>
 800507a:	e005      	b.n	8005088 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f008 f840 	bl	800d108 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	4f54310a 	.word	0x4f54310a

08005098 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	333c      	adds	r3, #60	@ 0x3c
 80050b0:	3304      	adds	r3, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a0c      	ldr	r2, [pc, #48]	@ (80050fc <PCD_EP_OutSetupPacket_int+0x64>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d90e      	bls.n	80050ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d009      	beq.n	80050ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e4:	461a      	mov	r2, r3
 80050e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f007 fff9 	bl	800d0e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	4f54300a 	.word	0x4f54300a

08005100 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
 800510c:	4613      	mov	r3, r2
 800510e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005116:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d107      	bne.n	800512e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800511e:	883b      	ldrh	r3, [r7, #0]
 8005120:	0419      	lsls	r1, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	430a      	orrs	r2, r1
 800512a:	629a      	str	r2, [r3, #40]	@ 0x28
 800512c:	e028      	b.n	8005180 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	4413      	add	r3, r2
 800513a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800513c:	2300      	movs	r3, #0
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	e00d      	b.n	800515e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	3340      	adds	r3, #64	@ 0x40
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	4413      	add	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	3301      	adds	r3, #1
 800515c:	73fb      	strb	r3, [r7, #15]
 800515e:	7bfa      	ldrb	r2, [r7, #15]
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	3b01      	subs	r3, #1
 8005164:	429a      	cmp	r2, r3
 8005166:	d3ec      	bcc.n	8005142 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005168:	883b      	ldrh	r3, [r7, #0]
 800516a:	0418      	lsls	r0, r3, #16
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6819      	ldr	r1, [r3, #0]
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	3b01      	subs	r3, #1
 8005174:	68ba      	ldr	r2, [r7, #8]
 8005176:	4302      	orrs	r2, r0
 8005178:	3340      	adds	r3, #64	@ 0x40
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	460b      	mov	r3, r1
 8005198:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	887a      	ldrh	r2, [r7, #2]
 80051a0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051e2:	f043 0303 	orr.w	r3, r3, #3
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005234 <HAL_PWREx_GetVoltageRange+0x3c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005208:	d102      	bne.n	8005210 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800520a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800520e:	e00b      	b.n	8005228 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005210:	4b08      	ldr	r3, [pc, #32]	@ (8005234 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800521e:	d102      	bne.n	8005226 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005224:	e000      	b.n	8005228 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005226:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005228:	4618      	mov	r0, r3
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40007000 	.word	0x40007000

08005238 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d141      	bne.n	80052ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005246:	4b4b      	ldr	r3, [pc, #300]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800524e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005252:	d131      	bne.n	80052b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005254:	4b47      	ldr	r3, [pc, #284]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800525a:	4a46      	ldr	r2, [pc, #280]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005260:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005264:	4b43      	ldr	r3, [pc, #268]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800526c:	4a41      	ldr	r2, [pc, #260]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005272:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005274:	4b40      	ldr	r3, [pc, #256]	@ (8005378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2232      	movs	r2, #50	@ 0x32
 800527a:	fb02 f303 	mul.w	r3, r2, r3
 800527e:	4a3f      	ldr	r2, [pc, #252]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005280:	fba2 2303 	umull	r2, r3, r2, r3
 8005284:	0c9b      	lsrs	r3, r3, #18
 8005286:	3301      	adds	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800528a:	e002      	b.n	8005292 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3b01      	subs	r3, #1
 8005290:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005292:	4b38      	ldr	r3, [pc, #224]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800529a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529e:	d102      	bne.n	80052a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f2      	bne.n	800528c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052a6:	4b33      	ldr	r3, [pc, #204]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052b2:	d158      	bne.n	8005366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e057      	b.n	8005368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052be:	4a2d      	ldr	r2, [pc, #180]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052c8:	e04d      	b.n	8005366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052d0:	d141      	bne.n	8005356 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052d2:	4b28      	ldr	r3, [pc, #160]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052de:	d131      	bne.n	8005344 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052e0:	4b24      	ldr	r3, [pc, #144]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e6:	4a23      	ldr	r2, [pc, #140]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052f0:	4b20      	ldr	r3, [pc, #128]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052f8:	4a1e      	ldr	r2, [pc, #120]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005300:	4b1d      	ldr	r3, [pc, #116]	@ (8005378 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2232      	movs	r2, #50	@ 0x32
 8005306:	fb02 f303 	mul.w	r3, r2, r3
 800530a:	4a1c      	ldr	r2, [pc, #112]	@ (800537c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	0c9b      	lsrs	r3, r3, #18
 8005312:	3301      	adds	r3, #1
 8005314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005316:	e002      	b.n	800531e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3b01      	subs	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800531e:	4b15      	ldr	r3, [pc, #84]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800532a:	d102      	bne.n	8005332 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f2      	bne.n	8005318 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005332:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800533a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800533e:	d112      	bne.n	8005366 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e011      	b.n	8005368 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005344:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005346:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800534a:	4a0a      	ldr	r2, [pc, #40]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005350:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005354:	e007      	b.n	8005366 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005356:	4b07      	ldr	r3, [pc, #28]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800535e:	4a05      	ldr	r2, [pc, #20]	@ (8005374 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005364:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	40007000 	.word	0x40007000
 8005378:	20000000 	.word	0x20000000
 800537c:	431bde83 	.word	0x431bde83

08005380 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005380:	b480      	push	{r7}
 8005382:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005384:	4b05      	ldr	r3, [pc, #20]	@ (800539c <HAL_PWREx_EnableVddUSB+0x1c>)
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	4a04      	ldr	r2, [pc, #16]	@ (800539c <HAL_PWREx_EnableVddUSB+0x1c>)
 800538a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800538e:	6053      	str	r3, [r2, #4]
}
 8005390:	bf00      	nop
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40007000 	.word	0x40007000

080053a0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80053a4:	4b05      	ldr	r3, [pc, #20]	@ (80053bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4a04      	ldr	r2, [pc, #16]	@ (80053bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80053aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80053ae:	6053      	str	r3, [r2, #4]
}
 80053b0:	bf00      	nop
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40007000 	.word	0x40007000

080053c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d102      	bne.n	80053d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	f000 bc08 	b.w	8005be4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d4:	4b96      	ldr	r3, [pc, #600]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 030c 	and.w	r3, r3, #12
 80053dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053de:	4b94      	ldr	r3, [pc, #592]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80e4 	beq.w	80055be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d007      	beq.n	800540c <HAL_RCC_OscConfig+0x4c>
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b0c      	cmp	r3, #12
 8005400:	f040 808b 	bne.w	800551a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b01      	cmp	r3, #1
 8005408:	f040 8087 	bne.w	800551a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800540c:	4b88      	ldr	r3, [pc, #544]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_RCC_OscConfig+0x64>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e3df      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1a      	ldr	r2, [r3, #32]
 8005428:	4b81      	ldr	r3, [pc, #516]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d004      	beq.n	800543e <HAL_RCC_OscConfig+0x7e>
 8005434:	4b7e      	ldr	r3, [pc, #504]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800543c:	e005      	b.n	800544a <HAL_RCC_OscConfig+0x8a>
 800543e:	4b7c      	ldr	r3, [pc, #496]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800544a:	4293      	cmp	r3, r2
 800544c:	d223      	bcs.n	8005496 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fdcc 	bl	8005ff0 <RCC_SetFlashLatencyFromMSIRange>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e3c0      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005462:	4b73      	ldr	r3, [pc, #460]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a72      	ldr	r2, [pc, #456]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005468:	f043 0308 	orr.w	r3, r3, #8
 800546c:	6013      	str	r3, [r2, #0]
 800546e:	4b70      	ldr	r3, [pc, #448]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	496d      	ldr	r1, [pc, #436]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 800547c:	4313      	orrs	r3, r2
 800547e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005480:	4b6b      	ldr	r3, [pc, #428]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	4968      	ldr	r1, [pc, #416]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005490:	4313      	orrs	r3, r2
 8005492:	604b      	str	r3, [r1, #4]
 8005494:	e025      	b.n	80054e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005496:	4b66      	ldr	r3, [pc, #408]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a65      	ldr	r2, [pc, #404]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 800549c:	f043 0308 	orr.w	r3, r3, #8
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	4b63      	ldr	r3, [pc, #396]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	4960      	ldr	r1, [pc, #384]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054b4:	4b5e      	ldr	r3, [pc, #376]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	021b      	lsls	r3, r3, #8
 80054c2:	495b      	ldr	r1, [pc, #364]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fd8c 	bl	8005ff0 <RCC_SetFlashLatencyFromMSIRange>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e380      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80054e2:	f000 fcc1 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 80054e6:	4602      	mov	r2, r0
 80054e8:	4b51      	ldr	r3, [pc, #324]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 030f 	and.w	r3, r3, #15
 80054f2:	4950      	ldr	r1, [pc, #320]	@ (8005634 <HAL_RCC_OscConfig+0x274>)
 80054f4:	5ccb      	ldrb	r3, [r1, r3]
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	fa22 f303 	lsr.w	r3, r2, r3
 80054fe:	4a4e      	ldr	r2, [pc, #312]	@ (8005638 <HAL_RCC_OscConfig+0x278>)
 8005500:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005502:	4b4e      	ldr	r3, [pc, #312]	@ (800563c <HAL_RCC_OscConfig+0x27c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4618      	mov	r0, r3
 8005508:	f7fc fa10 	bl	800192c <HAL_InitTick>
 800550c:	4603      	mov	r3, r0
 800550e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005510:	7bfb      	ldrb	r3, [r7, #15]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d052      	beq.n	80055bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	e364      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d032      	beq.n	8005588 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005522:	4b43      	ldr	r3, [pc, #268]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a42      	ldr	r2, [pc, #264]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800552e:	f7fc fa4d 	bl	80019cc <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005536:	f7fc fa49 	bl	80019cc <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e34d      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005548:	4b39      	ldr	r3, [pc, #228]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005554:	4b36      	ldr	r3, [pc, #216]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a35      	ldr	r2, [pc, #212]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 800555a:	f043 0308 	orr.w	r3, r3, #8
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	4b33      	ldr	r3, [pc, #204]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	4930      	ldr	r1, [pc, #192]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 800556e:	4313      	orrs	r3, r2
 8005570:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005572:	4b2f      	ldr	r3, [pc, #188]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	492b      	ldr	r1, [pc, #172]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005582:	4313      	orrs	r3, r2
 8005584:	604b      	str	r3, [r1, #4]
 8005586:	e01a      	b.n	80055be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005588:	4b29      	ldr	r3, [pc, #164]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a28      	ldr	r2, [pc, #160]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 800558e:	f023 0301 	bic.w	r3, r3, #1
 8005592:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005594:	f7fc fa1a 	bl	80019cc <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800559c:	f7fc fa16 	bl	80019cc <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e31a      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055ae:	4b20      	ldr	r3, [pc, #128]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x1dc>
 80055ba:	e000      	b.n	80055be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d073      	beq.n	80056b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d005      	beq.n	80055dc <HAL_RCC_OscConfig+0x21c>
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b0c      	cmp	r3, #12
 80055d4:	d10e      	bne.n	80055f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d10b      	bne.n	80055f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055dc:	4b14      	ldr	r3, [pc, #80]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d063      	beq.n	80056b0 <HAL_RCC_OscConfig+0x2f0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d15f      	bne.n	80056b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e2f7      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055fc:	d106      	bne.n	800560c <HAL_RCC_OscConfig+0x24c>
 80055fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a0b      	ldr	r2, [pc, #44]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005608:	6013      	str	r3, [r2, #0]
 800560a:	e025      	b.n	8005658 <HAL_RCC_OscConfig+0x298>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005614:	d114      	bne.n	8005640 <HAL_RCC_OscConfig+0x280>
 8005616:	4b06      	ldr	r3, [pc, #24]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a05      	ldr	r2, [pc, #20]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 800561c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	4b03      	ldr	r3, [pc, #12]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a02      	ldr	r2, [pc, #8]	@ (8005630 <HAL_RCC_OscConfig+0x270>)
 8005628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e013      	b.n	8005658 <HAL_RCC_OscConfig+0x298>
 8005630:	40021000 	.word	0x40021000
 8005634:	0800d91c 	.word	0x0800d91c
 8005638:	20000000 	.word	0x20000000
 800563c:	20000004 	.word	0x20000004
 8005640:	4ba0      	ldr	r3, [pc, #640]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a9f      	ldr	r2, [pc, #636]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	4b9d      	ldr	r3, [pc, #628]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a9c      	ldr	r2, [pc, #624]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d013      	beq.n	8005688 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005660:	f7fc f9b4 	bl	80019cc <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005668:	f7fc f9b0 	bl	80019cc <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	@ 0x64
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e2b4      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800567a:	4b92      	ldr	r3, [pc, #584]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0x2a8>
 8005686:	e014      	b.n	80056b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005688:	f7fc f9a0 	bl	80019cc <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005690:	f7fc f99c 	bl	80019cc <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b64      	cmp	r3, #100	@ 0x64
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e2a0      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056a2:	4b88      	ldr	r3, [pc, #544]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x2d0>
 80056ae:	e000      	b.n	80056b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d060      	beq.n	8005780 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d005      	beq.n	80056d0 <HAL_RCC_OscConfig+0x310>
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b0c      	cmp	r3, #12
 80056c8:	d119      	bne.n	80056fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d116      	bne.n	80056fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d0:	4b7c      	ldr	r3, [pc, #496]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_OscConfig+0x328>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e27d      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e8:	4b76      	ldr	r3, [pc, #472]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	061b      	lsls	r3, r3, #24
 80056f6:	4973      	ldr	r1, [pc, #460]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056fc:	e040      	b.n	8005780 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d023      	beq.n	800574e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005706:	4b6f      	ldr	r3, [pc, #444]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a6e      	ldr	r2, [pc, #440]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 800570c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005712:	f7fc f95b 	bl	80019cc <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800571a:	f7fc f957 	bl	80019cc <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e25b      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800572c:	4b65      	ldr	r3, [pc, #404]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005738:	4b62      	ldr	r3, [pc, #392]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	061b      	lsls	r3, r3, #24
 8005746:	495f      	ldr	r1, [pc, #380]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005748:	4313      	orrs	r3, r2
 800574a:	604b      	str	r3, [r1, #4]
 800574c:	e018      	b.n	8005780 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800574e:	4b5d      	ldr	r3, [pc, #372]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a5c      	ldr	r2, [pc, #368]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005754:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575a:	f7fc f937 	bl	80019cc <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005762:	f7fc f933 	bl	80019cc <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e237      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005774:	4b53      	ldr	r3, [pc, #332]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1f0      	bne.n	8005762 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d03c      	beq.n	8005806 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01c      	beq.n	80057ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005794:	4b4b      	ldr	r3, [pc, #300]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800579a:	4a4a      	ldr	r2, [pc, #296]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a4:	f7fc f912 	bl	80019cc <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ac:	f7fc f90e 	bl	80019cc <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e212      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057be:	4b41      	ldr	r3, [pc, #260]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 80057c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0ef      	beq.n	80057ac <HAL_RCC_OscConfig+0x3ec>
 80057cc:	e01b      	b.n	8005806 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ce:	4b3d      	ldr	r3, [pc, #244]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 80057d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057d4:	4a3b      	ldr	r2, [pc, #236]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057de:	f7fc f8f5 	bl	80019cc <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057e4:	e008      	b.n	80057f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e6:	f7fc f8f1 	bl	80019cc <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d901      	bls.n	80057f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e1f5      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057f8:	4b32      	ldr	r3, [pc, #200]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 80057fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1ef      	bne.n	80057e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 80a6 	beq.w	8005960 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005814:	2300      	movs	r3, #0
 8005816:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005818:	4b2a      	ldr	r3, [pc, #168]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 800581a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10d      	bne.n	8005840 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005824:	4b27      	ldr	r3, [pc, #156]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005828:	4a26      	ldr	r2, [pc, #152]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 800582a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800582e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005830:	4b24      	ldr	r3, [pc, #144]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005838:	60bb      	str	r3, [r7, #8]
 800583a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800583c:	2301      	movs	r3, #1
 800583e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005840:	4b21      	ldr	r3, [pc, #132]	@ (80058c8 <HAL_RCC_OscConfig+0x508>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d118      	bne.n	800587e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800584c:	4b1e      	ldr	r3, [pc, #120]	@ (80058c8 <HAL_RCC_OscConfig+0x508>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1d      	ldr	r2, [pc, #116]	@ (80058c8 <HAL_RCC_OscConfig+0x508>)
 8005852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005856:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005858:	f7fc f8b8 	bl	80019cc <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005860:	f7fc f8b4 	bl	80019cc <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e1b8      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005872:	4b15      	ldr	r3, [pc, #84]	@ (80058c8 <HAL_RCC_OscConfig+0x508>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d108      	bne.n	8005898 <HAL_RCC_OscConfig+0x4d8>
 8005886:	4b0f      	ldr	r3, [pc, #60]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800588c:	4a0d      	ldr	r2, [pc, #52]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005896:	e029      	b.n	80058ec <HAL_RCC_OscConfig+0x52c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b05      	cmp	r3, #5
 800589e:	d115      	bne.n	80058cc <HAL_RCC_OscConfig+0x50c>
 80058a0:	4b08      	ldr	r3, [pc, #32]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 80058a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058a6:	4a07      	ldr	r2, [pc, #28]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 80058a8:	f043 0304 	orr.w	r3, r3, #4
 80058ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058b0:	4b04      	ldr	r3, [pc, #16]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b6:	4a03      	ldr	r2, [pc, #12]	@ (80058c4 <HAL_RCC_OscConfig+0x504>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058c0:	e014      	b.n	80058ec <HAL_RCC_OscConfig+0x52c>
 80058c2:	bf00      	nop
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40007000 	.word	0x40007000
 80058cc:	4b9d      	ldr	r3, [pc, #628]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058d2:	4a9c      	ldr	r2, [pc, #624]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 80058d4:	f023 0301 	bic.w	r3, r3, #1
 80058d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058dc:	4b99      	ldr	r3, [pc, #612]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 80058de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058e2:	4a98      	ldr	r2, [pc, #608]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 80058e4:	f023 0304 	bic.w	r3, r3, #4
 80058e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d016      	beq.n	8005922 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f4:	f7fc f86a 	bl	80019cc <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058fa:	e00a      	b.n	8005912 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058fc:	f7fc f866 	bl	80019cc <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800590a:	4293      	cmp	r3, r2
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e168      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005912:	4b8c      	ldr	r3, [pc, #560]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0ed      	beq.n	80058fc <HAL_RCC_OscConfig+0x53c>
 8005920:	e015      	b.n	800594e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005922:	f7fc f853 	bl	80019cc <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005928:	e00a      	b.n	8005940 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592a:	f7fc f84f 	bl	80019cc <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005938:	4293      	cmp	r3, r2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e151      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005940:	4b80      	ldr	r3, [pc, #512]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1ed      	bne.n	800592a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800594e:	7ffb      	ldrb	r3, [r7, #31]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d105      	bne.n	8005960 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005954:	4b7b      	ldr	r3, [pc, #492]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005958:	4a7a      	ldr	r2, [pc, #488]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 800595a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800595e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d03c      	beq.n	80059e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01c      	beq.n	80059ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005974:	4b73      	ldr	r3, [pc, #460]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005976:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800597a:	4a72      	ldr	r2, [pc, #456]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 800597c:	f043 0301 	orr.w	r3, r3, #1
 8005980:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005984:	f7fc f822 	bl	80019cc <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800598c:	f7fc f81e 	bl	80019cc <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e122      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800599e:	4b69      	ldr	r3, [pc, #420]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 80059a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0ef      	beq.n	800598c <HAL_RCC_OscConfig+0x5cc>
 80059ac:	e01b      	b.n	80059e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059ae:	4b65      	ldr	r3, [pc, #404]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 80059b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059b4:	4a63      	ldr	r2, [pc, #396]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059be:	f7fc f805 	bl	80019cc <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059c6:	f7fc f801 	bl	80019cc <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e105      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 80059da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1ef      	bne.n	80059c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 80f9 	beq.w	8005be2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	f040 80cf 	bne.w	8005b98 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059fa:	4b52      	ldr	r3, [pc, #328]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f003 0203 	and.w	r2, r3, #3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d12c      	bne.n	8005a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d123      	bne.n	8005a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d11b      	bne.n	8005a68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d113      	bne.n	8005a68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a4a:	085b      	lsrs	r3, r3, #1
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d109      	bne.n	8005a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	085b      	lsrs	r3, r3, #1
 8005a60:	3b01      	subs	r3, #1
 8005a62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d071      	beq.n	8005b4c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	2b0c      	cmp	r3, #12
 8005a6c:	d068      	beq.n	8005b40 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a6e:	4b35      	ldr	r3, [pc, #212]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d105      	bne.n	8005a86 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005a7a:	4b32      	ldr	r3, [pc, #200]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e0ac      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005a90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a96:	f7fb ff99 	bl	80019cc <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a9e:	f7fb ff95 	bl	80019cc <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e099      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ab0:	4b24      	ldr	r3, [pc, #144]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1f0      	bne.n	8005a9e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005abc:	4b21      	ldr	r3, [pc, #132]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	4b21      	ldr	r3, [pc, #132]	@ (8005b48 <HAL_RCC_OscConfig+0x788>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005acc:	3a01      	subs	r2, #1
 8005ace:	0112      	lsls	r2, r2, #4
 8005ad0:	4311      	orrs	r1, r2
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ad6:	0212      	lsls	r2, r2, #8
 8005ad8:	4311      	orrs	r1, r2
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005ade:	0852      	lsrs	r2, r2, #1
 8005ae0:	3a01      	subs	r2, #1
 8005ae2:	0552      	lsls	r2, r2, #21
 8005ae4:	4311      	orrs	r1, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005aea:	0852      	lsrs	r2, r2, #1
 8005aec:	3a01      	subs	r2, #1
 8005aee:	0652      	lsls	r2, r2, #25
 8005af0:	4311      	orrs	r1, r2
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005af6:	06d2      	lsls	r2, r2, #27
 8005af8:	430a      	orrs	r2, r1
 8005afa:	4912      	ldr	r1, [pc, #72]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b00:	4b10      	ldr	r3, [pc, #64]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a0f      	ldr	r2, [pc, #60]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4a0c      	ldr	r2, [pc, #48]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b18:	f7fb ff58 	bl	80019cc <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b20:	f7fb ff54 	bl	80019cc <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e058      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b32:	4b04      	ldr	r3, [pc, #16]	@ (8005b44 <HAL_RCC_OscConfig+0x784>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0f0      	beq.n	8005b20 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b3e:	e050      	b.n	8005be2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e04f      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
 8005b44:	40021000 	.word	0x40021000
 8005b48:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b4c:	4b27      	ldr	r3, [pc, #156]	@ (8005bec <HAL_RCC_OscConfig+0x82c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d144      	bne.n	8005be2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b58:	4b24      	ldr	r3, [pc, #144]	@ (8005bec <HAL_RCC_OscConfig+0x82c>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a23      	ldr	r2, [pc, #140]	@ (8005bec <HAL_RCC_OscConfig+0x82c>)
 8005b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b64:	4b21      	ldr	r3, [pc, #132]	@ (8005bec <HAL_RCC_OscConfig+0x82c>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	4a20      	ldr	r2, [pc, #128]	@ (8005bec <HAL_RCC_OscConfig+0x82c>)
 8005b6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b70:	f7fb ff2c 	bl	80019cc <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b78:	f7fb ff28 	bl	80019cc <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e02c      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b8a:	4b18      	ldr	r3, [pc, #96]	@ (8005bec <HAL_RCC_OscConfig+0x82c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0f0      	beq.n	8005b78 <HAL_RCC_OscConfig+0x7b8>
 8005b96:	e024      	b.n	8005be2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2b0c      	cmp	r3, #12
 8005b9c:	d01f      	beq.n	8005bde <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9e:	4b13      	ldr	r3, [pc, #76]	@ (8005bec <HAL_RCC_OscConfig+0x82c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a12      	ldr	r2, [pc, #72]	@ (8005bec <HAL_RCC_OscConfig+0x82c>)
 8005ba4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005baa:	f7fb ff0f 	bl	80019cc <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb2:	f7fb ff0b 	bl	80019cc <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e00f      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc4:	4b09      	ldr	r3, [pc, #36]	@ (8005bec <HAL_RCC_OscConfig+0x82c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1f0      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005bd0:	4b06      	ldr	r3, [pc, #24]	@ (8005bec <HAL_RCC_OscConfig+0x82c>)
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	4905      	ldr	r1, [pc, #20]	@ (8005bec <HAL_RCC_OscConfig+0x82c>)
 8005bd6:	4b06      	ldr	r3, [pc, #24]	@ (8005bf0 <HAL_RCC_OscConfig+0x830>)
 8005bd8:	4013      	ands	r3, r2
 8005bda:	60cb      	str	r3, [r1, #12]
 8005bdc:	e001      	b.n	8005be2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e000      	b.n	8005be4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	feeefffc 	.word	0xfeeefffc

08005bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e11d      	b.n	8005e48 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c0c:	4b90      	ldr	r3, [pc, #576]	@ (8005e50 <HAL_RCC_ClockConfig+0x25c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 030f 	and.w	r3, r3, #15
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d910      	bls.n	8005c3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8005e50 <HAL_RCC_ClockConfig+0x25c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f023 020f 	bic.w	r2, r3, #15
 8005c22:	498b      	ldr	r1, [pc, #556]	@ (8005e50 <HAL_RCC_ClockConfig+0x25c>)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2a:	4b89      	ldr	r3, [pc, #548]	@ (8005e50 <HAL_RCC_ClockConfig+0x25c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d001      	beq.n	8005c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e105      	b.n	8005e48 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d010      	beq.n	8005c6a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	4b81      	ldr	r3, [pc, #516]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d908      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c58:	4b7e      	ldr	r3, [pc, #504]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	497b      	ldr	r1, [pc, #492]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d079      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d11e      	bne.n	8005cbc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c7e:	4b75      	ldr	r3, [pc, #468]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e0dc      	b.n	8005e48 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005c8e:	f000 fa09 	bl	80060a4 <RCC_GetSysClockFreqFromPLLSource>
 8005c92:	4603      	mov	r3, r0
 8005c94:	4a70      	ldr	r2, [pc, #448]	@ (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d946      	bls.n	8005d28 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005c9a:	4b6e      	ldr	r3, [pc, #440]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d140      	bne.n	8005d28 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ca6:	4b6b      	ldr	r3, [pc, #428]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005cae:	4a69      	ldr	r2, [pc, #420]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005cb6:	2380      	movs	r3, #128	@ 0x80
 8005cb8:	617b      	str	r3, [r7, #20]
 8005cba:	e035      	b.n	8005d28 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d107      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cc4:	4b63      	ldr	r3, [pc, #396]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d115      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0b9      	b.n	8005e48 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d107      	bne.n	8005cec <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005cdc:	4b5d      	ldr	r3, [pc, #372]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0ad      	b.n	8005e48 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cec:	4b59      	ldr	r3, [pc, #356]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0a5      	b.n	8005e48 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005cfc:	f000 f8b4 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 8005d00:	4603      	mov	r3, r0
 8005d02:	4a55      	ldr	r2, [pc, #340]	@ (8005e58 <HAL_RCC_ClockConfig+0x264>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d90f      	bls.n	8005d28 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005d08:	4b52      	ldr	r3, [pc, #328]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d14:	4b4f      	ldr	r3, [pc, #316]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d22:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d24:	2380      	movs	r3, #128	@ 0x80
 8005d26:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d28:	4b4a      	ldr	r3, [pc, #296]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f023 0203 	bic.w	r2, r3, #3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	4947      	ldr	r1, [pc, #284]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3a:	f7fb fe47 	bl	80019cc <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d40:	e00a      	b.n	8005d58 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d42:	f7fb fe43 	bl	80019cc <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e077      	b.n	8005e48 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d58:	4b3e      	ldr	r3, [pc, #248]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 020c 	and.w	r2, r3, #12
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d1eb      	bne.n	8005d42 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b80      	cmp	r3, #128	@ 0x80
 8005d6e:	d105      	bne.n	8005d7c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d70:	4b38      	ldr	r3, [pc, #224]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	4a37      	ldr	r2, [pc, #220]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005d76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d7a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d010      	beq.n	8005daa <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	4b31      	ldr	r3, [pc, #196]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d208      	bcs.n	8005daa <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d98:	4b2e      	ldr	r3, [pc, #184]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	492b      	ldr	r1, [pc, #172]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005daa:	4b29      	ldr	r3, [pc, #164]	@ (8005e50 <HAL_RCC_ClockConfig+0x25c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d210      	bcs.n	8005dda <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005db8:	4b25      	ldr	r3, [pc, #148]	@ (8005e50 <HAL_RCC_ClockConfig+0x25c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f023 020f 	bic.w	r2, r3, #15
 8005dc0:	4923      	ldr	r1, [pc, #140]	@ (8005e50 <HAL_RCC_ClockConfig+0x25c>)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc8:	4b21      	ldr	r3, [pc, #132]	@ (8005e50 <HAL_RCC_ClockConfig+0x25c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d001      	beq.n	8005dda <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e036      	b.n	8005e48 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d008      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de6:	4b1b      	ldr	r3, [pc, #108]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	4918      	ldr	r1, [pc, #96]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0308 	and.w	r3, r3, #8
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d009      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e04:	4b13      	ldr	r3, [pc, #76]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4910      	ldr	r1, [pc, #64]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e18:	f000 f826 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e54 <HAL_RCC_ClockConfig+0x260>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	091b      	lsrs	r3, r3, #4
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	490c      	ldr	r1, [pc, #48]	@ (8005e5c <HAL_RCC_ClockConfig+0x268>)
 8005e2a:	5ccb      	ldrb	r3, [r1, r3]
 8005e2c:	f003 031f 	and.w	r3, r3, #31
 8005e30:	fa22 f303 	lsr.w	r3, r2, r3
 8005e34:	4a0a      	ldr	r2, [pc, #40]	@ (8005e60 <HAL_RCC_ClockConfig+0x26c>)
 8005e36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e38:	4b0a      	ldr	r3, [pc, #40]	@ (8005e64 <HAL_RCC_ClockConfig+0x270>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fb fd75 	bl	800192c <HAL_InitTick>
 8005e42:	4603      	mov	r3, r0
 8005e44:	73fb      	strb	r3, [r7, #15]

  return status;
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40022000 	.word	0x40022000
 8005e54:	40021000 	.word	0x40021000
 8005e58:	04c4b400 	.word	0x04c4b400
 8005e5c:	0800d91c 	.word	0x0800d91c
 8005e60:	20000000 	.word	0x20000000
 8005e64:	20000004 	.word	0x20000004

08005e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b089      	sub	sp, #36	@ 0x24
 8005e6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	61fb      	str	r3, [r7, #28]
 8005e72:	2300      	movs	r3, #0
 8005e74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e76:	4b3e      	ldr	r3, [pc, #248]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
 8005e7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e80:	4b3b      	ldr	r3, [pc, #236]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <HAL_RCC_GetSysClockFreq+0x34>
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	2b0c      	cmp	r3, #12
 8005e94:	d121      	bne.n	8005eda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d11e      	bne.n	8005eda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e9c:	4b34      	ldr	r3, [pc, #208]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f003 0308 	and.w	r3, r3, #8
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d107      	bne.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ea8:	4b31      	ldr	r3, [pc, #196]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eae:	0a1b      	lsrs	r3, r3, #8
 8005eb0:	f003 030f 	and.w	r3, r3, #15
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	e005      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005eb8:	4b2d      	ldr	r3, [pc, #180]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	091b      	lsrs	r3, r3, #4
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8005f74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ecc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10d      	bne.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ed8:	e00a      	b.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d102      	bne.n	8005ee6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ee0:	4b25      	ldr	r3, [pc, #148]	@ (8005f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	e004      	b.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005eec:	4b23      	ldr	r3, [pc, #140]	@ (8005f7c <HAL_RCC_GetSysClockFreq+0x114>)
 8005eee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b0c      	cmp	r3, #12
 8005ef4:	d134      	bne.n	8005f60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d003      	beq.n	8005f0e <HAL_RCC_GetSysClockFreq+0xa6>
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d003      	beq.n	8005f14 <HAL_RCC_GetSysClockFreq+0xac>
 8005f0c:	e005      	b.n	8005f1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8005f78 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f10:	617b      	str	r3, [r7, #20]
      break;
 8005f12:	e005      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f14:	4b19      	ldr	r3, [pc, #100]	@ (8005f7c <HAL_RCC_GetSysClockFreq+0x114>)
 8005f16:	617b      	str	r3, [r7, #20]
      break;
 8005f18:	e002      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	617b      	str	r3, [r7, #20]
      break;
 8005f1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f20:	4b13      	ldr	r3, [pc, #76]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	091b      	lsrs	r3, r3, #4
 8005f26:	f003 030f 	and.w	r3, r3, #15
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f2e:	4b10      	ldr	r3, [pc, #64]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	0a1b      	lsrs	r3, r3, #8
 8005f34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	fb03 f202 	mul.w	r2, r3, r2
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f46:	4b0a      	ldr	r3, [pc, #40]	@ (8005f70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	0e5b      	lsrs	r3, r3, #25
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	3301      	adds	r3, #1
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f60:	69bb      	ldr	r3, [r7, #24]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3724      	adds	r7, #36	@ 0x24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40021000 	.word	0x40021000
 8005f74:	0800d934 	.word	0x0800d934
 8005f78:	00f42400 	.word	0x00f42400
 8005f7c:	007a1200 	.word	0x007a1200

08005f80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f84:	4b03      	ldr	r3, [pc, #12]	@ (8005f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f86:	681b      	ldr	r3, [r3, #0]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20000000 	.word	0x20000000

08005f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f9c:	f7ff fff0 	bl	8005f80 <HAL_RCC_GetHCLKFreq>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	4b06      	ldr	r3, [pc, #24]	@ (8005fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	4904      	ldr	r1, [pc, #16]	@ (8005fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fae:	5ccb      	ldrb	r3, [r1, r3]
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40021000 	.word	0x40021000
 8005fc0:	0800d92c 	.word	0x0800d92c

08005fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fc8:	f7ff ffda 	bl	8005f80 <HAL_RCC_GetHCLKFreq>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	4b06      	ldr	r3, [pc, #24]	@ (8005fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	0adb      	lsrs	r3, r3, #11
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	4904      	ldr	r1, [pc, #16]	@ (8005fec <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fda:	5ccb      	ldrb	r3, [r1, r3]
 8005fdc:	f003 031f 	and.w	r3, r3, #31
 8005fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	0800d92c 	.word	0x0800d92c

08005ff0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ffc:	4b27      	ldr	r3, [pc, #156]	@ (800609c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006008:	f7ff f8f6 	bl	80051f8 <HAL_PWREx_GetVoltageRange>
 800600c:	6178      	str	r0, [r7, #20]
 800600e:	e014      	b.n	800603a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006010:	4b22      	ldr	r3, [pc, #136]	@ (800609c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006014:	4a21      	ldr	r2, [pc, #132]	@ (800609c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800601a:	6593      	str	r3, [r2, #88]	@ 0x58
 800601c:	4b1f      	ldr	r3, [pc, #124]	@ (800609c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800601e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006028:	f7ff f8e6 	bl	80051f8 <HAL_PWREx_GetVoltageRange>
 800602c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800602e:	4b1b      	ldr	r3, [pc, #108]	@ (800609c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006032:	4a1a      	ldr	r2, [pc, #104]	@ (800609c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006034:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006038:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006040:	d10b      	bne.n	800605a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b80      	cmp	r3, #128	@ 0x80
 8006046:	d913      	bls.n	8006070 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2ba0      	cmp	r3, #160	@ 0xa0
 800604c:	d902      	bls.n	8006054 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800604e:	2302      	movs	r3, #2
 8006050:	613b      	str	r3, [r7, #16]
 8006052:	e00d      	b.n	8006070 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006054:	2301      	movs	r3, #1
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	e00a      	b.n	8006070 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b7f      	cmp	r3, #127	@ 0x7f
 800605e:	d902      	bls.n	8006066 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006060:	2302      	movs	r3, #2
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	e004      	b.n	8006070 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b70      	cmp	r3, #112	@ 0x70
 800606a:	d101      	bne.n	8006070 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800606c:	2301      	movs	r3, #1
 800606e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006070:	4b0b      	ldr	r3, [pc, #44]	@ (80060a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f023 020f 	bic.w	r2, r3, #15
 8006078:	4909      	ldr	r1, [pc, #36]	@ (80060a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006080:	4b07      	ldr	r3, [pc, #28]	@ (80060a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	429a      	cmp	r2, r3
 800608c:	d001      	beq.n	8006092 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	40021000 	.word	0x40021000
 80060a0:	40022000 	.word	0x40022000

080060a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060aa:	4b2d      	ldr	r3, [pc, #180]	@ (8006160 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d00b      	beq.n	80060d2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d825      	bhi.n	800610c <RCC_GetSysClockFreqFromPLLSource+0x68>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d008      	beq.n	80060d8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d11f      	bne.n	800610c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80060cc:	4b25      	ldr	r3, [pc, #148]	@ (8006164 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80060ce:	613b      	str	r3, [r7, #16]
    break;
 80060d0:	e01f      	b.n	8006112 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80060d2:	4b25      	ldr	r3, [pc, #148]	@ (8006168 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80060d4:	613b      	str	r3, [r7, #16]
    break;
 80060d6:	e01c      	b.n	8006112 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80060d8:	4b21      	ldr	r3, [pc, #132]	@ (8006160 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d107      	bne.n	80060f4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80060e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006160 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ea:	0a1b      	lsrs	r3, r3, #8
 80060ec:	f003 030f 	and.w	r3, r3, #15
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	e005      	b.n	8006100 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80060f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006160 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006100:	4a1a      	ldr	r2, [pc, #104]	@ (800616c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006108:	613b      	str	r3, [r7, #16]
    break;
 800610a:	e002      	b.n	8006112 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	613b      	str	r3, [r7, #16]
    break;
 8006110:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006112:	4b13      	ldr	r3, [pc, #76]	@ (8006160 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	091b      	lsrs	r3, r3, #4
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	3301      	adds	r3, #1
 800611e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006120:	4b0f      	ldr	r3, [pc, #60]	@ (8006160 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	0a1b      	lsrs	r3, r3, #8
 8006126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	fb03 f202 	mul.w	r2, r3, r2
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	fbb2 f3f3 	udiv	r3, r2, r3
 8006136:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006138:	4b09      	ldr	r3, [pc, #36]	@ (8006160 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	0e5b      	lsrs	r3, r3, #25
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	3301      	adds	r3, #1
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006152:	683b      	ldr	r3, [r7, #0]
}
 8006154:	4618      	mov	r0, r3
 8006156:	371c      	adds	r7, #28
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	40021000 	.word	0x40021000
 8006164:	00f42400 	.word	0x00f42400
 8006168:	007a1200 	.word	0x007a1200
 800616c:	0800d934 	.word	0x0800d934

08006170 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006178:	2300      	movs	r3, #0
 800617a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800617c:	2300      	movs	r3, #0
 800617e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006188:	2b00      	cmp	r3, #0
 800618a:	d040      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006190:	2b80      	cmp	r3, #128	@ 0x80
 8006192:	d02a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006194:	2b80      	cmp	r3, #128	@ 0x80
 8006196:	d825      	bhi.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006198:	2b60      	cmp	r3, #96	@ 0x60
 800619a:	d026      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800619c:	2b60      	cmp	r3, #96	@ 0x60
 800619e:	d821      	bhi.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061a0:	2b40      	cmp	r3, #64	@ 0x40
 80061a2:	d006      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80061a4:	2b40      	cmp	r3, #64	@ 0x40
 80061a6:	d81d      	bhi.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d009      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d010      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80061b0:	e018      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80061b2:	4b89      	ldr	r3, [pc, #548]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	4a88      	ldr	r2, [pc, #544]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061bc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061be:	e015      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fb02 	bl	80067d0 <RCCEx_PLLSAI1_Config>
 80061cc:	4603      	mov	r3, r0
 80061ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061d0:	e00c      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3320      	adds	r3, #32
 80061d6:	2100      	movs	r1, #0
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fbed 	bl	80069b8 <RCCEx_PLLSAI2_Config>
 80061de:	4603      	mov	r3, r0
 80061e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80061e2:	e003      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	74fb      	strb	r3, [r7, #19]
      break;
 80061e8:	e000      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80061ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ec:	7cfb      	ldrb	r3, [r7, #19]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061f2:	4b79      	ldr	r3, [pc, #484]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80061f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061f8:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006200:	4975      	ldr	r1, [pc, #468]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006202:	4313      	orrs	r3, r2
 8006204:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006208:	e001      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620a:	7cfb      	ldrb	r3, [r7, #19]
 800620c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d047      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006222:	d030      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006228:	d82a      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800622a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800622e:	d02a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006230:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006234:	d824      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006236:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800623a:	d008      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800623c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006240:	d81e      	bhi.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006246:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800624a:	d010      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800624c:	e018      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800624e:	4b62      	ldr	r3, [pc, #392]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	4a61      	ldr	r2, [pc, #388]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006258:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800625a:	e015      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3304      	adds	r3, #4
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f000 fab4 	bl	80067d0 <RCCEx_PLLSAI1_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800626c:	e00c      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	3320      	adds	r3, #32
 8006272:	2100      	movs	r1, #0
 8006274:	4618      	mov	r0, r3
 8006276:	f000 fb9f 	bl	80069b8 <RCCEx_PLLSAI2_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800627e:	e003      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	74fb      	strb	r3, [r7, #19]
      break;
 8006284:	e000      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006288:	7cfb      	ldrb	r3, [r7, #19]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10b      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800628e:	4b52      	ldr	r3, [pc, #328]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006290:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006294:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800629c:	494e      	ldr	r1, [pc, #312]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80062a4:	e001      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a6:	7cfb      	ldrb	r3, [r7, #19]
 80062a8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 809f 	beq.w	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062b8:	2300      	movs	r3, #0
 80062ba:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062bc:	4b46      	ldr	r3, [pc, #280]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e000      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80062cc:	2300      	movs	r3, #0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00d      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d2:	4b41      	ldr	r3, [pc, #260]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d6:	4a40      	ldr	r2, [pc, #256]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80062de:	4b3e      	ldr	r3, [pc, #248]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062e6:	60bb      	str	r3, [r7, #8]
 80062e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ea:	2301      	movs	r3, #1
 80062ec:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062ee:	4b3b      	ldr	r3, [pc, #236]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a3a      	ldr	r2, [pc, #232]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80062f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062fa:	f7fb fb67 	bl	80019cc <HAL_GetTick>
 80062fe:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006300:	e009      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006302:	f7fb fb63 	bl	80019cc <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d902      	bls.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	74fb      	strb	r3, [r7, #19]
        break;
 8006314:	e005      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006316:	4b31      	ldr	r3, [pc, #196]	@ (80063dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0ef      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006322:	7cfb      	ldrb	r3, [r7, #19]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d15b      	bne.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006328:	4b2b      	ldr	r3, [pc, #172]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006332:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01f      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	429a      	cmp	r2, r3
 8006344:	d019      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006346:	4b24      	ldr	r3, [pc, #144]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006350:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006352:	4b21      	ldr	r3, [pc, #132]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006358:	4a1f      	ldr	r2, [pc, #124]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800635a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800635e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006362:	4b1d      	ldr	r3, [pc, #116]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006368:	4a1b      	ldr	r2, [pc, #108]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800636a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800636e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006372:	4a19      	ldr	r2, [pc, #100]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d016      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fb fb22 	bl	80019cc <HAL_GetTick>
 8006388:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800638a:	e00b      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800638c:	f7fb fb1e 	bl	80019cc <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800639a:	4293      	cmp	r3, r2
 800639c:	d902      	bls.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	74fb      	strb	r3, [r7, #19]
            break;
 80063a2:	e006      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063a4:	4b0c      	ldr	r3, [pc, #48]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0ec      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80063b2:	7cfb      	ldrb	r3, [r7, #19]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10c      	bne.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063b8:	4b07      	ldr	r3, [pc, #28]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c8:	4903      	ldr	r1, [pc, #12]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80063d0:	e008      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063d2:	7cfb      	ldrb	r3, [r7, #19]
 80063d4:	74bb      	strb	r3, [r7, #18]
 80063d6:	e005      	b.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80063d8:	40021000 	.word	0x40021000
 80063dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e0:	7cfb      	ldrb	r3, [r7, #19]
 80063e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063e4:	7c7b      	ldrb	r3, [r7, #17]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d105      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063ea:	4ba0      	ldr	r3, [pc, #640]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ee:	4a9f      	ldr	r2, [pc, #636]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006402:	4b9a      	ldr	r3, [pc, #616]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006408:	f023 0203 	bic.w	r2, r3, #3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006410:	4996      	ldr	r1, [pc, #600]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006424:	4b91      	ldr	r3, [pc, #580]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800642a:	f023 020c 	bic.w	r2, r3, #12
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	498e      	ldr	r1, [pc, #568]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006434:	4313      	orrs	r3, r2
 8006436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006446:	4b89      	ldr	r3, [pc, #548]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800644c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006454:	4985      	ldr	r1, [pc, #532]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0308 	and.w	r3, r3, #8
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006468:	4b80      	ldr	r3, [pc, #512]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800646e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006476:	497d      	ldr	r1, [pc, #500]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0310 	and.w	r3, r3, #16
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800648a:	4b78      	ldr	r3, [pc, #480]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006498:	4974      	ldr	r1, [pc, #464]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064ac:	4b6f      	ldr	r3, [pc, #444]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ba:	496c      	ldr	r1, [pc, #432]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064ce:	4b67      	ldr	r3, [pc, #412]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064dc:	4963      	ldr	r1, [pc, #396]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064f0:	4b5e      	ldr	r3, [pc, #376]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064fe:	495b      	ldr	r1, [pc, #364]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006512:	4b56      	ldr	r3, [pc, #344]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006518:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006520:	4952      	ldr	r1, [pc, #328]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006534:	4b4d      	ldr	r3, [pc, #308]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800653a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006542:	494a      	ldr	r1, [pc, #296]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006556:	4b45      	ldr	r3, [pc, #276]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800655c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006564:	4941      	ldr	r1, [pc, #260]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006578:	4b3c      	ldr	r3, [pc, #240]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800657a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800657e:	f023 0203 	bic.w	r2, r3, #3
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006586:	4939      	ldr	r1, [pc, #228]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d028      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800659a:	4b34      	ldr	r3, [pc, #208]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065a8:	4930      	ldr	r1, [pc, #192]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065b8:	d106      	bne.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065ba:	4b2c      	ldr	r3, [pc, #176]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	4a2b      	ldr	r2, [pc, #172]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065c4:	60d3      	str	r3, [r2, #12]
 80065c6:	e011      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065d0:	d10c      	bne.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	3304      	adds	r3, #4
 80065d6:	2101      	movs	r1, #1
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 f8f9 	bl	80067d0 <RCCEx_PLLSAI1_Config>
 80065de:	4603      	mov	r3, r0
 80065e0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80065e2:	7cfb      	ldrb	r3, [r7, #19]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d04d      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80065fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006600:	d108      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006602:	4b1a      	ldr	r3, [pc, #104]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006604:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006608:	4a18      	ldr	r2, [pc, #96]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800660a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800660e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006612:	e012      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006614:	4b15      	ldr	r3, [pc, #84]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006616:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800661a:	4a14      	ldr	r2, [pc, #80]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800661c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006620:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006624:	4b11      	ldr	r3, [pc, #68]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006632:	490e      	ldr	r1, [pc, #56]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006634:	4313      	orrs	r3, r2
 8006636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800663e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006642:	d106      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006644:	4b09      	ldr	r3, [pc, #36]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	4a08      	ldr	r2, [pc, #32]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800664a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800664e:	60d3      	str	r3, [r2, #12]
 8006650:	e020      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006656:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800665a:	d109      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800665c:	4b03      	ldr	r3, [pc, #12]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4a02      	ldr	r2, [pc, #8]	@ (800666c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006666:	60d3      	str	r3, [r2, #12]
 8006668:	e014      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800666a:	bf00      	nop
 800666c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006674:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006678:	d10c      	bne.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3304      	adds	r3, #4
 800667e:	2101      	movs	r1, #1
 8006680:	4618      	mov	r0, r3
 8006682:	f000 f8a5 	bl	80067d0 <RCCEx_PLLSAI1_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800668a:	7cfb      	ldrb	r3, [r7, #19]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006690:	7cfb      	ldrb	r3, [r7, #19]
 8006692:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d028      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066a0:	4b4a      	ldr	r3, [pc, #296]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066ae:	4947      	ldr	r1, [pc, #284]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066be:	d106      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066c0:	4b42      	ldr	r3, [pc, #264]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	4a41      	ldr	r2, [pc, #260]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80066c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ca:	60d3      	str	r3, [r2, #12]
 80066cc:	e011      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066d6:	d10c      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3304      	adds	r3, #4
 80066dc:	2101      	movs	r1, #1
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 f876 	bl	80067d0 <RCCEx_PLLSAI1_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066e8:	7cfb      	ldrb	r3, [r7, #19]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80066ee:	7cfb      	ldrb	r3, [r7, #19]
 80066f0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d01e      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066fe:	4b33      	ldr	r3, [pc, #204]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006704:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800670e:	492f      	ldr	r1, [pc, #188]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800671c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006720:	d10c      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3304      	adds	r3, #4
 8006726:	2102      	movs	r1, #2
 8006728:	4618      	mov	r0, r3
 800672a:	f000 f851 	bl	80067d0 <RCCEx_PLLSAI1_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006732:	7cfb      	ldrb	r3, [r7, #19]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006738:	7cfb      	ldrb	r3, [r7, #19]
 800673a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006748:	4b20      	ldr	r3, [pc, #128]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800674a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800674e:	f023 0204 	bic.w	r2, r3, #4
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006758:	491c      	ldr	r1, [pc, #112]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800676c:	4b17      	ldr	r3, [pc, #92]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800676e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006772:	f023 0218 	bic.w	r2, r3, #24
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800677c:	4913      	ldr	r1, [pc, #76]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d017      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006790:	4b0e      	ldr	r3, [pc, #56]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006792:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006796:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067a0:	490a      	ldr	r1, [pc, #40]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067b2:	d105      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067b4:	4b05      	ldr	r3, [pc, #20]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	4a04      	ldr	r2, [pc, #16]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067be:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80067c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	40021000 	.word	0x40021000

080067d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067de:	4b72      	ldr	r3, [pc, #456]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067ea:	4b6f      	ldr	r3, [pc, #444]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f003 0203 	and.w	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d103      	bne.n	8006802 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
       ||
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d142      	bne.n	8006888 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	73fb      	strb	r3, [r7, #15]
 8006806:	e03f      	b.n	8006888 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b03      	cmp	r3, #3
 800680e:	d018      	beq.n	8006842 <RCCEx_PLLSAI1_Config+0x72>
 8006810:	2b03      	cmp	r3, #3
 8006812:	d825      	bhi.n	8006860 <RCCEx_PLLSAI1_Config+0x90>
 8006814:	2b01      	cmp	r3, #1
 8006816:	d002      	beq.n	800681e <RCCEx_PLLSAI1_Config+0x4e>
 8006818:	2b02      	cmp	r3, #2
 800681a:	d009      	beq.n	8006830 <RCCEx_PLLSAI1_Config+0x60>
 800681c:	e020      	b.n	8006860 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800681e:	4b62      	ldr	r3, [pc, #392]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d11d      	bne.n	8006866 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800682e:	e01a      	b.n	8006866 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006830:	4b5d      	ldr	r3, [pc, #372]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006838:	2b00      	cmp	r3, #0
 800683a:	d116      	bne.n	800686a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006840:	e013      	b.n	800686a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006842:	4b59      	ldr	r3, [pc, #356]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10f      	bne.n	800686e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800684e:	4b56      	ldr	r3, [pc, #344]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800685e:	e006      	b.n	800686e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
      break;
 8006864:	e004      	b.n	8006870 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006866:	bf00      	nop
 8006868:	e002      	b.n	8006870 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800686a:	bf00      	nop
 800686c:	e000      	b.n	8006870 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800686e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006870:	7bfb      	ldrb	r3, [r7, #15]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d108      	bne.n	8006888 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006876:	4b4c      	ldr	r3, [pc, #304]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f023 0203 	bic.w	r2, r3, #3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4949      	ldr	r1, [pc, #292]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006884:	4313      	orrs	r3, r2
 8006886:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	2b00      	cmp	r3, #0
 800688c:	f040 8086 	bne.w	800699c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006890:	4b45      	ldr	r3, [pc, #276]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a44      	ldr	r2, [pc, #272]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800689a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800689c:	f7fb f896 	bl	80019cc <HAL_GetTick>
 80068a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068a2:	e009      	b.n	80068b8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068a4:	f7fb f892 	bl	80019cc <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d902      	bls.n	80068b8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	73fb      	strb	r3, [r7, #15]
        break;
 80068b6:	e005      	b.n	80068c4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068b8:	4b3b      	ldr	r3, [pc, #236]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1ef      	bne.n	80068a4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d168      	bne.n	800699c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d113      	bne.n	80068f8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068d0:	4b35      	ldr	r3, [pc, #212]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	4b35      	ldr	r3, [pc, #212]	@ (80069ac <RCCEx_PLLSAI1_Config+0x1dc>)
 80068d6:	4013      	ands	r3, r2
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6892      	ldr	r2, [r2, #8]
 80068dc:	0211      	lsls	r1, r2, #8
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68d2      	ldr	r2, [r2, #12]
 80068e2:	06d2      	lsls	r2, r2, #27
 80068e4:	4311      	orrs	r1, r2
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6852      	ldr	r2, [r2, #4]
 80068ea:	3a01      	subs	r2, #1
 80068ec:	0112      	lsls	r2, r2, #4
 80068ee:	430a      	orrs	r2, r1
 80068f0:	492d      	ldr	r1, [pc, #180]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	610b      	str	r3, [r1, #16]
 80068f6:	e02d      	b.n	8006954 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d115      	bne.n	800692a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068fe:	4b2a      	ldr	r3, [pc, #168]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006900:	691a      	ldr	r2, [r3, #16]
 8006902:	4b2b      	ldr	r3, [pc, #172]	@ (80069b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006904:	4013      	ands	r3, r2
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	6892      	ldr	r2, [r2, #8]
 800690a:	0211      	lsls	r1, r2, #8
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6912      	ldr	r2, [r2, #16]
 8006910:	0852      	lsrs	r2, r2, #1
 8006912:	3a01      	subs	r2, #1
 8006914:	0552      	lsls	r2, r2, #21
 8006916:	4311      	orrs	r1, r2
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6852      	ldr	r2, [r2, #4]
 800691c:	3a01      	subs	r2, #1
 800691e:	0112      	lsls	r2, r2, #4
 8006920:	430a      	orrs	r2, r1
 8006922:	4921      	ldr	r1, [pc, #132]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006924:	4313      	orrs	r3, r2
 8006926:	610b      	str	r3, [r1, #16]
 8006928:	e014      	b.n	8006954 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800692a:	4b1f      	ldr	r3, [pc, #124]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	4b21      	ldr	r3, [pc, #132]	@ (80069b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006930:	4013      	ands	r3, r2
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6892      	ldr	r2, [r2, #8]
 8006936:	0211      	lsls	r1, r2, #8
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6952      	ldr	r2, [r2, #20]
 800693c:	0852      	lsrs	r2, r2, #1
 800693e:	3a01      	subs	r2, #1
 8006940:	0652      	lsls	r2, r2, #25
 8006942:	4311      	orrs	r1, r2
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	6852      	ldr	r2, [r2, #4]
 8006948:	3a01      	subs	r2, #1
 800694a:	0112      	lsls	r2, r2, #4
 800694c:	430a      	orrs	r2, r1
 800694e:	4916      	ldr	r1, [pc, #88]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006950:	4313      	orrs	r3, r2
 8006952:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006954:	4b14      	ldr	r3, [pc, #80]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a13      	ldr	r2, [pc, #76]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800695a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800695e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006960:	f7fb f834 	bl	80019cc <HAL_GetTick>
 8006964:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006966:	e009      	b.n	800697c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006968:	f7fb f830 	bl	80019cc <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b02      	cmp	r3, #2
 8006974:	d902      	bls.n	800697c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	73fb      	strb	r3, [r7, #15]
          break;
 800697a:	e005      	b.n	8006988 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800697c:	4b0a      	ldr	r3, [pc, #40]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0ef      	beq.n	8006968 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800698e:	4b06      	ldr	r3, [pc, #24]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	4904      	ldr	r1, [pc, #16]	@ (80069a8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006998:	4313      	orrs	r3, r2
 800699a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800699c:	7bfb      	ldrb	r3, [r7, #15]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	40021000 	.word	0x40021000
 80069ac:	07ff800f 	.word	0x07ff800f
 80069b0:	ff9f800f 	.word	0xff9f800f
 80069b4:	f9ff800f 	.word	0xf9ff800f

080069b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069c6:	4b72      	ldr	r3, [pc, #456]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f003 0303 	and.w	r3, r3, #3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00e      	beq.n	80069f0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80069d2:	4b6f      	ldr	r3, [pc, #444]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0203 	and.w	r2, r3, #3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d103      	bne.n	80069ea <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
       ||
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d142      	bne.n	8006a70 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	73fb      	strb	r3, [r7, #15]
 80069ee:	e03f      	b.n	8006a70 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b03      	cmp	r3, #3
 80069f6:	d018      	beq.n	8006a2a <RCCEx_PLLSAI2_Config+0x72>
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d825      	bhi.n	8006a48 <RCCEx_PLLSAI2_Config+0x90>
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d002      	beq.n	8006a06 <RCCEx_PLLSAI2_Config+0x4e>
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d009      	beq.n	8006a18 <RCCEx_PLLSAI2_Config+0x60>
 8006a04:	e020      	b.n	8006a48 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a06:	4b62      	ldr	r3, [pc, #392]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d11d      	bne.n	8006a4e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a16:	e01a      	b.n	8006a4e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a18:	4b5d      	ldr	r3, [pc, #372]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d116      	bne.n	8006a52 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a28:	e013      	b.n	8006a52 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a2a:	4b59      	ldr	r3, [pc, #356]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10f      	bne.n	8006a56 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a36:	4b56      	ldr	r3, [pc, #344]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d109      	bne.n	8006a56 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a46:	e006      	b.n	8006a56 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a4c:	e004      	b.n	8006a58 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a4e:	bf00      	nop
 8006a50:	e002      	b.n	8006a58 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a52:	bf00      	nop
 8006a54:	e000      	b.n	8006a58 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006a56:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d108      	bne.n	8006a70 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006a5e:	4b4c      	ldr	r3, [pc, #304]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	f023 0203 	bic.w	r2, r3, #3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4949      	ldr	r1, [pc, #292]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f040 8086 	bne.w	8006b84 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a78:	4b45      	ldr	r3, [pc, #276]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a44      	ldr	r2, [pc, #272]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a84:	f7fa ffa2 	bl	80019cc <HAL_GetTick>
 8006a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a8a:	e009      	b.n	8006aa0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a8c:	f7fa ff9e 	bl	80019cc <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d902      	bls.n	8006aa0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8006a9e:	e005      	b.n	8006aac <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1ef      	bne.n	8006a8c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d168      	bne.n	8006b84 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d113      	bne.n	8006ae0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ab8:	4b35      	ldr	r3, [pc, #212]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006aba:	695a      	ldr	r2, [r3, #20]
 8006abc:	4b35      	ldr	r3, [pc, #212]	@ (8006b94 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6892      	ldr	r2, [r2, #8]
 8006ac4:	0211      	lsls	r1, r2, #8
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	68d2      	ldr	r2, [r2, #12]
 8006aca:	06d2      	lsls	r2, r2, #27
 8006acc:	4311      	orrs	r1, r2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6852      	ldr	r2, [r2, #4]
 8006ad2:	3a01      	subs	r2, #1
 8006ad4:	0112      	lsls	r2, r2, #4
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	492d      	ldr	r1, [pc, #180]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	614b      	str	r3, [r1, #20]
 8006ade:	e02d      	b.n	8006b3c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d115      	bne.n	8006b12 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ae8:	695a      	ldr	r2, [r3, #20]
 8006aea:	4b2b      	ldr	r3, [pc, #172]	@ (8006b98 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6892      	ldr	r2, [r2, #8]
 8006af2:	0211      	lsls	r1, r2, #8
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6912      	ldr	r2, [r2, #16]
 8006af8:	0852      	lsrs	r2, r2, #1
 8006afa:	3a01      	subs	r2, #1
 8006afc:	0552      	lsls	r2, r2, #21
 8006afe:	4311      	orrs	r1, r2
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6852      	ldr	r2, [r2, #4]
 8006b04:	3a01      	subs	r2, #1
 8006b06:	0112      	lsls	r2, r2, #4
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	4921      	ldr	r1, [pc, #132]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	614b      	str	r3, [r1, #20]
 8006b10:	e014      	b.n	8006b3c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b12:	4b1f      	ldr	r3, [pc, #124]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	4b21      	ldr	r3, [pc, #132]	@ (8006b9c <RCCEx_PLLSAI2_Config+0x1e4>)
 8006b18:	4013      	ands	r3, r2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6892      	ldr	r2, [r2, #8]
 8006b1e:	0211      	lsls	r1, r2, #8
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6952      	ldr	r2, [r2, #20]
 8006b24:	0852      	lsrs	r2, r2, #1
 8006b26:	3a01      	subs	r2, #1
 8006b28:	0652      	lsls	r2, r2, #25
 8006b2a:	4311      	orrs	r1, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6852      	ldr	r2, [r2, #4]
 8006b30:	3a01      	subs	r2, #1
 8006b32:	0112      	lsls	r2, r2, #4
 8006b34:	430a      	orrs	r2, r1
 8006b36:	4916      	ldr	r1, [pc, #88]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b3c:	4b14      	ldr	r3, [pc, #80]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a13      	ldr	r2, [pc, #76]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b48:	f7fa ff40 	bl	80019cc <HAL_GetTick>
 8006b4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b4e:	e009      	b.n	8006b64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b50:	f7fa ff3c 	bl	80019cc <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d902      	bls.n	8006b64 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	73fb      	strb	r3, [r7, #15]
          break;
 8006b62:	e005      	b.n	8006b70 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b64:	4b0a      	ldr	r3, [pc, #40]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0ef      	beq.n	8006b50 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b76:	4b06      	ldr	r3, [pc, #24]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b78:	695a      	ldr	r2, [r3, #20]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	4904      	ldr	r1, [pc, #16]	@ (8006b90 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	40021000 	.word	0x40021000
 8006b94:	07ff800f 	.word	0x07ff800f
 8006b98:	ff9f800f 	.word	0xff9f800f
 8006b9c:	f9ff800f 	.word	0xf9ff800f

08006ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e049      	b.n	8006c46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d106      	bne.n	8006bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fa fcd2 	bl	8001570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4610      	mov	r0, r2
 8006be0:	f000 fb02 	bl	80071e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d001      	beq.n	8006c68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e047      	b.n	8006cf8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a23      	ldr	r2, [pc, #140]	@ (8006d04 <HAL_TIM_Base_Start+0xb4>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d01d      	beq.n	8006cb6 <HAL_TIM_Base_Start+0x66>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c82:	d018      	beq.n	8006cb6 <HAL_TIM_Base_Start+0x66>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a1f      	ldr	r2, [pc, #124]	@ (8006d08 <HAL_TIM_Base_Start+0xb8>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d013      	beq.n	8006cb6 <HAL_TIM_Base_Start+0x66>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a1e      	ldr	r2, [pc, #120]	@ (8006d0c <HAL_TIM_Base_Start+0xbc>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d00e      	beq.n	8006cb6 <HAL_TIM_Base_Start+0x66>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006d10 <HAL_TIM_Base_Start+0xc0>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d009      	beq.n	8006cb6 <HAL_TIM_Base_Start+0x66>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8006d14 <HAL_TIM_Base_Start+0xc4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d004      	beq.n	8006cb6 <HAL_TIM_Base_Start+0x66>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a19      	ldr	r2, [pc, #100]	@ (8006d18 <HAL_TIM_Base_Start+0xc8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d115      	bne.n	8006ce2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	4b17      	ldr	r3, [pc, #92]	@ (8006d1c <HAL_TIM_Base_Start+0xcc>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b06      	cmp	r3, #6
 8006cc6:	d015      	beq.n	8006cf4 <HAL_TIM_Base_Start+0xa4>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cce:	d011      	beq.n	8006cf4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0201 	orr.w	r2, r2, #1
 8006cde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce0:	e008      	b.n	8006cf4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0201 	orr.w	r2, r2, #1
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	e000      	b.n	8006cf6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	40012c00 	.word	0x40012c00
 8006d08:	40000400 	.word	0x40000400
 8006d0c:	40000800 	.word	0x40000800
 8006d10:	40000c00 	.word	0x40000c00
 8006d14:	40013400 	.word	0x40013400
 8006d18:	40014000 	.word	0x40014000
 8006d1c:	00010007 	.word	0x00010007

08006d20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d001      	beq.n	8006d38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e04f      	b.n	8006dd8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0201 	orr.w	r2, r2, #1
 8006d4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a23      	ldr	r2, [pc, #140]	@ (8006de4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d01d      	beq.n	8006d96 <HAL_TIM_Base_Start_IT+0x76>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d62:	d018      	beq.n	8006d96 <HAL_TIM_Base_Start_IT+0x76>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a1f      	ldr	r2, [pc, #124]	@ (8006de8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d013      	beq.n	8006d96 <HAL_TIM_Base_Start_IT+0x76>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a1e      	ldr	r2, [pc, #120]	@ (8006dec <HAL_TIM_Base_Start_IT+0xcc>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00e      	beq.n	8006d96 <HAL_TIM_Base_Start_IT+0x76>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8006df0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d009      	beq.n	8006d96 <HAL_TIM_Base_Start_IT+0x76>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a1b      	ldr	r2, [pc, #108]	@ (8006df4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d004      	beq.n	8006d96 <HAL_TIM_Base_Start_IT+0x76>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a19      	ldr	r2, [pc, #100]	@ (8006df8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d115      	bne.n	8006dc2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689a      	ldr	r2, [r3, #8]
 8006d9c:	4b17      	ldr	r3, [pc, #92]	@ (8006dfc <HAL_TIM_Base_Start_IT+0xdc>)
 8006d9e:	4013      	ands	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b06      	cmp	r3, #6
 8006da6:	d015      	beq.n	8006dd4 <HAL_TIM_Base_Start_IT+0xb4>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dae:	d011      	beq.n	8006dd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f042 0201 	orr.w	r2, r2, #1
 8006dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc0:	e008      	b.n	8006dd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0201 	orr.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	e000      	b.n	8006dd6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr
 8006de4:	40012c00 	.word	0x40012c00
 8006de8:	40000400 	.word	0x40000400
 8006dec:	40000800 	.word	0x40000800
 8006df0:	40000c00 	.word	0x40000c00
 8006df4:	40013400 	.word	0x40013400
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	00010007 	.word	0x00010007

08006e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d020      	beq.n	8006e64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f003 0302 	and.w	r3, r3, #2
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d01b      	beq.n	8006e64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0202 	mvn.w	r2, #2
 8006e34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f9ad 	bl	80071aa <HAL_TIM_IC_CaptureCallback>
 8006e50:	e005      	b.n	8006e5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f99f 	bl	8007196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f9b0 	bl	80071be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d020      	beq.n	8006eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01b      	beq.n	8006eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0204 	mvn.w	r2, #4
 8006e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f987 	bl	80071aa <HAL_TIM_IC_CaptureCallback>
 8006e9c:	e005      	b.n	8006eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 f979 	bl	8007196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f98a 	bl	80071be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 0308 	and.w	r3, r3, #8
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d020      	beq.n	8006efc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01b      	beq.n	8006efc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f06f 0208 	mvn.w	r2, #8
 8006ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2204      	movs	r2, #4
 8006ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f961 	bl	80071aa <HAL_TIM_IC_CaptureCallback>
 8006ee8:	e005      	b.n	8006ef6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f953 	bl	8007196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f964 	bl	80071be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 0310 	and.w	r3, r3, #16
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d020      	beq.n	8006f48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01b      	beq.n	8006f48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0210 	mvn.w	r2, #16
 8006f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2208      	movs	r2, #8
 8006f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f93b 	bl	80071aa <HAL_TIM_IC_CaptureCallback>
 8006f34:	e005      	b.n	8006f42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f92d 	bl	8007196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f93e 	bl	80071be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00c      	beq.n	8006f6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0201 	mvn.w	r2, #1
 8006f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7f9 ff88 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00c      	beq.n	8006f90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d007      	beq.n	8006f90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 faf2 	bl	8007574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00c      	beq.n	8006fb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d007      	beq.n	8006fb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 faea 	bl	8007588 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00c      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d007      	beq.n	8006fd8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f8fd 	bl	80071d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f003 0320 	and.w	r3, r3, #32
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00c      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0220 	mvn.w	r2, #32
 8006ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fab2 	bl	8007560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ffc:	bf00      	nop
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <HAL_TIM_ConfigClockSource+0x1c>
 800701c:	2302      	movs	r3, #2
 800701e:	e0b6      	b.n	800718e <HAL_TIM_ConfigClockSource+0x18a>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800703e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800704a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800705c:	d03e      	beq.n	80070dc <HAL_TIM_ConfigClockSource+0xd8>
 800705e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007062:	f200 8087 	bhi.w	8007174 <HAL_TIM_ConfigClockSource+0x170>
 8007066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800706a:	f000 8086 	beq.w	800717a <HAL_TIM_ConfigClockSource+0x176>
 800706e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007072:	d87f      	bhi.n	8007174 <HAL_TIM_ConfigClockSource+0x170>
 8007074:	2b70      	cmp	r3, #112	@ 0x70
 8007076:	d01a      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0xaa>
 8007078:	2b70      	cmp	r3, #112	@ 0x70
 800707a:	d87b      	bhi.n	8007174 <HAL_TIM_ConfigClockSource+0x170>
 800707c:	2b60      	cmp	r3, #96	@ 0x60
 800707e:	d050      	beq.n	8007122 <HAL_TIM_ConfigClockSource+0x11e>
 8007080:	2b60      	cmp	r3, #96	@ 0x60
 8007082:	d877      	bhi.n	8007174 <HAL_TIM_ConfigClockSource+0x170>
 8007084:	2b50      	cmp	r3, #80	@ 0x50
 8007086:	d03c      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0xfe>
 8007088:	2b50      	cmp	r3, #80	@ 0x50
 800708a:	d873      	bhi.n	8007174 <HAL_TIM_ConfigClockSource+0x170>
 800708c:	2b40      	cmp	r3, #64	@ 0x40
 800708e:	d058      	beq.n	8007142 <HAL_TIM_ConfigClockSource+0x13e>
 8007090:	2b40      	cmp	r3, #64	@ 0x40
 8007092:	d86f      	bhi.n	8007174 <HAL_TIM_ConfigClockSource+0x170>
 8007094:	2b30      	cmp	r3, #48	@ 0x30
 8007096:	d064      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0x15e>
 8007098:	2b30      	cmp	r3, #48	@ 0x30
 800709a:	d86b      	bhi.n	8007174 <HAL_TIM_ConfigClockSource+0x170>
 800709c:	2b20      	cmp	r3, #32
 800709e:	d060      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0x15e>
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d867      	bhi.n	8007174 <HAL_TIM_ConfigClockSource+0x170>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d05c      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0x15e>
 80070a8:	2b10      	cmp	r3, #16
 80070aa:	d05a      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0x15e>
 80070ac:	e062      	b.n	8007174 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070be:	f000 f9a7 	bl	8007410 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	609a      	str	r2, [r3, #8]
      break;
 80070da:	e04f      	b.n	800717c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070ec:	f000 f990 	bl	8007410 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070fe:	609a      	str	r2, [r3, #8]
      break;
 8007100:	e03c      	b.n	800717c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800710e:	461a      	mov	r2, r3
 8007110:	f000 f904 	bl	800731c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2150      	movs	r1, #80	@ 0x50
 800711a:	4618      	mov	r0, r3
 800711c:	f000 f95d 	bl	80073da <TIM_ITRx_SetConfig>
      break;
 8007120:	e02c      	b.n	800717c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800712e:	461a      	mov	r2, r3
 8007130:	f000 f923 	bl	800737a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2160      	movs	r1, #96	@ 0x60
 800713a:	4618      	mov	r0, r3
 800713c:	f000 f94d 	bl	80073da <TIM_ITRx_SetConfig>
      break;
 8007140:	e01c      	b.n	800717c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800714e:	461a      	mov	r2, r3
 8007150:	f000 f8e4 	bl	800731c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2140      	movs	r1, #64	@ 0x40
 800715a:	4618      	mov	r0, r3
 800715c:	f000 f93d 	bl	80073da <TIM_ITRx_SetConfig>
      break;
 8007160:	e00c      	b.n	800717c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4619      	mov	r1, r3
 800716c:	4610      	mov	r0, r2
 800716e:	f000 f934 	bl	80073da <TIM_ITRx_SetConfig>
      break;
 8007172:	e003      	b.n	800717c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	73fb      	strb	r3, [r7, #15]
      break;
 8007178:	e000      	b.n	800717c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800717a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800719e:	bf00      	nop
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
	...

080071e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a40      	ldr	r2, [pc, #256]	@ (80072fc <TIM_Base_SetConfig+0x114>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d013      	beq.n	8007228 <TIM_Base_SetConfig+0x40>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007206:	d00f      	beq.n	8007228 <TIM_Base_SetConfig+0x40>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a3d      	ldr	r2, [pc, #244]	@ (8007300 <TIM_Base_SetConfig+0x118>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d00b      	beq.n	8007228 <TIM_Base_SetConfig+0x40>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a3c      	ldr	r2, [pc, #240]	@ (8007304 <TIM_Base_SetConfig+0x11c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d007      	beq.n	8007228 <TIM_Base_SetConfig+0x40>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a3b      	ldr	r2, [pc, #236]	@ (8007308 <TIM_Base_SetConfig+0x120>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d003      	beq.n	8007228 <TIM_Base_SetConfig+0x40>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a3a      	ldr	r2, [pc, #232]	@ (800730c <TIM_Base_SetConfig+0x124>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d108      	bne.n	800723a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a2f      	ldr	r2, [pc, #188]	@ (80072fc <TIM_Base_SetConfig+0x114>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d01f      	beq.n	8007282 <TIM_Base_SetConfig+0x9a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007248:	d01b      	beq.n	8007282 <TIM_Base_SetConfig+0x9a>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a2c      	ldr	r2, [pc, #176]	@ (8007300 <TIM_Base_SetConfig+0x118>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d017      	beq.n	8007282 <TIM_Base_SetConfig+0x9a>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a2b      	ldr	r2, [pc, #172]	@ (8007304 <TIM_Base_SetConfig+0x11c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <TIM_Base_SetConfig+0x9a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a2a      	ldr	r2, [pc, #168]	@ (8007308 <TIM_Base_SetConfig+0x120>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00f      	beq.n	8007282 <TIM_Base_SetConfig+0x9a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a29      	ldr	r2, [pc, #164]	@ (800730c <TIM_Base_SetConfig+0x124>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00b      	beq.n	8007282 <TIM_Base_SetConfig+0x9a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a28      	ldr	r2, [pc, #160]	@ (8007310 <TIM_Base_SetConfig+0x128>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d007      	beq.n	8007282 <TIM_Base_SetConfig+0x9a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a27      	ldr	r2, [pc, #156]	@ (8007314 <TIM_Base_SetConfig+0x12c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d003      	beq.n	8007282 <TIM_Base_SetConfig+0x9a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a26      	ldr	r2, [pc, #152]	@ (8007318 <TIM_Base_SetConfig+0x130>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d108      	bne.n	8007294 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a10      	ldr	r2, [pc, #64]	@ (80072fc <TIM_Base_SetConfig+0x114>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00f      	beq.n	80072e0 <TIM_Base_SetConfig+0xf8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a12      	ldr	r2, [pc, #72]	@ (800730c <TIM_Base_SetConfig+0x124>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00b      	beq.n	80072e0 <TIM_Base_SetConfig+0xf8>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a11      	ldr	r2, [pc, #68]	@ (8007310 <TIM_Base_SetConfig+0x128>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_Base_SetConfig+0xf8>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a10      	ldr	r2, [pc, #64]	@ (8007314 <TIM_Base_SetConfig+0x12c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_Base_SetConfig+0xf8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a0f      	ldr	r2, [pc, #60]	@ (8007318 <TIM_Base_SetConfig+0x130>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d103      	bne.n	80072e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	691a      	ldr	r2, [r3, #16]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	615a      	str	r2, [r3, #20]
}
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40012c00 	.word	0x40012c00
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00
 800730c:	40013400 	.word	0x40013400
 8007310:	40014000 	.word	0x40014000
 8007314:	40014400 	.word	0x40014400
 8007318:	40014800 	.word	0x40014800

0800731c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800731c:	b480      	push	{r7}
 800731e:	b087      	sub	sp, #28
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6a1b      	ldr	r3, [r3, #32]
 800732c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	f023 0201 	bic.w	r2, r3, #1
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4313      	orrs	r3, r2
 8007350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f023 030a 	bic.w	r3, r3, #10
 8007358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	4313      	orrs	r3, r2
 8007360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800737a:	b480      	push	{r7}
 800737c:	b087      	sub	sp, #28
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	f023 0210 	bic.w	r2, r3, #16
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	031b      	lsls	r3, r3, #12
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80073b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	011b      	lsls	r3, r3, #4
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	621a      	str	r2, [r3, #32]
}
 80073ce:	bf00      	nop
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073da:	b480      	push	{r7}
 80073dc:	b085      	sub	sp, #20
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f043 0307 	orr.w	r3, r3, #7
 80073fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	609a      	str	r2, [r3, #8]
}
 8007404:	bf00      	nop
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800742a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	021a      	lsls	r2, r3, #8
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	431a      	orrs	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4313      	orrs	r3, r2
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	609a      	str	r2, [r3, #8]
}
 8007444:	bf00      	nop
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007460:	2b01      	cmp	r3, #1
 8007462:	d101      	bne.n	8007468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007464:	2302      	movs	r3, #2
 8007466:	e068      	b.n	800753a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2202      	movs	r2, #2
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a2e      	ldr	r2, [pc, #184]	@ (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d004      	beq.n	800749c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a2d      	ldr	r2, [pc, #180]	@ (800754c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d108      	bne.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80074a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1e      	ldr	r2, [pc, #120]	@ (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d01d      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074da:	d018      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007550 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d013      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007554 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00e      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a18      	ldr	r2, [pc, #96]	@ (8007558 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d009      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a13      	ldr	r2, [pc, #76]	@ (800754c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d004      	beq.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a14      	ldr	r2, [pc, #80]	@ (800755c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d10c      	bne.n	8007528 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	4313      	orrs	r3, r2
 800751e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40012c00 	.word	0x40012c00
 800754c:	40013400 	.word	0x40013400
 8007550:	40000400 	.word	0x40000400
 8007554:	40000800 	.word	0x40000800
 8007558:	40000c00 	.word	0x40000c00
 800755c:	40014000 	.word	0x40014000

08007560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e042      	b.n	8007634 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d106      	bne.n	80075c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7fa f8c3 	bl	800174c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2224      	movs	r2, #36	@ 0x24
 80075ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f022 0201 	bic.w	r2, r2, #1
 80075dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 feb4 	bl	8008354 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fbb5 	bl	8007d5c <UART_SetConfig>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d101      	bne.n	80075fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e01b      	b.n	8007634 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800760a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800761a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0201 	orr.w	r2, r2, #1
 800762a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 ff33 	bl	8008498 <UART_CheckIdleState>
 8007632:	4603      	mov	r3, r0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08a      	sub	sp, #40	@ 0x28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	4613      	mov	r3, r2
 8007648:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007650:	2b20      	cmp	r3, #32
 8007652:	d137      	bne.n	80076c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <HAL_UART_Receive_IT+0x24>
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e030      	b.n	80076c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a18      	ldr	r2, [pc, #96]	@ (80076d0 <HAL_UART_Receive_IT+0x94>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d01f      	beq.n	80076b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d018      	beq.n	80076b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	613b      	str	r3, [r7, #16]
   return(result);
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007696:	627b      	str	r3, [r7, #36]	@ 0x24
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	623b      	str	r3, [r7, #32]
 80076a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	69f9      	ldr	r1, [r7, #28]
 80076a6:	6a3a      	ldr	r2, [r7, #32]
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e6      	bne.n	8007682 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80076b4:	88fb      	ldrh	r3, [r7, #6]
 80076b6:	461a      	mov	r2, r3
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fffe 	bl	80086bc <UART_Start_Receive_IT>
 80076c0:	4603      	mov	r3, r0
 80076c2:	e000      	b.n	80076c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076c4:	2302      	movs	r3, #2
  }
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3728      	adds	r7, #40	@ 0x28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	40008000 	.word	0x40008000

080076d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b0ba      	sub	sp, #232	@ 0xe8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80076fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80076fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007702:	4013      	ands	r3, r2
 8007704:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007708:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800770c:	2b00      	cmp	r3, #0
 800770e:	d11b      	bne.n	8007748 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007714:	f003 0320 	and.w	r3, r3, #32
 8007718:	2b00      	cmp	r3, #0
 800771a:	d015      	beq.n	8007748 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800771c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007720:	f003 0320 	and.w	r3, r3, #32
 8007724:	2b00      	cmp	r3, #0
 8007726:	d105      	bne.n	8007734 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800772c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d009      	beq.n	8007748 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 82e3 	beq.w	8007d04 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
      }
      return;
 8007746:	e2dd      	b.n	8007d04 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8007748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 8123 	beq.w	8007998 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007752:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007756:	4b8d      	ldr	r3, [pc, #564]	@ (800798c <HAL_UART_IRQHandler+0x2b8>)
 8007758:	4013      	ands	r3, r2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800775e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007762:	4b8b      	ldr	r3, [pc, #556]	@ (8007990 <HAL_UART_IRQHandler+0x2bc>)
 8007764:	4013      	ands	r3, r2
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 8116 	beq.w	8007998 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800776c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d011      	beq.n	800779c <HAL_UART_IRQHandler+0xc8>
 8007778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800777c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2201      	movs	r2, #1
 800778a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007792:	f043 0201 	orr.w	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800779c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d011      	beq.n	80077cc <HAL_UART_IRQHandler+0xf8>
 80077a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00b      	beq.n	80077cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2202      	movs	r2, #2
 80077ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c2:	f043 0204 	orr.w	r2, r3, #4
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077d0:	f003 0304 	and.w	r3, r3, #4
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d011      	beq.n	80077fc <HAL_UART_IRQHandler+0x128>
 80077d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2204      	movs	r2, #4
 80077ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077f2:	f043 0202 	orr.w	r2, r3, #2
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80077fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b00      	cmp	r3, #0
 8007806:	d017      	beq.n	8007838 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b00      	cmp	r3, #0
 8007812:	d105      	bne.n	8007820 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007814:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007818:	4b5c      	ldr	r3, [pc, #368]	@ (800798c <HAL_UART_IRQHandler+0x2b8>)
 800781a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00b      	beq.n	8007838 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2208      	movs	r2, #8
 8007826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800782e:	f043 0208 	orr.w	r2, r3, #8
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800783c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007840:	2b00      	cmp	r3, #0
 8007842:	d012      	beq.n	800786a <HAL_UART_IRQHandler+0x196>
 8007844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007848:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00c      	beq.n	800786a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007858:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007860:	f043 0220 	orr.w	r2, r3, #32
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 8249 	beq.w	8007d08 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800787a:	f003 0320 	and.w	r3, r3, #32
 800787e:	2b00      	cmp	r3, #0
 8007880:	d013      	beq.n	80078aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	d105      	bne.n	800789a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800788e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d007      	beq.n	80078aa <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078be:	2b40      	cmp	r3, #64	@ 0x40
 80078c0:	d005      	beq.n	80078ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d054      	beq.n	8007978 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f001 f816 	bl	8008900 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078de:	2b40      	cmp	r3, #64	@ 0x40
 80078e0:	d146      	bne.n	8007970 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80078f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3308      	adds	r3, #8
 800790a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800790e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800791a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1d9      	bne.n	80078e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007934:	2b00      	cmp	r3, #0
 8007936:	d017      	beq.n	8007968 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800793e:	4a15      	ldr	r2, [pc, #84]	@ (8007994 <HAL_UART_IRQHandler+0x2c0>)
 8007940:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007948:	4618      	mov	r0, r3
 800794a:	f7fb feda 	bl	8003702 <HAL_DMA_Abort_IT>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d019      	beq.n	8007988 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800795a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007962:	4610      	mov	r0, r2
 8007964:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007966:	e00f      	b.n	8007988 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f9e1 	bl	8007d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800796e:	e00b      	b.n	8007988 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f9dd 	bl	8007d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007976:	e007      	b.n	8007988 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f9d9 	bl	8007d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007986:	e1bf      	b.n	8007d08 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007988:	bf00      	nop
    return;
 800798a:	e1bd      	b.n	8007d08 <HAL_UART_IRQHandler+0x634>
 800798c:	10000001 	.word	0x10000001
 8007990:	04000120 	.word	0x04000120
 8007994:	080089cd 	.word	0x080089cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800799c:	2b01      	cmp	r3, #1
 800799e:	f040 8153 	bne.w	8007c48 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079a6:	f003 0310 	and.w	r3, r3, #16
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 814c 	beq.w	8007c48 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079b4:	f003 0310 	and.w	r3, r3, #16
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 8145 	beq.w	8007c48 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2210      	movs	r2, #16
 80079c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d0:	2b40      	cmp	r3, #64	@ 0x40
 80079d2:	f040 80bb 	bne.w	8007b4c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 818f 	beq.w	8007d0c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079f8:	429a      	cmp	r2, r3
 80079fa:	f080 8187 	bcs.w	8007d0c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0320 	and.w	r3, r3, #32
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f040 8087 	bne.w	8007b2a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	461a      	mov	r2, r3
 8007a42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1da      	bne.n	8007a1c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a78:	f023 0301 	bic.w	r3, r3, #1
 8007a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3308      	adds	r3, #8
 8007a86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e1      	bne.n	8007a66 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ac6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007acc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e3      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2220      	movs	r2, #32
 8007ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007af8:	f023 0310 	bic.w	r3, r3, #16
 8007afc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	461a      	mov	r2, r3
 8007b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e4      	bne.n	8007ae8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fb fd90 	bl	800364a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f8fd 	bl	8007d44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b4a:	e0df      	b.n	8007d0c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80d1 	beq.w	8007d10 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007b6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 80cc 	beq.w	8007d10 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b80:	e853 3f00 	ldrex	r3, [r3]
 8007b84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b9c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e4      	bne.n	8007b78 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	3308      	adds	r3, #8
 8007bd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007bd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8007bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bde:	e841 2300 	strex	r3, r2, [r1]
 8007be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e1      	bne.n	8007bae <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2220      	movs	r2, #32
 8007bee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	e853 3f00 	ldrex	r3, [r3]
 8007c0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f023 0310 	bic.w	r3, r3, #16
 8007c12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007c20:	61fb      	str	r3, [r7, #28]
 8007c22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c24:	69b9      	ldr	r1, [r7, #24]
 8007c26:	69fa      	ldr	r2, [r7, #28]
 8007c28:	e841 2300 	strex	r3, r2, [r1]
 8007c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1e4      	bne.n	8007bfe <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2202      	movs	r2, #2
 8007c38:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f87f 	bl	8007d44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c46:	e063      	b.n	8007d10 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00e      	beq.n	8007c72 <HAL_UART_IRQHandler+0x59e>
 8007c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d008      	beq.n	8007c72 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007c68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 fc14 	bl	8009498 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c70:	e051      	b.n	8007d16 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d014      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d105      	bne.n	8007c96 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d008      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d03a      	beq.n	8007d14 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	4798      	blx	r3
    }
    return;
 8007ca6:	e035      	b.n	8007d14 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d009      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x5f4>
 8007cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 fe99 	bl	80089f8 <UART_EndTransmit_IT>
    return;
 8007cc6:	e026      	b.n	8007d16 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ccc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d009      	beq.n	8007ce8 <HAL_UART_IRQHandler+0x614>
 8007cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 fbed 	bl	80094c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ce6:	e016      	b.n	8007d16 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d010      	beq.n	8007d16 <HAL_UART_IRQHandler+0x642>
 8007cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	da0c      	bge.n	8007d16 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 fbd5 	bl	80094ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d02:	e008      	b.n	8007d16 <HAL_UART_IRQHandler+0x642>
      return;
 8007d04:	bf00      	nop
 8007d06:	e006      	b.n	8007d16 <HAL_UART_IRQHandler+0x642>
    return;
 8007d08:	bf00      	nop
 8007d0a:	e004      	b.n	8007d16 <HAL_UART_IRQHandler+0x642>
      return;
 8007d0c:	bf00      	nop
 8007d0e:	e002      	b.n	8007d16 <HAL_UART_IRQHandler+0x642>
      return;
 8007d10:	bf00      	nop
 8007d12:	e000      	b.n	8007d16 <HAL_UART_IRQHandler+0x642>
    return;
 8007d14:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007d16:	37e8      	adds	r7, #232	@ 0xe8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d60:	b08c      	sub	sp, #48	@ 0x30
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	431a      	orrs	r2, r3
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	69db      	ldr	r3, [r3, #28]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	4baa      	ldr	r3, [pc, #680]	@ (8008034 <UART_SetConfig+0x2d8>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d94:	430b      	orrs	r3, r1
 8007d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a9f      	ldr	r2, [pc, #636]	@ (8008038 <UART_SetConfig+0x2dc>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d004      	beq.n	8007dc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007dd2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	6812      	ldr	r2, [r2, #0]
 8007dda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de6:	f023 010f 	bic.w	r1, r3, #15
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a90      	ldr	r2, [pc, #576]	@ (800803c <UART_SetConfig+0x2e0>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d125      	bne.n	8007e4c <UART_SetConfig+0xf0>
 8007e00:	4b8f      	ldr	r3, [pc, #572]	@ (8008040 <UART_SetConfig+0x2e4>)
 8007e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e06:	f003 0303 	and.w	r3, r3, #3
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d81a      	bhi.n	8007e44 <UART_SetConfig+0xe8>
 8007e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e14 <UART_SetConfig+0xb8>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e25 	.word	0x08007e25
 8007e18:	08007e35 	.word	0x08007e35
 8007e1c:	08007e2d 	.word	0x08007e2d
 8007e20:	08007e3d 	.word	0x08007e3d
 8007e24:	2301      	movs	r3, #1
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e2a:	e116      	b.n	800805a <UART_SetConfig+0x2fe>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e32:	e112      	b.n	800805a <UART_SetConfig+0x2fe>
 8007e34:	2304      	movs	r3, #4
 8007e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e3a:	e10e      	b.n	800805a <UART_SetConfig+0x2fe>
 8007e3c:	2308      	movs	r3, #8
 8007e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e42:	e10a      	b.n	800805a <UART_SetConfig+0x2fe>
 8007e44:	2310      	movs	r3, #16
 8007e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e4a:	e106      	b.n	800805a <UART_SetConfig+0x2fe>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a7c      	ldr	r2, [pc, #496]	@ (8008044 <UART_SetConfig+0x2e8>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d138      	bne.n	8007ec8 <UART_SetConfig+0x16c>
 8007e56:	4b7a      	ldr	r3, [pc, #488]	@ (8008040 <UART_SetConfig+0x2e4>)
 8007e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e5c:	f003 030c 	and.w	r3, r3, #12
 8007e60:	2b0c      	cmp	r3, #12
 8007e62:	d82d      	bhi.n	8007ec0 <UART_SetConfig+0x164>
 8007e64:	a201      	add	r2, pc, #4	@ (adr r2, 8007e6c <UART_SetConfig+0x110>)
 8007e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6a:	bf00      	nop
 8007e6c:	08007ea1 	.word	0x08007ea1
 8007e70:	08007ec1 	.word	0x08007ec1
 8007e74:	08007ec1 	.word	0x08007ec1
 8007e78:	08007ec1 	.word	0x08007ec1
 8007e7c:	08007eb1 	.word	0x08007eb1
 8007e80:	08007ec1 	.word	0x08007ec1
 8007e84:	08007ec1 	.word	0x08007ec1
 8007e88:	08007ec1 	.word	0x08007ec1
 8007e8c:	08007ea9 	.word	0x08007ea9
 8007e90:	08007ec1 	.word	0x08007ec1
 8007e94:	08007ec1 	.word	0x08007ec1
 8007e98:	08007ec1 	.word	0x08007ec1
 8007e9c:	08007eb9 	.word	0x08007eb9
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ea6:	e0d8      	b.n	800805a <UART_SetConfig+0x2fe>
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eae:	e0d4      	b.n	800805a <UART_SetConfig+0x2fe>
 8007eb0:	2304      	movs	r3, #4
 8007eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007eb6:	e0d0      	b.n	800805a <UART_SetConfig+0x2fe>
 8007eb8:	2308      	movs	r3, #8
 8007eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ebe:	e0cc      	b.n	800805a <UART_SetConfig+0x2fe>
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ec6:	e0c8      	b.n	800805a <UART_SetConfig+0x2fe>
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a5e      	ldr	r2, [pc, #376]	@ (8008048 <UART_SetConfig+0x2ec>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d125      	bne.n	8007f1e <UART_SetConfig+0x1c2>
 8007ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8008040 <UART_SetConfig+0x2e4>)
 8007ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ed8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007edc:	2b30      	cmp	r3, #48	@ 0x30
 8007ede:	d016      	beq.n	8007f0e <UART_SetConfig+0x1b2>
 8007ee0:	2b30      	cmp	r3, #48	@ 0x30
 8007ee2:	d818      	bhi.n	8007f16 <UART_SetConfig+0x1ba>
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	d00a      	beq.n	8007efe <UART_SetConfig+0x1a2>
 8007ee8:	2b20      	cmp	r3, #32
 8007eea:	d814      	bhi.n	8007f16 <UART_SetConfig+0x1ba>
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <UART_SetConfig+0x19a>
 8007ef0:	2b10      	cmp	r3, #16
 8007ef2:	d008      	beq.n	8007f06 <UART_SetConfig+0x1aa>
 8007ef4:	e00f      	b.n	8007f16 <UART_SetConfig+0x1ba>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007efc:	e0ad      	b.n	800805a <UART_SetConfig+0x2fe>
 8007efe:	2302      	movs	r3, #2
 8007f00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f04:	e0a9      	b.n	800805a <UART_SetConfig+0x2fe>
 8007f06:	2304      	movs	r3, #4
 8007f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f0c:	e0a5      	b.n	800805a <UART_SetConfig+0x2fe>
 8007f0e:	2308      	movs	r3, #8
 8007f10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f14:	e0a1      	b.n	800805a <UART_SetConfig+0x2fe>
 8007f16:	2310      	movs	r3, #16
 8007f18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f1c:	e09d      	b.n	800805a <UART_SetConfig+0x2fe>
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a4a      	ldr	r2, [pc, #296]	@ (800804c <UART_SetConfig+0x2f0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d125      	bne.n	8007f74 <UART_SetConfig+0x218>
 8007f28:	4b45      	ldr	r3, [pc, #276]	@ (8008040 <UART_SetConfig+0x2e4>)
 8007f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f32:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f34:	d016      	beq.n	8007f64 <UART_SetConfig+0x208>
 8007f36:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f38:	d818      	bhi.n	8007f6c <UART_SetConfig+0x210>
 8007f3a:	2b80      	cmp	r3, #128	@ 0x80
 8007f3c:	d00a      	beq.n	8007f54 <UART_SetConfig+0x1f8>
 8007f3e:	2b80      	cmp	r3, #128	@ 0x80
 8007f40:	d814      	bhi.n	8007f6c <UART_SetConfig+0x210>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <UART_SetConfig+0x1f0>
 8007f46:	2b40      	cmp	r3, #64	@ 0x40
 8007f48:	d008      	beq.n	8007f5c <UART_SetConfig+0x200>
 8007f4a:	e00f      	b.n	8007f6c <UART_SetConfig+0x210>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f52:	e082      	b.n	800805a <UART_SetConfig+0x2fe>
 8007f54:	2302      	movs	r3, #2
 8007f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f5a:	e07e      	b.n	800805a <UART_SetConfig+0x2fe>
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f62:	e07a      	b.n	800805a <UART_SetConfig+0x2fe>
 8007f64:	2308      	movs	r3, #8
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f6a:	e076      	b.n	800805a <UART_SetConfig+0x2fe>
 8007f6c:	2310      	movs	r3, #16
 8007f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f72:	e072      	b.n	800805a <UART_SetConfig+0x2fe>
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a35      	ldr	r2, [pc, #212]	@ (8008050 <UART_SetConfig+0x2f4>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d12a      	bne.n	8007fd4 <UART_SetConfig+0x278>
 8007f7e:	4b30      	ldr	r3, [pc, #192]	@ (8008040 <UART_SetConfig+0x2e4>)
 8007f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f8c:	d01a      	beq.n	8007fc4 <UART_SetConfig+0x268>
 8007f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f92:	d81b      	bhi.n	8007fcc <UART_SetConfig+0x270>
 8007f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f98:	d00c      	beq.n	8007fb4 <UART_SetConfig+0x258>
 8007f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f9e:	d815      	bhi.n	8007fcc <UART_SetConfig+0x270>
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <UART_SetConfig+0x250>
 8007fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fa8:	d008      	beq.n	8007fbc <UART_SetConfig+0x260>
 8007faa:	e00f      	b.n	8007fcc <UART_SetConfig+0x270>
 8007fac:	2300      	movs	r3, #0
 8007fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fb2:	e052      	b.n	800805a <UART_SetConfig+0x2fe>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fba:	e04e      	b.n	800805a <UART_SetConfig+0x2fe>
 8007fbc:	2304      	movs	r3, #4
 8007fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc2:	e04a      	b.n	800805a <UART_SetConfig+0x2fe>
 8007fc4:	2308      	movs	r3, #8
 8007fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fca:	e046      	b.n	800805a <UART_SetConfig+0x2fe>
 8007fcc:	2310      	movs	r3, #16
 8007fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd2:	e042      	b.n	800805a <UART_SetConfig+0x2fe>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a17      	ldr	r2, [pc, #92]	@ (8008038 <UART_SetConfig+0x2dc>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d13a      	bne.n	8008054 <UART_SetConfig+0x2f8>
 8007fde:	4b18      	ldr	r3, [pc, #96]	@ (8008040 <UART_SetConfig+0x2e4>)
 8007fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fe4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007fe8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007fec:	d01a      	beq.n	8008024 <UART_SetConfig+0x2c8>
 8007fee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007ff2:	d81b      	bhi.n	800802c <UART_SetConfig+0x2d0>
 8007ff4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ff8:	d00c      	beq.n	8008014 <UART_SetConfig+0x2b8>
 8007ffa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ffe:	d815      	bhi.n	800802c <UART_SetConfig+0x2d0>
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <UART_SetConfig+0x2b0>
 8008004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008008:	d008      	beq.n	800801c <UART_SetConfig+0x2c0>
 800800a:	e00f      	b.n	800802c <UART_SetConfig+0x2d0>
 800800c:	2300      	movs	r3, #0
 800800e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008012:	e022      	b.n	800805a <UART_SetConfig+0x2fe>
 8008014:	2302      	movs	r3, #2
 8008016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800801a:	e01e      	b.n	800805a <UART_SetConfig+0x2fe>
 800801c:	2304      	movs	r3, #4
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008022:	e01a      	b.n	800805a <UART_SetConfig+0x2fe>
 8008024:	2308      	movs	r3, #8
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800802a:	e016      	b.n	800805a <UART_SetConfig+0x2fe>
 800802c:	2310      	movs	r3, #16
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008032:	e012      	b.n	800805a <UART_SetConfig+0x2fe>
 8008034:	cfff69f3 	.word	0xcfff69f3
 8008038:	40008000 	.word	0x40008000
 800803c:	40013800 	.word	0x40013800
 8008040:	40021000 	.word	0x40021000
 8008044:	40004400 	.word	0x40004400
 8008048:	40004800 	.word	0x40004800
 800804c:	40004c00 	.word	0x40004c00
 8008050:	40005000 	.word	0x40005000
 8008054:	2310      	movs	r3, #16
 8008056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4aae      	ldr	r2, [pc, #696]	@ (8008318 <UART_SetConfig+0x5bc>)
 8008060:	4293      	cmp	r3, r2
 8008062:	f040 8097 	bne.w	8008194 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008066:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800806a:	2b08      	cmp	r3, #8
 800806c:	d823      	bhi.n	80080b6 <UART_SetConfig+0x35a>
 800806e:	a201      	add	r2, pc, #4	@ (adr r2, 8008074 <UART_SetConfig+0x318>)
 8008070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008074:	08008099 	.word	0x08008099
 8008078:	080080b7 	.word	0x080080b7
 800807c:	080080a1 	.word	0x080080a1
 8008080:	080080b7 	.word	0x080080b7
 8008084:	080080a7 	.word	0x080080a7
 8008088:	080080b7 	.word	0x080080b7
 800808c:	080080b7 	.word	0x080080b7
 8008090:	080080b7 	.word	0x080080b7
 8008094:	080080af 	.word	0x080080af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008098:	f7fd ff7e 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 800809c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800809e:	e010      	b.n	80080c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080a0:	4b9e      	ldr	r3, [pc, #632]	@ (800831c <UART_SetConfig+0x5c0>)
 80080a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080a4:	e00d      	b.n	80080c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080a6:	f7fd fedf 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 80080aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080ac:	e009      	b.n	80080c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80080b4:	e005      	b.n	80080c2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80080c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 8130 	beq.w	800832a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080ce:	4a94      	ldr	r2, [pc, #592]	@ (8008320 <UART_SetConfig+0x5c4>)
 80080d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080d4:	461a      	mov	r2, r3
 80080d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80080dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	4613      	mov	r3, r2
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	4413      	add	r3, r2
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d305      	bcc.n	80080fa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080f4:	69ba      	ldr	r2, [r7, #24]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d903      	bls.n	8008102 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008100:	e113      	b.n	800832a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008104:	2200      	movs	r2, #0
 8008106:	60bb      	str	r3, [r7, #8]
 8008108:	60fa      	str	r2, [r7, #12]
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810e:	4a84      	ldr	r2, [pc, #528]	@ (8008320 <UART_SetConfig+0x5c4>)
 8008110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008114:	b29b      	uxth	r3, r3
 8008116:	2200      	movs	r2, #0
 8008118:	603b      	str	r3, [r7, #0]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008120:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008124:	f7f8 f86a 	bl	80001fc <__aeabi_uldivmod>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4610      	mov	r0, r2
 800812e:	4619      	mov	r1, r3
 8008130:	f04f 0200 	mov.w	r2, #0
 8008134:	f04f 0300 	mov.w	r3, #0
 8008138:	020b      	lsls	r3, r1, #8
 800813a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800813e:	0202      	lsls	r2, r0, #8
 8008140:	6979      	ldr	r1, [r7, #20]
 8008142:	6849      	ldr	r1, [r1, #4]
 8008144:	0849      	lsrs	r1, r1, #1
 8008146:	2000      	movs	r0, #0
 8008148:	460c      	mov	r4, r1
 800814a:	4605      	mov	r5, r0
 800814c:	eb12 0804 	adds.w	r8, r2, r4
 8008150:	eb43 0905 	adc.w	r9, r3, r5
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	469a      	mov	sl, r3
 800815c:	4693      	mov	fp, r2
 800815e:	4652      	mov	r2, sl
 8008160:	465b      	mov	r3, fp
 8008162:	4640      	mov	r0, r8
 8008164:	4649      	mov	r1, r9
 8008166:	f7f8 f849 	bl	80001fc <__aeabi_uldivmod>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4613      	mov	r3, r2
 8008170:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008178:	d308      	bcc.n	800818c <UART_SetConfig+0x430>
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008180:	d204      	bcs.n	800818c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6a3a      	ldr	r2, [r7, #32]
 8008188:	60da      	str	r2, [r3, #12]
 800818a:	e0ce      	b.n	800832a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008192:	e0ca      	b.n	800832a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	69db      	ldr	r3, [r3, #28]
 8008198:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800819c:	d166      	bne.n	800826c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800819e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081a2:	2b08      	cmp	r3, #8
 80081a4:	d827      	bhi.n	80081f6 <UART_SetConfig+0x49a>
 80081a6:	a201      	add	r2, pc, #4	@ (adr r2, 80081ac <UART_SetConfig+0x450>)
 80081a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ac:	080081d1 	.word	0x080081d1
 80081b0:	080081d9 	.word	0x080081d9
 80081b4:	080081e1 	.word	0x080081e1
 80081b8:	080081f7 	.word	0x080081f7
 80081bc:	080081e7 	.word	0x080081e7
 80081c0:	080081f7 	.word	0x080081f7
 80081c4:	080081f7 	.word	0x080081f7
 80081c8:	080081f7 	.word	0x080081f7
 80081cc:	080081ef 	.word	0x080081ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081d0:	f7fd fee2 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 80081d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081d6:	e014      	b.n	8008202 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081d8:	f7fd fef4 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 80081dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081de:	e010      	b.n	8008202 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081e0:	4b4e      	ldr	r3, [pc, #312]	@ (800831c <UART_SetConfig+0x5c0>)
 80081e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081e4:	e00d      	b.n	8008202 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081e6:	f7fd fe3f 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 80081ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081ec:	e009      	b.n	8008202 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081f4:	e005      	b.n	8008202 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008200:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8090 	beq.w	800832a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820e:	4a44      	ldr	r2, [pc, #272]	@ (8008320 <UART_SetConfig+0x5c4>)
 8008210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008214:	461a      	mov	r2, r3
 8008216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008218:	fbb3 f3f2 	udiv	r3, r3, r2
 800821c:	005a      	lsls	r2, r3, #1
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	085b      	lsrs	r3, r3, #1
 8008224:	441a      	add	r2, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	fbb2 f3f3 	udiv	r3, r2, r3
 800822e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	2b0f      	cmp	r3, #15
 8008234:	d916      	bls.n	8008264 <UART_SetConfig+0x508>
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800823c:	d212      	bcs.n	8008264 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	b29b      	uxth	r3, r3
 8008242:	f023 030f 	bic.w	r3, r3, #15
 8008246:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	085b      	lsrs	r3, r3, #1
 800824c:	b29b      	uxth	r3, r3
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	b29a      	uxth	r2, r3
 8008254:	8bfb      	ldrh	r3, [r7, #30]
 8008256:	4313      	orrs	r3, r2
 8008258:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	8bfa      	ldrh	r2, [r7, #30]
 8008260:	60da      	str	r2, [r3, #12]
 8008262:	e062      	b.n	800832a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800826a:	e05e      	b.n	800832a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800826c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008270:	2b08      	cmp	r3, #8
 8008272:	d828      	bhi.n	80082c6 <UART_SetConfig+0x56a>
 8008274:	a201      	add	r2, pc, #4	@ (adr r2, 800827c <UART_SetConfig+0x520>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	080082a1 	.word	0x080082a1
 8008280:	080082a9 	.word	0x080082a9
 8008284:	080082b1 	.word	0x080082b1
 8008288:	080082c7 	.word	0x080082c7
 800828c:	080082b7 	.word	0x080082b7
 8008290:	080082c7 	.word	0x080082c7
 8008294:	080082c7 	.word	0x080082c7
 8008298:	080082c7 	.word	0x080082c7
 800829c:	080082bf 	.word	0x080082bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082a0:	f7fd fe7a 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 80082a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082a6:	e014      	b.n	80082d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082a8:	f7fd fe8c 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 80082ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082ae:	e010      	b.n	80082d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082b0:	4b1a      	ldr	r3, [pc, #104]	@ (800831c <UART_SetConfig+0x5c0>)
 80082b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082b4:	e00d      	b.n	80082d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082b6:	f7fd fdd7 	bl	8005e68 <HAL_RCC_GetSysClockFreq>
 80082ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082bc:	e009      	b.n	80082d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082c4:	e005      	b.n	80082d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80082c6:	2300      	movs	r3, #0
 80082c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082d0:	bf00      	nop
    }

    if (pclk != 0U)
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d028      	beq.n	800832a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082dc:	4a10      	ldr	r2, [pc, #64]	@ (8008320 <UART_SetConfig+0x5c4>)
 80082de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082e2:	461a      	mov	r2, r3
 80082e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	085b      	lsrs	r3, r3, #1
 80082f0:	441a      	add	r2, r3
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	2b0f      	cmp	r3, #15
 8008300:	d910      	bls.n	8008324 <UART_SetConfig+0x5c8>
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008308:	d20c      	bcs.n	8008324 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	b29a      	uxth	r2, r3
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60da      	str	r2, [r3, #12]
 8008314:	e009      	b.n	800832a <UART_SetConfig+0x5ce>
 8008316:	bf00      	nop
 8008318:	40008000 	.word	0x40008000
 800831c:	00f42400 	.word	0x00f42400
 8008320:	0800d964 	.word	0x0800d964
      }
      else
      {
        ret = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2201      	movs	r2, #1
 800832e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2201      	movs	r2, #1
 8008336:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2200      	movs	r2, #0
 800833e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2200      	movs	r2, #0
 8008344:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008346:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800834a:	4618      	mov	r0, r3
 800834c:	3730      	adds	r7, #48	@ 0x30
 800834e:	46bd      	mov	sp, r7
 8008350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	430a      	orrs	r2, r1
 800837c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00a      	beq.n	80083c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c6:	f003 0304 	and.w	r3, r3, #4
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e8:	f003 0310 	and.w	r3, r3, #16
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00a      	beq.n	8008406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800840a:	f003 0320 	and.w	r3, r3, #32
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01a      	beq.n	800846a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008452:	d10a      	bne.n	800846a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00a      	beq.n	800848c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	605a      	str	r2, [r3, #4]
  }
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b098      	sub	sp, #96	@ 0x60
 800849c:	af02      	add	r7, sp, #8
 800849e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084a8:	f7f9 fa90 	bl	80019cc <HAL_GetTick>
 80084ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0308 	and.w	r3, r3, #8
 80084b8:	2b08      	cmp	r3, #8
 80084ba:	d12f      	bne.n	800851c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084c4:	2200      	movs	r2, #0
 80084c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 f88e 	bl	80085ec <UART_WaitOnFlagUntilTimeout>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d022      	beq.n	800851c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084de:	e853 3f00 	ldrex	r3, [r3]
 80084e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80084e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80084f6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084fc:	e841 2300 	strex	r3, r2, [r1]
 8008500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e6      	bne.n	80084d6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2220      	movs	r2, #32
 800850c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e063      	b.n	80085e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0304 	and.w	r3, r3, #4
 8008526:	2b04      	cmp	r3, #4
 8008528:	d149      	bne.n	80085be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800852a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008532:	2200      	movs	r2, #0
 8008534:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f857 	bl	80085ec <UART_WaitOnFlagUntilTimeout>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d03c      	beq.n	80085be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	623b      	str	r3, [r7, #32]
   return(result);
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008562:	633b      	str	r3, [r7, #48]	@ 0x30
 8008564:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e6      	bne.n	8008544 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3308      	adds	r3, #8
 800857c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	e853 3f00 	ldrex	r3, [r3]
 8008584:	60fb      	str	r3, [r7, #12]
   return(result);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f023 0301 	bic.w	r3, r3, #1
 800858c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3308      	adds	r3, #8
 8008594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008596:	61fa      	str	r2, [r7, #28]
 8008598:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859a:	69b9      	ldr	r1, [r7, #24]
 800859c:	69fa      	ldr	r2, [r7, #28]
 800859e:	e841 2300 	strex	r3, r2, [r1]
 80085a2:	617b      	str	r3, [r7, #20]
   return(result);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d1e5      	bne.n	8008576 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e012      	b.n	80085e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2220      	movs	r2, #32
 80085ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3758      	adds	r7, #88	@ 0x58
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	4613      	mov	r3, r2
 80085fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085fc:	e049      	b.n	8008692 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008604:	d045      	beq.n	8008692 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008606:	f7f9 f9e1 	bl	80019cc <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	69ba      	ldr	r2, [r7, #24]
 8008612:	429a      	cmp	r2, r3
 8008614:	d302      	bcc.n	800861c <UART_WaitOnFlagUntilTimeout+0x30>
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e048      	b.n	80086b2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0304 	and.w	r3, r3, #4
 800862a:	2b00      	cmp	r3, #0
 800862c:	d031      	beq.n	8008692 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	69db      	ldr	r3, [r3, #28]
 8008634:	f003 0308 	and.w	r3, r3, #8
 8008638:	2b08      	cmp	r3, #8
 800863a:	d110      	bne.n	800865e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2208      	movs	r2, #8
 8008642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 f95b 	bl	8008900 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2208      	movs	r2, #8
 800864e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e029      	b.n	80086b2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800866c:	d111      	bne.n	8008692 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f000 f941 	bl	8008900 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2220      	movs	r2, #32
 8008682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e00f      	b.n	80086b2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	69da      	ldr	r2, [r3, #28]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	4013      	ands	r3, r2
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	429a      	cmp	r2, r3
 80086a0:	bf0c      	ite	eq
 80086a2:	2301      	moveq	r3, #1
 80086a4:	2300      	movne	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	461a      	mov	r2, r3
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d0a6      	beq.n	80085fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086bc:	b480      	push	{r7}
 80086be:	b0a3      	sub	sp, #140	@ 0x8c
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	88fa      	ldrh	r2, [r7, #6]
 80086d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	88fa      	ldrh	r2, [r7, #6]
 80086dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ee:	d10e      	bne.n	800870e <UART_Start_Receive_IT+0x52>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d105      	bne.n	8008704 <UART_Start_Receive_IT+0x48>
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80086fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008702:	e02d      	b.n	8008760 <UART_Start_Receive_IT+0xa4>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	22ff      	movs	r2, #255	@ 0xff
 8008708:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800870c:	e028      	b.n	8008760 <UART_Start_Receive_IT+0xa4>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d10d      	bne.n	8008732 <UART_Start_Receive_IT+0x76>
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d104      	bne.n	8008728 <UART_Start_Receive_IT+0x6c>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	22ff      	movs	r2, #255	@ 0xff
 8008722:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008726:	e01b      	b.n	8008760 <UART_Start_Receive_IT+0xa4>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	227f      	movs	r2, #127	@ 0x7f
 800872c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008730:	e016      	b.n	8008760 <UART_Start_Receive_IT+0xa4>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800873a:	d10d      	bne.n	8008758 <UART_Start_Receive_IT+0x9c>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d104      	bne.n	800874e <UART_Start_Receive_IT+0x92>
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	227f      	movs	r2, #127	@ 0x7f
 8008748:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800874c:	e008      	b.n	8008760 <UART_Start_Receive_IT+0xa4>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	223f      	movs	r2, #63	@ 0x3f
 8008752:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008756:	e003      	b.n	8008760 <UART_Start_Receive_IT+0xa4>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2222      	movs	r2, #34	@ 0x22
 800876c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3308      	adds	r3, #8
 8008776:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800877a:	e853 3f00 	ldrex	r3, [r3]
 800877e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008782:	f043 0301 	orr.w	r3, r3, #1
 8008786:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3308      	adds	r3, #8
 8008790:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008794:	673a      	str	r2, [r7, #112]	@ 0x70
 8008796:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800879a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80087a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e3      	bne.n	8008770 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087b0:	d14f      	bne.n	8008852 <UART_Start_Receive_IT+0x196>
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80087b8:	88fa      	ldrh	r2, [r7, #6]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d349      	bcc.n	8008852 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087c6:	d107      	bne.n	80087d8 <UART_Start_Receive_IT+0x11c>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d103      	bne.n	80087d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	4a47      	ldr	r2, [pc, #284]	@ (80088f0 <UART_Start_Receive_IT+0x234>)
 80087d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80087d6:	e002      	b.n	80087de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4a46      	ldr	r2, [pc, #280]	@ (80088f4 <UART_Start_Receive_IT+0x238>)
 80087dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d01a      	beq.n	800881c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80087f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	461a      	mov	r2, r3
 8008804:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800880a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800880e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008810:	e841 2300 	strex	r3, r2, [r1]
 8008814:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e4      	bne.n	80087e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3308      	adds	r3, #8
 8008822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008826:	e853 3f00 	ldrex	r3, [r3]
 800882a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800882c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008832:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3308      	adds	r3, #8
 800883a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800883c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800883e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008840:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008844:	e841 2300 	strex	r3, r2, [r1]
 8008848:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800884a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e5      	bne.n	800881c <UART_Start_Receive_IT+0x160>
 8008850:	e046      	b.n	80088e0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800885a:	d107      	bne.n	800886c <UART_Start_Receive_IT+0x1b0>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d103      	bne.n	800886c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	4a24      	ldr	r2, [pc, #144]	@ (80088f8 <UART_Start_Receive_IT+0x23c>)
 8008868:	675a      	str	r2, [r3, #116]	@ 0x74
 800886a:	e002      	b.n	8008872 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4a23      	ldr	r2, [pc, #140]	@ (80088fc <UART_Start_Receive_IT+0x240>)
 8008870:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d019      	beq.n	80088ae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008882:	e853 3f00 	ldrex	r3, [r3]
 8008886:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800888e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	461a      	mov	r2, r3
 8008896:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008898:	637b      	str	r3, [r7, #52]	@ 0x34
 800889a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800889e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80088a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d1e6      	bne.n	800887a <UART_Start_Receive_IT+0x1be>
 80088ac:	e018      	b.n	80088e0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	e853 3f00 	ldrex	r3, [r3]
 80088ba:	613b      	str	r3, [r7, #16]
   return(result);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	f043 0320 	orr.w	r3, r3, #32
 80088c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	461a      	mov	r2, r3
 80088ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088cc:	623b      	str	r3, [r7, #32]
 80088ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d0:	69f9      	ldr	r1, [r7, #28]
 80088d2:	6a3a      	ldr	r2, [r7, #32]
 80088d4:	e841 2300 	strex	r3, r2, [r1]
 80088d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1e6      	bne.n	80088ae <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	378c      	adds	r7, #140	@ 0x8c
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	0800912d 	.word	0x0800912d
 80088f4:	08008dc9 	.word	0x08008dc9
 80088f8:	08008c0d 	.word	0x08008c0d
 80088fc:	08008a51 	.word	0x08008a51

08008900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008900:	b480      	push	{r7}
 8008902:	b095      	sub	sp, #84	@ 0x54
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008918:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800891c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008926:	643b      	str	r3, [r7, #64]	@ 0x40
 8008928:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800892c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e6      	bne.n	8008908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	61fb      	str	r3, [r7, #28]
   return(result);
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008950:	f023 0301 	bic.w	r3, r3, #1
 8008954:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3308      	adds	r3, #8
 800895c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800895e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008960:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008962:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008966:	e841 2300 	strex	r3, r2, [r1]
 800896a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1e3      	bne.n	800893a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008976:	2b01      	cmp	r3, #1
 8008978:	d118      	bne.n	80089ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	e853 3f00 	ldrex	r3, [r3]
 8008986:	60bb      	str	r3, [r7, #8]
   return(result);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f023 0310 	bic.w	r3, r3, #16
 800898e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899c:	6979      	ldr	r1, [r7, #20]
 800899e:	69ba      	ldr	r2, [r7, #24]
 80089a0:	e841 2300 	strex	r3, r2, [r1]
 80089a4:	613b      	str	r3, [r7, #16]
   return(result);
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e6      	bne.n	800897a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80089c0:	bf00      	nop
 80089c2:	3754      	adds	r7, #84	@ 0x54
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	f7ff f9a0 	bl	8007d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089f0:	bf00      	nop
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	e853 3f00 	ldrex	r3, [r3]
 8008a0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a14:	61fb      	str	r3, [r7, #28]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	61bb      	str	r3, [r7, #24]
 8008a20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	6979      	ldr	r1, [r7, #20]
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	e841 2300 	strex	r3, r2, [r1]
 8008a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e6      	bne.n	8008a00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff f96b 	bl	8007d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a46:	bf00      	nop
 8008a48:	3720      	adds	r7, #32
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b09c      	sub	sp, #112	@ 0x70
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a68:	2b22      	cmp	r3, #34	@ 0x22
 8008a6a:	f040 80be 	bne.w	8008bea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008a74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a7c:	b2d9      	uxtb	r1, r3
 8008a7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a88:	400a      	ands	r2, r1
 8008a8a:	b2d2      	uxtb	r2, r2
 8008a8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f040 80a3 	bne.w	8008bfe <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008acc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ad8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008adc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e6      	bne.n	8008ab8 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afc:	f023 0301 	bic.w	r3, r3, #1
 8008b00:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008b0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e5      	bne.n	8008aea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a34      	ldr	r2, [pc, #208]	@ (8008c08 <UART_RxISR_8BIT+0x1b8>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d01f      	beq.n	8008b7c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d018      	beq.n	8008b7c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b52:	e853 3f00 	ldrex	r3, [r3]
 8008b56:	623b      	str	r3, [r7, #32]
   return(result);
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	461a      	mov	r2, r3
 8008b66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b68:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b70:	e841 2300 	strex	r3, r2, [r1]
 8008b74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e6      	bne.n	8008b4a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d12e      	bne.n	8008be2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	e853 3f00 	ldrex	r3, [r3]
 8008b96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0310 	bic.w	r3, r3, #16
 8008b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ba8:	61fb      	str	r3, [r7, #28]
 8008baa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bac:	69b9      	ldr	r1, [r7, #24]
 8008bae:	69fa      	ldr	r2, [r7, #28]
 8008bb0:	e841 2300 	strex	r3, r2, [r1]
 8008bb4:	617b      	str	r3, [r7, #20]
   return(result);
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1e6      	bne.n	8008b8a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	f003 0310 	and.w	r3, r3, #16
 8008bc6:	2b10      	cmp	r3, #16
 8008bc8:	d103      	bne.n	8008bd2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2210      	movs	r2, #16
 8008bd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f7ff f8b2 	bl	8007d44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008be0:	e00d      	b.n	8008bfe <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7f8 f938 	bl	8000e58 <HAL_UART_RxCpltCallback>
}
 8008be8:	e009      	b.n	8008bfe <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	8b1b      	ldrh	r3, [r3, #24]
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f042 0208 	orr.w	r2, r2, #8
 8008bfa:	b292      	uxth	r2, r2
 8008bfc:	831a      	strh	r2, [r3, #24]
}
 8008bfe:	bf00      	nop
 8008c00:	3770      	adds	r7, #112	@ 0x70
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	40008000 	.word	0x40008000

08008c0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b09c      	sub	sp, #112	@ 0x70
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c1a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c24:	2b22      	cmp	r3, #34	@ 0x22
 8008c26:	f040 80be 	bne.w	8008da6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008c30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c38:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008c3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c42:	4013      	ands	r3, r2
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c4e:	1c9a      	adds	r2, r3, #2
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	3b01      	subs	r3, #1
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f040 80a3 	bne.w	8008dba <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c7c:	e853 3f00 	ldrex	r3, [r3]
 8008c80:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c88:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c92:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c94:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e6      	bne.n	8008c74 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3308      	adds	r3, #8
 8008cac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb8:	f023 0301 	bic.w	r3, r3, #1
 8008cbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008cc6:	643a      	str	r2, [r7, #64]	@ 0x40
 8008cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ccc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cce:	e841 2300 	strex	r3, r2, [r1]
 8008cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d1e5      	bne.n	8008ca6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a34      	ldr	r2, [pc, #208]	@ (8008dc4 <UART_RxISR_16BIT+0x1b8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d01f      	beq.n	8008d38 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d018      	beq.n	8008d38 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	e853 3f00 	ldrex	r3, [r3]
 8008d12:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	461a      	mov	r2, r3
 8008d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d26:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d2c:	e841 2300 	strex	r3, r2, [r1]
 8008d30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e6      	bne.n	8008d06 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d12e      	bne.n	8008d9e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	e853 3f00 	ldrex	r3, [r3]
 8008d52:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f023 0310 	bic.w	r3, r3, #16
 8008d5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	461a      	mov	r2, r3
 8008d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d64:	61bb      	str	r3, [r7, #24]
 8008d66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d68:	6979      	ldr	r1, [r7, #20]
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	e841 2300 	strex	r3, r2, [r1]
 8008d70:	613b      	str	r3, [r7, #16]
   return(result);
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1e6      	bne.n	8008d46 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	f003 0310 	and.w	r3, r3, #16
 8008d82:	2b10      	cmp	r3, #16
 8008d84:	d103      	bne.n	8008d8e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2210      	movs	r2, #16
 8008d8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7fe ffd4 	bl	8007d44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d9c:	e00d      	b.n	8008dba <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7f8 f85a 	bl	8000e58 <HAL_UART_RxCpltCallback>
}
 8008da4:	e009      	b.n	8008dba <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	8b1b      	ldrh	r3, [r3, #24]
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f042 0208 	orr.w	r2, r2, #8
 8008db6:	b292      	uxth	r2, r2
 8008db8:	831a      	strh	r2, [r3, #24]
}
 8008dba:	bf00      	nop
 8008dbc:	3770      	adds	r7, #112	@ 0x70
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40008000 	.word	0x40008000

08008dc8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b0ac      	sub	sp, #176	@ 0xb0
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008dd6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dfe:	2b22      	cmp	r3, #34	@ 0x22
 8008e00:	f040 8182 	bne.w	8009108 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e0a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e0e:	e125      	b.n	800905c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008e16:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e1a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008e1e:	b2d9      	uxtb	r1, r3
 8008e20:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e2a:	400a      	ands	r2, r1
 8008e2c:	b2d2      	uxtb	r2, r2
 8008e2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	3b01      	subs	r3, #1
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e5a:	f003 0307 	and.w	r3, r3, #7
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d053      	beq.n	8008f0a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d011      	beq.n	8008e92 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e88:	f043 0201 	orr.w	r2, r3, #1
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e96:	f003 0302 	and.w	r3, r3, #2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d011      	beq.n	8008ec2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00b      	beq.n	8008ec2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eb8:	f043 0204 	orr.w	r2, r3, #4
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ec6:	f003 0304 	and.w	r3, r3, #4
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d011      	beq.n	8008ef2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ece:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00b      	beq.n	8008ef2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2204      	movs	r2, #4
 8008ee0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ee8:	f043 0202 	orr.w	r2, r3, #2
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d006      	beq.n	8008f0a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7fe ff17 	bl	8007d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f040 80a2 	bne.w	800905c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
 8008f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f3c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008f40:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f42:	e841 2300 	strex	r3, r2, [r1]
 8008f46:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008f48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e4      	bne.n	8008f18 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3308      	adds	r3, #8
 8008f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f58:	e853 3f00 	ldrex	r3, [r3]
 8008f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008f5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f64:	f023 0301 	bic.w	r3, r3, #1
 8008f68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3308      	adds	r3, #8
 8008f72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f76:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008f78:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008f7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e1      	bne.n	8008f4e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a60      	ldr	r2, [pc, #384]	@ (8009124 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d021      	beq.n	8008fec <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d01a      	beq.n	8008fec <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fbe:	e853 3f00 	ldrex	r3, [r3]
 8008fc2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008fca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008fd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fda:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fde:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fe0:	e841 2300 	strex	r3, r2, [r1]
 8008fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e4      	bne.n	8008fb6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d130      	bne.n	8009056 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f023 0310 	bic.w	r3, r3, #16
 800900e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800901c:	643b      	str	r3, [r7, #64]	@ 0x40
 800901e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009022:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800902a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e4      	bne.n	8008ffa <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	f003 0310 	and.w	r3, r3, #16
 800903a:	2b10      	cmp	r3, #16
 800903c:	d103      	bne.n	8009046 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2210      	movs	r2, #16
 8009044:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7fe fe78 	bl	8007d44 <HAL_UARTEx_RxEventCallback>
 8009054:	e002      	b.n	800905c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7f7 fefe 	bl	8000e58 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800905c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009060:	2b00      	cmp	r3, #0
 8009062:	d006      	beq.n	8009072 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009068:	f003 0320 	and.w	r3, r3, #32
 800906c:	2b00      	cmp	r3, #0
 800906e:	f47f aecf 	bne.w	8008e10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009078:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800907c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009080:	2b00      	cmp	r3, #0
 8009082:	d04b      	beq.n	800911c <UART_RxISR_8BIT_FIFOEN+0x354>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800908a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800908e:	429a      	cmp	r2, r3
 8009090:	d244      	bcs.n	800911c <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3308      	adds	r3, #8
 8009098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3308      	adds	r3, #8
 80090b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80090b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e3      	bne.n	8009092 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a16      	ldr	r2, [pc, #88]	@ (8009128 <UART_RxISR_8BIT_FIFOEN+0x360>)
 80090ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f043 0320 	orr.w	r3, r3, #32
 80090e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090f2:	61bb      	str	r3, [r7, #24]
 80090f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6979      	ldr	r1, [r7, #20]
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e4      	bne.n	80090d0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009106:	e009      	b.n	800911c <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	8b1b      	ldrh	r3, [r3, #24]
 800910e:	b29a      	uxth	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f042 0208 	orr.w	r2, r2, #8
 8009118:	b292      	uxth	r2, r2
 800911a:	831a      	strh	r2, [r3, #24]
}
 800911c:	bf00      	nop
 800911e:	37b0      	adds	r7, #176	@ 0xb0
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	40008000 	.word	0x40008000
 8009128:	08008a51 	.word	0x08008a51

0800912c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b0ae      	sub	sp, #184	@ 0xb8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800913a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009162:	2b22      	cmp	r3, #34	@ 0x22
 8009164:	f040 8186 	bne.w	8009474 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800916e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009172:	e129      	b.n	80093c8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800917a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009186:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800918a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800918e:	4013      	ands	r3, r2
 8009190:	b29a      	uxth	r2, r3
 8009192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009196:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800919c:	1c9a      	adds	r2, r3, #2
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	3b01      	subs	r3, #1
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091c2:	f003 0307 	and.w	r3, r3, #7
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d053      	beq.n	8009272 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d011      	beq.n	80091fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80091d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00b      	beq.n	80091fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2201      	movs	r2, #1
 80091e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091f0:	f043 0201 	orr.w	r2, r3, #1
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091fe:	f003 0302 	and.w	r3, r3, #2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d011      	beq.n	800922a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00b      	beq.n	800922a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	2202      	movs	r2, #2
 8009218:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009220:	f043 0204 	orr.w	r2, r3, #4
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800922a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800922e:	f003 0304 	and.w	r3, r3, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	d011      	beq.n	800925a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009236:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00b      	beq.n	800925a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2204      	movs	r2, #4
 8009248:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009250:	f043 0202 	orr.w	r2, r3, #2
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009260:	2b00      	cmp	r3, #0
 8009262:	d006      	beq.n	8009272 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7fe fd63 	bl	8007d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009278:	b29b      	uxth	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	f040 80a4 	bne.w	80093c8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800928e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	461a      	mov	r2, r3
 800929e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80092a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092ae:	e841 2300 	strex	r3, r2, [r1]
 80092b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1e2      	bne.n	8009280 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3308      	adds	r3, #8
 80092c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092d0:	f023 0301 	bic.w	r3, r3, #1
 80092d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3308      	adds	r3, #8
 80092de:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80092e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092ea:	e841 2300 	strex	r3, r2, [r1]
 80092ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1e1      	bne.n	80092ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2220      	movs	r2, #32
 80092fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a60      	ldr	r2, [pc, #384]	@ (8009490 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d021      	beq.n	8009358 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d01a      	beq.n	8009358 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800932a:	e853 3f00 	ldrex	r3, [r3]
 800932e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009332:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009336:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009344:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009346:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800934a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800934c:	e841 2300 	strex	r3, r2, [r1]
 8009350:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e4      	bne.n	8009322 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800935c:	2b01      	cmp	r3, #1
 800935e:	d130      	bne.n	80093c2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009376:	f023 0310 	bic.w	r3, r3, #16
 800937a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009388:	647b      	str	r3, [r7, #68]	@ 0x44
 800938a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800938e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009390:	e841 2300 	strex	r3, r2, [r1]
 8009394:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1e4      	bne.n	8009366 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	f003 0310 	and.w	r3, r3, #16
 80093a6:	2b10      	cmp	r3, #16
 80093a8:	d103      	bne.n	80093b2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2210      	movs	r2, #16
 80093b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7fe fcc2 	bl	8007d44 <HAL_UARTEx_RxEventCallback>
 80093c0:	e002      	b.n	80093c8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7f7 fd48 	bl	8000e58 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093c8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d006      	beq.n	80093de <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80093d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093d4:	f003 0320 	and.w	r3, r3, #32
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f47f aecb 	bne.w	8009174 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093e4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d04b      	beq.n	8009488 <UART_RxISR_16BIT_FIFOEN+0x35c>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093f6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d244      	bcs.n	8009488 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	3308      	adds	r3, #8
 8009404:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009408:	e853 3f00 	ldrex	r3, [r3]
 800940c:	623b      	str	r3, [r7, #32]
   return(result);
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009414:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	3308      	adds	r3, #8
 800941e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009422:	633a      	str	r2, [r7, #48]	@ 0x30
 8009424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800942a:	e841 2300 	strex	r3, r2, [r1]
 800942e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1e3      	bne.n	80093fe <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a16      	ldr	r2, [pc, #88]	@ (8009494 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800943a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	60fb      	str	r3, [r7, #12]
   return(result);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f043 0320 	orr.w	r3, r3, #32
 8009450:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
 800945a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	69b9      	ldr	r1, [r7, #24]
 8009464:	69fa      	ldr	r2, [r7, #28]
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	617b      	str	r3, [r7, #20]
   return(result);
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e4      	bne.n	800943c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009472:	e009      	b.n	8009488 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	8b1b      	ldrh	r3, [r3, #24]
 800947a:	b29a      	uxth	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f042 0208 	orr.w	r2, r2, #8
 8009484:	b292      	uxth	r2, r2
 8009486:	831a      	strh	r2, [r3, #24]
}
 8009488:	bf00      	nop
 800948a:	37b8      	adds	r7, #184	@ 0xb8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	40008000 	.word	0x40008000
 8009494:	08008c0d 	.word	0x08008c0d

08009498 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d101      	bne.n	80094ea <HAL_UARTEx_DisableFifoMode+0x16>
 80094e6:	2302      	movs	r3, #2
 80094e8:	e027      	b.n	800953a <HAL_UARTEx_DisableFifoMode+0x66>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2224      	movs	r2, #36	@ 0x24
 80094f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 0201 	bic.w	r2, r2, #1
 8009510:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009518:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2220      	movs	r2, #32
 800952c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009556:	2b01      	cmp	r3, #1
 8009558:	d101      	bne.n	800955e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800955a:	2302      	movs	r3, #2
 800955c:	e02d      	b.n	80095ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2224      	movs	r2, #36	@ 0x24
 800956a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f022 0201 	bic.w	r2, r2, #1
 8009584:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	430a      	orrs	r2, r1
 8009598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f850 	bl	8009640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2220      	movs	r2, #32
 80095ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b084      	sub	sp, #16
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d101      	bne.n	80095da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095d6:	2302      	movs	r3, #2
 80095d8:	e02d      	b.n	8009636 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2201      	movs	r2, #1
 80095de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2224      	movs	r2, #36	@ 0x24
 80095e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0201 	bic.w	r2, r2, #1
 8009600:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 f812 	bl	8009640 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2220      	movs	r2, #32
 8009628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800964c:	2b00      	cmp	r3, #0
 800964e:	d108      	bne.n	8009662 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009660:	e031      	b.n	80096c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009662:	2308      	movs	r3, #8
 8009664:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009666:	2308      	movs	r3, #8
 8009668:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	0e5b      	lsrs	r3, r3, #25
 8009672:	b2db      	uxtb	r3, r3
 8009674:	f003 0307 	and.w	r3, r3, #7
 8009678:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	0f5b      	lsrs	r3, r3, #29
 8009682:	b2db      	uxtb	r3, r3
 8009684:	f003 0307 	and.w	r3, r3, #7
 8009688:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	7b3a      	ldrb	r2, [r7, #12]
 800968e:	4911      	ldr	r1, [pc, #68]	@ (80096d4 <UARTEx_SetNbDataToProcess+0x94>)
 8009690:	5c8a      	ldrb	r2, [r1, r2]
 8009692:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009696:	7b3a      	ldrb	r2, [r7, #12]
 8009698:	490f      	ldr	r1, [pc, #60]	@ (80096d8 <UARTEx_SetNbDataToProcess+0x98>)
 800969a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800969c:	fb93 f3f2 	sdiv	r3, r3, r2
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	7b7a      	ldrb	r2, [r7, #13]
 80096ac:	4909      	ldr	r1, [pc, #36]	@ (80096d4 <UARTEx_SetNbDataToProcess+0x94>)
 80096ae:	5c8a      	ldrb	r2, [r1, r2]
 80096b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096b4:	7b7a      	ldrb	r2, [r7, #13]
 80096b6:	4908      	ldr	r1, [pc, #32]	@ (80096d8 <UARTEx_SetNbDataToProcess+0x98>)
 80096b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80096be:	b29a      	uxth	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	0800d97c 	.word	0x0800d97c
 80096d8:	0800d984 	.word	0x0800d984

080096dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096dc:	b084      	sub	sp, #16
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	f107 001c 	add.w	r0, r7, #28
 80096ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 fa1c 	bl	800ab38 <USB_CoreReset>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009706:	2b00      	cmp	r3, #0
 8009708:	d106      	bne.n	8009718 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	639a      	str	r2, [r3, #56]	@ 0x38
 8009716:	e005      	b.n	8009724 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8009724:	7bfb      	ldrb	r3, [r7, #15]
}
 8009726:	4618      	mov	r0, r3
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009730:	b004      	add	sp, #16
 8009732:	4770      	bx	lr

08009734 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009734:	b480      	push	{r7}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	4613      	mov	r3, r2
 8009740:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009742:	79fb      	ldrb	r3, [r7, #7]
 8009744:	2b02      	cmp	r3, #2
 8009746:	d165      	bne.n	8009814 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	4a3e      	ldr	r2, [pc, #248]	@ (8009844 <USB_SetTurnaroundTime+0x110>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d906      	bls.n	800975e <USB_SetTurnaroundTime+0x2a>
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	4a3d      	ldr	r2, [pc, #244]	@ (8009848 <USB_SetTurnaroundTime+0x114>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d202      	bcs.n	800975e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009758:	230f      	movs	r3, #15
 800975a:	617b      	str	r3, [r7, #20]
 800975c:	e05c      	b.n	8009818 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	4a39      	ldr	r2, [pc, #228]	@ (8009848 <USB_SetTurnaroundTime+0x114>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d306      	bcc.n	8009774 <USB_SetTurnaroundTime+0x40>
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	4a38      	ldr	r2, [pc, #224]	@ (800984c <USB_SetTurnaroundTime+0x118>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d202      	bcs.n	8009774 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800976e:	230e      	movs	r3, #14
 8009770:	617b      	str	r3, [r7, #20]
 8009772:	e051      	b.n	8009818 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	4a35      	ldr	r2, [pc, #212]	@ (800984c <USB_SetTurnaroundTime+0x118>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d306      	bcc.n	800978a <USB_SetTurnaroundTime+0x56>
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	4a34      	ldr	r2, [pc, #208]	@ (8009850 <USB_SetTurnaroundTime+0x11c>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d202      	bcs.n	800978a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009784:	230d      	movs	r3, #13
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	e046      	b.n	8009818 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	4a30      	ldr	r2, [pc, #192]	@ (8009850 <USB_SetTurnaroundTime+0x11c>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d306      	bcc.n	80097a0 <USB_SetTurnaroundTime+0x6c>
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	4a2f      	ldr	r2, [pc, #188]	@ (8009854 <USB_SetTurnaroundTime+0x120>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d802      	bhi.n	80097a0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800979a:	230c      	movs	r3, #12
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	e03b      	b.n	8009818 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	4a2c      	ldr	r2, [pc, #176]	@ (8009854 <USB_SetTurnaroundTime+0x120>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d906      	bls.n	80097b6 <USB_SetTurnaroundTime+0x82>
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	4a2b      	ldr	r2, [pc, #172]	@ (8009858 <USB_SetTurnaroundTime+0x124>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d802      	bhi.n	80097b6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80097b0:	230b      	movs	r3, #11
 80097b2:	617b      	str	r3, [r7, #20]
 80097b4:	e030      	b.n	8009818 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	4a27      	ldr	r2, [pc, #156]	@ (8009858 <USB_SetTurnaroundTime+0x124>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d906      	bls.n	80097cc <USB_SetTurnaroundTime+0x98>
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	4a26      	ldr	r2, [pc, #152]	@ (800985c <USB_SetTurnaroundTime+0x128>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d802      	bhi.n	80097cc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80097c6:	230a      	movs	r3, #10
 80097c8:	617b      	str	r3, [r7, #20]
 80097ca:	e025      	b.n	8009818 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	4a23      	ldr	r2, [pc, #140]	@ (800985c <USB_SetTurnaroundTime+0x128>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d906      	bls.n	80097e2 <USB_SetTurnaroundTime+0xae>
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	4a22      	ldr	r2, [pc, #136]	@ (8009860 <USB_SetTurnaroundTime+0x12c>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d202      	bcs.n	80097e2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80097dc:	2309      	movs	r3, #9
 80097de:	617b      	str	r3, [r7, #20]
 80097e0:	e01a      	b.n	8009818 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	4a1e      	ldr	r2, [pc, #120]	@ (8009860 <USB_SetTurnaroundTime+0x12c>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d306      	bcc.n	80097f8 <USB_SetTurnaroundTime+0xc4>
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	4a1d      	ldr	r2, [pc, #116]	@ (8009864 <USB_SetTurnaroundTime+0x130>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d802      	bhi.n	80097f8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80097f2:	2308      	movs	r3, #8
 80097f4:	617b      	str	r3, [r7, #20]
 80097f6:	e00f      	b.n	8009818 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009864 <USB_SetTurnaroundTime+0x130>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d906      	bls.n	800980e <USB_SetTurnaroundTime+0xda>
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	4a19      	ldr	r2, [pc, #100]	@ (8009868 <USB_SetTurnaroundTime+0x134>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d202      	bcs.n	800980e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009808:	2307      	movs	r3, #7
 800980a:	617b      	str	r3, [r7, #20]
 800980c:	e004      	b.n	8009818 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800980e:	2306      	movs	r3, #6
 8009810:	617b      	str	r3, [r7, #20]
 8009812:	e001      	b.n	8009818 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009814:	2309      	movs	r3, #9
 8009816:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	68da      	ldr	r2, [r3, #12]
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	029b      	lsls	r3, r3, #10
 800982c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009830:	431a      	orrs	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	371c      	adds	r7, #28
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr
 8009844:	00d8acbf 	.word	0x00d8acbf
 8009848:	00e4e1c0 	.word	0x00e4e1c0
 800984c:	00f42400 	.word	0x00f42400
 8009850:	01067380 	.word	0x01067380
 8009854:	011a499f 	.word	0x011a499f
 8009858:	01312cff 	.word	0x01312cff
 800985c:	014ca43f 	.word	0x014ca43f
 8009860:	016e3600 	.word	0x016e3600
 8009864:	01a6ab1f 	.word	0x01a6ab1f
 8009868:	01e84800 	.word	0x01e84800

0800986c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f043 0201 	orr.w	r2, r3, #1
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800988e:	b480      	push	{r7}
 8009890:	b083      	sub	sp, #12
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f023 0201 	bic.w	r2, r3, #1
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	460b      	mov	r3, r1
 80098ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80098bc:	2300      	movs	r3, #0
 80098be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68db      	ldr	r3, [r3, #12]
 80098c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d115      	bne.n	80098fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098de:	2001      	movs	r0, #1
 80098e0:	f7f8 f880 	bl	80019e4 <HAL_Delay>
      ms++;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3301      	adds	r3, #1
 80098e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f001 f8ab 	bl	800aa46 <USB_GetMode>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d01e      	beq.n	8009934 <USB_SetCurrentMode+0x84>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2b31      	cmp	r3, #49	@ 0x31
 80098fa:	d9f0      	bls.n	80098de <USB_SetCurrentMode+0x2e>
 80098fc:	e01a      	b.n	8009934 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80098fe:	78fb      	ldrb	r3, [r7, #3]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d115      	bne.n	8009930 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	68db      	ldr	r3, [r3, #12]
 8009908:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009910:	2001      	movs	r0, #1
 8009912:	f7f8 f867 	bl	80019e4 <HAL_Delay>
      ms++;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3301      	adds	r3, #1
 800991a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 f892 	bl	800aa46 <USB_GetMode>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d005      	beq.n	8009934 <USB_SetCurrentMode+0x84>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b31      	cmp	r3, #49	@ 0x31
 800992c:	d9f0      	bls.n	8009910 <USB_SetCurrentMode+0x60>
 800992e:	e001      	b.n	8009934 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e005      	b.n	8009940 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b32      	cmp	r3, #50	@ 0x32
 8009938:	d101      	bne.n	800993e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e000      	b.n	8009940 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009948:	b084      	sub	sp, #16
 800994a:	b580      	push	{r7, lr}
 800994c:	b086      	sub	sp, #24
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009962:	2300      	movs	r3, #0
 8009964:	613b      	str	r3, [r7, #16]
 8009966:	e009      	b.n	800997c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	3340      	adds	r3, #64	@ 0x40
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	2200      	movs	r2, #0
 8009974:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	3301      	adds	r3, #1
 800997a:	613b      	str	r3, [r7, #16]
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2b0e      	cmp	r3, #14
 8009980:	d9f2      	bls.n	8009968 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009984:	2b00      	cmp	r3, #0
 8009986:	d11c      	bne.n	80099c2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009996:	f043 0302 	orr.w	r3, r3, #2
 800999a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	601a      	str	r2, [r3, #0]
 80099c0:	e005      	b.n	80099ce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099d4:	461a      	mov	r2, r3
 80099d6:	2300      	movs	r3, #0
 80099d8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80099da:	2103      	movs	r1, #3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f959 	bl	8009c94 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099e2:	2110      	movs	r1, #16
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f8f1 	bl	8009bcc <USB_FlushTxFifo>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f91d 	bl	8009c34 <USB_FlushRxFifo>
 80099fa:	4603      	mov	r3, r0
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a16:	461a      	mov	r2, r3
 8009a18:	2300      	movs	r3, #0
 8009a1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a22:	461a      	mov	r2, r3
 8009a24:	2300      	movs	r3, #0
 8009a26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a28:	2300      	movs	r3, #0
 8009a2a:	613b      	str	r3, [r7, #16]
 8009a2c:	e043      	b.n	8009ab6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a44:	d118      	bne.n	8009a78 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a58:	461a      	mov	r2, r3
 8009a5a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	e013      	b.n	8009a8a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	015a      	lsls	r2, r3, #5
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	4413      	add	r3, r2
 8009a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a6e:	461a      	mov	r2, r3
 8009a70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a74:	6013      	str	r3, [r2, #0]
 8009a76:	e008      	b.n	8009a8a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a84:	461a      	mov	r2, r3
 8009a86:	2300      	movs	r3, #0
 8009a88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	015a      	lsls	r2, r3, #5
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	4413      	add	r3, r2
 8009a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a96:	461a      	mov	r2, r3
 8009a98:	2300      	movs	r3, #0
 8009a9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009aae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	613b      	str	r3, [r7, #16]
 8009ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab8:	693a      	ldr	r2, [r7, #16]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d3b7      	bcc.n	8009a2e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009abe:	2300      	movs	r3, #0
 8009ac0:	613b      	str	r3, [r7, #16]
 8009ac2:	e043      	b.n	8009b4c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	015a      	lsls	r2, r3, #5
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ada:	d118      	bne.n	8009b0e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10a      	bne.n	8009af8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aee:	461a      	mov	r2, r3
 8009af0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009af4:	6013      	str	r3, [r2, #0]
 8009af6:	e013      	b.n	8009b20 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b04:	461a      	mov	r2, r3
 8009b06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	e008      	b.n	8009b20 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	2300      	movs	r3, #0
 8009b30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	015a      	lsls	r2, r3, #5
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	4413      	add	r3, r2
 8009b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	613b      	str	r3, [r7, #16]
 8009b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d3b7      	bcc.n	8009ac4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009b74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	f043 0210 	orr.w	r2, r3, #16
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	4b10      	ldr	r3, [pc, #64]	@ (8009bc8 <USB_DevInit+0x280>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d005      	beq.n	8009ba0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	f043 0208 	orr.w	r2, r3, #8
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d107      	bne.n	8009bb6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009bae:	f043 0304 	orr.w	r3, r3, #4
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bc2:	b004      	add	sp, #16
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	803c3800 	.word	0x803c3800

08009bcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4a13      	ldr	r2, [pc, #76]	@ (8009c30 <USB_FlushTxFifo+0x64>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d901      	bls.n	8009bec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e01b      	b.n	8009c24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	daf2      	bge.n	8009bda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	019b      	lsls	r3, r3, #6
 8009bfc:	f043 0220 	orr.w	r2, r3, #32
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	3301      	adds	r3, #1
 8009c08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	4a08      	ldr	r2, [pc, #32]	@ (8009c30 <USB_FlushTxFifo+0x64>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d901      	bls.n	8009c16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e006      	b.n	8009c24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	691b      	ldr	r3, [r3, #16]
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	d0f0      	beq.n	8009c04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	00030d40 	.word	0x00030d40

08009c34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3301      	adds	r3, #1
 8009c44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	4a11      	ldr	r2, [pc, #68]	@ (8009c90 <USB_FlushRxFifo+0x5c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d901      	bls.n	8009c52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e018      	b.n	8009c84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	daf2      	bge.n	8009c40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2210      	movs	r2, #16
 8009c62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	3301      	adds	r3, #1
 8009c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4a08      	ldr	r2, [pc, #32]	@ (8009c90 <USB_FlushRxFifo+0x5c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d901      	bls.n	8009c76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e006      	b.n	8009c84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	f003 0310 	and.w	r3, r3, #16
 8009c7e:	2b10      	cmp	r3, #16
 8009c80:	d0f0      	beq.n	8009c64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	00030d40 	.word	0x00030d40

08009c94 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	68f9      	ldr	r1, [r7, #12]
 8009cb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b087      	sub	sp, #28
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	f003 0306 	and.w	r3, r3, #6
 8009cde:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d002      	beq.n	8009cec <USB_GetDevSpeed+0x26>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b06      	cmp	r3, #6
 8009cea:	d102      	bne.n	8009cf2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009cec:	2302      	movs	r3, #2
 8009cee:	75fb      	strb	r3, [r7, #23]
 8009cf0:	e001      	b.n	8009cf6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009cf2:	230f      	movs	r3, #15
 8009cf4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	371c      	adds	r7, #28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d13a      	bne.n	8009d96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d26:	69da      	ldr	r2, [r3, #28]
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	f003 030f 	and.w	r3, r3, #15
 8009d30:	2101      	movs	r1, #1
 8009d32:	fa01 f303 	lsl.w	r3, r1, r3
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	68f9      	ldr	r1, [r7, #12]
 8009d3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	015a      	lsls	r2, r3, #5
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d155      	bne.n	8009e04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	015a      	lsls	r2, r3, #5
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4413      	add	r3, r2
 8009d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	791b      	ldrb	r3, [r3, #4]
 8009d72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	059b      	lsls	r3, r3, #22
 8009d7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	0151      	lsls	r1, r2, #5
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	440a      	add	r2, r1
 8009d86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d92:	6013      	str	r3, [r2, #0]
 8009d94:	e036      	b.n	8009e04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d9c:	69da      	ldr	r2, [r3, #28]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	f003 030f 	and.w	r3, r3, #15
 8009da6:	2101      	movs	r1, #1
 8009da8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dac:	041b      	lsls	r3, r3, #16
 8009dae:	68f9      	ldr	r1, [r7, #12]
 8009db0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009db4:	4313      	orrs	r3, r2
 8009db6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	015a      	lsls	r2, r3, #5
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d11a      	bne.n	8009e04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	791b      	ldrb	r3, [r3, #4]
 8009de8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dea:	430b      	orrs	r3, r1
 8009dec:	4313      	orrs	r3, r2
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	0151      	lsls	r1, r2, #5
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	440a      	add	r2, r1
 8009df6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
	...

08009e14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	785b      	ldrb	r3, [r3, #1]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d161      	bne.n	8009ef4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e46:	d11f      	bne.n	8009e88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	015a      	lsls	r2, r3, #5
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	0151      	lsls	r1, r2, #5
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	440a      	add	r2, r1
 8009e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68ba      	ldr	r2, [r7, #8]
 8009e78:	0151      	lsls	r1, r2, #5
 8009e7a:	68fa      	ldr	r2, [r7, #12]
 8009e7c:	440a      	add	r2, r1
 8009e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	f003 030f 	and.w	r3, r3, #15
 8009e98:	2101      	movs	r1, #1
 8009e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	43db      	mvns	r3, r3
 8009ea2:	68f9      	ldr	r1, [r7, #12]
 8009ea4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eb2:	69da      	ldr	r2, [r3, #28]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f003 030f 	and.w	r3, r3, #15
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	43db      	mvns	r3, r3
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ecc:	4013      	ands	r3, r2
 8009ece:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	0159      	lsls	r1, r3, #5
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	440b      	add	r3, r1
 8009ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eea:	4619      	mov	r1, r3
 8009eec:	4b35      	ldr	r3, [pc, #212]	@ (8009fc4 <USB_DeactivateEndpoint+0x1b0>)
 8009eee:	4013      	ands	r3, r2
 8009ef0:	600b      	str	r3, [r1, #0]
 8009ef2:	e060      	b.n	8009fb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f0a:	d11f      	bne.n	8009f4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	015a      	lsls	r2, r3, #5
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	4413      	add	r3, r2
 8009f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	0151      	lsls	r1, r2, #5
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	440a      	add	r2, r1
 8009f22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009f2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	015a      	lsls	r2, r3, #5
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	4413      	add	r3, r2
 8009f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	0151      	lsls	r1, r2, #5
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	440a      	add	r2, r1
 8009f42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	f003 030f 	and.w	r3, r3, #15
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f62:	041b      	lsls	r3, r3, #16
 8009f64:	43db      	mvns	r3, r3
 8009f66:	68f9      	ldr	r1, [r7, #12]
 8009f68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f76:	69da      	ldr	r2, [r3, #28]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	2101      	movs	r1, #1
 8009f82:	fa01 f303 	lsl.w	r3, r1, r3
 8009f86:	041b      	lsls	r3, r3, #16
 8009f88:	43db      	mvns	r3, r3
 8009f8a:	68f9      	ldr	r1, [r7, #12]
 8009f8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f90:	4013      	ands	r3, r2
 8009f92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	015a      	lsls	r2, r3, #5
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	0159      	lsls	r1, r3, #5
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	440b      	add	r3, r1
 8009faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4b05      	ldr	r3, [pc, #20]	@ (8009fc8 <USB_DeactivateEndpoint+0x1b4>)
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	ec337800 	.word	0xec337800
 8009fc8:	eff37800 	.word	0xeff37800

08009fcc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	785b      	ldrb	r3, [r3, #1]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	f040 8128 	bne.w	800a23a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d132      	bne.n	800a058 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	015a      	lsls	r2, r3, #5
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	0151      	lsls	r1, r2, #5
 800a004:	697a      	ldr	r2, [r7, #20]
 800a006:	440a      	add	r2, r1
 800a008:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a00c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a010:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	0151      	lsls	r1, r2, #5
 800a028:	697a      	ldr	r2, [r7, #20]
 800a02a:	440a      	add	r2, r1
 800a02c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a030:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	015a      	lsls	r2, r3, #5
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	4413      	add	r3, r2
 800a03e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a042:	691b      	ldr	r3, [r3, #16]
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	0151      	lsls	r1, r2, #5
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	440a      	add	r2, r1
 800a04c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a050:	0cdb      	lsrs	r3, r3, #19
 800a052:	04db      	lsls	r3, r3, #19
 800a054:	6113      	str	r3, [r2, #16]
 800a056:	e092      	b.n	800a17e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	015a      	lsls	r2, r3, #5
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	4413      	add	r3, r2
 800a060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	0151      	lsls	r1, r2, #5
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	440a      	add	r2, r1
 800a06e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a072:	0cdb      	lsrs	r3, r3, #19
 800a074:	04db      	lsls	r3, r3, #19
 800a076:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	0151      	lsls	r1, r2, #5
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	440a      	add	r2, r1
 800a08e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a092:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a096:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a09a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d11a      	bne.n	800a0d8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	691a      	ldr	r2, [r3, #16]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d903      	bls.n	800a0b6 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	689a      	ldr	r2, [r3, #8]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	0151      	lsls	r1, r2, #5
 800a0c8:	697a      	ldr	r2, [r7, #20]
 800a0ca:	440a      	add	r2, r1
 800a0cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a0d4:	6113      	str	r3, [r2, #16]
 800a0d6:	e01b      	b.n	800a110 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	015a      	lsls	r2, r3, #5
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0e4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	6919      	ldr	r1, [r3, #16]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	440b      	add	r3, r1
 800a0f0:	1e59      	subs	r1, r3, #1
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0fa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0fc:	4b8d      	ldr	r3, [pc, #564]	@ (800a334 <USB_EPStartXfer+0x368>)
 800a0fe:	400b      	ands	r3, r1
 800a100:	6939      	ldr	r1, [r7, #16]
 800a102:	0148      	lsls	r0, r1, #5
 800a104:	6979      	ldr	r1, [r7, #20]
 800a106:	4401      	add	r1, r0
 800a108:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a10c:	4313      	orrs	r3, r2
 800a10e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	4413      	add	r3, r2
 800a118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a11c:	691a      	ldr	r2, [r3, #16]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a126:	6939      	ldr	r1, [r7, #16]
 800a128:	0148      	lsls	r0, r1, #5
 800a12a:	6979      	ldr	r1, [r7, #20]
 800a12c:	4401      	add	r1, r0
 800a12e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a132:	4313      	orrs	r3, r2
 800a134:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	791b      	ldrb	r3, [r3, #4]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d11f      	bne.n	800a17e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	4413      	add	r3, r2
 800a146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	693a      	ldr	r2, [r7, #16]
 800a14e:	0151      	lsls	r1, r2, #5
 800a150:	697a      	ldr	r2, [r7, #20]
 800a152:	440a      	add	r2, r1
 800a154:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a158:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a15c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	015a      	lsls	r2, r3, #5
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	4413      	add	r3, r2
 800a166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	0151      	lsls	r1, r2, #5
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	440a      	add	r2, r1
 800a174:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a178:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a17c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	4413      	add	r3, r2
 800a186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	0151      	lsls	r1, r2, #5
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	440a      	add	r2, r1
 800a194:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a198:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a19c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	791b      	ldrb	r3, [r3, #4]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d015      	beq.n	800a1d2 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 8139 	beq.w	800a422 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	f003 030f 	and.w	r3, r3, #15
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1c6:	6979      	ldr	r1, [r7, #20]
 800a1c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	634b      	str	r3, [r1, #52]	@ 0x34
 800a1d0:	e127      	b.n	800a422 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d110      	bne.n	800a204 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	015a      	lsls	r2, r3, #5
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	0151      	lsls	r1, r2, #5
 800a1f4:	697a      	ldr	r2, [r7, #20]
 800a1f6:	440a      	add	r2, r1
 800a1f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a200:	6013      	str	r3, [r2, #0]
 800a202:	e00f      	b.n	800a224 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	015a      	lsls	r2, r3, #5
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	4413      	add	r3, r2
 800a20c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	693a      	ldr	r2, [r7, #16]
 800a214:	0151      	lsls	r1, r2, #5
 800a216:	697a      	ldr	r2, [r7, #20]
 800a218:	440a      	add	r2, r1
 800a21a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a21e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a222:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	68d9      	ldr	r1, [r3, #12]
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	781a      	ldrb	r2, [r3, #0]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	b29b      	uxth	r3, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f9a6 	bl	800a584 <USB_WritePacket>
 800a238:	e0f3      	b.n	800a422 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	015a      	lsls	r2, r3, #5
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	4413      	add	r3, r2
 800a242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	0151      	lsls	r1, r2, #5
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	440a      	add	r2, r1
 800a250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a254:	0cdb      	lsrs	r3, r3, #19
 800a256:	04db      	lsls	r3, r3, #19
 800a258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	015a      	lsls	r2, r3, #5
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	4413      	add	r3, r2
 800a262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	0151      	lsls	r1, r2, #5
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	440a      	add	r2, r1
 800a270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a274:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a278:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a27c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d12f      	bne.n	800a2e4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d003      	beq.n	800a294 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	689a      	ldr	r2, [r3, #8]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	689a      	ldr	r2, [r3, #8]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a8:	691a      	ldr	r2, [r3, #16]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2b2:	6939      	ldr	r1, [r7, #16]
 800a2b4:	0148      	lsls	r0, r1, #5
 800a2b6:	6979      	ldr	r1, [r7, #20]
 800a2b8:	4401      	add	r1, r0
 800a2ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	015a      	lsls	r2, r3, #5
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	693a      	ldr	r2, [r7, #16]
 800a2d2:	0151      	lsls	r1, r2, #5
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	440a      	add	r2, r1
 800a2d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2e0:	6113      	str	r3, [r2, #16]
 800a2e2:	e061      	b.n	800a3a8 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d125      	bne.n	800a338 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	015a      	lsls	r2, r3, #5
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	4413      	add	r3, r2
 800a2f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2f8:	691a      	ldr	r2, [r3, #16]
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a302:	6939      	ldr	r1, [r7, #16]
 800a304:	0148      	lsls	r0, r1, #5
 800a306:	6979      	ldr	r1, [r7, #20]
 800a308:	4401      	add	r1, r0
 800a30a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a30e:	4313      	orrs	r3, r2
 800a310:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	015a      	lsls	r2, r3, #5
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	4413      	add	r3, r2
 800a31a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	693a      	ldr	r2, [r7, #16]
 800a322:	0151      	lsls	r1, r2, #5
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	440a      	add	r2, r1
 800a328:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a32c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a330:	6113      	str	r3, [r2, #16]
 800a332:	e039      	b.n	800a3a8 <USB_EPStartXfer+0x3dc>
 800a334:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	691a      	ldr	r2, [r3, #16]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	4413      	add	r3, r2
 800a342:	1e5a      	subs	r2, r3, #1
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	fbb2 f3f3 	udiv	r3, r2, r3
 800a34c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	89fa      	ldrh	r2, [r7, #14]
 800a354:	fb03 f202 	mul.w	r2, r3, r2
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	015a      	lsls	r2, r3, #5
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	4413      	add	r3, r2
 800a364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a368:	691a      	ldr	r2, [r3, #16]
 800a36a:	89fb      	ldrh	r3, [r7, #14]
 800a36c:	04d9      	lsls	r1, r3, #19
 800a36e:	4b2f      	ldr	r3, [pc, #188]	@ (800a42c <USB_EPStartXfer+0x460>)
 800a370:	400b      	ands	r3, r1
 800a372:	6939      	ldr	r1, [r7, #16]
 800a374:	0148      	lsls	r0, r1, #5
 800a376:	6979      	ldr	r1, [r7, #20]
 800a378:	4401      	add	r1, r0
 800a37a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a37e:	4313      	orrs	r3, r2
 800a380:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38e:	691a      	ldr	r2, [r3, #16]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a398:	6939      	ldr	r1, [r7, #16]
 800a39a:	0148      	lsls	r0, r1, #5
 800a39c:	6979      	ldr	r1, [r7, #20]
 800a39e:	4401      	add	r1, r0
 800a3a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	791b      	ldrb	r3, [r3, #4]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d128      	bne.n	800a402 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d110      	bne.n	800a3e2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	015a      	lsls	r2, r3, #5
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	0151      	lsls	r1, r2, #5
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	440a      	add	r2, r1
 800a3d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	e00f      	b.n	800a402 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	015a      	lsls	r2, r3, #5
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	0151      	lsls	r1, r2, #5
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	440a      	add	r2, r1
 800a3f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a400:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	015a      	lsls	r2, r3, #5
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	4413      	add	r3, r2
 800a40a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	693a      	ldr	r2, [r7, #16]
 800a412:	0151      	lsls	r1, r2, #5
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	440a      	add	r2, r1
 800a418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a41c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a420:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3718      	adds	r7, #24
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	1ff80000 	.word	0x1ff80000

0800a430 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a43a:	2300      	movs	r3, #0
 800a43c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	785b      	ldrb	r3, [r3, #1]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d14a      	bne.n	800a4e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	015a      	lsls	r2, r3, #5
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	4413      	add	r3, r2
 800a458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a462:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a466:	f040 8086 	bne.w	800a576 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	015a      	lsls	r2, r3, #5
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	4413      	add	r3, r2
 800a474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	7812      	ldrb	r2, [r2, #0]
 800a47e:	0151      	lsls	r1, r2, #5
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	440a      	add	r2, r1
 800a484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a488:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a48c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	781b      	ldrb	r3, [r3, #0]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	7812      	ldrb	r2, [r2, #0]
 800a4a2:	0151      	lsls	r1, r2, #5
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	440a      	add	r2, r1
 800a4a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d902      	bls.n	800a4c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	75fb      	strb	r3, [r7, #23]
          break;
 800a4c6:	e056      	b.n	800a576 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	015a      	lsls	r2, r3, #5
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4e0:	d0e7      	beq.n	800a4b2 <USB_EPStopXfer+0x82>
 800a4e2:	e048      	b.n	800a576 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4fc:	d13b      	bne.n	800a576 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	015a      	lsls	r2, r3, #5
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	4413      	add	r3, r2
 800a508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	7812      	ldrb	r2, [r2, #0]
 800a512:	0151      	lsls	r1, r2, #5
 800a514:	693a      	ldr	r2, [r7, #16]
 800a516:	440a      	add	r2, r1
 800a518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a51c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a520:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	7812      	ldrb	r2, [r2, #0]
 800a536:	0151      	lsls	r1, r2, #5
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	440a      	add	r2, r1
 800a53c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a540:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a544:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	3301      	adds	r3, #1
 800a54a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a552:	4293      	cmp	r3, r2
 800a554:	d902      	bls.n	800a55c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	75fb      	strb	r3, [r7, #23]
          break;
 800a55a:	e00c      	b.n	800a576 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	015a      	lsls	r2, r3, #5
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	4413      	add	r3, r2
 800a566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a570:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a574:	d0e7      	beq.n	800a546 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a576:	7dfb      	ldrb	r3, [r7, #23]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a584:	b480      	push	{r7}
 800a586:	b089      	sub	sp, #36	@ 0x24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	4611      	mov	r1, r2
 800a590:	461a      	mov	r2, r3
 800a592:	460b      	mov	r3, r1
 800a594:	71fb      	strb	r3, [r7, #7]
 800a596:	4613      	mov	r3, r2
 800a598:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a5a2:	88bb      	ldrh	r3, [r7, #4]
 800a5a4:	3303      	adds	r3, #3
 800a5a6:	089b      	lsrs	r3, r3, #2
 800a5a8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	61bb      	str	r3, [r7, #24]
 800a5ae:	e018      	b.n	800a5e2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5b0:	79fb      	ldrb	r3, [r7, #7]
 800a5b2:	031a      	lsls	r2, r3, #12
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5bc:	461a      	mov	r2, r3
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	61bb      	str	r3, [r7, #24]
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d3e2      	bcc.n	800a5b0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3724      	adds	r7, #36	@ 0x24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b08b      	sub	sp, #44	@ 0x2c
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	4613      	mov	r3, r2
 800a604:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a60e:	88fb      	ldrh	r3, [r7, #6]
 800a610:	089b      	lsrs	r3, r3, #2
 800a612:	b29b      	uxth	r3, r3
 800a614:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a616:	88fb      	ldrh	r3, [r7, #6]
 800a618:	f003 0303 	and.w	r3, r3, #3
 800a61c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a61e:	2300      	movs	r3, #0
 800a620:	623b      	str	r3, [r7, #32]
 800a622:	e014      	b.n	800a64e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a632:	3301      	adds	r3, #1
 800a634:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a638:	3301      	adds	r3, #1
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	3301      	adds	r3, #1
 800a640:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a644:	3301      	adds	r3, #1
 800a646:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	3301      	adds	r3, #1
 800a64c:	623b      	str	r3, [r7, #32]
 800a64e:	6a3a      	ldr	r2, [r7, #32]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	429a      	cmp	r2, r3
 800a654:	d3e6      	bcc.n	800a624 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a656:	8bfb      	ldrh	r3, [r7, #30]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d01e      	beq.n	800a69a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a65c:	2300      	movs	r3, #0
 800a65e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a666:	461a      	mov	r2, r3
 800a668:	f107 0310 	add.w	r3, r7, #16
 800a66c:	6812      	ldr	r2, [r2, #0]
 800a66e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	b2db      	uxtb	r3, r3
 800a676:	00db      	lsls	r3, r3, #3
 800a678:	fa22 f303 	lsr.w	r3, r2, r3
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	701a      	strb	r2, [r3, #0]
      i++;
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	3301      	adds	r3, #1
 800a686:	623b      	str	r3, [r7, #32]
      pDest++;
 800a688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68a:	3301      	adds	r3, #1
 800a68c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a68e:	8bfb      	ldrh	r3, [r7, #30]
 800a690:	3b01      	subs	r3, #1
 800a692:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a694:	8bfb      	ldrh	r3, [r7, #30]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1ea      	bne.n	800a670 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	372c      	adds	r7, #44	@ 0x2c
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	785b      	ldrb	r3, [r3, #1]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d12c      	bne.n	800a71e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	015a      	lsls	r2, r3, #5
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	db12      	blt.n	800a6fc <USB_EPSetStall+0x54>
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00f      	beq.n	800a6fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	0151      	lsls	r1, r2, #5
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	440a      	add	r2, r1
 800a6f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a6fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	0151      	lsls	r1, r2, #5
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	440a      	add	r2, r1
 800a712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a716:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	e02b      	b.n	800a776 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	015a      	lsls	r2, r3, #5
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	4413      	add	r3, r2
 800a726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	db12      	blt.n	800a756 <USB_EPSetStall+0xae>
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00f      	beq.n	800a756 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	0151      	lsls	r1, r2, #5
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	440a      	add	r2, r1
 800a74c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a750:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a754:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	0151      	lsls	r1, r2, #5
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	440a      	add	r2, r1
 800a76c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a770:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a774:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	785b      	ldrb	r3, [r3, #1]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d128      	bne.n	800a7f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	0151      	lsls	r1, r2, #5
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	440a      	add	r2, r1
 800a7b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	791b      	ldrb	r3, [r3, #4]
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d003      	beq.n	800a7d0 <USB_EPClearStall+0x4c>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	791b      	ldrb	r3, [r3, #4]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d138      	bne.n	800a842 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	0151      	lsls	r1, r2, #5
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	440a      	add	r2, r1
 800a7e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	e027      	b.n	800a842 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	015a      	lsls	r2, r3, #5
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	0151      	lsls	r1, r2, #5
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	440a      	add	r2, r1
 800a808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a80c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a810:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	791b      	ldrb	r3, [r3, #4]
 800a816:	2b03      	cmp	r3, #3
 800a818:	d003      	beq.n	800a822 <USB_EPClearStall+0x9e>
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	791b      	ldrb	r3, [r3, #4]
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d10f      	bne.n	800a842 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	0151      	lsls	r1, r2, #5
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	440a      	add	r2, r1
 800a838:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a83c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a840:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3714      	adds	r7, #20
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	460b      	mov	r3, r1
 800a85a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a86e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a872:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	011b      	lsls	r3, r3, #4
 800a880:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a884:	68f9      	ldr	r1, [r7, #12]
 800a886:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a88a:	4313      	orrs	r3, r2
 800a88c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8b6:	f023 0303 	bic.w	r3, r3, #3
 800a8ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8ca:	f023 0302 	bic.w	r3, r3, #2
 800a8ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b085      	sub	sp, #20
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8f8:	f023 0303 	bic.w	r3, r3, #3
 800a8fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a90c:	f043 0302 	orr.w	r3, r3, #2
 800a910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	4013      	ands	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a938:	68fb      	ldr	r3, [r7, #12]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3714      	adds	r7, #20
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a946:	b480      	push	{r7}
 800a948:	b085      	sub	sp, #20
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	4013      	ands	r3, r2
 800a968:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	0c1b      	lsrs	r3, r3, #16
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a97a:	b480      	push	{r7}
 800a97c:	b085      	sub	sp, #20
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	4013      	ands	r3, r2
 800a99c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	b29b      	uxth	r3, r3
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b085      	sub	sp, #20
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9d4:	695b      	ldr	r3, [r3, #20]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	4013      	ands	r3, r2
 800a9da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9dc:	68bb      	ldr	r3, [r7, #8]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3714      	adds	r7, #20
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b087      	sub	sp, #28
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	f003 030f 	and.w	r3, r3, #15
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1a:	01db      	lsls	r3, r3, #7
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa24:	78fb      	ldrb	r3, [r7, #3]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	4013      	ands	r3, r2
 800aa36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa38:	68bb      	ldr	r3, [r7, #8]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	371c      	adds	r7, #28
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b083      	sub	sp, #12
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	f003 0301 	and.w	r3, r3, #1
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b085      	sub	sp, #20
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aa80:	f023 0307 	bic.w	r3, r3, #7
 800aa84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	333c      	adds	r3, #60	@ 0x3c
 800aaba:	3304      	adds	r3, #4
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	4a1c      	ldr	r2, [pc, #112]	@ (800ab34 <USB_EP0_OutStart+0x8c>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d90a      	bls.n	800aade <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aad4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aad8:	d101      	bne.n	800aade <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	e024      	b.n	800ab28 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae4:	461a      	mov	r2, r3
 800aae6:	2300      	movs	r3, #0
 800aae8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aaf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aafc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab0c:	f043 0318 	orr.w	r3, r3, #24
 800ab10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab20:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ab24:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	4f54300a 	.word	0x4f54300a

0800ab38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	3301      	adds	r3, #1
 800ab48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	4a13      	ldr	r2, [pc, #76]	@ (800ab9c <USB_CoreReset+0x64>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d901      	bls.n	800ab56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e01b      	b.n	800ab8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	daf2      	bge.n	800ab44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	f043 0201 	orr.w	r2, r3, #1
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	3301      	adds	r3, #1
 800ab72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	4a09      	ldr	r2, [pc, #36]	@ (800ab9c <USB_CoreReset+0x64>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d901      	bls.n	800ab80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ab7c:	2303      	movs	r3, #3
 800ab7e:	e006      	b.n	800ab8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	f003 0301 	and.w	r3, r3, #1
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d0f0      	beq.n	800ab6e <USB_CoreReset+0x36>

  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3714      	adds	r7, #20
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	00030d40 	.word	0x00030d40

0800aba0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abac:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800abb0:	f002 fe2c 	bl	800d80c <USBD_static_malloc>
 800abb4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d109      	bne.n	800abd0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	32b0      	adds	r2, #176	@ 0xb0
 800abc6:	2100      	movs	r1, #0
 800abc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800abcc:	2302      	movs	r3, #2
 800abce:	e0d4      	b.n	800ad7a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800abd0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800abd4:	2100      	movs	r1, #0
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f002 fe36 	bl	800d848 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	32b0      	adds	r2, #176	@ 0xb0
 800abe6:	68f9      	ldr	r1, [r7, #12]
 800abe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	32b0      	adds	r2, #176	@ 0xb0
 800abf6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	7c1b      	ldrb	r3, [r3, #16]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d138      	bne.n	800ac7a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac08:	4b5e      	ldr	r3, [pc, #376]	@ (800ad84 <USBD_CDC_Init+0x1e4>)
 800ac0a:	7819      	ldrb	r1, [r3, #0]
 800ac0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac10:	2202      	movs	r2, #2
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f002 fbe6 	bl	800d3e4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac18:	4b5a      	ldr	r3, [pc, #360]	@ (800ad84 <USBD_CDC_Init+0x1e4>)
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	f003 020f 	and.w	r2, r3, #15
 800ac20:	6879      	ldr	r1, [r7, #4]
 800ac22:	4613      	mov	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	440b      	add	r3, r1
 800ac2c:	3324      	adds	r3, #36	@ 0x24
 800ac2e:	2201      	movs	r2, #1
 800ac30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac32:	4b55      	ldr	r3, [pc, #340]	@ (800ad88 <USBD_CDC_Init+0x1e8>)
 800ac34:	7819      	ldrb	r1, [r3, #0]
 800ac36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f002 fbd1 	bl	800d3e4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac42:	4b51      	ldr	r3, [pc, #324]	@ (800ad88 <USBD_CDC_Init+0x1e8>)
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	f003 020f 	and.w	r2, r3, #15
 800ac4a:	6879      	ldr	r1, [r7, #4]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4413      	add	r3, r2
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	440b      	add	r3, r1
 800ac56:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac5e:	4b4b      	ldr	r3, [pc, #300]	@ (800ad8c <USBD_CDC_Init+0x1ec>)
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	f003 020f 	and.w	r2, r3, #15
 800ac66:	6879      	ldr	r1, [r7, #4]
 800ac68:	4613      	mov	r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	440b      	add	r3, r1
 800ac72:	3326      	adds	r3, #38	@ 0x26
 800ac74:	2210      	movs	r2, #16
 800ac76:	801a      	strh	r2, [r3, #0]
 800ac78:	e035      	b.n	800ace6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac7a:	4b42      	ldr	r3, [pc, #264]	@ (800ad84 <USBD_CDC_Init+0x1e4>)
 800ac7c:	7819      	ldrb	r1, [r3, #0]
 800ac7e:	2340      	movs	r3, #64	@ 0x40
 800ac80:	2202      	movs	r2, #2
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f002 fbae 	bl	800d3e4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac88:	4b3e      	ldr	r3, [pc, #248]	@ (800ad84 <USBD_CDC_Init+0x1e4>)
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f003 020f 	and.w	r2, r3, #15
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	440b      	add	r3, r1
 800ac9c:	3324      	adds	r3, #36	@ 0x24
 800ac9e:	2201      	movs	r2, #1
 800aca0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aca2:	4b39      	ldr	r3, [pc, #228]	@ (800ad88 <USBD_CDC_Init+0x1e8>)
 800aca4:	7819      	ldrb	r1, [r3, #0]
 800aca6:	2340      	movs	r3, #64	@ 0x40
 800aca8:	2202      	movs	r2, #2
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f002 fb9a 	bl	800d3e4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800acb0:	4b35      	ldr	r3, [pc, #212]	@ (800ad88 <USBD_CDC_Init+0x1e8>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	f003 020f 	and.w	r2, r3, #15
 800acb8:	6879      	ldr	r1, [r7, #4]
 800acba:	4613      	mov	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	440b      	add	r3, r1
 800acc4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800acc8:	2201      	movs	r2, #1
 800acca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800accc:	4b2f      	ldr	r3, [pc, #188]	@ (800ad8c <USBD_CDC_Init+0x1ec>)
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	f003 020f 	and.w	r2, r3, #15
 800acd4:	6879      	ldr	r1, [r7, #4]
 800acd6:	4613      	mov	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	440b      	add	r3, r1
 800ace0:	3326      	adds	r3, #38	@ 0x26
 800ace2:	2210      	movs	r2, #16
 800ace4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ace6:	4b29      	ldr	r3, [pc, #164]	@ (800ad8c <USBD_CDC_Init+0x1ec>)
 800ace8:	7819      	ldrb	r1, [r3, #0]
 800acea:	2308      	movs	r3, #8
 800acec:	2203      	movs	r2, #3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f002 fb78 	bl	800d3e4 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800acf4:	4b25      	ldr	r3, [pc, #148]	@ (800ad8c <USBD_CDC_Init+0x1ec>)
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	f003 020f 	and.w	r2, r3, #15
 800acfc:	6879      	ldr	r1, [r7, #4]
 800acfe:	4613      	mov	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4413      	add	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	440b      	add	r3, r1
 800ad08:	3324      	adds	r3, #36	@ 0x24
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	33b0      	adds	r3, #176	@ 0xb0
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d101      	bne.n	800ad48 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad44:	2302      	movs	r3, #2
 800ad46:	e018      	b.n	800ad7a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	7c1b      	ldrb	r3, [r3, #16]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10a      	bne.n	800ad66 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad50:	4b0d      	ldr	r3, [pc, #52]	@ (800ad88 <USBD_CDC_Init+0x1e8>)
 800ad52:	7819      	ldrb	r1, [r3, #0]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f002 fcba 	bl	800d6d8 <USBD_LL_PrepareReceive>
 800ad64:	e008      	b.n	800ad78 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad66:	4b08      	ldr	r3, [pc, #32]	@ (800ad88 <USBD_CDC_Init+0x1e8>)
 800ad68:	7819      	ldrb	r1, [r3, #0]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad70:	2340      	movs	r3, #64	@ 0x40
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f002 fcb0 	bl	800d6d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	20000093 	.word	0x20000093
 800ad88:	20000094 	.word	0x20000094
 800ad8c:	20000095 	.word	0x20000095

0800ad90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad9c:	4b3a      	ldr	r3, [pc, #232]	@ (800ae88 <USBD_CDC_DeInit+0xf8>)
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	4619      	mov	r1, r3
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f002 fb5c 	bl	800d460 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ada8:	4b37      	ldr	r3, [pc, #220]	@ (800ae88 <USBD_CDC_DeInit+0xf8>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	f003 020f 	and.w	r2, r3, #15
 800adb0:	6879      	ldr	r1, [r7, #4]
 800adb2:	4613      	mov	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	4413      	add	r3, r2
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	440b      	add	r3, r1
 800adbc:	3324      	adds	r3, #36	@ 0x24
 800adbe:	2200      	movs	r2, #0
 800adc0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800adc2:	4b32      	ldr	r3, [pc, #200]	@ (800ae8c <USBD_CDC_DeInit+0xfc>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f002 fb49 	bl	800d460 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800adce:	4b2f      	ldr	r3, [pc, #188]	@ (800ae8c <USBD_CDC_DeInit+0xfc>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	f003 020f 	and.w	r2, r3, #15
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	4613      	mov	r3, r2
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	440b      	add	r3, r1
 800ade2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ade6:	2200      	movs	r2, #0
 800ade8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800adea:	4b29      	ldr	r3, [pc, #164]	@ (800ae90 <USBD_CDC_DeInit+0x100>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	4619      	mov	r1, r3
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f002 fb35 	bl	800d460 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800adf6:	4b26      	ldr	r3, [pc, #152]	@ (800ae90 <USBD_CDC_DeInit+0x100>)
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	f003 020f 	and.w	r2, r3, #15
 800adfe:	6879      	ldr	r1, [r7, #4]
 800ae00:	4613      	mov	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	4413      	add	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	440b      	add	r3, r1
 800ae0a:	3324      	adds	r3, #36	@ 0x24
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae10:	4b1f      	ldr	r3, [pc, #124]	@ (800ae90 <USBD_CDC_DeInit+0x100>)
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	f003 020f 	and.w	r2, r3, #15
 800ae18:	6879      	ldr	r1, [r7, #4]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4413      	add	r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	440b      	add	r3, r1
 800ae24:	3326      	adds	r3, #38	@ 0x26
 800ae26:	2200      	movs	r2, #0
 800ae28:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	32b0      	adds	r2, #176	@ 0xb0
 800ae34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d01f      	beq.n	800ae7c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	33b0      	adds	r3, #176	@ 0xb0
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	685b      	ldr	r3, [r3, #4]
 800ae4e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	32b0      	adds	r2, #176	@ 0xb0
 800ae5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f002 fce2 	bl	800d828 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	32b0      	adds	r2, #176	@ 0xb0
 800ae6e:	2100      	movs	r1, #0
 800ae70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	20000093 	.word	0x20000093
 800ae8c:	20000094 	.word	0x20000094
 800ae90:	20000095 	.word	0x20000095

0800ae94 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	32b0      	adds	r2, #176	@ 0xb0
 800aea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aec0:	2303      	movs	r3, #3
 800aec2:	e0bf      	b.n	800b044 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d050      	beq.n	800af72 <USBD_CDC_Setup+0xde>
 800aed0:	2b20      	cmp	r3, #32
 800aed2:	f040 80af 	bne.w	800b034 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	88db      	ldrh	r3, [r3, #6]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d03a      	beq.n	800af54 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	b25b      	sxtb	r3, r3
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	da1b      	bge.n	800af20 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	33b0      	adds	r3, #176	@ 0xb0
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aefe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	88d2      	ldrh	r2, [r2, #6]
 800af04:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	88db      	ldrh	r3, [r3, #6]
 800af0a:	2b07      	cmp	r3, #7
 800af0c:	bf28      	it	cs
 800af0e:	2307      	movcs	r3, #7
 800af10:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	89fa      	ldrh	r2, [r7, #14]
 800af16:	4619      	mov	r1, r3
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f001 fdb1 	bl	800ca80 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af1e:	e090      	b.n	800b042 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	785a      	ldrb	r2, [r3, #1]
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	88db      	ldrh	r3, [r3, #6]
 800af2e:	2b3f      	cmp	r3, #63	@ 0x3f
 800af30:	d803      	bhi.n	800af3a <USBD_CDC_Setup+0xa6>
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	88db      	ldrh	r3, [r3, #6]
 800af36:	b2da      	uxtb	r2, r3
 800af38:	e000      	b.n	800af3c <USBD_CDC_Setup+0xa8>
 800af3a:	2240      	movs	r2, #64	@ 0x40
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af42:	6939      	ldr	r1, [r7, #16]
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800af4a:	461a      	mov	r2, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f001 fdc3 	bl	800cad8 <USBD_CtlPrepareRx>
      break;
 800af52:	e076      	b.n	800b042 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	33b0      	adds	r3, #176	@ 0xb0
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4413      	add	r3, r2
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	7850      	ldrb	r0, [r2, #1]
 800af6a:	2200      	movs	r2, #0
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	4798      	blx	r3
      break;
 800af70:	e067      	b.n	800b042 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	785b      	ldrb	r3, [r3, #1]
 800af76:	2b0b      	cmp	r3, #11
 800af78:	d851      	bhi.n	800b01e <USBD_CDC_Setup+0x18a>
 800af7a:	a201      	add	r2, pc, #4	@ (adr r2, 800af80 <USBD_CDC_Setup+0xec>)
 800af7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af80:	0800afb1 	.word	0x0800afb1
 800af84:	0800b02d 	.word	0x0800b02d
 800af88:	0800b01f 	.word	0x0800b01f
 800af8c:	0800b01f 	.word	0x0800b01f
 800af90:	0800b01f 	.word	0x0800b01f
 800af94:	0800b01f 	.word	0x0800b01f
 800af98:	0800b01f 	.word	0x0800b01f
 800af9c:	0800b01f 	.word	0x0800b01f
 800afa0:	0800b01f 	.word	0x0800b01f
 800afa4:	0800b01f 	.word	0x0800b01f
 800afa8:	0800afdb 	.word	0x0800afdb
 800afac:	0800b005 	.word	0x0800b005
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b03      	cmp	r3, #3
 800afba:	d107      	bne.n	800afcc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afbc:	f107 030a 	add.w	r3, r7, #10
 800afc0:	2202      	movs	r2, #2
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 fd5b 	bl	800ca80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afca:	e032      	b.n	800b032 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f001 fce5 	bl	800c99e <USBD_CtlError>
            ret = USBD_FAIL;
 800afd4:	2303      	movs	r3, #3
 800afd6:	75fb      	strb	r3, [r7, #23]
          break;
 800afd8:	e02b      	b.n	800b032 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d107      	bne.n	800aff6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800afe6:	f107 030d 	add.w	r3, r7, #13
 800afea:	2201      	movs	r2, #1
 800afec:	4619      	mov	r1, r3
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f001 fd46 	bl	800ca80 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aff4:	e01d      	b.n	800b032 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f001 fcd0 	bl	800c99e <USBD_CtlError>
            ret = USBD_FAIL;
 800affe:	2303      	movs	r3, #3
 800b000:	75fb      	strb	r3, [r7, #23]
          break;
 800b002:	e016      	b.n	800b032 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	d00f      	beq.n	800b030 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f001 fcc3 	bl	800c99e <USBD_CtlError>
            ret = USBD_FAIL;
 800b018:	2303      	movs	r3, #3
 800b01a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b01c:	e008      	b.n	800b030 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b01e:	6839      	ldr	r1, [r7, #0]
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f001 fcbc 	bl	800c99e <USBD_CtlError>
          ret = USBD_FAIL;
 800b026:	2303      	movs	r3, #3
 800b028:	75fb      	strb	r3, [r7, #23]
          break;
 800b02a:	e002      	b.n	800b032 <USBD_CDC_Setup+0x19e>
          break;
 800b02c:	bf00      	nop
 800b02e:	e008      	b.n	800b042 <USBD_CDC_Setup+0x1ae>
          break;
 800b030:	bf00      	nop
      }
      break;
 800b032:	e006      	b.n	800b042 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f001 fcb1 	bl	800c99e <USBD_CtlError>
      ret = USBD_FAIL;
 800b03c:	2303      	movs	r3, #3
 800b03e:	75fb      	strb	r3, [r7, #23]
      break;
 800b040:	bf00      	nop
  }

  return (uint8_t)ret;
 800b042:	7dfb      	ldrb	r3, [r7, #23]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3718      	adds	r7, #24
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b05e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	32b0      	adds	r2, #176	@ 0xb0
 800b06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b072:	2303      	movs	r3, #3
 800b074:	e065      	b.n	800b142 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	32b0      	adds	r2, #176	@ 0xb0
 800b080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b084:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b086:	78fb      	ldrb	r3, [r7, #3]
 800b088:	f003 020f 	and.w	r2, r3, #15
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	4613      	mov	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	4413      	add	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	440b      	add	r3, r1
 800b098:	3318      	adds	r3, #24
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d02f      	beq.n	800b100 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	f003 020f 	and.w	r2, r3, #15
 800b0a6:	6879      	ldr	r1, [r7, #4]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	440b      	add	r3, r1
 800b0b2:	3318      	adds	r3, #24
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	78fb      	ldrb	r3, [r7, #3]
 800b0b8:	f003 010f 	and.w	r1, r3, #15
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	440b      	add	r3, r1
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4403      	add	r3, r0
 800b0c8:	3344      	adds	r3, #68	@ 0x44
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0d0:	fb01 f303 	mul.w	r3, r1, r3
 800b0d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d112      	bne.n	800b100 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b0da:	78fb      	ldrb	r3, [r7, #3]
 800b0dc:	f003 020f 	and.w	r2, r3, #15
 800b0e0:	6879      	ldr	r1, [r7, #4]
 800b0e2:	4613      	mov	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	440b      	add	r3, r1
 800b0ec:	3318      	adds	r3, #24
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0f2:	78f9      	ldrb	r1, [r7, #3]
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f002 fab5 	bl	800d668 <USBD_LL_Transmit>
 800b0fe:	e01f      	b.n	800b140 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2200      	movs	r2, #0
 800b104:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	33b0      	adds	r3, #176	@ 0xb0
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4413      	add	r3, r2
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d010      	beq.n	800b140 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	33b0      	adds	r3, #176	@ 0xb0
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b13c:	78fa      	ldrb	r2, [r7, #3]
 800b13e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b084      	sub	sp, #16
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	460b      	mov	r3, r1
 800b154:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	32b0      	adds	r2, #176	@ 0xb0
 800b160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b164:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	32b0      	adds	r2, #176	@ 0xb0
 800b170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b178:	2303      	movs	r3, #3
 800b17a:	e01a      	b.n	800b1b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b17c:	78fb      	ldrb	r3, [r7, #3]
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f002 fae1 	bl	800d748 <USBD_LL_GetRxDataSize>
 800b186:	4602      	mov	r2, r0
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	33b0      	adds	r3, #176	@ 0xb0
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	4413      	add	r3, r2
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}

0800b1ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b084      	sub	sp, #16
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	32b0      	adds	r2, #176	@ 0xb0
 800b1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d101      	bne.n	800b1dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1d8:	2303      	movs	r3, #3
 800b1da:	e024      	b.n	800b226 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	33b0      	adds	r3, #176	@ 0xb0
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d019      	beq.n	800b224 <USBD_CDC_EP0_RxReady+0x6a>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b1f6:	2bff      	cmp	r3, #255	@ 0xff
 800b1f8:	d014      	beq.n	800b224 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	33b0      	adds	r3, #176	@ 0xb0
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	4413      	add	r3, r2
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b212:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b21a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	22ff      	movs	r2, #255	@ 0xff
 800b220:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
	...

0800b230 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b238:	2182      	movs	r1, #130	@ 0x82
 800b23a:	4818      	ldr	r0, [pc, #96]	@ (800b29c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b23c:	f000 fd4f 	bl	800bcde <USBD_GetEpDesc>
 800b240:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b242:	2101      	movs	r1, #1
 800b244:	4815      	ldr	r0, [pc, #84]	@ (800b29c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b246:	f000 fd4a 	bl	800bcde <USBD_GetEpDesc>
 800b24a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b24c:	2181      	movs	r1, #129	@ 0x81
 800b24e:	4813      	ldr	r0, [pc, #76]	@ (800b29c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b250:	f000 fd45 	bl	800bcde <USBD_GetEpDesc>
 800b254:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	2210      	movs	r2, #16
 800b260:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d006      	beq.n	800b276 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	2200      	movs	r2, #0
 800b26c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b270:	711a      	strb	r2, [r3, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d006      	beq.n	800b28a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b284:	711a      	strb	r2, [r3, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2243      	movs	r2, #67	@ 0x43
 800b28e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b290:	4b02      	ldr	r3, [pc, #8]	@ (800b29c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b292:	4618      	mov	r0, r3
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	20000050 	.word	0x20000050

0800b2a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2a8:	2182      	movs	r1, #130	@ 0x82
 800b2aa:	4818      	ldr	r0, [pc, #96]	@ (800b30c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2ac:	f000 fd17 	bl	800bcde <USBD_GetEpDesc>
 800b2b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2b2:	2101      	movs	r1, #1
 800b2b4:	4815      	ldr	r0, [pc, #84]	@ (800b30c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2b6:	f000 fd12 	bl	800bcde <USBD_GetEpDesc>
 800b2ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2bc:	2181      	movs	r1, #129	@ 0x81
 800b2be:	4813      	ldr	r0, [pc, #76]	@ (800b30c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2c0:	f000 fd0d 	bl	800bcde <USBD_GetEpDesc>
 800b2c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	2210      	movs	r2, #16
 800b2d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d006      	beq.n	800b2e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	711a      	strb	r2, [r3, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f042 0202 	orr.w	r2, r2, #2
 800b2e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d006      	beq.n	800b2fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	711a      	strb	r2, [r3, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f042 0202 	orr.w	r2, r2, #2
 800b2f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2243      	movs	r2, #67	@ 0x43
 800b2fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b300:	4b02      	ldr	r3, [pc, #8]	@ (800b30c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b302:	4618      	mov	r0, r3
 800b304:	3718      	adds	r7, #24
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	20000050 	.word	0x20000050

0800b310 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b318:	2182      	movs	r1, #130	@ 0x82
 800b31a:	4818      	ldr	r0, [pc, #96]	@ (800b37c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b31c:	f000 fcdf 	bl	800bcde <USBD_GetEpDesc>
 800b320:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b322:	2101      	movs	r1, #1
 800b324:	4815      	ldr	r0, [pc, #84]	@ (800b37c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b326:	f000 fcda 	bl	800bcde <USBD_GetEpDesc>
 800b32a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b32c:	2181      	movs	r1, #129	@ 0x81
 800b32e:	4813      	ldr	r0, [pc, #76]	@ (800b37c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b330:	f000 fcd5 	bl	800bcde <USBD_GetEpDesc>
 800b334:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d002      	beq.n	800b342 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	2210      	movs	r2, #16
 800b340:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d006      	beq.n	800b356 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b350:	711a      	strb	r2, [r3, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d006      	beq.n	800b36a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b364:	711a      	strb	r2, [r3, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2243      	movs	r2, #67	@ 0x43
 800b36e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b370:	4b02      	ldr	r3, [pc, #8]	@ (800b37c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b372:	4618      	mov	r0, r3
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20000050 	.word	0x20000050

0800b380 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	220a      	movs	r2, #10
 800b38c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b38e:	4b03      	ldr	r3, [pc, #12]	@ (800b39c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	2000000c 	.word	0x2000000c

0800b3a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b3b0:	2303      	movs	r3, #3
 800b3b2:	e009      	b.n	800b3c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	33b0      	adds	r3, #176	@ 0xb0
 800b3be:	009b      	lsls	r3, r3, #2
 800b3c0:	4413      	add	r3, r2
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	370c      	adds	r7, #12
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	32b0      	adds	r2, #176	@ 0xb0
 800b3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d101      	bne.n	800b3fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	e008      	b.n	800b40c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	371c      	adds	r7, #28
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	32b0      	adds	r2, #176	@ 0xb0
 800b42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b430:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b438:	2303      	movs	r3, #3
 800b43a:	e004      	b.n	800b446 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3714      	adds	r7, #20
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
	...

0800b454 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	32b0      	adds	r2, #176	@ 0xb0
 800b466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b46a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b46c:	2301      	movs	r3, #1
 800b46e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d101      	bne.n	800b47a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b476:	2303      	movs	r3, #3
 800b478:	e025      	b.n	800b4c6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b480:	2b00      	cmp	r3, #0
 800b482:	d11f      	bne.n	800b4c4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	2201      	movs	r2, #1
 800b488:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b48c:	4b10      	ldr	r3, [pc, #64]	@ (800b4d0 <USBD_CDC_TransmitPacket+0x7c>)
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	f003 020f 	and.w	r2, r3, #15
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	4613      	mov	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	4403      	add	r3, r0
 800b4a6:	3318      	adds	r3, #24
 800b4a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b4aa:	4b09      	ldr	r3, [pc, #36]	@ (800b4d0 <USBD_CDC_TransmitPacket+0x7c>)
 800b4ac:	7819      	ldrb	r1, [r3, #0]
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f002 f8d4 	bl	800d668 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b4c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	20000093 	.word	0x20000093

0800b4d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	32b0      	adds	r2, #176	@ 0xb0
 800b4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	32b0      	adds	r2, #176	@ 0xb0
 800b4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d101      	bne.n	800b502 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b4fe:	2303      	movs	r3, #3
 800b500:	e018      	b.n	800b534 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	7c1b      	ldrb	r3, [r3, #16]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d10a      	bne.n	800b520 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b50a:	4b0c      	ldr	r3, [pc, #48]	@ (800b53c <USBD_CDC_ReceivePacket+0x68>)
 800b50c:	7819      	ldrb	r1, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b514:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f002 f8dd 	bl	800d6d8 <USBD_LL_PrepareReceive>
 800b51e:	e008      	b.n	800b532 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b520:	4b06      	ldr	r3, [pc, #24]	@ (800b53c <USBD_CDC_ReceivePacket+0x68>)
 800b522:	7819      	ldrb	r1, [r3, #0]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b52a:	2340      	movs	r3, #64	@ 0x40
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f002 f8d3 	bl	800d6d8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3710      	adds	r7, #16
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	20000094 	.word	0x20000094

0800b540 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	4613      	mov	r3, r2
 800b54c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d101      	bne.n	800b558 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b554:	2303      	movs	r3, #3
 800b556:	e01f      	b.n	800b598 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2200      	movs	r2, #0
 800b564:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d003      	beq.n	800b57e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	2201      	movs	r2, #1
 800b582:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	79fa      	ldrb	r2, [r7, #7]
 800b58a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f001 feab 	bl	800d2e8 <USBD_LL_Init>
 800b592:	4603      	mov	r3, r0
 800b594:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b596:	7dfb      	ldrb	r3, [r7, #23]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3718      	adds	r7, #24
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e025      	b.n	800b604 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	32ae      	adds	r2, #174	@ 0xae
 800b5ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00f      	beq.n	800b5f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	32ae      	adds	r2, #174	@ 0xae
 800b5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5e4:	f107 020e 	add.w	r2, r7, #14
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	4798      	blx	r3
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f001 feb3 	bl	800d380 <USBD_LL_Start>
 800b61a:	4603      	mov	r3, r0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b62c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b62e:	4618      	mov	r0, r3
 800b630:	370c      	adds	r7, #12
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b084      	sub	sp, #16
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
 800b642:	460b      	mov	r3, r1
 800b644:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b650:	2b00      	cmp	r3, #0
 800b652:	d009      	beq.n	800b668 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	78fa      	ldrb	r2, [r7, #3]
 800b65e:	4611      	mov	r1, r2
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	4798      	blx	r3
 800b664:	4603      	mov	r3, r0
 800b666:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b668:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b084      	sub	sp, #16
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	460b      	mov	r3, r1
 800b67c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	78fa      	ldrb	r2, [r7, #3]
 800b68c:	4611      	mov	r1, r2
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	4798      	blx	r3
 800b692:	4603      	mov	r3, r0
 800b694:	2b00      	cmp	r3, #0
 800b696:	d001      	beq.n	800b69c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b698:	2303      	movs	r3, #3
 800b69a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6b6:	6839      	ldr	r1, [r7, #0]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f001 f936 	bl	800c92a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6da:	f003 031f 	and.w	r3, r3, #31
 800b6de:	2b02      	cmp	r3, #2
 800b6e0:	d01a      	beq.n	800b718 <USBD_LL_SetupStage+0x72>
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d822      	bhi.n	800b72c <USBD_LL_SetupStage+0x86>
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d002      	beq.n	800b6f0 <USBD_LL_SetupStage+0x4a>
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d00a      	beq.n	800b704 <USBD_LL_SetupStage+0x5e>
 800b6ee:	e01d      	b.n	800b72c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 fb63 	bl	800bdc4 <USBD_StdDevReq>
 800b6fe:	4603      	mov	r3, r0
 800b700:	73fb      	strb	r3, [r7, #15]
      break;
 800b702:	e020      	b.n	800b746 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b70a:	4619      	mov	r1, r3
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fbcb 	bl	800bea8 <USBD_StdItfReq>
 800b712:	4603      	mov	r3, r0
 800b714:	73fb      	strb	r3, [r7, #15]
      break;
 800b716:	e016      	b.n	800b746 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b71e:	4619      	mov	r1, r3
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 fc2d 	bl	800bf80 <USBD_StdEPReq>
 800b726:	4603      	mov	r3, r0
 800b728:	73fb      	strb	r3, [r7, #15]
      break;
 800b72a:	e00c      	b.n	800b746 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b732:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b736:	b2db      	uxtb	r3, r3
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f001 fec6 	bl	800d4cc <USBD_LL_StallEP>
 800b740:	4603      	mov	r3, r0
 800b742:	73fb      	strb	r3, [r7, #15]
      break;
 800b744:	bf00      	nop
  }

  return ret;
 800b746:	7bfb      	ldrb	r3, [r7, #15]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	460b      	mov	r3, r1
 800b75a:	607a      	str	r2, [r7, #4]
 800b75c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b75e:	2300      	movs	r3, #0
 800b760:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b762:	7afb      	ldrb	r3, [r7, #11]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d16e      	bne.n	800b846 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b76e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b776:	2b03      	cmp	r3, #3
 800b778:	f040 8098 	bne.w	800b8ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	689a      	ldr	r2, [r3, #8]
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	68db      	ldr	r3, [r3, #12]
 800b784:	429a      	cmp	r2, r3
 800b786:	d913      	bls.n	800b7b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	689a      	ldr	r2, [r3, #8]
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	1ad2      	subs	r2, r2, r3
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	68da      	ldr	r2, [r3, #12]
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	bf28      	it	cs
 800b7a2:	4613      	movcs	r3, r2
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	6879      	ldr	r1, [r7, #4]
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f001 f9b2 	bl	800cb12 <USBD_CtlContinueRx>
 800b7ae:	e07d      	b.n	800b8ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7b6:	f003 031f 	and.w	r3, r3, #31
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d014      	beq.n	800b7e8 <USBD_LL_DataOutStage+0x98>
 800b7be:	2b02      	cmp	r3, #2
 800b7c0:	d81d      	bhi.n	800b7fe <USBD_LL_DataOutStage+0xae>
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <USBD_LL_DataOutStage+0x7c>
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d003      	beq.n	800b7d2 <USBD_LL_DataOutStage+0x82>
 800b7ca:	e018      	b.n	800b7fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	75bb      	strb	r3, [r7, #22]
            break;
 800b7d0:	e018      	b.n	800b804 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	4619      	mov	r1, r3
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f000 fa64 	bl	800bcaa <USBD_CoreFindIF>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	75bb      	strb	r3, [r7, #22]
            break;
 800b7e6:	e00d      	b.n	800b804 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f000 fa66 	bl	800bcc4 <USBD_CoreFindEP>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	75bb      	strb	r3, [r7, #22]
            break;
 800b7fc:	e002      	b.n	800b804 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	75bb      	strb	r3, [r7, #22]
            break;
 800b802:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b804:	7dbb      	ldrb	r3, [r7, #22]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d119      	bne.n	800b83e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b03      	cmp	r3, #3
 800b814:	d113      	bne.n	800b83e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b816:	7dba      	ldrb	r2, [r7, #22]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	32ae      	adds	r2, #174	@ 0xae
 800b81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00b      	beq.n	800b83e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b826:	7dba      	ldrb	r2, [r7, #22]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b82e:	7dba      	ldrb	r2, [r7, #22]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	32ae      	adds	r2, #174	@ 0xae
 800b834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f001 f978 	bl	800cb34 <USBD_CtlSendStatus>
 800b844:	e032      	b.n	800b8ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b846:	7afb      	ldrb	r3, [r7, #11]
 800b848:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	4619      	mov	r1, r3
 800b850:	68f8      	ldr	r0, [r7, #12]
 800b852:	f000 fa37 	bl	800bcc4 <USBD_CoreFindEP>
 800b856:	4603      	mov	r3, r0
 800b858:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b85a:	7dbb      	ldrb	r3, [r7, #22]
 800b85c:	2bff      	cmp	r3, #255	@ 0xff
 800b85e:	d025      	beq.n	800b8ac <USBD_LL_DataOutStage+0x15c>
 800b860:	7dbb      	ldrb	r3, [r7, #22]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d122      	bne.n	800b8ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d117      	bne.n	800b8a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b872:	7dba      	ldrb	r2, [r7, #22]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	32ae      	adds	r2, #174	@ 0xae
 800b878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00f      	beq.n	800b8a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b882:	7dba      	ldrb	r2, [r7, #22]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b88a:	7dba      	ldrb	r2, [r7, #22]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	32ae      	adds	r2, #174	@ 0xae
 800b890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b894:	699b      	ldr	r3, [r3, #24]
 800b896:	7afa      	ldrb	r2, [r7, #11]
 800b898:	4611      	mov	r1, r2
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	4798      	blx	r3
 800b89e:	4603      	mov	r3, r0
 800b8a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d001      	beq.n	800b8ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
 800b8aa:	e000      	b.n	800b8ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3718      	adds	r7, #24
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b086      	sub	sp, #24
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	60f8      	str	r0, [r7, #12]
 800b8be:	460b      	mov	r3, r1
 800b8c0:	607a      	str	r2, [r7, #4]
 800b8c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8c4:	7afb      	ldrb	r3, [r7, #11]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d16f      	bne.n	800b9aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3314      	adds	r3, #20
 800b8ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	d15a      	bne.n	800b990 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	689a      	ldr	r2, [r3, #8]
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	68db      	ldr	r3, [r3, #12]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d914      	bls.n	800b910 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	689a      	ldr	r2, [r3, #8]
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	1ad2      	subs	r2, r2, r3
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6879      	ldr	r1, [r7, #4]
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f001 f8da 	bl	800cab6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b902:	2300      	movs	r3, #0
 800b904:	2200      	movs	r2, #0
 800b906:	2100      	movs	r1, #0
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f001 fee5 	bl	800d6d8 <USBD_LL_PrepareReceive>
 800b90e:	e03f      	b.n	800b990 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	68da      	ldr	r2, [r3, #12]
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d11c      	bne.n	800b956 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b924:	429a      	cmp	r2, r3
 800b926:	d316      	bcc.n	800b956 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b932:	429a      	cmp	r2, r3
 800b934:	d20f      	bcs.n	800b956 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b936:	2200      	movs	r2, #0
 800b938:	2100      	movs	r1, #0
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f001 f8bb 	bl	800cab6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b948:	2300      	movs	r3, #0
 800b94a:	2200      	movs	r2, #0
 800b94c:	2100      	movs	r1, #0
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f001 fec2 	bl	800d6d8 <USBD_LL_PrepareReceive>
 800b954:	e01c      	b.n	800b990 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b03      	cmp	r3, #3
 800b960:	d10f      	bne.n	800b982 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d009      	beq.n	800b982 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2200      	movs	r2, #0
 800b972:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b982:	2180      	movs	r1, #128	@ 0x80
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f001 fda1 	bl	800d4cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f001 f8e5 	bl	800cb5a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d03a      	beq.n	800ba10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b99a:	68f8      	ldr	r0, [r7, #12]
 800b99c:	f7ff fe42 	bl	800b624 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b9a8:	e032      	b.n	800ba10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9aa:	7afb      	ldrb	r3, [r7, #11]
 800b9ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f000 f985 	bl	800bcc4 <USBD_CoreFindEP>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9be:	7dfb      	ldrb	r3, [r7, #23]
 800b9c0:	2bff      	cmp	r3, #255	@ 0xff
 800b9c2:	d025      	beq.n	800ba10 <USBD_LL_DataInStage+0x15a>
 800b9c4:	7dfb      	ldrb	r3, [r7, #23]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d122      	bne.n	800ba10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9d0:	b2db      	uxtb	r3, r3
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	d11c      	bne.n	800ba10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9d6:	7dfa      	ldrb	r2, [r7, #23]
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	32ae      	adds	r2, #174	@ 0xae
 800b9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e0:	695b      	ldr	r3, [r3, #20]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d014      	beq.n	800ba10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b9e6:	7dfa      	ldrb	r2, [r7, #23]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b9ee:	7dfa      	ldrb	r2, [r7, #23]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	32ae      	adds	r2, #174	@ 0xae
 800b9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9f8:	695b      	ldr	r3, [r3, #20]
 800b9fa:	7afa      	ldrb	r2, [r7, #11]
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	4798      	blx	r3
 800ba02:	4603      	mov	r3, r0
 800ba04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba06:	7dbb      	ldrb	r3, [r7, #22]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba0c:	7dbb      	ldrb	r3, [r7, #22]
 800ba0e:	e000      	b.n	800ba12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3718      	adds	r7, #24
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d014      	beq.n	800ba80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00e      	beq.n	800ba80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	6852      	ldr	r2, [r2, #4]
 800ba6e:	b2d2      	uxtb	r2, r2
 800ba70:	4611      	mov	r1, r2
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	4798      	blx	r3
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d001      	beq.n	800ba80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba80:	2340      	movs	r3, #64	@ 0x40
 800ba82:	2200      	movs	r2, #0
 800ba84:	2100      	movs	r1, #0
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f001 fcac 	bl	800d3e4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2240      	movs	r2, #64	@ 0x40
 800ba98:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba9c:	2340      	movs	r3, #64	@ 0x40
 800ba9e:	2200      	movs	r2, #0
 800baa0:	2180      	movs	r1, #128	@ 0x80
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f001 fc9e 	bl	800d3e4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2240      	movs	r2, #64	@ 0x40
 800bab2:	621a      	str	r2, [r3, #32]

  return ret;
 800bab4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	460b      	mov	r3, r1
 800bac8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	78fa      	ldrb	r2, [r7, #3]
 800bace:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bade:	b480      	push	{r7}
 800bae0:	b083      	sub	sp, #12
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b04      	cmp	r3, #4
 800baf0:	d006      	beq.n	800bb00 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baf8:	b2da      	uxtb	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2204      	movs	r2, #4
 800bb04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	370c      	adds	r7, #12
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr

0800bb16 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb16:	b480      	push	{r7}
 800bb18:	b083      	sub	sp, #12
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b04      	cmp	r3, #4
 800bb28:	d106      	bne.n	800bb38 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b082      	sub	sp, #8
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b03      	cmp	r3, #3
 800bb58:	d110      	bne.n	800bb7c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00b      	beq.n	800bb7c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d005      	beq.n	800bb7c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb76:	69db      	ldr	r3, [r3, #28]
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b082      	sub	sp, #8
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	32ae      	adds	r2, #174	@ 0xae
 800bb9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d101      	bne.n	800bba8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e01c      	b.n	800bbe2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	d115      	bne.n	800bbe0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	32ae      	adds	r2, #174	@ 0xae
 800bbbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc2:	6a1b      	ldr	r3, [r3, #32]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00b      	beq.n	800bbe0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	32ae      	adds	r2, #174	@ 0xae
 800bbd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd6:	6a1b      	ldr	r3, [r3, #32]
 800bbd8:	78fa      	ldrb	r2, [r7, #3]
 800bbda:	4611      	mov	r1, r2
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3708      	adds	r7, #8
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b082      	sub	sp, #8
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	32ae      	adds	r2, #174	@ 0xae
 800bc00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d101      	bne.n	800bc0c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc08:	2303      	movs	r3, #3
 800bc0a:	e01c      	b.n	800bc46 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	2b03      	cmp	r3, #3
 800bc16:	d115      	bne.n	800bc44 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	32ae      	adds	r2, #174	@ 0xae
 800bc22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00b      	beq.n	800bc44 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	32ae      	adds	r2, #174	@ 0xae
 800bc36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc3c:	78fa      	ldrb	r2, [r7, #3]
 800bc3e:	4611      	mov	r1, r2
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d00e      	beq.n	800bca0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	6852      	ldr	r2, [r2, #4]
 800bc8e:	b2d2      	uxtb	r2, r2
 800bc90:	4611      	mov	r1, r2
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	4798      	blx	r3
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d001      	beq.n	800bca0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcaa:	b480      	push	{r7}
 800bcac:	b083      	sub	sp, #12
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcb6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	370c      	adds	r7, #12
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcd0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b086      	sub	sp, #24
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	460b      	mov	r3, r1
 800bce8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	885b      	ldrh	r3, [r3, #2]
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	7812      	ldrb	r2, [r2, #0]
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d91f      	bls.n	800bd44 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd0a:	e013      	b.n	800bd34 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd0c:	f107 030a 	add.w	r3, r7, #10
 800bd10:	4619      	mov	r1, r3
 800bd12:	6978      	ldr	r0, [r7, #20]
 800bd14:	f000 f81b 	bl	800bd4e <USBD_GetNextDesc>
 800bd18:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	785b      	ldrb	r3, [r3, #1]
 800bd1e:	2b05      	cmp	r3, #5
 800bd20:	d108      	bne.n	800bd34 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	789b      	ldrb	r3, [r3, #2]
 800bd2a:	78fa      	ldrb	r2, [r7, #3]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d008      	beq.n	800bd42 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd30:	2300      	movs	r3, #0
 800bd32:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	885b      	ldrh	r3, [r3, #2]
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	897b      	ldrh	r3, [r7, #10]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d8e5      	bhi.n	800bd0c <USBD_GetEpDesc+0x2e>
 800bd40:	e000      	b.n	800bd44 <USBD_GetEpDesc+0x66>
          break;
 800bd42:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd44:	693b      	ldr	r3, [r7, #16]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3718      	adds	r7, #24
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd4e:	b480      	push	{r7}
 800bd50:	b085      	sub	sp, #20
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
 800bd56:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	7812      	ldrb	r2, [r2, #0]
 800bd64:	4413      	add	r3, r2
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	461a      	mov	r2, r3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4413      	add	r3, r2
 800bd76:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd78:	68fb      	ldr	r3, [r7, #12]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3714      	adds	r7, #20
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd86:	b480      	push	{r7}
 800bd88:	b087      	sub	sp, #28
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bda4:	8a3b      	ldrh	r3, [r7, #16]
 800bda6:	021b      	lsls	r3, r3, #8
 800bda8:	b21a      	sxth	r2, r3
 800bdaa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	b21b      	sxth	r3, r3
 800bdb2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdb4:	89fb      	ldrh	r3, [r7, #14]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	371c      	adds	r7, #28
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
	...

0800bdc4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bdda:	2b40      	cmp	r3, #64	@ 0x40
 800bddc:	d005      	beq.n	800bdea <USBD_StdDevReq+0x26>
 800bdde:	2b40      	cmp	r3, #64	@ 0x40
 800bde0:	d857      	bhi.n	800be92 <USBD_StdDevReq+0xce>
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d00f      	beq.n	800be06 <USBD_StdDevReq+0x42>
 800bde6:	2b20      	cmp	r3, #32
 800bde8:	d153      	bne.n	800be92 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	32ae      	adds	r2, #174	@ 0xae
 800bdf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	4798      	blx	r3
 800be00:	4603      	mov	r3, r0
 800be02:	73fb      	strb	r3, [r7, #15]
      break;
 800be04:	e04a      	b.n	800be9c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	785b      	ldrb	r3, [r3, #1]
 800be0a:	2b09      	cmp	r3, #9
 800be0c:	d83b      	bhi.n	800be86 <USBD_StdDevReq+0xc2>
 800be0e:	a201      	add	r2, pc, #4	@ (adr r2, 800be14 <USBD_StdDevReq+0x50>)
 800be10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be14:	0800be69 	.word	0x0800be69
 800be18:	0800be7d 	.word	0x0800be7d
 800be1c:	0800be87 	.word	0x0800be87
 800be20:	0800be73 	.word	0x0800be73
 800be24:	0800be87 	.word	0x0800be87
 800be28:	0800be47 	.word	0x0800be47
 800be2c:	0800be3d 	.word	0x0800be3d
 800be30:	0800be87 	.word	0x0800be87
 800be34:	0800be5f 	.word	0x0800be5f
 800be38:	0800be51 	.word	0x0800be51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fa3c 	bl	800c2bc <USBD_GetDescriptor>
          break;
 800be44:	e024      	b.n	800be90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fbcb 	bl	800c5e4 <USBD_SetAddress>
          break;
 800be4e:	e01f      	b.n	800be90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 fc0a 	bl	800c66c <USBD_SetConfig>
 800be58:	4603      	mov	r3, r0
 800be5a:	73fb      	strb	r3, [r7, #15]
          break;
 800be5c:	e018      	b.n	800be90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be5e:	6839      	ldr	r1, [r7, #0]
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 fcad 	bl	800c7c0 <USBD_GetConfig>
          break;
 800be66:	e013      	b.n	800be90 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be68:	6839      	ldr	r1, [r7, #0]
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fcde 	bl	800c82c <USBD_GetStatus>
          break;
 800be70:	e00e      	b.n	800be90 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be72:	6839      	ldr	r1, [r7, #0]
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f000 fd0d 	bl	800c894 <USBD_SetFeature>
          break;
 800be7a:	e009      	b.n	800be90 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fd31 	bl	800c8e6 <USBD_ClrFeature>
          break;
 800be84:	e004      	b.n	800be90 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fd88 	bl	800c99e <USBD_CtlError>
          break;
 800be8e:	bf00      	nop
      }
      break;
 800be90:	e004      	b.n	800be9c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be92:	6839      	ldr	r1, [r7, #0]
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 fd82 	bl	800c99e <USBD_CtlError>
      break;
 800be9a:	bf00      	nop
  }

  return ret;
 800be9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop

0800bea8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beb2:	2300      	movs	r3, #0
 800beb4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bebe:	2b40      	cmp	r3, #64	@ 0x40
 800bec0:	d005      	beq.n	800bece <USBD_StdItfReq+0x26>
 800bec2:	2b40      	cmp	r3, #64	@ 0x40
 800bec4:	d852      	bhi.n	800bf6c <USBD_StdItfReq+0xc4>
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <USBD_StdItfReq+0x26>
 800beca:	2b20      	cmp	r3, #32
 800becc:	d14e      	bne.n	800bf6c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	3b01      	subs	r3, #1
 800bed8:	2b02      	cmp	r3, #2
 800beda:	d840      	bhi.n	800bf5e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	889b      	ldrh	r3, [r3, #4]
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d836      	bhi.n	800bf54 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	889b      	ldrh	r3, [r3, #4]
 800beea:	b2db      	uxtb	r3, r3
 800beec:	4619      	mov	r1, r3
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f7ff fedb 	bl	800bcaa <USBD_CoreFindIF>
 800bef4:	4603      	mov	r3, r0
 800bef6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bef8:	7bbb      	ldrb	r3, [r7, #14]
 800befa:	2bff      	cmp	r3, #255	@ 0xff
 800befc:	d01d      	beq.n	800bf3a <USBD_StdItfReq+0x92>
 800befe:	7bbb      	ldrb	r3, [r7, #14]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d11a      	bne.n	800bf3a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf04:	7bba      	ldrb	r2, [r7, #14]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	32ae      	adds	r2, #174	@ 0xae
 800bf0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00f      	beq.n	800bf34 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf14:	7bba      	ldrb	r2, [r7, #14]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf1c:	7bba      	ldrb	r2, [r7, #14]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	32ae      	adds	r2, #174	@ 0xae
 800bf22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	4798      	blx	r3
 800bf2e:	4603      	mov	r3, r0
 800bf30:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf32:	e004      	b.n	800bf3e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf34:	2303      	movs	r3, #3
 800bf36:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf38:	e001      	b.n	800bf3e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	88db      	ldrh	r3, [r3, #6]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d110      	bne.n	800bf68 <USBD_StdItfReq+0xc0>
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d10d      	bne.n	800bf68 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 fdf1 	bl	800cb34 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf52:	e009      	b.n	800bf68 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fd21 	bl	800c99e <USBD_CtlError>
          break;
 800bf5c:	e004      	b.n	800bf68 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf5e:	6839      	ldr	r1, [r7, #0]
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 fd1c 	bl	800c99e <USBD_CtlError>
          break;
 800bf66:	e000      	b.n	800bf6a <USBD_StdItfReq+0xc2>
          break;
 800bf68:	bf00      	nop
      }
      break;
 800bf6a:	e004      	b.n	800bf76 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fd15 	bl	800c99e <USBD_CtlError>
      break;
 800bf74:	bf00      	nop
  }

  return ret;
 800bf76:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	889b      	ldrh	r3, [r3, #4]
 800bf92:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf9c:	2b40      	cmp	r3, #64	@ 0x40
 800bf9e:	d007      	beq.n	800bfb0 <USBD_StdEPReq+0x30>
 800bfa0:	2b40      	cmp	r3, #64	@ 0x40
 800bfa2:	f200 817f 	bhi.w	800c2a4 <USBD_StdEPReq+0x324>
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d02a      	beq.n	800c000 <USBD_StdEPReq+0x80>
 800bfaa:	2b20      	cmp	r3, #32
 800bfac:	f040 817a 	bne.w	800c2a4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfb0:	7bbb      	ldrb	r3, [r7, #14]
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f7ff fe85 	bl	800bcc4 <USBD_CoreFindEP>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfbe:	7b7b      	ldrb	r3, [r7, #13]
 800bfc0:	2bff      	cmp	r3, #255	@ 0xff
 800bfc2:	f000 8174 	beq.w	800c2ae <USBD_StdEPReq+0x32e>
 800bfc6:	7b7b      	ldrb	r3, [r7, #13]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f040 8170 	bne.w	800c2ae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bfce:	7b7a      	ldrb	r2, [r7, #13]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfd6:	7b7a      	ldrb	r2, [r7, #13]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	32ae      	adds	r2, #174	@ 0xae
 800bfdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 8163 	beq.w	800c2ae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bfe8:	7b7a      	ldrb	r2, [r7, #13]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	32ae      	adds	r2, #174	@ 0xae
 800bfee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	4798      	blx	r3
 800bffa:	4603      	mov	r3, r0
 800bffc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bffe:	e156      	b.n	800c2ae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	785b      	ldrb	r3, [r3, #1]
 800c004:	2b03      	cmp	r3, #3
 800c006:	d008      	beq.n	800c01a <USBD_StdEPReq+0x9a>
 800c008:	2b03      	cmp	r3, #3
 800c00a:	f300 8145 	bgt.w	800c298 <USBD_StdEPReq+0x318>
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f000 809b 	beq.w	800c14a <USBD_StdEPReq+0x1ca>
 800c014:	2b01      	cmp	r3, #1
 800c016:	d03c      	beq.n	800c092 <USBD_StdEPReq+0x112>
 800c018:	e13e      	b.n	800c298 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c020:	b2db      	uxtb	r3, r3
 800c022:	2b02      	cmp	r3, #2
 800c024:	d002      	beq.n	800c02c <USBD_StdEPReq+0xac>
 800c026:	2b03      	cmp	r3, #3
 800c028:	d016      	beq.n	800c058 <USBD_StdEPReq+0xd8>
 800c02a:	e02c      	b.n	800c086 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c02c:	7bbb      	ldrb	r3, [r7, #14]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00d      	beq.n	800c04e <USBD_StdEPReq+0xce>
 800c032:	7bbb      	ldrb	r3, [r7, #14]
 800c034:	2b80      	cmp	r3, #128	@ 0x80
 800c036:	d00a      	beq.n	800c04e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c038:	7bbb      	ldrb	r3, [r7, #14]
 800c03a:	4619      	mov	r1, r3
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f001 fa45 	bl	800d4cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c042:	2180      	movs	r1, #128	@ 0x80
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f001 fa41 	bl	800d4cc <USBD_LL_StallEP>
 800c04a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c04c:	e020      	b.n	800c090 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c04e:	6839      	ldr	r1, [r7, #0]
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 fca4 	bl	800c99e <USBD_CtlError>
              break;
 800c056:	e01b      	b.n	800c090 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	885b      	ldrh	r3, [r3, #2]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10e      	bne.n	800c07e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c060:	7bbb      	ldrb	r3, [r7, #14]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00b      	beq.n	800c07e <USBD_StdEPReq+0xfe>
 800c066:	7bbb      	ldrb	r3, [r7, #14]
 800c068:	2b80      	cmp	r3, #128	@ 0x80
 800c06a:	d008      	beq.n	800c07e <USBD_StdEPReq+0xfe>
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	88db      	ldrh	r3, [r3, #6]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d104      	bne.n	800c07e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	4619      	mov	r1, r3
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f001 fa27 	bl	800d4cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fd58 	bl	800cb34 <USBD_CtlSendStatus>

              break;
 800c084:	e004      	b.n	800c090 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fc88 	bl	800c99e <USBD_CtlError>
              break;
 800c08e:	bf00      	nop
          }
          break;
 800c090:	e107      	b.n	800c2a2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d002      	beq.n	800c0a4 <USBD_StdEPReq+0x124>
 800c09e:	2b03      	cmp	r3, #3
 800c0a0:	d016      	beq.n	800c0d0 <USBD_StdEPReq+0x150>
 800c0a2:	e04b      	b.n	800c13c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0a4:	7bbb      	ldrb	r3, [r7, #14]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00d      	beq.n	800c0c6 <USBD_StdEPReq+0x146>
 800c0aa:	7bbb      	ldrb	r3, [r7, #14]
 800c0ac:	2b80      	cmp	r3, #128	@ 0x80
 800c0ae:	d00a      	beq.n	800c0c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f001 fa09 	bl	800d4cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0ba:	2180      	movs	r1, #128	@ 0x80
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f001 fa05 	bl	800d4cc <USBD_LL_StallEP>
 800c0c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0c4:	e040      	b.n	800c148 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 fc68 	bl	800c99e <USBD_CtlError>
              break;
 800c0ce:	e03b      	b.n	800c148 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	885b      	ldrh	r3, [r3, #2]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d136      	bne.n	800c146 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0d8:	7bbb      	ldrb	r3, [r7, #14]
 800c0da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d004      	beq.n	800c0ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0e2:	7bbb      	ldrb	r3, [r7, #14]
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f001 fa26 	bl	800d538 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 fd21 	bl	800cb34 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0f2:	7bbb      	ldrb	r3, [r7, #14]
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7ff fde4 	bl	800bcc4 <USBD_CoreFindEP>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c100:	7b7b      	ldrb	r3, [r7, #13]
 800c102:	2bff      	cmp	r3, #255	@ 0xff
 800c104:	d01f      	beq.n	800c146 <USBD_StdEPReq+0x1c6>
 800c106:	7b7b      	ldrb	r3, [r7, #13]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d11c      	bne.n	800c146 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c10c:	7b7a      	ldrb	r2, [r7, #13]
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c114:	7b7a      	ldrb	r2, [r7, #13]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	32ae      	adds	r2, #174	@ 0xae
 800c11a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d010      	beq.n	800c146 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c124:	7b7a      	ldrb	r2, [r7, #13]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	32ae      	adds	r2, #174	@ 0xae
 800c12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	6839      	ldr	r1, [r7, #0]
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	4798      	blx	r3
 800c136:	4603      	mov	r3, r0
 800c138:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c13a:	e004      	b.n	800c146 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 fc2d 	bl	800c99e <USBD_CtlError>
              break;
 800c144:	e000      	b.n	800c148 <USBD_StdEPReq+0x1c8>
              break;
 800c146:	bf00      	nop
          }
          break;
 800c148:	e0ab      	b.n	800c2a2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b02      	cmp	r3, #2
 800c154:	d002      	beq.n	800c15c <USBD_StdEPReq+0x1dc>
 800c156:	2b03      	cmp	r3, #3
 800c158:	d032      	beq.n	800c1c0 <USBD_StdEPReq+0x240>
 800c15a:	e097      	b.n	800c28c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c15c:	7bbb      	ldrb	r3, [r7, #14]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d007      	beq.n	800c172 <USBD_StdEPReq+0x1f2>
 800c162:	7bbb      	ldrb	r3, [r7, #14]
 800c164:	2b80      	cmp	r3, #128	@ 0x80
 800c166:	d004      	beq.n	800c172 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fc17 	bl	800c99e <USBD_CtlError>
                break;
 800c170:	e091      	b.n	800c296 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c172:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c176:	2b00      	cmp	r3, #0
 800c178:	da0b      	bge.n	800c192 <USBD_StdEPReq+0x212>
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c180:	4613      	mov	r3, r2
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	3310      	adds	r3, #16
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	4413      	add	r3, r2
 800c18e:	3304      	adds	r3, #4
 800c190:	e00b      	b.n	800c1aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c192:	7bbb      	ldrb	r3, [r7, #14]
 800c194:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c198:	4613      	mov	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	2202      	movs	r2, #2
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 fc61 	bl	800ca80 <USBD_CtlSendData>
              break;
 800c1be:	e06a      	b.n	800c296 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	da11      	bge.n	800c1ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1c8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ca:	f003 020f 	and.w	r2, r3, #15
 800c1ce:	6879      	ldr	r1, [r7, #4]
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	4413      	add	r3, r2
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	440b      	add	r3, r1
 800c1da:	3324      	adds	r3, #36	@ 0x24
 800c1dc:	881b      	ldrh	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d117      	bne.n	800c212 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1e2:	6839      	ldr	r1, [r7, #0]
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fbda 	bl	800c99e <USBD_CtlError>
                  break;
 800c1ea:	e054      	b.n	800c296 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
 800c1ee:	f003 020f 	and.w	r2, r3, #15
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	440b      	add	r3, r1
 800c1fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c202:	881b      	ldrh	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d104      	bne.n	800c212 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c208:	6839      	ldr	r1, [r7, #0]
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 fbc7 	bl	800c99e <USBD_CtlError>
                  break;
 800c210:	e041      	b.n	800c296 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c212:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c216:	2b00      	cmp	r3, #0
 800c218:	da0b      	bge.n	800c232 <USBD_StdEPReq+0x2b2>
 800c21a:	7bbb      	ldrb	r3, [r7, #14]
 800c21c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c220:	4613      	mov	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	3310      	adds	r3, #16
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	4413      	add	r3, r2
 800c22e:	3304      	adds	r3, #4
 800c230:	e00b      	b.n	800c24a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c232:	7bbb      	ldrb	r3, [r7, #14]
 800c234:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c238:	4613      	mov	r3, r2
 800c23a:	009b      	lsls	r3, r3, #2
 800c23c:	4413      	add	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	4413      	add	r3, r2
 800c248:	3304      	adds	r3, #4
 800c24a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c24c:	7bbb      	ldrb	r3, [r7, #14]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d002      	beq.n	800c258 <USBD_StdEPReq+0x2d8>
 800c252:	7bbb      	ldrb	r3, [r7, #14]
 800c254:	2b80      	cmp	r3, #128	@ 0x80
 800c256:	d103      	bne.n	800c260 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	2200      	movs	r2, #0
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	e00e      	b.n	800c27e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c260:	7bbb      	ldrb	r3, [r7, #14]
 800c262:	4619      	mov	r1, r3
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f001 f99d 	bl	800d5a4 <USBD_LL_IsStallEP>
 800c26a:	4603      	mov	r3, r0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d003      	beq.n	800c278 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2201      	movs	r2, #1
 800c274:	601a      	str	r2, [r3, #0]
 800c276:	e002      	b.n	800c27e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2200      	movs	r2, #0
 800c27c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	2202      	movs	r2, #2
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fbfb 	bl	800ca80 <USBD_CtlSendData>
              break;
 800c28a:	e004      	b.n	800c296 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fb85 	bl	800c99e <USBD_CtlError>
              break;
 800c294:	bf00      	nop
          }
          break;
 800c296:	e004      	b.n	800c2a2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fb7f 	bl	800c99e <USBD_CtlError>
          break;
 800c2a0:	bf00      	nop
      }
      break;
 800c2a2:	e005      	b.n	800c2b0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fb79 	bl	800c99e <USBD_CtlError>
      break;
 800c2ac:	e000      	b.n	800c2b0 <USBD_StdEPReq+0x330>
      break;
 800c2ae:	bf00      	nop
  }

  return ret;
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	885b      	ldrh	r3, [r3, #2]
 800c2d6:	0a1b      	lsrs	r3, r3, #8
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	2b0e      	cmp	r3, #14
 800c2de:	f200 8152 	bhi.w	800c586 <USBD_GetDescriptor+0x2ca>
 800c2e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e8 <USBD_GetDescriptor+0x2c>)
 800c2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e8:	0800c359 	.word	0x0800c359
 800c2ec:	0800c371 	.word	0x0800c371
 800c2f0:	0800c3b1 	.word	0x0800c3b1
 800c2f4:	0800c587 	.word	0x0800c587
 800c2f8:	0800c587 	.word	0x0800c587
 800c2fc:	0800c527 	.word	0x0800c527
 800c300:	0800c553 	.word	0x0800c553
 800c304:	0800c587 	.word	0x0800c587
 800c308:	0800c587 	.word	0x0800c587
 800c30c:	0800c587 	.word	0x0800c587
 800c310:	0800c587 	.word	0x0800c587
 800c314:	0800c587 	.word	0x0800c587
 800c318:	0800c587 	.word	0x0800c587
 800c31c:	0800c587 	.word	0x0800c587
 800c320:	0800c325 	.word	0x0800c325
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c32a:	69db      	ldr	r3, [r3, #28]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d00b      	beq.n	800c348 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c336:	69db      	ldr	r3, [r3, #28]
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	7c12      	ldrb	r2, [r2, #16]
 800c33c:	f107 0108 	add.w	r1, r7, #8
 800c340:	4610      	mov	r0, r2
 800c342:	4798      	blx	r3
 800c344:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c346:	e126      	b.n	800c596 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fb27 	bl	800c99e <USBD_CtlError>
        err++;
 800c350:	7afb      	ldrb	r3, [r7, #11]
 800c352:	3301      	adds	r3, #1
 800c354:	72fb      	strb	r3, [r7, #11]
      break;
 800c356:	e11e      	b.n	800c596 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	7c12      	ldrb	r2, [r2, #16]
 800c364:	f107 0108 	add.w	r1, r7, #8
 800c368:	4610      	mov	r0, r2
 800c36a:	4798      	blx	r3
 800c36c:	60f8      	str	r0, [r7, #12]
      break;
 800c36e:	e112      	b.n	800c596 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	7c1b      	ldrb	r3, [r3, #16]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10d      	bne.n	800c394 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c37e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c380:	f107 0208 	add.w	r2, r7, #8
 800c384:	4610      	mov	r0, r2
 800c386:	4798      	blx	r3
 800c388:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3301      	adds	r3, #1
 800c38e:	2202      	movs	r2, #2
 800c390:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c392:	e100      	b.n	800c596 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c39c:	f107 0208 	add.w	r2, r7, #8
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	4798      	blx	r3
 800c3a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	701a      	strb	r2, [r3, #0]
      break;
 800c3ae:	e0f2      	b.n	800c596 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	885b      	ldrh	r3, [r3, #2]
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b05      	cmp	r3, #5
 800c3b8:	f200 80ac 	bhi.w	800c514 <USBD_GetDescriptor+0x258>
 800c3bc:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c4 <USBD_GetDescriptor+0x108>)
 800c3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c2:	bf00      	nop
 800c3c4:	0800c3dd 	.word	0x0800c3dd
 800c3c8:	0800c411 	.word	0x0800c411
 800c3cc:	0800c445 	.word	0x0800c445
 800c3d0:	0800c479 	.word	0x0800c479
 800c3d4:	0800c4ad 	.word	0x0800c4ad
 800c3d8:	0800c4e1 	.word	0x0800c4e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00b      	beq.n	800c400 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	7c12      	ldrb	r2, [r2, #16]
 800c3f4:	f107 0108 	add.w	r1, r7, #8
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	4798      	blx	r3
 800c3fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3fe:	e091      	b.n	800c524 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 facb 	bl	800c99e <USBD_CtlError>
            err++;
 800c408:	7afb      	ldrb	r3, [r7, #11]
 800c40a:	3301      	adds	r3, #1
 800c40c:	72fb      	strb	r3, [r7, #11]
          break;
 800c40e:	e089      	b.n	800c524 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00b      	beq.n	800c434 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	7c12      	ldrb	r2, [r2, #16]
 800c428:	f107 0108 	add.w	r1, r7, #8
 800c42c:	4610      	mov	r0, r2
 800c42e:	4798      	blx	r3
 800c430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c432:	e077      	b.n	800c524 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c434:	6839      	ldr	r1, [r7, #0]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fab1 	bl	800c99e <USBD_CtlError>
            err++;
 800c43c:	7afb      	ldrb	r3, [r7, #11]
 800c43e:	3301      	adds	r3, #1
 800c440:	72fb      	strb	r3, [r7, #11]
          break;
 800c442:	e06f      	b.n	800c524 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d00b      	beq.n	800c468 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	7c12      	ldrb	r2, [r2, #16]
 800c45c:	f107 0108 	add.w	r1, r7, #8
 800c460:	4610      	mov	r0, r2
 800c462:	4798      	blx	r3
 800c464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c466:	e05d      	b.n	800c524 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c468:	6839      	ldr	r1, [r7, #0]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fa97 	bl	800c99e <USBD_CtlError>
            err++;
 800c470:	7afb      	ldrb	r3, [r7, #11]
 800c472:	3301      	adds	r3, #1
 800c474:	72fb      	strb	r3, [r7, #11]
          break;
 800c476:	e055      	b.n	800c524 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00b      	beq.n	800c49c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	7c12      	ldrb	r2, [r2, #16]
 800c490:	f107 0108 	add.w	r1, r7, #8
 800c494:	4610      	mov	r0, r2
 800c496:	4798      	blx	r3
 800c498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c49a:	e043      	b.n	800c524 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c49c:	6839      	ldr	r1, [r7, #0]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 fa7d 	bl	800c99e <USBD_CtlError>
            err++;
 800c4a4:	7afb      	ldrb	r3, [r7, #11]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4aa:	e03b      	b.n	800c524 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4b2:	695b      	ldr	r3, [r3, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00b      	beq.n	800c4d0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4be:	695b      	ldr	r3, [r3, #20]
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	7c12      	ldrb	r2, [r2, #16]
 800c4c4:	f107 0108 	add.w	r1, r7, #8
 800c4c8:	4610      	mov	r0, r2
 800c4ca:	4798      	blx	r3
 800c4cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ce:	e029      	b.n	800c524 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4d0:	6839      	ldr	r1, [r7, #0]
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fa63 	bl	800c99e <USBD_CtlError>
            err++;
 800c4d8:	7afb      	ldrb	r3, [r7, #11]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c4de:	e021      	b.n	800c524 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4e6:	699b      	ldr	r3, [r3, #24]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00b      	beq.n	800c504 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4f2:	699b      	ldr	r3, [r3, #24]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	7c12      	ldrb	r2, [r2, #16]
 800c4f8:	f107 0108 	add.w	r1, r7, #8
 800c4fc:	4610      	mov	r0, r2
 800c4fe:	4798      	blx	r3
 800c500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c502:	e00f      	b.n	800c524 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c504:	6839      	ldr	r1, [r7, #0]
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 fa49 	bl	800c99e <USBD_CtlError>
            err++;
 800c50c:	7afb      	ldrb	r3, [r7, #11]
 800c50e:	3301      	adds	r3, #1
 800c510:	72fb      	strb	r3, [r7, #11]
          break;
 800c512:	e007      	b.n	800c524 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c514:	6839      	ldr	r1, [r7, #0]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 fa41 	bl	800c99e <USBD_CtlError>
          err++;
 800c51c:	7afb      	ldrb	r3, [r7, #11]
 800c51e:	3301      	adds	r3, #1
 800c520:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c522:	bf00      	nop
      }
      break;
 800c524:	e037      	b.n	800c596 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	7c1b      	ldrb	r3, [r3, #16]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d109      	bne.n	800c542 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c536:	f107 0208 	add.w	r2, r7, #8
 800c53a:	4610      	mov	r0, r2
 800c53c:	4798      	blx	r3
 800c53e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c540:	e029      	b.n	800c596 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c542:	6839      	ldr	r1, [r7, #0]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fa2a 	bl	800c99e <USBD_CtlError>
        err++;
 800c54a:	7afb      	ldrb	r3, [r7, #11]
 800c54c:	3301      	adds	r3, #1
 800c54e:	72fb      	strb	r3, [r7, #11]
      break;
 800c550:	e021      	b.n	800c596 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	7c1b      	ldrb	r3, [r3, #16]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10d      	bne.n	800c576 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c562:	f107 0208 	add.w	r2, r7, #8
 800c566:	4610      	mov	r0, r2
 800c568:	4798      	blx	r3
 800c56a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	3301      	adds	r3, #1
 800c570:	2207      	movs	r2, #7
 800c572:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c574:	e00f      	b.n	800c596 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c576:	6839      	ldr	r1, [r7, #0]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 fa10 	bl	800c99e <USBD_CtlError>
        err++;
 800c57e:	7afb      	ldrb	r3, [r7, #11]
 800c580:	3301      	adds	r3, #1
 800c582:	72fb      	strb	r3, [r7, #11]
      break;
 800c584:	e007      	b.n	800c596 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c586:	6839      	ldr	r1, [r7, #0]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fa08 	bl	800c99e <USBD_CtlError>
      err++;
 800c58e:	7afb      	ldrb	r3, [r7, #11]
 800c590:	3301      	adds	r3, #1
 800c592:	72fb      	strb	r3, [r7, #11]
      break;
 800c594:	bf00      	nop
  }

  if (err != 0U)
 800c596:	7afb      	ldrb	r3, [r7, #11]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d11e      	bne.n	800c5da <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	88db      	ldrh	r3, [r3, #6]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d016      	beq.n	800c5d2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c5a4:	893b      	ldrh	r3, [r7, #8]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d00e      	beq.n	800c5c8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	88da      	ldrh	r2, [r3, #6]
 800c5ae:	893b      	ldrh	r3, [r7, #8]
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	bf28      	it	cs
 800c5b4:	4613      	movcs	r3, r2
 800c5b6:	b29b      	uxth	r3, r3
 800c5b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5ba:	893b      	ldrh	r3, [r7, #8]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	68f9      	ldr	r1, [r7, #12]
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fa5d 	bl	800ca80 <USBD_CtlSendData>
 800c5c6:	e009      	b.n	800c5dc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 f9e7 	bl	800c99e <USBD_CtlError>
 800c5d0:	e004      	b.n	800c5dc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 faae 	bl	800cb34 <USBD_CtlSendStatus>
 800c5d8:	e000      	b.n	800c5dc <USBD_GetDescriptor+0x320>
    return;
 800c5da:	bf00      	nop
  }
}
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop

0800c5e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	889b      	ldrh	r3, [r3, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d131      	bne.n	800c65a <USBD_SetAddress+0x76>
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	88db      	ldrh	r3, [r3, #6]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d12d      	bne.n	800c65a <USBD_SetAddress+0x76>
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	885b      	ldrh	r3, [r3, #2]
 800c602:	2b7f      	cmp	r3, #127	@ 0x7f
 800c604:	d829      	bhi.n	800c65a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	885b      	ldrh	r3, [r3, #2]
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c610:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d104      	bne.n	800c628 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f9bc 	bl	800c99e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c626:	e01d      	b.n	800c664 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	7bfa      	ldrb	r2, [r7, #15]
 800c62c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c630:	7bfb      	ldrb	r3, [r7, #15]
 800c632:	4619      	mov	r1, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 ffe1 	bl	800d5fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fa7a 	bl	800cb34 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c640:	7bfb      	ldrb	r3, [r7, #15]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d004      	beq.n	800c650 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2202      	movs	r2, #2
 800c64a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c64e:	e009      	b.n	800c664 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2201      	movs	r2, #1
 800c654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c658:	e004      	b.n	800c664 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f99e 	bl	800c99e <USBD_CtlError>
  }
}
 800c662:	bf00      	nop
 800c664:	bf00      	nop
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b084      	sub	sp, #16
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c676:	2300      	movs	r3, #0
 800c678:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	885b      	ldrh	r3, [r3, #2]
 800c67e:	b2da      	uxtb	r2, r3
 800c680:	4b4e      	ldr	r3, [pc, #312]	@ (800c7bc <USBD_SetConfig+0x150>)
 800c682:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c684:	4b4d      	ldr	r3, [pc, #308]	@ (800c7bc <USBD_SetConfig+0x150>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d905      	bls.n	800c698 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c68c:	6839      	ldr	r1, [r7, #0]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f985 	bl	800c99e <USBD_CtlError>
    return USBD_FAIL;
 800c694:	2303      	movs	r3, #3
 800c696:	e08c      	b.n	800c7b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c69e:	b2db      	uxtb	r3, r3
 800c6a0:	2b02      	cmp	r3, #2
 800c6a2:	d002      	beq.n	800c6aa <USBD_SetConfig+0x3e>
 800c6a4:	2b03      	cmp	r3, #3
 800c6a6:	d029      	beq.n	800c6fc <USBD_SetConfig+0x90>
 800c6a8:	e075      	b.n	800c796 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6aa:	4b44      	ldr	r3, [pc, #272]	@ (800c7bc <USBD_SetConfig+0x150>)
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d020      	beq.n	800c6f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6b2:	4b42      	ldr	r3, [pc, #264]	@ (800c7bc <USBD_SetConfig+0x150>)
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6bc:	4b3f      	ldr	r3, [pc, #252]	@ (800c7bc <USBD_SetConfig+0x150>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7fe ffb9 	bl	800b63a <USBD_SetClassConfig>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d008      	beq.n	800c6e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6d2:	6839      	ldr	r1, [r7, #0]
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 f962 	bl	800c99e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2202      	movs	r2, #2
 800c6de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6e2:	e065      	b.n	800c7b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fa25 	bl	800cb34 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2203      	movs	r2, #3
 800c6ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6f2:	e05d      	b.n	800c7b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fa1d 	bl	800cb34 <USBD_CtlSendStatus>
      break;
 800c6fa:	e059      	b.n	800c7b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6fc:	4b2f      	ldr	r3, [pc, #188]	@ (800c7bc <USBD_SetConfig+0x150>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d112      	bne.n	800c72a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2202      	movs	r2, #2
 800c708:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c70c:	4b2b      	ldr	r3, [pc, #172]	@ (800c7bc <USBD_SetConfig+0x150>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	461a      	mov	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c716:	4b29      	ldr	r3, [pc, #164]	@ (800c7bc <USBD_SetConfig+0x150>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	4619      	mov	r1, r3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7fe ffa8 	bl	800b672 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fa06 	bl	800cb34 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c728:	e042      	b.n	800c7b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c72a:	4b24      	ldr	r3, [pc, #144]	@ (800c7bc <USBD_SetConfig+0x150>)
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	429a      	cmp	r2, r3
 800c736:	d02a      	beq.n	800c78e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	4619      	mov	r1, r3
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7fe ff96 	bl	800b672 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c746:	4b1d      	ldr	r3, [pc, #116]	@ (800c7bc <USBD_SetConfig+0x150>)
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	461a      	mov	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c750:	4b1a      	ldr	r3, [pc, #104]	@ (800c7bc <USBD_SetConfig+0x150>)
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	4619      	mov	r1, r3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f7fe ff6f 	bl	800b63a <USBD_SetClassConfig>
 800c75c:	4603      	mov	r3, r0
 800c75e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c760:	7bfb      	ldrb	r3, [r7, #15]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00f      	beq.n	800c786 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c766:	6839      	ldr	r1, [r7, #0]
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f918 	bl	800c99e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	4619      	mov	r1, r3
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7fe ff7b 	bl	800b672 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2202      	movs	r2, #2
 800c780:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c784:	e014      	b.n	800c7b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f9d4 	bl	800cb34 <USBD_CtlSendStatus>
      break;
 800c78c:	e010      	b.n	800c7b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f9d0 	bl	800cb34 <USBD_CtlSendStatus>
      break;
 800c794:	e00c      	b.n	800c7b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c796:	6839      	ldr	r1, [r7, #0]
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f900 	bl	800c99e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c79e:	4b07      	ldr	r3, [pc, #28]	@ (800c7bc <USBD_SetConfig+0x150>)
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7fe ff64 	bl	800b672 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ae:	bf00      	nop
  }

  return ret;
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	2000357c 	.word	0x2000357c

0800c7c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	88db      	ldrh	r3, [r3, #6]
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d004      	beq.n	800c7dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7d2:	6839      	ldr	r1, [r7, #0]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f8e2 	bl	800c99e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7da:	e023      	b.n	800c824 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	2b02      	cmp	r3, #2
 800c7e6:	dc02      	bgt.n	800c7ee <USBD_GetConfig+0x2e>
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	dc03      	bgt.n	800c7f4 <USBD_GetConfig+0x34>
 800c7ec:	e015      	b.n	800c81a <USBD_GetConfig+0x5a>
 800c7ee:	2b03      	cmp	r3, #3
 800c7f0:	d00b      	beq.n	800c80a <USBD_GetConfig+0x4a>
 800c7f2:	e012      	b.n	800c81a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	3308      	adds	r3, #8
 800c7fe:	2201      	movs	r2, #1
 800c800:	4619      	mov	r1, r3
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f93c 	bl	800ca80 <USBD_CtlSendData>
        break;
 800c808:	e00c      	b.n	800c824 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	3304      	adds	r3, #4
 800c80e:	2201      	movs	r2, #1
 800c810:	4619      	mov	r1, r3
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f934 	bl	800ca80 <USBD_CtlSendData>
        break;
 800c818:	e004      	b.n	800c824 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 f8be 	bl	800c99e <USBD_CtlError>
        break;
 800c822:	bf00      	nop
}
 800c824:	bf00      	nop
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	3b01      	subs	r3, #1
 800c840:	2b02      	cmp	r3, #2
 800c842:	d81e      	bhi.n	800c882 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	88db      	ldrh	r3, [r3, #6]
 800c848:	2b02      	cmp	r3, #2
 800c84a:	d004      	beq.n	800c856 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f8a5 	bl	800c99e <USBD_CtlError>
        break;
 800c854:	e01a      	b.n	800c88c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c862:	2b00      	cmp	r3, #0
 800c864:	d005      	beq.n	800c872 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	f043 0202 	orr.w	r2, r3, #2
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	330c      	adds	r3, #12
 800c876:	2202      	movs	r2, #2
 800c878:	4619      	mov	r1, r3
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f900 	bl	800ca80 <USBD_CtlSendData>
      break;
 800c880:	e004      	b.n	800c88c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c882:	6839      	ldr	r1, [r7, #0]
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f88a 	bl	800c99e <USBD_CtlError>
      break;
 800c88a:	bf00      	nop
  }
}
 800c88c:	bf00      	nop
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	885b      	ldrh	r3, [r3, #2]
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	d107      	bne.n	800c8b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f940 	bl	800cb34 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8b4:	e013      	b.n	800c8de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	885b      	ldrh	r3, [r3, #2]
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d10b      	bne.n	800c8d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	889b      	ldrh	r3, [r3, #4]
 800c8c2:	0a1b      	lsrs	r3, r3, #8
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 f930 	bl	800cb34 <USBD_CtlSendStatus>
}
 800c8d4:	e003      	b.n	800c8de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 f860 	bl	800c99e <USBD_CtlError>
}
 800c8de:	bf00      	nop
 800c8e0:	3708      	adds	r7, #8
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}

0800c8e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8e6:	b580      	push	{r7, lr}
 800c8e8:	b082      	sub	sp, #8
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	2b02      	cmp	r3, #2
 800c8fc:	d80b      	bhi.n	800c916 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	885b      	ldrh	r3, [r3, #2]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d10c      	bne.n	800c920 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f910 	bl	800cb34 <USBD_CtlSendStatus>
      }
      break;
 800c914:	e004      	b.n	800c920 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 f840 	bl	800c99e <USBD_CtlError>
      break;
 800c91e:	e000      	b.n	800c922 <USBD_ClrFeature+0x3c>
      break;
 800c920:	bf00      	nop
  }
}
 800c922:	bf00      	nop
 800c924:	3708      	adds	r7, #8
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b084      	sub	sp, #16
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	781a      	ldrb	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	3301      	adds	r3, #1
 800c944:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	781a      	ldrb	r2, [r3, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3301      	adds	r3, #1
 800c952:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7ff fa16 	bl	800bd86 <SWAPBYTE>
 800c95a:	4603      	mov	r3, r0
 800c95c:	461a      	mov	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3301      	adds	r3, #1
 800c966:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	3301      	adds	r3, #1
 800c96c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f7ff fa09 	bl	800bd86 <SWAPBYTE>
 800c974:	4603      	mov	r3, r0
 800c976:	461a      	mov	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	3301      	adds	r3, #1
 800c980:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3301      	adds	r3, #1
 800c986:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f7ff f9fc 	bl	800bd86 <SWAPBYTE>
 800c98e:	4603      	mov	r3, r0
 800c990:	461a      	mov	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	80da      	strh	r2, [r3, #6]
}
 800c996:	bf00      	nop
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b082      	sub	sp, #8
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9a8:	2180      	movs	r1, #128	@ 0x80
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 fd8e 	bl	800d4cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 fd8a 	bl	800d4cc <USBD_LL_StallEP>
}
 800c9b8:	bf00      	nop
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d036      	beq.n	800ca44 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9da:	6938      	ldr	r0, [r7, #16]
 800c9dc:	f000 f836 	bl	800ca4c <USBD_GetLen>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	005b      	lsls	r3, r3, #1
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9ee:	7dfb      	ldrb	r3, [r7, #23]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	4413      	add	r3, r2
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	7812      	ldrb	r2, [r2, #0]
 800c9f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca00:	7dfb      	ldrb	r3, [r7, #23]
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	4413      	add	r3, r2
 800ca06:	2203      	movs	r2, #3
 800ca08:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca0a:	7dfb      	ldrb	r3, [r7, #23]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca10:	e013      	b.n	800ca3a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	4413      	add	r3, r2
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	7812      	ldrb	r2, [r2, #0]
 800ca1c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	3301      	adds	r3, #1
 800ca22:	613b      	str	r3, [r7, #16]
    idx++;
 800ca24:	7dfb      	ldrb	r3, [r7, #23]
 800ca26:	3301      	adds	r3, #1
 800ca28:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	4413      	add	r3, r2
 800ca30:	2200      	movs	r2, #0
 800ca32:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca34:	7dfb      	ldrb	r3, [r7, #23]
 800ca36:	3301      	adds	r3, #1
 800ca38:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1e7      	bne.n	800ca12 <USBD_GetString+0x52>
 800ca42:	e000      	b.n	800ca46 <USBD_GetString+0x86>
    return;
 800ca44:	bf00      	nop
  }
}
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b085      	sub	sp, #20
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca54:	2300      	movs	r3, #0
 800ca56:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca5c:	e005      	b.n	800ca6a <USBD_GetLen+0x1e>
  {
    len++;
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
 800ca60:	3301      	adds	r3, #1
 800ca62:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	3301      	adds	r3, #1
 800ca68:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1f5      	bne.n	800ca5e <USBD_GetLen+0x12>
  }

  return len;
 800ca72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3714      	adds	r7, #20
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2202      	movs	r2, #2
 800ca90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	2100      	movs	r1, #0
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f000 fdde 	bl	800d668 <USBD_LL_Transmit>

  return USBD_OK;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3710      	adds	r7, #16
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b084      	sub	sp, #16
 800caba:	af00      	add	r7, sp, #0
 800cabc:	60f8      	str	r0, [r7, #12]
 800cabe:	60b9      	str	r1, [r7, #8]
 800cac0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	2100      	movs	r1, #0
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f000 fdcd 	bl	800d668 <USBD_LL_Transmit>

  return USBD_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3710      	adds	r7, #16
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2203      	movs	r2, #3
 800cae8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	2100      	movs	r1, #0
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	f000 fde8 	bl	800d6d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}

0800cb12 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb12:	b580      	push	{r7, lr}
 800cb14:	b084      	sub	sp, #16
 800cb16:	af00      	add	r7, sp, #0
 800cb18:	60f8      	str	r0, [r7, #12]
 800cb1a:	60b9      	str	r1, [r7, #8]
 800cb1c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	2100      	movs	r1, #0
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f000 fdd7 	bl	800d6d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2204      	movs	r2, #4
 800cb40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb44:	2300      	movs	r3, #0
 800cb46:	2200      	movs	r2, #0
 800cb48:	2100      	movs	r1, #0
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 fd8c 	bl	800d668 <USBD_LL_Transmit>

  return USBD_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3708      	adds	r7, #8
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b082      	sub	sp, #8
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2205      	movs	r2, #5
 800cb66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	2100      	movs	r1, #0
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fdb1 	bl	800d6d8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb84:	2200      	movs	r2, #0
 800cb86:	4912      	ldr	r1, [pc, #72]	@ (800cbd0 <MX_USB_DEVICE_Init+0x50>)
 800cb88:	4812      	ldr	r0, [pc, #72]	@ (800cbd4 <MX_USB_DEVICE_Init+0x54>)
 800cb8a:	f7fe fcd9 	bl	800b540 <USBD_Init>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d001      	beq.n	800cb98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb94:	f7f4 fb5d 	bl	8001252 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb98:	490f      	ldr	r1, [pc, #60]	@ (800cbd8 <MX_USB_DEVICE_Init+0x58>)
 800cb9a:	480e      	ldr	r0, [pc, #56]	@ (800cbd4 <MX_USB_DEVICE_Init+0x54>)
 800cb9c:	f7fe fd00 	bl	800b5a0 <USBD_RegisterClass>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cba6:	f7f4 fb54 	bl	8001252 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cbaa:	490c      	ldr	r1, [pc, #48]	@ (800cbdc <MX_USB_DEVICE_Init+0x5c>)
 800cbac:	4809      	ldr	r0, [pc, #36]	@ (800cbd4 <MX_USB_DEVICE_Init+0x54>)
 800cbae:	f7fe fbf7 	bl	800b3a0 <USBD_CDC_RegisterInterface>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cbb8:	f7f4 fb4b 	bl	8001252 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cbbc:	4805      	ldr	r0, [pc, #20]	@ (800cbd4 <MX_USB_DEVICE_Init+0x54>)
 800cbbe:	f7fe fd25 	bl	800b60c <USBD_Start>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbc8:	f7f4 fb43 	bl	8001252 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cbcc:	bf00      	nop
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	200000ac 	.word	0x200000ac
 800cbd4:	20003580 	.word	0x20003580
 800cbd8:	20000018 	.word	0x20000018
 800cbdc:	20000098 	.word	0x20000098

0800cbe0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	4905      	ldr	r1, [pc, #20]	@ (800cbfc <CDC_Init_FS+0x1c>)
 800cbe8:	4805      	ldr	r0, [pc, #20]	@ (800cc00 <CDC_Init_FS+0x20>)
 800cbea:	f7fe fbf3 	bl	800b3d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbee:	4905      	ldr	r1, [pc, #20]	@ (800cc04 <CDC_Init_FS+0x24>)
 800cbf0:	4803      	ldr	r0, [pc, #12]	@ (800cc00 <CDC_Init_FS+0x20>)
 800cbf2:	f7fe fc11 	bl	800b418 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbf6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	2000405c 	.word	0x2000405c
 800cc00:	20003580 	.word	0x20003580
 800cc04:	2000385c 	.word	0x2000385c

0800cc08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc0e:	4618      	mov	r0, r3
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b083      	sub	sp, #12
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	4603      	mov	r3, r0
 800cc20:	6039      	str	r1, [r7, #0]
 800cc22:	71fb      	strb	r3, [r7, #7]
 800cc24:	4613      	mov	r3, r2
 800cc26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc28:	79fb      	ldrb	r3, [r7, #7]
 800cc2a:	2b23      	cmp	r3, #35	@ 0x23
 800cc2c:	d84a      	bhi.n	800ccc4 <CDC_Control_FS+0xac>
 800cc2e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc34 <CDC_Control_FS+0x1c>)
 800cc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc34:	0800ccc5 	.word	0x0800ccc5
 800cc38:	0800ccc5 	.word	0x0800ccc5
 800cc3c:	0800ccc5 	.word	0x0800ccc5
 800cc40:	0800ccc5 	.word	0x0800ccc5
 800cc44:	0800ccc5 	.word	0x0800ccc5
 800cc48:	0800ccc5 	.word	0x0800ccc5
 800cc4c:	0800ccc5 	.word	0x0800ccc5
 800cc50:	0800ccc5 	.word	0x0800ccc5
 800cc54:	0800ccc5 	.word	0x0800ccc5
 800cc58:	0800ccc5 	.word	0x0800ccc5
 800cc5c:	0800ccc5 	.word	0x0800ccc5
 800cc60:	0800ccc5 	.word	0x0800ccc5
 800cc64:	0800ccc5 	.word	0x0800ccc5
 800cc68:	0800ccc5 	.word	0x0800ccc5
 800cc6c:	0800ccc5 	.word	0x0800ccc5
 800cc70:	0800ccc5 	.word	0x0800ccc5
 800cc74:	0800ccc5 	.word	0x0800ccc5
 800cc78:	0800ccc5 	.word	0x0800ccc5
 800cc7c:	0800ccc5 	.word	0x0800ccc5
 800cc80:	0800ccc5 	.word	0x0800ccc5
 800cc84:	0800ccc5 	.word	0x0800ccc5
 800cc88:	0800ccc5 	.word	0x0800ccc5
 800cc8c:	0800ccc5 	.word	0x0800ccc5
 800cc90:	0800ccc5 	.word	0x0800ccc5
 800cc94:	0800ccc5 	.word	0x0800ccc5
 800cc98:	0800ccc5 	.word	0x0800ccc5
 800cc9c:	0800ccc5 	.word	0x0800ccc5
 800cca0:	0800ccc5 	.word	0x0800ccc5
 800cca4:	0800ccc5 	.word	0x0800ccc5
 800cca8:	0800ccc5 	.word	0x0800ccc5
 800ccac:	0800ccc5 	.word	0x0800ccc5
 800ccb0:	0800ccc5 	.word	0x0800ccc5
 800ccb4:	0800ccc5 	.word	0x0800ccc5
 800ccb8:	0800ccc5 	.word	0x0800ccc5
 800ccbc:	0800ccc5 	.word	0x0800ccc5
 800ccc0:	0800ccc5 	.word	0x0800ccc5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ccc4:	bf00      	nop
  }

  return (USBD_OK);
 800ccc6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
 800ccdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ccde:	6879      	ldr	r1, [r7, #4]
 800cce0:	4808      	ldr	r0, [pc, #32]	@ (800cd04 <CDC_Receive_FS+0x30>)
 800cce2:	f7fe fb99 	bl	800b418 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cce6:	4807      	ldr	r0, [pc, #28]	@ (800cd04 <CDC_Receive_FS+0x30>)
 800cce8:	f7fe fbf4 	bl	800b4d4 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  //USB_My_Receive(Buf, *Len);
  comms_cdc_rx_callback(Buf, *Len);
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f7f3 ffa4 	bl	8000c40 <comms_cdc_rx_callback>

  return (USBD_OK);
 800ccf8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3708      	adds	r7, #8
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
 800cd02:	bf00      	nop
 800cd04:	20003580 	.word	0x20003580

0800cd08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	460b      	mov	r3, r1
 800cd12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd14:	2300      	movs	r3, #0
 800cd16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd18:	4b0d      	ldr	r3, [pc, #52]	@ (800cd50 <CDC_Transmit_FS+0x48>)
 800cd1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cd1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d001      	beq.n	800cd2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e00b      	b.n	800cd46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd2e:	887b      	ldrh	r3, [r7, #2]
 800cd30:	461a      	mov	r2, r3
 800cd32:	6879      	ldr	r1, [r7, #4]
 800cd34:	4806      	ldr	r0, [pc, #24]	@ (800cd50 <CDC_Transmit_FS+0x48>)
 800cd36:	f7fe fb4d 	bl	800b3d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd3a:	4805      	ldr	r0, [pc, #20]	@ (800cd50 <CDC_Transmit_FS+0x48>)
 800cd3c:	f7fe fb8a 	bl	800b454 <USBD_CDC_TransmitPacket>
 800cd40:	4603      	mov	r3, r0
 800cd42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3710      	adds	r7, #16
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	20003580 	.word	0x20003580

0800cd54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b087      	sub	sp, #28
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	4613      	mov	r3, r2
 800cd60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd62:	2300      	movs	r3, #0
 800cd64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	371c      	adds	r7, #28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
	...

0800cd78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	6039      	str	r1, [r7, #0]
 800cd82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	2212      	movs	r2, #18
 800cd88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd8a:	4b03      	ldr	r3, [pc, #12]	@ (800cd98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr
 800cd98:	200000cc 	.word	0x200000cc

0800cd9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	4603      	mov	r3, r0
 800cda4:	6039      	str	r1, [r7, #0]
 800cda6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	2204      	movs	r2, #4
 800cdac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdae:	4b03      	ldr	r3, [pc, #12]	@ (800cdbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	200000ec 	.word	0x200000ec

0800cdc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	6039      	str	r1, [r7, #0]
 800cdca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cdcc:	79fb      	ldrb	r3, [r7, #7]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d105      	bne.n	800cdde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdd2:	683a      	ldr	r2, [r7, #0]
 800cdd4:	4907      	ldr	r1, [pc, #28]	@ (800cdf4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdd6:	4808      	ldr	r0, [pc, #32]	@ (800cdf8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cdd8:	f7ff fdf2 	bl	800c9c0 <USBD_GetString>
 800cddc:	e004      	b.n	800cde8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdde:	683a      	ldr	r2, [r7, #0]
 800cde0:	4904      	ldr	r1, [pc, #16]	@ (800cdf4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cde2:	4805      	ldr	r0, [pc, #20]	@ (800cdf8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cde4:	f7ff fdec 	bl	800c9c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cde8:	4b02      	ldr	r3, [pc, #8]	@ (800cdf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3708      	adds	r7, #8
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	2000485c 	.word	0x2000485c
 800cdf8:	0800d8d4 	.word	0x0800d8d4

0800cdfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	4603      	mov	r3, r0
 800ce04:	6039      	str	r1, [r7, #0]
 800ce06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce08:	683a      	ldr	r2, [r7, #0]
 800ce0a:	4904      	ldr	r1, [pc, #16]	@ (800ce1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce0c:	4804      	ldr	r0, [pc, #16]	@ (800ce20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce0e:	f7ff fdd7 	bl	800c9c0 <USBD_GetString>
  return USBD_StrDesc;
 800ce12:	4b02      	ldr	r3, [pc, #8]	@ (800ce1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3708      	adds	r7, #8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	2000485c 	.word	0x2000485c
 800ce20:	0800d8ec 	.word	0x0800d8ec

0800ce24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	6039      	str	r1, [r7, #0]
 800ce2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	221a      	movs	r2, #26
 800ce34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce36:	f000 f855 	bl	800cee4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce3a:	4b02      	ldr	r3, [pc, #8]	@ (800ce44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	200000f0 	.word	0x200000f0

0800ce48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce54:	79fb      	ldrb	r3, [r7, #7]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d105      	bne.n	800ce66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce5a:	683a      	ldr	r2, [r7, #0]
 800ce5c:	4907      	ldr	r1, [pc, #28]	@ (800ce7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce5e:	4808      	ldr	r0, [pc, #32]	@ (800ce80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce60:	f7ff fdae 	bl	800c9c0 <USBD_GetString>
 800ce64:	e004      	b.n	800ce70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce66:	683a      	ldr	r2, [r7, #0]
 800ce68:	4904      	ldr	r1, [pc, #16]	@ (800ce7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce6a:	4805      	ldr	r0, [pc, #20]	@ (800ce80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce6c:	f7ff fda8 	bl	800c9c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce70:	4b02      	ldr	r3, [pc, #8]	@ (800ce7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	3708      	adds	r7, #8
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	2000485c 	.word	0x2000485c
 800ce80:	0800d900 	.word	0x0800d900

0800ce84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	6039      	str	r1, [r7, #0]
 800ce8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce90:	79fb      	ldrb	r3, [r7, #7]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d105      	bne.n	800cea2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	4907      	ldr	r1, [pc, #28]	@ (800ceb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce9a:	4808      	ldr	r0, [pc, #32]	@ (800cebc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce9c:	f7ff fd90 	bl	800c9c0 <USBD_GetString>
 800cea0:	e004      	b.n	800ceac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cea2:	683a      	ldr	r2, [r7, #0]
 800cea4:	4904      	ldr	r1, [pc, #16]	@ (800ceb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cea6:	4805      	ldr	r0, [pc, #20]	@ (800cebc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cea8:	f7ff fd8a 	bl	800c9c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ceac:	4b02      	ldr	r3, [pc, #8]	@ (800ceb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	2000485c 	.word	0x2000485c
 800cebc:	0800d90c 	.word	0x0800d90c

0800cec0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	4603      	mov	r3, r0
 800cec8:	6039      	str	r1, [r7, #0]
 800ceca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	220c      	movs	r2, #12
 800ced0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ced2:	4b03      	ldr	r3, [pc, #12]	@ (800cee0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	200000e0 	.word	0x200000e0

0800cee4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ceea:	4b0f      	ldr	r3, [pc, #60]	@ (800cf28 <Get_SerialNum+0x44>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cef0:	4b0e      	ldr	r3, [pc, #56]	@ (800cf2c <Get_SerialNum+0x48>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cef6:	4b0e      	ldr	r3, [pc, #56]	@ (800cf30 <Get_SerialNum+0x4c>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	4413      	add	r3, r2
 800cf02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d009      	beq.n	800cf1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf0a:	2208      	movs	r2, #8
 800cf0c:	4909      	ldr	r1, [pc, #36]	@ (800cf34 <Get_SerialNum+0x50>)
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f000 f814 	bl	800cf3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf14:	2204      	movs	r2, #4
 800cf16:	4908      	ldr	r1, [pc, #32]	@ (800cf38 <Get_SerialNum+0x54>)
 800cf18:	68b8      	ldr	r0, [r7, #8]
 800cf1a:	f000 f80f 	bl	800cf3c <IntToUnicode>
  }
}
 800cf1e:	bf00      	nop
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	1fff7590 	.word	0x1fff7590
 800cf2c:	1fff7594 	.word	0x1fff7594
 800cf30:	1fff7598 	.word	0x1fff7598
 800cf34:	200000f2 	.word	0x200000f2
 800cf38:	20000102 	.word	0x20000102

0800cf3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b087      	sub	sp, #28
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	4613      	mov	r3, r2
 800cf48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf4e:	2300      	movs	r3, #0
 800cf50:	75fb      	strb	r3, [r7, #23]
 800cf52:	e027      	b.n	800cfa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	0f1b      	lsrs	r3, r3, #28
 800cf58:	2b09      	cmp	r3, #9
 800cf5a:	d80b      	bhi.n	800cf74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	0f1b      	lsrs	r3, r3, #28
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	7dfb      	ldrb	r3, [r7, #23]
 800cf64:	005b      	lsls	r3, r3, #1
 800cf66:	4619      	mov	r1, r3
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	440b      	add	r3, r1
 800cf6c:	3230      	adds	r2, #48	@ 0x30
 800cf6e:	b2d2      	uxtb	r2, r2
 800cf70:	701a      	strb	r2, [r3, #0]
 800cf72:	e00a      	b.n	800cf8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	0f1b      	lsrs	r3, r3, #28
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	7dfb      	ldrb	r3, [r7, #23]
 800cf7c:	005b      	lsls	r3, r3, #1
 800cf7e:	4619      	mov	r1, r3
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	440b      	add	r3, r1
 800cf84:	3237      	adds	r2, #55	@ 0x37
 800cf86:	b2d2      	uxtb	r2, r2
 800cf88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	011b      	lsls	r3, r3, #4
 800cf8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf90:	7dfb      	ldrb	r3, [r7, #23]
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	3301      	adds	r3, #1
 800cf96:	68ba      	ldr	r2, [r7, #8]
 800cf98:	4413      	add	r3, r2
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf9e:	7dfb      	ldrb	r3, [r7, #23]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	75fb      	strb	r3, [r7, #23]
 800cfa4:	7dfa      	ldrb	r2, [r7, #23]
 800cfa6:	79fb      	ldrb	r3, [r7, #7]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d3d3      	bcc.n	800cf54 <IntToUnicode+0x18>
  }
}
 800cfac:	bf00      	nop
 800cfae:	bf00      	nop
 800cfb0:	371c      	adds	r7, #28
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr
	...

0800cfbc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b0b0      	sub	sp, #192	@ 0xc0
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfc4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800cfc8:	2200      	movs	r2, #0
 800cfca:	601a      	str	r2, [r3, #0]
 800cfcc:	605a      	str	r2, [r3, #4]
 800cfce:	609a      	str	r2, [r3, #8]
 800cfd0:	60da      	str	r2, [r3, #12]
 800cfd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cfd4:	f107 0318 	add.w	r3, r7, #24
 800cfd8:	2294      	movs	r2, #148	@ 0x94
 800cfda:	2100      	movs	r1, #0
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f000 fc33 	bl	800d848 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cfea:	d174      	bne.n	800d0d6 <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cfec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cff0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cff2:	2300      	movs	r3, #0
 800cff4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cff8:	f107 0318 	add.w	r3, r7, #24
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7f9 f8b7 	bl	8006170 <HAL_RCCEx_PeriphCLKConfig>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d008:	f7f4 f923 	bl	8001252 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d00c:	4b34      	ldr	r3, [pc, #208]	@ (800d0e0 <HAL_PCD_MspInit+0x124>)
 800d00e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d010:	4a33      	ldr	r2, [pc, #204]	@ (800d0e0 <HAL_PCD_MspInit+0x124>)
 800d012:	f043 0301 	orr.w	r3, r3, #1
 800d016:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d018:	4b31      	ldr	r3, [pc, #196]	@ (800d0e0 <HAL_PCD_MspInit+0x124>)
 800d01a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d01c:	f003 0301 	and.w	r3, r3, #1
 800d020:	617b      	str	r3, [r7, #20]
 800d022:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d024:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800d028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d02c:	2302      	movs	r3, #2
 800d02e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d032:	2300      	movs	r3, #0
 800d034:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d038:	2303      	movs	r3, #3
 800d03a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d03e:	230a      	movs	r3, #10
 800d040:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d044:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d048:	4619      	mov	r1, r3
 800d04a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d04e:	f7f6 fd4f 	bl	8003af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d052:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d056:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d05a:	2300      	movs	r3, #0
 800d05c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d060:	2300      	movs	r3, #0
 800d062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d066:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d06a:	4619      	mov	r1, r3
 800d06c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d070:	f7f6 fd3e 	bl	8003af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d074:	4b1a      	ldr	r3, [pc, #104]	@ (800d0e0 <HAL_PCD_MspInit+0x124>)
 800d076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d078:	4a19      	ldr	r2, [pc, #100]	@ (800d0e0 <HAL_PCD_MspInit+0x124>)
 800d07a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d07e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d080:	4b17      	ldr	r3, [pc, #92]	@ (800d0e0 <HAL_PCD_MspInit+0x124>)
 800d082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d084:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d088:	613b      	str	r3, [r7, #16]
 800d08a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d08c:	4b14      	ldr	r3, [pc, #80]	@ (800d0e0 <HAL_PCD_MspInit+0x124>)
 800d08e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d094:	2b00      	cmp	r3, #0
 800d096:	d114      	bne.n	800d0c2 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d098:	4b11      	ldr	r3, [pc, #68]	@ (800d0e0 <HAL_PCD_MspInit+0x124>)
 800d09a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d09c:	4a10      	ldr	r2, [pc, #64]	@ (800d0e0 <HAL_PCD_MspInit+0x124>)
 800d09e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d0a2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d0a4:	4b0e      	ldr	r3, [pc, #56]	@ (800d0e0 <HAL_PCD_MspInit+0x124>)
 800d0a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0ac:	60fb      	str	r3, [r7, #12]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d0b0:	f7f8 f966 	bl	8005380 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d0b4:	4b0a      	ldr	r3, [pc, #40]	@ (800d0e0 <HAL_PCD_MspInit+0x124>)
 800d0b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0b8:	4a09      	ldr	r2, [pc, #36]	@ (800d0e0 <HAL_PCD_MspInit+0x124>)
 800d0ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d0be:	6593      	str	r3, [r2, #88]	@ 0x58
 800d0c0:	e001      	b.n	800d0c6 <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d0c2:	f7f8 f95d 	bl	8005380 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	2100      	movs	r1, #0
 800d0ca:	2043      	movs	r0, #67	@ 0x43
 800d0cc:	f7f6 f963 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d0d0:	2043      	movs	r0, #67	@ 0x43
 800d0d2:	f7f6 f97c 	bl	80033ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d0d6:	bf00      	nop
 800d0d8:	37c0      	adds	r7, #192	@ 0xc0
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	40021000 	.word	0x40021000

0800d0e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	4610      	mov	r0, r2
 800d0fc:	f7fe fad3 	bl	800b6a6 <USBD_LL_SetupStage>
}
 800d100:	bf00      	nop
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	460b      	mov	r3, r1
 800d112:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d11a:	78fa      	ldrb	r2, [r7, #3]
 800d11c:	6879      	ldr	r1, [r7, #4]
 800d11e:	4613      	mov	r3, r2
 800d120:	00db      	lsls	r3, r3, #3
 800d122:	4413      	add	r3, r2
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	440b      	add	r3, r1
 800d128:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	78fb      	ldrb	r3, [r7, #3]
 800d130:	4619      	mov	r1, r3
 800d132:	f7fe fb0d 	bl	800b750 <USBD_LL_DataOutStage>
}
 800d136:	bf00      	nop
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d13e:	b580      	push	{r7, lr}
 800d140:	b082      	sub	sp, #8
 800d142:	af00      	add	r7, sp, #0
 800d144:	6078      	str	r0, [r7, #4]
 800d146:	460b      	mov	r3, r1
 800d148:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d150:	78fa      	ldrb	r2, [r7, #3]
 800d152:	6879      	ldr	r1, [r7, #4]
 800d154:	4613      	mov	r3, r2
 800d156:	00db      	lsls	r3, r3, #3
 800d158:	4413      	add	r3, r2
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	440b      	add	r3, r1
 800d15e:	3348      	adds	r3, #72	@ 0x48
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	78fb      	ldrb	r3, [r7, #3]
 800d164:	4619      	mov	r1, r3
 800d166:	f7fe fba6 	bl	800b8b6 <USBD_LL_DataInStage>
}
 800d16a:	bf00      	nop
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}

0800d172 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b082      	sub	sp, #8
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d180:	4618      	mov	r0, r3
 800d182:	f7fe fce0 	bl	800bb46 <USBD_LL_SOF>
}
 800d186:	bf00      	nop
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}

0800d18e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d18e:	b580      	push	{r7, lr}
 800d190:	b084      	sub	sp, #16
 800d192:	af00      	add	r7, sp, #0
 800d194:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d196:	2301      	movs	r3, #1
 800d198:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d001      	beq.n	800d1a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d1a2:	f7f4 f856 	bl	8001252 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d1ac:	7bfa      	ldrb	r2, [r7, #15]
 800d1ae:	4611      	mov	r1, r2
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fe fc84 	bl	800babe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7fe fc2c 	bl	800ba1a <USBD_LL_Reset>
}
 800d1c2:	bf00      	nop
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
	...

0800d1cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	6812      	ldr	r2, [r2, #0]
 800d1e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d1e6:	f043 0301 	orr.w	r3, r3, #1
 800d1ea:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fe fc73 	bl	800bade <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6a1b      	ldr	r3, [r3, #32]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d005      	beq.n	800d20c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d200:	4b04      	ldr	r3, [pc, #16]	@ (800d214 <HAL_PCD_SuspendCallback+0x48>)
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	4a03      	ldr	r2, [pc, #12]	@ (800d214 <HAL_PCD_SuspendCallback+0x48>)
 800d206:	f043 0306 	orr.w	r3, r3, #6
 800d20a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d20c:	bf00      	nop
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	e000ed00 	.word	0xe000ed00

0800d218 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	6812      	ldr	r2, [r2, #0]
 800d22e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d232:	f023 0301 	bic.w	r3, r3, #1
 800d236:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6a1b      	ldr	r3, [r3, #32]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d007      	beq.n	800d250 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d240:	4b08      	ldr	r3, [pc, #32]	@ (800d264 <HAL_PCD_ResumeCallback+0x4c>)
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	4a07      	ldr	r2, [pc, #28]	@ (800d264 <HAL_PCD_ResumeCallback+0x4c>)
 800d246:	f023 0306 	bic.w	r3, r3, #6
 800d24a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d24c:	f000 faf6 	bl	800d83c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d256:	4618      	mov	r0, r3
 800d258:	f7fe fc5d 	bl	800bb16 <USBD_LL_Resume>
}
 800d25c:	bf00      	nop
 800d25e:	3708      	adds	r7, #8
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	e000ed00 	.word	0xe000ed00

0800d268 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	460b      	mov	r3, r1
 800d272:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d27a:	78fa      	ldrb	r2, [r7, #3]
 800d27c:	4611      	mov	r1, r2
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fcb3 	bl	800bbea <USBD_LL_IsoOUTIncomplete>
}
 800d284:	bf00      	nop
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	460b      	mov	r3, r1
 800d296:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d29e:	78fa      	ldrb	r2, [r7, #3]
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fe fc6f 	bl	800bb86 <USBD_LL_IsoINIncomplete>
}
 800d2a8:	bf00      	nop
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fe fcc5 	bl	800bc4e <USBD_LL_DevConnected>
}
 800d2c4:	bf00      	nop
 800d2c6:	3708      	adds	r7, #8
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}

0800d2cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f7fe fcc2 	bl	800bc64 <USBD_LL_DevDisconnected>
}
 800d2e0:	bf00      	nop
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d13c      	bne.n	800d372 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d2f8:	4a20      	ldr	r2, [pc, #128]	@ (800d37c <USBD_LL_Init+0x94>)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4a1e      	ldr	r2, [pc, #120]	@ (800d37c <USBD_LL_Init+0x94>)
 800d304:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d308:	4b1c      	ldr	r3, [pc, #112]	@ (800d37c <USBD_LL_Init+0x94>)
 800d30a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d30e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d310:	4b1a      	ldr	r3, [pc, #104]	@ (800d37c <USBD_LL_Init+0x94>)
 800d312:	2206      	movs	r2, #6
 800d314:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d316:	4b19      	ldr	r3, [pc, #100]	@ (800d37c <USBD_LL_Init+0x94>)
 800d318:	2202      	movs	r2, #2
 800d31a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d31c:	4b17      	ldr	r3, [pc, #92]	@ (800d37c <USBD_LL_Init+0x94>)
 800d31e:	2202      	movs	r2, #2
 800d320:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d322:	4b16      	ldr	r3, [pc, #88]	@ (800d37c <USBD_LL_Init+0x94>)
 800d324:	2200      	movs	r2, #0
 800d326:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d328:	4b14      	ldr	r3, [pc, #80]	@ (800d37c <USBD_LL_Init+0x94>)
 800d32a:	2200      	movs	r2, #0
 800d32c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d32e:	4b13      	ldr	r3, [pc, #76]	@ (800d37c <USBD_LL_Init+0x94>)
 800d330:	2200      	movs	r2, #0
 800d332:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d334:	4b11      	ldr	r3, [pc, #68]	@ (800d37c <USBD_LL_Init+0x94>)
 800d336:	2200      	movs	r2, #0
 800d338:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d33a:	4b10      	ldr	r3, [pc, #64]	@ (800d37c <USBD_LL_Init+0x94>)
 800d33c:	2200      	movs	r2, #0
 800d33e:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d340:	4b0e      	ldr	r3, [pc, #56]	@ (800d37c <USBD_LL_Init+0x94>)
 800d342:	2200      	movs	r2, #0
 800d344:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d346:	480d      	ldr	r0, [pc, #52]	@ (800d37c <USBD_LL_Init+0x94>)
 800d348:	f7f6 fdae 	bl	8003ea8 <HAL_PCD_Init>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d352:	f7f3 ff7e 	bl	8001252 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d356:	2180      	movs	r1, #128	@ 0x80
 800d358:	4808      	ldr	r0, [pc, #32]	@ (800d37c <USBD_LL_Init+0x94>)
 800d35a:	f7f7 ff18 	bl	800518e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d35e:	2240      	movs	r2, #64	@ 0x40
 800d360:	2100      	movs	r1, #0
 800d362:	4806      	ldr	r0, [pc, #24]	@ (800d37c <USBD_LL_Init+0x94>)
 800d364:	f7f7 fecc 	bl	8005100 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d368:	2280      	movs	r2, #128	@ 0x80
 800d36a:	2101      	movs	r1, #1
 800d36c:	4803      	ldr	r0, [pc, #12]	@ (800d37c <USBD_LL_Init+0x94>)
 800d36e:	f7f7 fec7 	bl	8005100 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d372:	2300      	movs	r3, #0
}
 800d374:	4618      	mov	r0, r3
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	20004a5c 	.word	0x20004a5c

0800d380 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d396:	4618      	mov	r0, r3
 800d398:	f7f6 feaa 	bl	80040f0 <HAL_PCD_Start>
 800d39c:	4603      	mov	r3, r0
 800d39e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d3a0:	7bbb      	ldrb	r3, [r7, #14]
 800d3a2:	2b03      	cmp	r3, #3
 800d3a4:	d816      	bhi.n	800d3d4 <USBD_LL_Start+0x54>
 800d3a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d3ac <USBD_LL_Start+0x2c>)
 800d3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ac:	0800d3bd 	.word	0x0800d3bd
 800d3b0:	0800d3c3 	.word	0x0800d3c3
 800d3b4:	0800d3c9 	.word	0x0800d3c9
 800d3b8:	0800d3cf 	.word	0x0800d3cf
    case HAL_OK :
      usb_status = USBD_OK;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c0:	e00b      	b.n	800d3da <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d3c2:	2303      	movs	r3, #3
 800d3c4:	73fb      	strb	r3, [r7, #15]
    break;
 800d3c6:	e008      	b.n	800d3da <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	73fb      	strb	r3, [r7, #15]
    break;
 800d3cc:	e005      	b.n	800d3da <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d3ce:	2303      	movs	r3, #3
 800d3d0:	73fb      	strb	r3, [r7, #15]
    break;
 800d3d2:	e002      	b.n	800d3da <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d3d8:	bf00      	nop
  }
  return usb_status;
 800d3da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	4608      	mov	r0, r1
 800d3ee:	4611      	mov	r1, r2
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	70fb      	strb	r3, [r7, #3]
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	70bb      	strb	r3, [r7, #2]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3fe:	2300      	movs	r3, #0
 800d400:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d40c:	78bb      	ldrb	r3, [r7, #2]
 800d40e:	883a      	ldrh	r2, [r7, #0]
 800d410:	78f9      	ldrb	r1, [r7, #3]
 800d412:	f7f7 fb54 	bl	8004abe <HAL_PCD_EP_Open>
 800d416:	4603      	mov	r3, r0
 800d418:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d41a:	7bbb      	ldrb	r3, [r7, #14]
 800d41c:	2b03      	cmp	r3, #3
 800d41e:	d817      	bhi.n	800d450 <USBD_LL_OpenEP+0x6c>
 800d420:	a201      	add	r2, pc, #4	@ (adr r2, 800d428 <USBD_LL_OpenEP+0x44>)
 800d422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d426:	bf00      	nop
 800d428:	0800d439 	.word	0x0800d439
 800d42c:	0800d43f 	.word	0x0800d43f
 800d430:	0800d445 	.word	0x0800d445
 800d434:	0800d44b 	.word	0x0800d44b
    case HAL_OK :
      usb_status = USBD_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	73fb      	strb	r3, [r7, #15]
    break;
 800d43c:	e00b      	b.n	800d456 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d43e:	2303      	movs	r3, #3
 800d440:	73fb      	strb	r3, [r7, #15]
    break;
 800d442:	e008      	b.n	800d456 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d444:	2301      	movs	r3, #1
 800d446:	73fb      	strb	r3, [r7, #15]
    break;
 800d448:	e005      	b.n	800d456 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d44a:	2303      	movs	r3, #3
 800d44c:	73fb      	strb	r3, [r7, #15]
    break;
 800d44e:	e002      	b.n	800d456 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d450:	2303      	movs	r3, #3
 800d452:	73fb      	strb	r3, [r7, #15]
    break;
 800d454:	bf00      	nop
  }
  return usb_status;
 800d456:	7bfb      	ldrb	r3, [r7, #15]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3710      	adds	r7, #16
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}

0800d460 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	460b      	mov	r3, r1
 800d46a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d46c:	2300      	movs	r3, #0
 800d46e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d470:	2300      	movs	r3, #0
 800d472:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d47a:	78fa      	ldrb	r2, [r7, #3]
 800d47c:	4611      	mov	r1, r2
 800d47e:	4618      	mov	r0, r3
 800d480:	f7f7 fb85 	bl	8004b8e <HAL_PCD_EP_Close>
 800d484:	4603      	mov	r3, r0
 800d486:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d488:	7bbb      	ldrb	r3, [r7, #14]
 800d48a:	2b03      	cmp	r3, #3
 800d48c:	d816      	bhi.n	800d4bc <USBD_LL_CloseEP+0x5c>
 800d48e:	a201      	add	r2, pc, #4	@ (adr r2, 800d494 <USBD_LL_CloseEP+0x34>)
 800d490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d494:	0800d4a5 	.word	0x0800d4a5
 800d498:	0800d4ab 	.word	0x0800d4ab
 800d49c:	0800d4b1 	.word	0x0800d4b1
 800d4a0:	0800d4b7 	.word	0x0800d4b7
    case HAL_OK :
      usb_status = USBD_OK;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4a8:	e00b      	b.n	800d4c2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4aa:	2303      	movs	r3, #3
 800d4ac:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ae:	e008      	b.n	800d4c2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800d4b4:	e005      	b.n	800d4c2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4b6:	2303      	movs	r3, #3
 800d4b8:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ba:	e002      	b.n	800d4c2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d4bc:	2303      	movs	r3, #3
 800d4be:	73fb      	strb	r3, [r7, #15]
    break;
 800d4c0:	bf00      	nop
  }
  return usb_status;
 800d4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d4e6:	78fa      	ldrb	r2, [r7, #3]
 800d4e8:	4611      	mov	r1, r2
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7f7 fc14 	bl	8004d18 <HAL_PCD_EP_SetStall>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d4f4:	7bbb      	ldrb	r3, [r7, #14]
 800d4f6:	2b03      	cmp	r3, #3
 800d4f8:	d816      	bhi.n	800d528 <USBD_LL_StallEP+0x5c>
 800d4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d500 <USBD_LL_StallEP+0x34>)
 800d4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d500:	0800d511 	.word	0x0800d511
 800d504:	0800d517 	.word	0x0800d517
 800d508:	0800d51d 	.word	0x0800d51d
 800d50c:	0800d523 	.word	0x0800d523
    case HAL_OK :
      usb_status = USBD_OK;
 800d510:	2300      	movs	r3, #0
 800d512:	73fb      	strb	r3, [r7, #15]
    break;
 800d514:	e00b      	b.n	800d52e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d516:	2303      	movs	r3, #3
 800d518:	73fb      	strb	r3, [r7, #15]
    break;
 800d51a:	e008      	b.n	800d52e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d51c:	2301      	movs	r3, #1
 800d51e:	73fb      	strb	r3, [r7, #15]
    break;
 800d520:	e005      	b.n	800d52e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d522:	2303      	movs	r3, #3
 800d524:	73fb      	strb	r3, [r7, #15]
    break;
 800d526:	e002      	b.n	800d52e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d528:	2303      	movs	r3, #3
 800d52a:	73fb      	strb	r3, [r7, #15]
    break;
 800d52c:	bf00      	nop
  }
  return usb_status;
 800d52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	460b      	mov	r3, r1
 800d542:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d544:	2300      	movs	r3, #0
 800d546:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d548:	2300      	movs	r3, #0
 800d54a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d552:	78fa      	ldrb	r2, [r7, #3]
 800d554:	4611      	mov	r1, r2
 800d556:	4618      	mov	r0, r3
 800d558:	f7f7 fc40 	bl	8004ddc <HAL_PCD_EP_ClrStall>
 800d55c:	4603      	mov	r3, r0
 800d55e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d560:	7bbb      	ldrb	r3, [r7, #14]
 800d562:	2b03      	cmp	r3, #3
 800d564:	d816      	bhi.n	800d594 <USBD_LL_ClearStallEP+0x5c>
 800d566:	a201      	add	r2, pc, #4	@ (adr r2, 800d56c <USBD_LL_ClearStallEP+0x34>)
 800d568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d56c:	0800d57d 	.word	0x0800d57d
 800d570:	0800d583 	.word	0x0800d583
 800d574:	0800d589 	.word	0x0800d589
 800d578:	0800d58f 	.word	0x0800d58f
    case HAL_OK :
      usb_status = USBD_OK;
 800d57c:	2300      	movs	r3, #0
 800d57e:	73fb      	strb	r3, [r7, #15]
    break;
 800d580:	e00b      	b.n	800d59a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d582:	2303      	movs	r3, #3
 800d584:	73fb      	strb	r3, [r7, #15]
    break;
 800d586:	e008      	b.n	800d59a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d588:	2301      	movs	r3, #1
 800d58a:	73fb      	strb	r3, [r7, #15]
    break;
 800d58c:	e005      	b.n	800d59a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d58e:	2303      	movs	r3, #3
 800d590:	73fb      	strb	r3, [r7, #15]
    break;
 800d592:	e002      	b.n	800d59a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d594:	2303      	movs	r3, #3
 800d596:	73fb      	strb	r3, [r7, #15]
    break;
 800d598:	bf00      	nop
  }
  return usb_status;
 800d59a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d5b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	da0b      	bge.n	800d5d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d5c0:	78fb      	ldrb	r3, [r7, #3]
 800d5c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d5c6:	68f9      	ldr	r1, [r7, #12]
 800d5c8:	4613      	mov	r3, r2
 800d5ca:	00db      	lsls	r3, r3, #3
 800d5cc:	4413      	add	r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	440b      	add	r3, r1
 800d5d2:	333e      	adds	r3, #62	@ 0x3e
 800d5d4:	781b      	ldrb	r3, [r3, #0]
 800d5d6:	e00b      	b.n	800d5f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d5d8:	78fb      	ldrb	r3, [r7, #3]
 800d5da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d5de:	68f9      	ldr	r1, [r7, #12]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	00db      	lsls	r3, r3, #3
 800d5e4:	4413      	add	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	440b      	add	r3, r1
 800d5ea:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800d5ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3714      	adds	r7, #20
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	460b      	mov	r3, r1
 800d606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d608:	2300      	movs	r3, #0
 800d60a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d60c:	2300      	movs	r3, #0
 800d60e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d616:	78fa      	ldrb	r2, [r7, #3]
 800d618:	4611      	mov	r1, r2
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7f7 fa2a 	bl	8004a74 <HAL_PCD_SetAddress>
 800d620:	4603      	mov	r3, r0
 800d622:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d624:	7bbb      	ldrb	r3, [r7, #14]
 800d626:	2b03      	cmp	r3, #3
 800d628:	d816      	bhi.n	800d658 <USBD_LL_SetUSBAddress+0x5c>
 800d62a:	a201      	add	r2, pc, #4	@ (adr r2, 800d630 <USBD_LL_SetUSBAddress+0x34>)
 800d62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d630:	0800d641 	.word	0x0800d641
 800d634:	0800d647 	.word	0x0800d647
 800d638:	0800d64d 	.word	0x0800d64d
 800d63c:	0800d653 	.word	0x0800d653
    case HAL_OK :
      usb_status = USBD_OK;
 800d640:	2300      	movs	r3, #0
 800d642:	73fb      	strb	r3, [r7, #15]
    break;
 800d644:	e00b      	b.n	800d65e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d646:	2303      	movs	r3, #3
 800d648:	73fb      	strb	r3, [r7, #15]
    break;
 800d64a:	e008      	b.n	800d65e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d64c:	2301      	movs	r3, #1
 800d64e:	73fb      	strb	r3, [r7, #15]
    break;
 800d650:	e005      	b.n	800d65e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d652:	2303      	movs	r3, #3
 800d654:	73fb      	strb	r3, [r7, #15]
    break;
 800d656:	e002      	b.n	800d65e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d658:	2303      	movs	r3, #3
 800d65a:	73fb      	strb	r3, [r7, #15]
    break;
 800d65c:	bf00      	nop
  }
  return usb_status;
 800d65e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d660:	4618      	mov	r0, r3
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b086      	sub	sp, #24
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60f8      	str	r0, [r7, #12]
 800d670:	607a      	str	r2, [r7, #4]
 800d672:	603b      	str	r3, [r7, #0]
 800d674:	460b      	mov	r3, r1
 800d676:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d678:	2300      	movs	r3, #0
 800d67a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d67c:	2300      	movs	r3, #0
 800d67e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d686:	7af9      	ldrb	r1, [r7, #11]
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	f7f7 fb13 	bl	8004cb6 <HAL_PCD_EP_Transmit>
 800d690:	4603      	mov	r3, r0
 800d692:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d694:	7dbb      	ldrb	r3, [r7, #22]
 800d696:	2b03      	cmp	r3, #3
 800d698:	d816      	bhi.n	800d6c8 <USBD_LL_Transmit+0x60>
 800d69a:	a201      	add	r2, pc, #4	@ (adr r2, 800d6a0 <USBD_LL_Transmit+0x38>)
 800d69c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a0:	0800d6b1 	.word	0x0800d6b1
 800d6a4:	0800d6b7 	.word	0x0800d6b7
 800d6a8:	0800d6bd 	.word	0x0800d6bd
 800d6ac:	0800d6c3 	.word	0x0800d6c3
    case HAL_OK :
      usb_status = USBD_OK;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	75fb      	strb	r3, [r7, #23]
    break;
 800d6b4:	e00b      	b.n	800d6ce <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6b6:	2303      	movs	r3, #3
 800d6b8:	75fb      	strb	r3, [r7, #23]
    break;
 800d6ba:	e008      	b.n	800d6ce <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	75fb      	strb	r3, [r7, #23]
    break;
 800d6c0:	e005      	b.n	800d6ce <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d6c2:	2303      	movs	r3, #3
 800d6c4:	75fb      	strb	r3, [r7, #23]
    break;
 800d6c6:	e002      	b.n	800d6ce <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d6c8:	2303      	movs	r3, #3
 800d6ca:	75fb      	strb	r3, [r7, #23]
    break;
 800d6cc:	bf00      	nop
  }
  return usb_status;
 800d6ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	3718      	adds	r7, #24
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b086      	sub	sp, #24
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	60f8      	str	r0, [r7, #12]
 800d6e0:	607a      	str	r2, [r7, #4]
 800d6e2:	603b      	str	r3, [r7, #0]
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d6f6:	7af9      	ldrb	r1, [r7, #11]
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	f7f7 fa91 	bl	8004c22 <HAL_PCD_EP_Receive>
 800d700:	4603      	mov	r3, r0
 800d702:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d704:	7dbb      	ldrb	r3, [r7, #22]
 800d706:	2b03      	cmp	r3, #3
 800d708:	d816      	bhi.n	800d738 <USBD_LL_PrepareReceive+0x60>
 800d70a:	a201      	add	r2, pc, #4	@ (adr r2, 800d710 <USBD_LL_PrepareReceive+0x38>)
 800d70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d710:	0800d721 	.word	0x0800d721
 800d714:	0800d727 	.word	0x0800d727
 800d718:	0800d72d 	.word	0x0800d72d
 800d71c:	0800d733 	.word	0x0800d733
    case HAL_OK :
      usb_status = USBD_OK;
 800d720:	2300      	movs	r3, #0
 800d722:	75fb      	strb	r3, [r7, #23]
    break;
 800d724:	e00b      	b.n	800d73e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d726:	2303      	movs	r3, #3
 800d728:	75fb      	strb	r3, [r7, #23]
    break;
 800d72a:	e008      	b.n	800d73e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d72c:	2301      	movs	r3, #1
 800d72e:	75fb      	strb	r3, [r7, #23]
    break;
 800d730:	e005      	b.n	800d73e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d732:	2303      	movs	r3, #3
 800d734:	75fb      	strb	r3, [r7, #23]
    break;
 800d736:	e002      	b.n	800d73e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d738:	2303      	movs	r3, #3
 800d73a:	75fb      	strb	r3, [r7, #23]
    break;
 800d73c:	bf00      	nop
  }
  return usb_status;
 800d73e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d740:	4618      	mov	r0, r3
 800d742:	3718      	adds	r7, #24
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
 800d750:	460b      	mov	r3, r1
 800d752:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d75a:	78fa      	ldrb	r2, [r7, #3]
 800d75c:	4611      	mov	r1, r2
 800d75e:	4618      	mov	r0, r3
 800d760:	f7f7 fa91 	bl	8004c86 <HAL_PCD_EP_GetRxCount>
 800d764:	4603      	mov	r3, r0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}
	...

0800d770 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	460b      	mov	r3, r1
 800d77a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d77c:	78fb      	ldrb	r3, [r7, #3]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d002      	beq.n	800d788 <HAL_PCDEx_LPM_Callback+0x18>
 800d782:	2b01      	cmp	r3, #1
 800d784:	d01f      	beq.n	800d7c6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d786:	e03b      	b.n	800d800 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6a1b      	ldr	r3, [r3, #32]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d007      	beq.n	800d7a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d790:	f000 f854 	bl	800d83c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d794:	4b1c      	ldr	r3, [pc, #112]	@ (800d808 <HAL_PCDEx_LPM_Callback+0x98>)
 800d796:	691b      	ldr	r3, [r3, #16]
 800d798:	4a1b      	ldr	r2, [pc, #108]	@ (800d808 <HAL_PCDEx_LPM_Callback+0x98>)
 800d79a:	f023 0306 	bic.w	r3, r3, #6
 800d79e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	6812      	ldr	r2, [r2, #0]
 800d7ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d7b2:	f023 0301 	bic.w	r3, r3, #1
 800d7b6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fe f9a9 	bl	800bb16 <USBD_LL_Resume>
    break;
 800d7c4:	e01c      	b.n	800d800 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	6812      	ldr	r2, [r2, #0]
 800d7d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d7d8:	f043 0301 	orr.w	r3, r3, #1
 800d7dc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7fe f97a 	bl	800bade <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a1b      	ldr	r3, [r3, #32]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d005      	beq.n	800d7fe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d7f2:	4b05      	ldr	r3, [pc, #20]	@ (800d808 <HAL_PCDEx_LPM_Callback+0x98>)
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	4a04      	ldr	r2, [pc, #16]	@ (800d808 <HAL_PCDEx_LPM_Callback+0x98>)
 800d7f8:	f043 0306 	orr.w	r3, r3, #6
 800d7fc:	6113      	str	r3, [r2, #16]
    break;
 800d7fe:	bf00      	nop
}
 800d800:	bf00      	nop
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	e000ed00 	.word	0xe000ed00

0800d80c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d814:	4b03      	ldr	r3, [pc, #12]	@ (800d824 <USBD_static_malloc+0x18>)
}
 800d816:	4618      	mov	r0, r3
 800d818:	370c      	adds	r7, #12
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	20004f68 	.word	0x20004f68

0800d828 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]

}
 800d830:	bf00      	nop
 800d832:	370c      	adds	r7, #12
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr

0800d83c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d840:	f7f3 fcb4 	bl	80011ac <SystemClock_Config>
}
 800d844:	bf00      	nop
 800d846:	bd80      	pop	{r7, pc}

0800d848 <memset>:
 800d848:	4402      	add	r2, r0
 800d84a:	4603      	mov	r3, r0
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d100      	bne.n	800d852 <memset+0xa>
 800d850:	4770      	bx	lr
 800d852:	f803 1b01 	strb.w	r1, [r3], #1
 800d856:	e7f9      	b.n	800d84c <memset+0x4>

0800d858 <__libc_init_array>:
 800d858:	b570      	push	{r4, r5, r6, lr}
 800d85a:	4d0d      	ldr	r5, [pc, #52]	@ (800d890 <__libc_init_array+0x38>)
 800d85c:	4c0d      	ldr	r4, [pc, #52]	@ (800d894 <__libc_init_array+0x3c>)
 800d85e:	1b64      	subs	r4, r4, r5
 800d860:	10a4      	asrs	r4, r4, #2
 800d862:	2600      	movs	r6, #0
 800d864:	42a6      	cmp	r6, r4
 800d866:	d109      	bne.n	800d87c <__libc_init_array+0x24>
 800d868:	4d0b      	ldr	r5, [pc, #44]	@ (800d898 <__libc_init_array+0x40>)
 800d86a:	4c0c      	ldr	r4, [pc, #48]	@ (800d89c <__libc_init_array+0x44>)
 800d86c:	f000 f826 	bl	800d8bc <_init>
 800d870:	1b64      	subs	r4, r4, r5
 800d872:	10a4      	asrs	r4, r4, #2
 800d874:	2600      	movs	r6, #0
 800d876:	42a6      	cmp	r6, r4
 800d878:	d105      	bne.n	800d886 <__libc_init_array+0x2e>
 800d87a:	bd70      	pop	{r4, r5, r6, pc}
 800d87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d880:	4798      	blx	r3
 800d882:	3601      	adds	r6, #1
 800d884:	e7ee      	b.n	800d864 <__libc_init_array+0xc>
 800d886:	f855 3b04 	ldr.w	r3, [r5], #4
 800d88a:	4798      	blx	r3
 800d88c:	3601      	adds	r6, #1
 800d88e:	e7f2      	b.n	800d876 <__libc_init_array+0x1e>
 800d890:	0800d994 	.word	0x0800d994
 800d894:	0800d994 	.word	0x0800d994
 800d898:	0800d994 	.word	0x0800d994
 800d89c:	0800d998 	.word	0x0800d998

0800d8a0 <memcpy>:
 800d8a0:	440a      	add	r2, r1
 800d8a2:	4291      	cmp	r1, r2
 800d8a4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d8a8:	d100      	bne.n	800d8ac <memcpy+0xc>
 800d8aa:	4770      	bx	lr
 800d8ac:	b510      	push	{r4, lr}
 800d8ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8b6:	4291      	cmp	r1, r2
 800d8b8:	d1f9      	bne.n	800d8ae <memcpy+0xe>
 800d8ba:	bd10      	pop	{r4, pc}

0800d8bc <_init>:
 800d8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8be:	bf00      	nop
 800d8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8c2:	bc08      	pop	{r3}
 800d8c4:	469e      	mov	lr, r3
 800d8c6:	4770      	bx	lr

0800d8c8 <_fini>:
 800d8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ca:	bf00      	nop
 800d8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ce:	bc08      	pop	{r3}
 800d8d0:	469e      	mov	lr, r3
 800d8d2:	4770      	bx	lr
