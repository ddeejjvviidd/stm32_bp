
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c75c  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800c918  0800c918  0000d918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9d0  0800c9d0  0000e10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9d0  0800c9d0  0000d9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9d8  0800c9d8  0000e10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9d8  0800c9d8  0000d9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9dc  0800c9dc  0000d9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800c9e0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c124  2000010c  0800caec  0000e10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c230  0800caec  0000e230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002419a  00000000  00000000  0000e13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c93  00000000  00000000  000322d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  00036f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b6  00000000  00000000  00038b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fd28  00000000  00000000  0003a14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026743  00000000  00000000  00069e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011cc92  00000000  00000000  000905b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ad24b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000769c  00000000  00000000  001ad290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b492c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800c900 	.word	0x0800c900

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800c900 	.word	0x0800c900

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b2a      	ldr	r3, [pc, #168]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000504:	4a2a      	ldr	r2, [pc, #168]	@ (80005b0 <MX_ADC1_Init+0xc4>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b28      	ldr	r3, [pc, #160]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b26      	ldr	r3, [pc, #152]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b25      	ldr	r3, [pc, #148]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800051c:	4b23      	ldr	r3, [pc, #140]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b22      	ldr	r3, [pc, #136]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b20      	ldr	r3, [pc, #128]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052e:	4b1f      	ldr	r3, [pc, #124]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000534:	4b1d      	ldr	r3, [pc, #116]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000536:	2201      	movs	r2, #1
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b1c      	ldr	r3, [pc, #112]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b1a      	ldr	r3, [pc, #104]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b18      	ldr	r3, [pc, #96]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b16      	ldr	r3, [pc, #88]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b14      	ldr	r3, [pc, #80]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b12      	ldr	r3, [pc, #72]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4810      	ldr	r0, [pc, #64]	@ (80005ac <MX_ADC1_Init+0xc0>)
 800056a:	f001 fb29 	bl	8001bc0 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 fcb3 	bl	8000ede <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000578:	4b0e      	ldr	r3, [pc, #56]	@ (80005b4 <MX_ADC1_Init+0xc8>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	4805      	ldr	r0, [pc, #20]	@ (80005ac <MX_ADC1_Init+0xc0>)
 8000596:	f001 fea5 	bl	80022e4 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fc9d 	bl	8000ede <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005a4:	bf00      	nop
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000128 	.word	0x20000128
 80005b0:	50040000 	.word	0x50040000
 80005b4:	04300002 	.word	0x04300002

080005b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b0ae      	sub	sp, #184	@ 0xb8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	2294      	movs	r2, #148	@ 0x94
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f00c f957 	bl	800c88c <memset>
  if(adcHandle->Instance==ADC1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a40      	ldr	r2, [pc, #256]	@ (80006e4 <HAL_ADC_MspInit+0x12c>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d179      	bne.n	80006dc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80005e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 80005fe:	230c      	movs	r3, #12
 8000600:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800060e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000612:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	4618      	mov	r0, r3
 800061a:	f005 fc5f 	bl	8005edc <HAL_RCCEx_PeriphCLKConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000624:	f000 fc5b 	bl	8000ede <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000628:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <HAL_ADC_MspInit+0x130>)
 800062a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062c:	4a2e      	ldr	r2, [pc, #184]	@ (80006e8 <HAL_ADC_MspInit+0x130>)
 800062e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000634:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <HAL_ADC_MspInit+0x130>)
 8000636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000640:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <HAL_ADC_MspInit+0x130>)
 8000642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000644:	4a28      	ldr	r2, [pc, #160]	@ (80006e8 <HAL_ADC_MspInit+0x130>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800064c:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <HAL_ADC_MspInit+0x130>)
 800064e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000658:	2301      	movs	r3, #1
 800065a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800065e:	230b      	movs	r3, #11
 8000660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800066e:	4619      	mov	r1, r3
 8000670:	481e      	ldr	r0, [pc, #120]	@ (80006ec <HAL_ADC_MspInit+0x134>)
 8000672:	f003 f8f3 	bl	800385c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000676:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 8000678:	4a1e      	ldr	r2, [pc, #120]	@ (80006f4 <HAL_ADC_MspInit+0x13c>)
 800067a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800067c:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 800067e:	2205      	movs	r2, #5
 8000680:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000682:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000688:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800068e:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 8000690:	2280      	movs	r2, #128	@ 0x80
 8000692:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 8000696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800069a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 800069e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006a2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 80006a6:	2220      	movs	r2, #32
 80006a8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006b0:	480f      	ldr	r0, [pc, #60]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 80006b2:	f002 fd5d 	bl	8003170 <HAL_DMA_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006bc:	f000 fc0f 	bl	8000ede <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a0b      	ldr	r2, [pc, #44]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 80006c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006c6:	4a0a      	ldr	r2, [pc, #40]	@ (80006f0 <HAL_ADC_MspInit+0x138>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2100      	movs	r1, #0
 80006d0:	2012      	movs	r0, #18
 80006d2:	f002 fd16 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006d6:	2012      	movs	r0, #18
 80006d8:	f002 fd2f 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006dc:	bf00      	nop
 80006de:	37b8      	adds	r7, #184	@ 0xb8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	50040000 	.word	0x50040000
 80006e8:	40021000 	.word	0x40021000
 80006ec:	48000800 	.word	0x48000800
 80006f0:	20000190 	.word	0x20000190
 80006f4:	40020030 	.word	0x40020030

080006f8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006fe:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <MX_DMA_Init+0xe4>)
 8000700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000702:	4a36      	ldr	r2, [pc, #216]	@ (80007dc <MX_DMA_Init+0xe4>)
 8000704:	f043 0304 	orr.w	r3, r3, #4
 8000708:	6493      	str	r3, [r2, #72]	@ 0x48
 800070a:	4b34      	ldr	r3, [pc, #208]	@ (80007dc <MX_DMA_Init+0xe4>)
 800070c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800070e:	f003 0304 	and.w	r3, r3, #4
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	4b31      	ldr	r3, [pc, #196]	@ (80007dc <MX_DMA_Init+0xe4>)
 8000718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <MX_DMA_Init+0xe4>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6493      	str	r3, [r2, #72]	@ 0x48
 8000722:	4b2e      	ldr	r3, [pc, #184]	@ (80007dc <MX_DMA_Init+0xe4>)
 8000724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800072e:	4b2b      	ldr	r3, [pc, #172]	@ (80007dc <MX_DMA_Init+0xe4>)
 8000730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000732:	4a2a      	ldr	r2, [pc, #168]	@ (80007dc <MX_DMA_Init+0xe4>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6493      	str	r3, [r2, #72]	@ 0x48
 800073a:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <MX_DMA_Init+0xe4>)
 800073c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000748:	4a26      	ldr	r2, [pc, #152]	@ (80007e4 <MX_DMA_Init+0xec>)
 800074a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <MX_DMA_Init+0xe8>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000754:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000758:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 800075a:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <MX_DMA_Init+0xe8>)
 800075c:	2240      	movs	r2, #64	@ 0x40
 800075e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000762:	2280      	movs	r2, #128	@ 0x80
 8000764:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800076c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800076e:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000770:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000774:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_DMA_Init+0xe8>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8000782:	4817      	ldr	r0, [pc, #92]	@ (80007e0 <MX_DMA_Init+0xe8>)
 8000784:	f002 fcf4 	bl	8003170 <HAL_DMA_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_DMA_Init+0x9a>
  {
    Error_Handler();
 800078e:	f000 fba6 	bl	8000ede <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	200b      	movs	r0, #11
 8000798:	f002 fcb3 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800079c:	200b      	movs	r0, #11
 800079e:	f002 fccc 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	200c      	movs	r0, #12
 80007a8:	f002 fcab 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007ac:	200c      	movs	r0, #12
 80007ae:	f002 fcc4 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	200d      	movs	r0, #13
 80007b8:	f002 fca3 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007bc:	200d      	movs	r0, #13
 80007be:	f002 fcbc 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2039      	movs	r0, #57	@ 0x39
 80007c8:	f002 fc9b 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 80007cc:	2039      	movs	r0, #57	@ 0x39
 80007ce:	f002 fcb4 	bl	800313a <HAL_NVIC_EnableIRQ>

}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	200001f0 	.word	0x200001f0
 80007e4:	4002001c 	.word	0x4002001c

080007e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	@ 0x30
 80007ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	4b55      	ldr	r3, [pc, #340]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a54      	ldr	r2, [pc, #336]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b52      	ldr	r3, [pc, #328]	@ (8000954 <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	4b4f      	ldr	r3, [pc, #316]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a4e      	ldr	r2, [pc, #312]	@ (8000954 <MX_GPIO_Init+0x16c>)
 800081c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b4c      	ldr	r3, [pc, #304]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b49      	ldr	r3, [pc, #292]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a48      	ldr	r2, [pc, #288]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b46      	ldr	r3, [pc, #280]	@ (8000954 <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	4b43      	ldr	r3, [pc, #268]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a42      	ldr	r2, [pc, #264]	@ (8000954 <MX_GPIO_Init+0x16c>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b40      	ldr	r3, [pc, #256]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085e:	4b3d      	ldr	r3, [pc, #244]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4a3c      	ldr	r2, [pc, #240]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086a:	4b3a      	ldr	r3, [pc, #232]	@ (8000954 <MX_GPIO_Init+0x16c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000876:	f004 fc49 	bl	800510c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <MX_GPIO_Init+0x16c>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a35      	ldr	r2, [pc, #212]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b33      	ldr	r3, [pc, #204]	@ (8000954 <MX_GPIO_Init+0x16c>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000898:	482f      	ldr	r0, [pc, #188]	@ (8000958 <MX_GPIO_Init+0x170>)
 800089a:	f003 f971 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2140      	movs	r1, #64	@ 0x40
 80008a2:	482e      	ldr	r0, [pc, #184]	@ (800095c <MX_GPIO_Init+0x174>)
 80008a4:	f003 f96c 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2180      	movs	r1, #128	@ 0x80
 80008ac:	482c      	ldr	r0, [pc, #176]	@ (8000960 <MX_GPIO_Init+0x178>)
 80008ae:	f003 f967 	bl	8003b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4825      	ldr	r0, [pc, #148]	@ (8000960 <MX_GPIO_Init+0x178>)
 80008ca:	f002 ffc7 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008ce:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	481c      	ldr	r0, [pc, #112]	@ (8000958 <MX_GPIO_Init+0x170>)
 80008e8:	f002 ffb8 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ec:	2320      	movs	r3, #32
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4817      	ldr	r0, [pc, #92]	@ (800095c <MX_GPIO_Init+0x174>)
 8000900:	f002 ffac 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000904:	2340      	movs	r3, #64	@ 0x40
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4810      	ldr	r0, [pc, #64]	@ (800095c <MX_GPIO_Init+0x174>)
 800091c:	f002 ff9e 	bl	800385c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	480a      	ldr	r0, [pc, #40]	@ (8000960 <MX_GPIO_Init+0x178>)
 8000938:	f002 ff90 	bl	800385c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2028      	movs	r0, #40	@ 0x28
 8000942:	f002 fbde 	bl	8003102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000946:	2028      	movs	r0, #40	@ 0x28
 8000948:	f002 fbf7 	bl	800313a <HAL_NVIC_EnableIRQ>

}
 800094c:	bf00      	nop
 800094e:	3730      	adds	r7, #48	@ 0x30
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40021000 	.word	0x40021000
 8000958:	48000400 	.word	0x48000400
 800095c:	48001800 	.word	0x48001800
 8000960:	48000800 	.word	0x48000800

08000964 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 800096e:	88fb      	ldrh	r3, [r7, #6]
 8000970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000974:	d119      	bne.n	80009aa <HAL_GPIO_EXTI_Callback+0x46>
		static bool previous;
		if(previous == false){
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	f083 0301 	eor.w	r3, r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d009      	beq.n	8000998 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800098a:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x54>)
 800098c:	f003 f8f8 	bl	8003b80 <HAL_GPIO_WritePin>
			previous = true;
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x50>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000996:	e008      	b.n	80009aa <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099e:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x54>)
 80009a0:	f003 f8ee 	bl	8003b80 <HAL_GPIO_WritePin>
			previous = false;
 80009a4:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000250 	.word	0x20000250
 80009b8:	48000400 	.word	0x48000400

080009bc <DataTransmit2MTLB>:

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);
extern void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values);

// Send float or uint32 or none data
int DataTransmit2MTLB(uint16_t iD, uint8_t *xData, uint16_t nData_in_values) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	80fb      	strh	r3, [r7, #6]
 80009c8:	4613      	mov	r3, r2
 80009ca:	80bb      	strh	r3, [r7, #4]
	// USB busy
	if (s2m_Status)
 80009cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <DataTransmit2MTLB+0x88>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d002      	beq.n	80009da <DataTransmit2MTLB+0x1e>
		return -1;
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
 80009d8:	e02f      	b.n	8000a3a <DataTransmit2MTLB+0x7e>

	if ((sizeof(buf_M_TX) - 4) < (nData_in_values * 4)) {
 80009da:	88bb      	ldrh	r3, [r7, #4]
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80009e2:	d902      	bls.n	80009ea <DataTransmit2MTLB+0x2e>
		// vystupni buffer je mensi nez odesilana data
		return -2;
 80009e4:	f06f 0301 	mvn.w	r3, #1
 80009e8:	e027      	b.n	8000a3a <DataTransmit2MTLB+0x7e>
	}

	s2m_Status = 1; // manualni nastaveni na USB busy, predpoklada se cinnost
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <DataTransmit2MTLB+0x88>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]

	// prekopirovani dat do bufferu
	((uint16_t*) buf_M_TX)[0] = iD;
 80009f0:	4a15      	ldr	r2, [pc, #84]	@ (8000a48 <DataTransmit2MTLB+0x8c>)
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	8013      	strh	r3, [r2, #0]
	((uint16_t*) buf_M_TX)[1] = nData_in_values;
 80009f6:	4a15      	ldr	r2, [pc, #84]	@ (8000a4c <DataTransmit2MTLB+0x90>)
 80009f8:	88bb      	ldrh	r3, [r7, #4]
 80009fa:	8013      	strh	r3, [r2, #0]
	if (nData_in_values > 0)
 80009fc:	88bb      	ldrh	r3, [r7, #4]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d006      	beq.n	8000a10 <DataTransmit2MTLB+0x54>
		memcpy(buf_M_TX + 1, xData, nData_in_values * 4);
 8000a02:	4813      	ldr	r0, [pc, #76]	@ (8000a50 <DataTransmit2MTLB+0x94>)
 8000a04:	88bb      	ldrh	r3, [r7, #4]
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	461a      	mov	r2, r3
 8000a0a:	6839      	ldr	r1, [r7, #0]
 8000a0c:	f00b ff6a 	bl	800c8e4 <memcpy>

	// volani funkce na transmit dat
	s2m_Status = CDC_Transmit_FS((uint8_t*) buf_M_TX, nData_in_values * 4 + 4);
 8000a10:	88bb      	ldrh	r3, [r7, #4]
 8000a12:	3301      	adds	r3, #1
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480a      	ldr	r0, [pc, #40]	@ (8000a48 <DataTransmit2MTLB+0x8c>)
 8000a1e:	f00b f995 	bl	800bd4c <CDC_Transmit_FS>
 8000a22:	4603      	mov	r3, r0
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <DataTransmit2MTLB+0x88>)
 8000a28:	601a      	str	r2, [r3, #0]

	if (s2m_Status) {
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <DataTransmit2MTLB+0x88>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d002      	beq.n	8000a38 <DataTransmit2MTLB+0x7c>
		// USB busy, vyresetuje na USB_OK
		s2m_Status = 0;
 8000a32:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <DataTransmit2MTLB+0x88>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20008258 	.word	0x20008258
 8000a48:	20000254 	.word	0x20000254
 8000a4c:	20000256 	.word	0x20000256
 8000a50:	20000258 	.word	0x20000258

08000a54 <SendInt2MTLB>:

int SendData2MTLB(uint16_t iD, uint8_t *xData, uint16_t nData_in_values) {
	return DataTransmit2MTLB(iD, xData, nData_in_values);
}

int SendInt2MTLB(uint16_t iD, int *xInt) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	6039      	str	r1, [r7, #0]
 8000a5e:	80fb      	strh	r3, [r7, #6]
	return DataTransmit2MTLB(iD, (uint8_t*) xInt, 1);
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	2201      	movs	r2, #1
 8000a64:	6839      	ldr	r1, [r7, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffa8 	bl	80009bc <DataTransmit2MTLB>
 8000a6c:	4603      	mov	r3, r0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <m2s_Process>:

void m2s_Process(void) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	// funkce volana z nekonecne smycky

	if (!m2s_Status)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <m2s_Process+0x50>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d01e      	beq.n	8000ac2 <m2s_Process+0x4a>
		return; // pokud neprisla data, ukonci se

	if (m2s_Status == 1) {
 8000a84:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <m2s_Process+0x50>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d111      	bne.n	8000ab0 <m2s_Process+0x38>
		// zpracuje data
		DataReceive_MTLB_Callback(m2s_ID, m2s_buf, m2s_nData_in_bytes / 4);
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <m2s_Process+0x54>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	b298      	uxth	r0, r3
 8000a92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <m2s_Process+0x58>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	da00      	bge.n	8000a9c <m2s_Process+0x24>
 8000a9a:	3303      	adds	r3, #3
 8000a9c:	109b      	asrs	r3, r3, #2
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	490c      	ldr	r1, [pc, #48]	@ (8000ad4 <m2s_Process+0x5c>)
 8000aa4:	f000 f88c 	bl	8000bc0 <DataReceive_MTLB_Callback>
		m2s_Status = 0;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <m2s_Process+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
		return;
 8000aae:	e009      	b.n	8000ac4 <m2s_Process+0x4c>
	}

	if (m2s_Status == -1) {
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <m2s_Process+0x50>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab8:	d104      	bne.n	8000ac4 <m2s_Process+0x4c>
		// inicializace
		m2s_Status = 0;
 8000aba:	4b03      	ldr	r3, [pc, #12]	@ (8000ac8 <m2s_Process+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
		return;
 8000ac0:	e000      	b.n	8000ac4 <m2s_Process+0x4c>
		return; // pokud neprisla data, ukonci se
 8000ac2:	bf00      	nop
	}

}
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000825c 	.word	0x2000825c
 8000acc:	20008260 	.word	0x20008260
 8000ad0:	20008264 	.word	0x20008264
 8000ad4:	20004258 	.word	0x20004258

08000ad8 <USB_My_Receive>:

void USB_My_Receive(uint8_t *Buf, uint32_t Len) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	6039      	str	r1, [r7, #0]

	// callback na prijem dat

	if (m2s_Status == 0) {
 8000ae2:	4b22      	ldr	r3, [pc, #136]	@ (8000b6c <USB_My_Receive+0x94>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10c      	bne.n	8000b04 <USB_My_Receive+0x2c>
		// iD
		m2s_ID = ((uint16_t*) Buf)[0];
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	881b      	ldrh	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <USB_My_Receive+0x98>)
 8000af2:	601a      	str	r2, [r3, #0]
		if (m2s_ID == 0)
 8000af4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <USB_My_Receive+0x98>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d030      	beq.n	8000b5e <USB_My_Receive+0x86>
			return;
		m2s_Status = 100;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <USB_My_Receive+0x94>)
 8000afe:	2264      	movs	r2, #100	@ 0x64
 8000b00:	601a      	str	r2, [r3, #0]
		return;
 8000b02:	e02f      	b.n	8000b64 <USB_My_Receive+0x8c>
	}
	if (m2s_Status == 100) {
 8000b04:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <USB_My_Receive+0x94>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b64      	cmp	r3, #100	@ 0x64
 8000b0a:	d110      	bne.n	8000b2e <USB_My_Receive+0x56>
		// nData
		m2s_nData_in_bytes = ((uint16_t*) Buf)[0] * 4; //
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4a18      	ldr	r2, [pc, #96]	@ (8000b74 <USB_My_Receive+0x9c>)
 8000b14:	6013      	str	r3, [r2, #0]
		if (m2s_nData_in_bytes == 0) {
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <USB_My_Receive+0x9c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d103      	bne.n	8000b26 <USB_My_Receive+0x4e>
			m2s_Status = 1;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <USB_My_Receive+0x94>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	601a      	str	r2, [r3, #0]
			return;
 8000b24:	e01e      	b.n	8000b64 <USB_My_Receive+0x8c>
		}
		m2s_Status = 3; //wait for xData
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <USB_My_Receive+0x94>)
 8000b28:	2203      	movs	r2, #3
 8000b2a:	601a      	str	r2, [r3, #0]
		return;
 8000b2c:	e01a      	b.n	8000b64 <USB_My_Receive+0x8c>
	}
	if (m2s_Status == 3) {
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <USB_My_Receive+0x94>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d115      	bne.n	8000b62 <USB_My_Receive+0x8a>
		// xData
		if (Len < m2s_nData_in_bytes)
 8000b36:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <USB_My_Receive+0x9c>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d202      	bcs.n	8000b48 <USB_My_Receive+0x70>
			m2s_nData_in_bytes = Len;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	4a0b      	ldr	r2, [pc, #44]	@ (8000b74 <USB_My_Receive+0x9c>)
 8000b46:	6013      	str	r3, [r2, #0]
		memcpy(m2s_buf, Buf, m2s_nData_in_bytes);
 8000b48:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <USB_My_Receive+0x9c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <USB_My_Receive+0xa0>)
 8000b52:	f00b fec7 	bl	800c8e4 <memcpy>
		m2s_Status = 1;
 8000b56:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <USB_My_Receive+0x94>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
		return;
 8000b5c:	e002      	b.n	8000b64 <USB_My_Receive+0x8c>
			return;
 8000b5e:	bf00      	nop
 8000b60:	e000      	b.n	8000b64 <USB_My_Receive+0x8c>
	}

	return;
 8000b62:	bf00      	nop
}
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000825c 	.word	0x2000825c
 8000b70:	20008260 	.word	0x20008260
 8000b74:	20008264 	.word	0x20008264
 8000b78:	20004258 	.word	0x20004258

08000b7c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a0b      	ldr	r2, [pc, #44]	@ (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d10e      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x2e>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b8c:	2180      	movs	r1, #128	@ 0x80
 8000b8e:	480a      	ldr	r0, [pc, #40]	@ (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000b90:	f003 f80e 	bl	8003bb0 <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8000b94:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000b9c:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		DataTransmit2MTLB(1010, &periodical, 1);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4906      	ldr	r1, [pc, #24]	@ (8000bbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ba2:	f240 30f2 	movw	r0, #1010	@ 0x3f2
 8000ba6:	f7ff ff09 	bl	80009bc <DataTransmit2MTLB>
	}
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000a3ec 	.word	0x2000a3ec
 8000bb8:	48000400 	.word	0x48000400
 8000bbc:	20008268 	.word	0x20008268

08000bc0 <DataReceive_MTLB_Callback>:
//    	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)testdata, 10);
//    }

}

void DataReceive_MTLB_Callback(uint16_t iD, uint32_t *xData, uint16_t nData_in_values) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
	// funkce volana po prijmu dat

	switch (iD) {
 8000bd0:	88fb      	ldrh	r3, [r7, #6]
 8000bd2:	2b14      	cmp	r3, #20
 8000bd4:	d106      	bne.n	8000be4 <DataReceive_MTLB_Callback+0x24>
	case 20:
		//data odesilam zpet do matlabu
		DataTransmit2MTLB(20, xData, nData_in_values);
 8000bd6:	88bb      	ldrh	r3, [r7, #4]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	6839      	ldr	r1, [r7, #0]
 8000bdc:	2014      	movs	r0, #20
 8000bde:	f7ff feed 	bl	80009bc <DataTransmit2MTLB>
		break;
 8000be2:	e000      	b.n	8000be6 <DataReceive_MTLB_Callback+0x26>

	default:
		break;
 8000be4:	bf00      	nop
	}
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <myDmaFunction>:

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <myDmaFunction+0x28>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfe:	4a07      	ldr	r2, [pc, #28]	@ (8000c1c <myDmaFunction+0x2c>)
 8000c00:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000c02:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <myDmaFunction+0x28>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c08:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <myDmaFunction+0x30>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	2000a3a0 	.word	0x2000a3a0
 8000c1c:	20008274 	.word	0x20008274
 8000c20:	20008278 	.word	0x20008278

08000c24 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	// Callback pro naplneni celeho kruhoveho bufferu

	UNUSED(hadc);

	potenciometer = 0;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c2e:	f04f 0200 	mov.w	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 100; i++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e013      	b.n	8000c62 <HAL_ADC_ConvCpltCallback+0x3e>
		potenciometer = potenciometer + dma_data_buffer[i + 100];
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3364      	adds	r3, #100	@ 0x64
 8000c3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ca4 <HAL_ADC_ConvCpltCallback+0x80>)
 8000c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c4e:	edd3 7a00 	vldr	s15, [r3]
 8000c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c56:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c58:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 100; i++) {
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b63      	cmp	r3, #99	@ 0x63
 8000c66:	dde8      	ble.n	8000c3a <HAL_ADC_ConvCpltCallback+0x16>
	}
	potenciometer = potenciometer / 100;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c6a:	ed93 7a00 	vldr	s14, [r3]
 8000c6e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8000ca8 <HAL_ADC_ConvCpltCallback+0x84>
 8000c72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c78:	edc3 7a00 	vstr	s15, [r3]
	potenciometerInt = (int) potenciometer;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000c7e:	edd3 7a00 	vldr	s15, [r3]
 8000c82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c86:	ee17 2a90 	vmov	r2, s15
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x88>)
 8000c8c:	601a      	str	r2, [r3, #0]

	SendInt2MTLB(23, &potenciometerInt); // odeslani hodnoty potenciometeru do matlabu
 8000c8e:	4907      	ldr	r1, [pc, #28]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x88>)
 8000c90:	2017      	movs	r0, #23
 8000c92:	f7ff fedf 	bl	8000a54 <SendInt2MTLB>
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000a34c 	.word	0x2000a34c
 8000ca4:	2000a1bc 	.word	0x2000a1bc
 8000ca8:	42c80000 	.word	0x42c80000
 8000cac:	2000a350 	.word	0x2000a350

08000cb0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	UNUSED(hadc);

	potenciometer = 0;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 100; i++) {
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	e012      	b.n	8000cec <HAL_ADC_ConvHalfCpltCallback+0x3c>
		potenciometer = potenciometer + dma_data_buffer[i];
 8000cc6:	4a18      	ldr	r2, [pc, #96]	@ (8000d28 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cd6:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000cd8:	edd3 7a00 	vldr	s15, [r3]
 8000cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ce0:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000ce2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 100; i++) {
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b63      	cmp	r3, #99	@ 0x63
 8000cf0:	dde9      	ble.n	8000cc6 <HAL_ADC_ConvHalfCpltCallback+0x16>
	}
	potenciometer = potenciometer / 100;
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000cf4:	ed93 7a00 	vldr	s14, [r3]
 8000cf8:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000d2c <HAL_ADC_ConvHalfCpltCallback+0x7c>
 8000cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000d02:	edc3 7a00 	vstr	s15, [r3]
	potenciometerInt = (int) potenciometer;
 8000d06:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d10:	ee17 2a90 	vmov	r2, s15
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8000d16:	601a      	str	r2, [r3, #0]

	//SendInt2MTLB(23, &potenciometerInt);
}
 8000d18:	bf00      	nop
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	2000a34c 	.word	0x2000a34c
 8000d28:	2000a1bc 	.word	0x2000a1bc
 8000d2c:	42c80000 	.word	0x42c80000
 8000d30:	2000a350 	.word	0x2000a350

08000d34 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d3a:	f000 fc94 	bl	8001666 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d3e:	f000 f87b 	bl	8000e38 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d42:	f7ff fd51 	bl	80007e8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000d46:	f7ff fcd7 	bl	80006f8 <MX_DMA_Init>
	MX_LPUART1_UART_Init();
 8000d4a:	f000 fac1 	bl	80012d0 <MX_LPUART1_UART_Init>
	MX_USART3_UART_Init();
 8000d4e:	f000 fb0b 	bl	8001368 <MX_USART3_UART_Init>
	MX_TIM6_Init();
 8000d52:	f000 fa2f 	bl	80011b4 <MX_TIM6_Init>
	MX_USB_DEVICE_Init();
 8000d56:	f00a ff35 	bl	800bbc4 <MX_USB_DEVICE_Init>
	MX_TIM5_Init();
 8000d5a:	f000 f9dd 	bl	8001118 <MX_TIM5_Init>
	MX_ADC1_Init();
 8000d5e:	f7ff fbc5 	bl	80004ec <MX_ADC1_Init>
	MX_TIM3_Init();
 8000d62:	f000 f98b 	bl	800107c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */



	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2180      	movs	r1, #128	@ 0x80
 8000d6a:	4826      	ldr	r0, [pc, #152]	@ (8000e04 <main+0xd0>)
 8000d6c:	f002 ff08 	bl	8003b80 <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 8000d70:	4825      	ldr	r0, [pc, #148]	@ (8000e08 <main+0xd4>)
 8000d72:	f005 fe8b 	bl	8006a8c <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 8000d76:	4825      	ldr	r0, [pc, #148]	@ (8000e0c <main+0xd8>)
 8000d78:	f005 fe20 	bl	80069bc <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	e00d      	b.n	8000d9e <main+0x6a>
		dma[i] = i;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	ee07 3a90 	vmov	s15, r3
 8000d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d8c:	4a20      	ldr	r2, [pc, #128]	@ (8000e10 <main+0xdc>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000da4:	dbed      	blt.n	8000d82 <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 8000da6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e14 <main+0xe0>)
 8000da8:	2100      	movs	r1, #0
 8000daa:	481b      	ldr	r0, [pc, #108]	@ (8000e18 <main+0xe4>)
 8000dac:	f002 fc6e 	bl	800368c <HAL_DMA_RegisterCallback>
 8000db0:	4603      	mov	r3, r0
 8000db2:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <main+0xd8>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dba:	4a18      	ldr	r2, [pc, #96]	@ (8000e1c <main+0xe8>)
 8000dbc:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8000dbe:	4914      	ldr	r1, [pc, #80]	@ (8000e10 <main+0xdc>)
 8000dc0:	4a17      	ldr	r2, [pc, #92]	@ (8000e20 <main+0xec>)
 8000dc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc6:	4814      	ldr	r0, [pc, #80]	@ (8000e18 <main+0xe4>)
 8000dc8:	f002 fa7a 	bl	80032c0 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <main+0xd8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd2:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <main+0xf0>)
 8000dd4:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e0c <main+0xd8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ddc:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <main+0xf4>)
 8000dde:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim3);
 8000de0:	4812      	ldr	r0, [pc, #72]	@ (8000e2c <main+0xf8>)
 8000de2:	f005 fe53 	bl	8006a8c <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000de6:	217f      	movs	r1, #127	@ 0x7f
 8000de8:	4811      	ldr	r0, [pc, #68]	@ (8000e30 <main+0xfc>)
 8000dea:	f002 f81d 	bl	8002e28 <HAL_ADCEx_Calibration_Start>
	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer,
 8000dee:	22c8      	movs	r2, #200	@ 0xc8
 8000df0:	4910      	ldr	r1, [pc, #64]	@ (8000e34 <main+0x100>)
 8000df2:	480f      	ldr	r0, [pc, #60]	@ (8000e30 <main+0xfc>)
 8000df4:	f001 f82a 	bl	8001e4c <HAL_ADC_Start_DMA>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	70bb      	strb	r3, [r7, #2]

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		m2s_Process();
 8000dfc:	f7ff fe3c 	bl	8000a78 <m2s_Process>
 8000e00:	e7fc      	b.n	8000dfc <main+0xc8>
 8000e02:	bf00      	nop
 8000e04:	48000800 	.word	0x48000800
 8000e08:	2000a3ec 	.word	0x2000a3ec
 8000e0c:	2000a3a0 	.word	0x2000a3a0
 8000e10:	2000827c 	.word	0x2000827c
 8000e14:	08000bf1 	.word	0x08000bf1
 8000e18:	200001f0 	.word	0x200001f0
 8000e1c:	2000826c 	.word	0x2000826c
 8000e20:	2000921c 	.word	0x2000921c
 8000e24:	20008278 	.word	0x20008278
 8000e28:	20008270 	.word	0x20008270
 8000e2c:	2000a354 	.word	0x2000a354
 8000e30:	20000128 	.word	0x20000128
 8000e34:	2000a1bc 	.word	0x2000a1bc

08000e38 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b096      	sub	sp, #88	@ 0x58
 8000e3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	2244      	movs	r2, #68	@ 0x44
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f00b fd20 	bl	800c88c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f004 f8a2 	bl	8004fa4 <HAL_PWREx_ControlVoltageScaling>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x32>
			!= HAL_OK) {
		Error_Handler();
 8000e66:	f000 f83a 	bl	8000ede <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8000e6a:	2322      	movs	r3, #34	@ 0x22
 8000e6c:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e72:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e74:	2301      	movs	r3, #1
 8000e76:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e78:	2340      	movs	r3, #64	@ 0x40
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e80:	2302      	movs	r3, #2
 8000e82:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 30;
 8000e88:	231e      	movs	r3, #30
 8000e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e94:	2302      	movs	r3, #2
 8000e96:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 f945 	bl	800512c <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x74>
		Error_Handler();
 8000ea8:	f000 f819 	bl	8000ede <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000eac:	230f      	movs	r3, #15
 8000eae:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ebc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2105      	movs	r1, #5
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f004 fd4a 	bl	8005960 <HAL_RCC_ClockConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x9e>
		Error_Handler();
 8000ed2:	f000 f804 	bl	8000ede <Error_Handler>
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	3758      	adds	r7, #88	@ 0x58
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee2:	b672      	cpsid	i
}
 8000ee4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ee6:	bf00      	nop
 8000ee8:	e7fd      	b.n	8000ee6 <Error_Handler+0x8>
	...

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <HAL_MspInit+0x44>)
 8000ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f30 <HAL_MspInit+0x44>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000efe:	4b0c      	ldr	r3, [pc, #48]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0e:	4a08      	ldr	r2, [pc, #32]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_MspInit+0x44>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <NMI_Handler+0x4>

08000f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 fbc1 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <DMA1_Channel1_IRQHandler+0x10>)
 8000f9a:	f002 fac7 	bl	800352c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000a560 	.word	0x2000a560

08000fa8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <DMA1_Channel2_IRQHandler+0x10>)
 8000fae:	f002 fabd 	bl	800352c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001f0 	.word	0x200001f0

08000fbc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <DMA1_Channel3_IRQHandler+0x10>)
 8000fc2:	f002 fab3 	bl	800352c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000190 	.word	0x20000190

08000fd0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <ADC1_IRQHandler+0x10>)
 8000fd6:	f000 ffbd 	bl	8001f54 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000128 	.word	0x20000128

08000fe4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <TIM3_IRQHandler+0x10>)
 8000fea:	f005 fdbf 	bl	8006b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000a354 	.word	0x2000a354

08000ff8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ffc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001000:	f002 fdf0 	bl	8003be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <TIM6_DAC_IRQHandler+0x10>)
 800100e:	f005 fdad 	bl	8006b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000a3ec 	.word	0x2000a3ec

0800101c <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <DMA2_Channel2_IRQHandler+0x10>)
 8001022:	f002 fa83 	bl	800352c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	2000a5c0 	.word	0x2000a5c0

08001030 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <OTG_FS_IRQHandler+0x10>)
 8001036:	f002 ff40 	bl	8003eba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000bb04 	.word	0x2000bb04

08001044 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001048:	4802      	ldr	r0, [pc, #8]	@ (8001054 <LPUART1_IRQHandler+0x10>)
 800104a:	f006 f9ad 	bl	80073a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000a438 	.word	0x2000a438

08001058 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	@ (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800109a:	4b1d      	ldr	r3, [pc, #116]	@ (8001110 <MX_TIM3_Init+0x94>)
 800109c:	4a1d      	ldr	r2, [pc, #116]	@ (8001114 <MX_TIM3_Init+0x98>)
 800109e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 120-1;
 80010a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001110 <MX_TIM3_Init+0x94>)
 80010a2:	2277      	movs	r2, #119	@ 0x77
 80010a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001110 <MX_TIM3_Init+0x94>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80010ac:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <MX_TIM3_Init+0x94>)
 80010ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b4:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <MX_TIM3_Init+0x94>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <MX_TIM3_Init+0x94>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010c0:	4813      	ldr	r0, [pc, #76]	@ (8001110 <MX_TIM3_Init+0x94>)
 80010c2:	f005 fc23 	bl	800690c <HAL_TIM_Base_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80010cc:	f7ff ff07 	bl	8000ede <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	@ (8001110 <MX_TIM3_Init+0x94>)
 80010de:	f005 fe47 	bl	8006d70 <HAL_TIM_ConfigClockSource>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010e8:	f7ff fef9 	bl	8000ede <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010ec:	2320      	movs	r3, #32
 80010ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_TIM3_Init+0x94>)
 80010fa:	f006 f85f 	bl	80071bc <HAL_TIMEx_MasterConfigSynchronization>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001104:	f7ff feeb 	bl	8000ede <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000a354 	.word	0x2000a354
 8001114:	40000400 	.word	0x40000400

08001118 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001136:	4b1d      	ldr	r3, [pc, #116]	@ (80011ac <MX_TIM5_Init+0x94>)
 8001138:	4a1d      	ldr	r2, [pc, #116]	@ (80011b0 <MX_TIM5_Init+0x98>)
 800113a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800113c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <MX_TIM5_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <MX_TIM5_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001148:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <MX_TIM5_Init+0x94>)
 800114a:	f04f 32ff 	mov.w	r2, #4294967295
 800114e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <MX_TIM5_Init+0x94>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <MX_TIM5_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800115c:	4813      	ldr	r0, [pc, #76]	@ (80011ac <MX_TIM5_Init+0x94>)
 800115e:	f005 fbd5 	bl	800690c <HAL_TIM_Base_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001168:	f7ff feb9 	bl	8000ede <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001170:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <MX_TIM5_Init+0x94>)
 800117a:	f005 fdf9 	bl	8006d70 <HAL_TIM_ConfigClockSource>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001184:	f7ff feab 	bl	8000ede <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_TIM5_Init+0x94>)
 8001196:	f006 f811 	bl	80071bc <HAL_TIMEx_MasterConfigSynchronization>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80011a0:	f7ff fe9d 	bl	8000ede <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000a3a0 	.word	0x2000a3a0
 80011b0:	40000c00 	.word	0x40000c00

080011b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <MX_TIM6_Init+0x68>)
 80011c6:	4a16      	ldr	r2, [pc, #88]	@ (8001220 <MX_TIM6_Init+0x6c>)
 80011c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_TIM6_Init+0x68>)
 80011cc:	f242 7210 	movw	r2, #10000	@ 0x2710
 80011d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_TIM6_Init+0x68>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_TIM6_Init+0x68>)
 80011da:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80011de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_TIM6_Init+0x68>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011e6:	480d      	ldr	r0, [pc, #52]	@ (800121c <MX_TIM6_Init+0x68>)
 80011e8:	f005 fb90 	bl	800690c <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80011f2:	f7ff fe74 	bl	8000ede <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	@ (800121c <MX_TIM6_Init+0x68>)
 8001204:	f005 ffda 	bl	80071bc <HAL_TIMEx_MasterConfigSynchronization>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800120e:	f7ff fe66 	bl	8000ede <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000a3ec 	.word	0x2000a3ec
 8001220:	40001000 	.word	0x40001000

08001224 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a23      	ldr	r2, [pc, #140]	@ (80012c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d114      	bne.n	8001260 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001236:	4b23      	ldr	r3, [pc, #140]	@ (80012c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	4a22      	ldr	r2, [pc, #136]	@ (80012c4 <HAL_TIM_Base_MspInit+0xa0>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6593      	str	r3, [r2, #88]	@ 0x58
 8001242:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	201d      	movs	r0, #29
 8001254:	f001 ff55 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001258:	201d      	movs	r0, #29
 800125a:	f001 ff6e 	bl	800313a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800125e:	e02a      	b.n	80012b6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a18      	ldr	r2, [pc, #96]	@ (80012c8 <HAL_TIM_Base_MspInit+0xa4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10c      	bne.n	8001284 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800126a:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <HAL_TIM_Base_MspInit+0xa0>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126e:	4a15      	ldr	r2, [pc, #84]	@ (80012c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001270:	f043 0308 	orr.w	r3, r3, #8
 8001274:	6593      	str	r3, [r2, #88]	@ 0x58
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]
}
 8001282:	e018      	b.n	80012b6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a10      	ldr	r2, [pc, #64]	@ (80012cc <HAL_TIM_Base_MspInit+0xa8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d113      	bne.n	80012b6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001292:	4a0c      	ldr	r2, [pc, #48]	@ (80012c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001294:	f043 0310 	orr.w	r3, r3, #16
 8001298:	6593      	str	r3, [r2, #88]	@ 0x58
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <HAL_TIM_Base_MspInit+0xa0>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2100      	movs	r1, #0
 80012aa:	2036      	movs	r0, #54	@ 0x36
 80012ac:	f001 ff29 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012b0:	2036      	movs	r0, #54	@ 0x36
 80012b2:	f001 ff42 	bl	800313a <HAL_NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40000400 	.word	0x40000400
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40000c00 	.word	0x40000c00
 80012cc:	40001000 	.word	0x40001000

080012d0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012d4:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 80012d6:	4a23      	ldr	r2, [pc, #140]	@ (8001364 <MX_LPUART1_UART_Init+0x94>)
 80012d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012da:	4b21      	ldr	r3, [pc, #132]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001300:	4b17      	ldr	r3, [pc, #92]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001306:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130c:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001312:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001318:	4811      	ldr	r0, [pc, #68]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 800131a:	f005 fff5 	bl	8007308 <HAL_UART_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001324:	f7ff fddb 	bl	8000ede <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001328:	2100      	movs	r1, #0
 800132a:	480d      	ldr	r0, [pc, #52]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 800132c:	f007 f92d 	bl	800858a <HAL_UARTEx_SetTxFifoThreshold>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001336:	f7ff fdd2 	bl	8000ede <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800133a:	2100      	movs	r1, #0
 800133c:	4808      	ldr	r0, [pc, #32]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 800133e:	f007 f962 	bl	8008606 <HAL_UARTEx_SetRxFifoThreshold>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001348:	f7ff fdc9 	bl	8000ede <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	@ (8001360 <MX_LPUART1_UART_Init+0x90>)
 800134e:	f007 f8e3 	bl	8008518 <HAL_UARTEx_DisableFifoMode>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001358:	f7ff fdc1 	bl	8000ede <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2000a438 	.word	0x2000a438
 8001364:	40008000 	.word	0x40008000

08001368 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800136c:	4b22      	ldr	r3, [pc, #136]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 800136e:	4a23      	ldr	r2, [pc, #140]	@ (80013fc <MX_USART3_UART_Init+0x94>)
 8001370:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001386:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013b0:	4811      	ldr	r0, [pc, #68]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 80013b2:	f005 ffa9 	bl	8007308 <HAL_UART_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80013bc:	f7ff fd8f 	bl	8000ede <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013c0:	2100      	movs	r1, #0
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 80013c4:	f007 f8e1 	bl	800858a <HAL_UARTEx_SetTxFifoThreshold>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013ce:	f7ff fd86 	bl	8000ede <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013d2:	2100      	movs	r1, #0
 80013d4:	4808      	ldr	r0, [pc, #32]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 80013d6:	f007 f916 	bl	8008606 <HAL_UARTEx_SetRxFifoThreshold>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013e0:	f7ff fd7d 	bl	8000ede <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013e4:	4804      	ldr	r0, [pc, #16]	@ (80013f8 <MX_USART3_UART_Init+0x90>)
 80013e6:	f007 f897 	bl	8008518 <HAL_UARTEx_DisableFifoMode>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013f0:	f7ff fd75 	bl	8000ede <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000a4cc 	.word	0x2000a4cc
 80013fc:	40004800 	.word	0x40004800

08001400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0b0      	sub	sp, #192	@ 0xc0
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	2294      	movs	r2, #148	@ 0x94
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f00b fa33 	bl	800c88c <memset>
  if(uartHandle->Instance==LPUART1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a71      	ldr	r2, [pc, #452]	@ (80015f0 <HAL_UART_MspInit+0x1f0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	f040 809a 	bne.w	8001566 <HAL_UART_MspInit+0x166>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001432:	2320      	movs	r3, #32
 8001434:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001436:	2300      	movs	r3, #0
 8001438:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	4618      	mov	r0, r3
 8001440:	f004 fd4c 	bl	8005edc <HAL_RCCEx_PeriphCLKConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800144a:	f7ff fd48 	bl	8000ede <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800144e:	4b69      	ldr	r3, [pc, #420]	@ (80015f4 <HAL_UART_MspInit+0x1f4>)
 8001450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001452:	4a68      	ldr	r2, [pc, #416]	@ (80015f4 <HAL_UART_MspInit+0x1f4>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800145a:	4b66      	ldr	r3, [pc, #408]	@ (80015f4 <HAL_UART_MspInit+0x1f4>)
 800145c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001466:	4b63      	ldr	r3, [pc, #396]	@ (80015f4 <HAL_UART_MspInit+0x1f4>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146a:	4a62      	ldr	r2, [pc, #392]	@ (80015f4 <HAL_UART_MspInit+0x1f4>)
 800146c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001472:	4b60      	ldr	r3, [pc, #384]	@ (80015f4 <HAL_UART_MspInit+0x1f4>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 800147e:	f003 fe45 	bl	800510c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001482:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001486:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800149c:	2308      	movs	r3, #8
 800149e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80014a6:	4619      	mov	r1, r3
 80014a8:	4853      	ldr	r0, [pc, #332]	@ (80015f8 <HAL_UART_MspInit+0x1f8>)
 80014aa:	f002 f9d7 	bl	800385c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 80014ae:	4b53      	ldr	r3, [pc, #332]	@ (80015fc <HAL_UART_MspInit+0x1fc>)
 80014b0:	4a53      	ldr	r2, [pc, #332]	@ (8001600 <HAL_UART_MspInit+0x200>)
 80014b2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80014b4:	4b51      	ldr	r3, [pc, #324]	@ (80015fc <HAL_UART_MspInit+0x1fc>)
 80014b6:	2222      	movs	r2, #34	@ 0x22
 80014b8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ba:	4b50      	ldr	r3, [pc, #320]	@ (80015fc <HAL_UART_MspInit+0x1fc>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c0:	4b4e      	ldr	r3, [pc, #312]	@ (80015fc <HAL_UART_MspInit+0x1fc>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014c6:	4b4d      	ldr	r3, [pc, #308]	@ (80015fc <HAL_UART_MspInit+0x1fc>)
 80014c8:	2280      	movs	r2, #128	@ 0x80
 80014ca:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014cc:	4b4b      	ldr	r3, [pc, #300]	@ (80015fc <HAL_UART_MspInit+0x1fc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014d2:	4b4a      	ldr	r3, [pc, #296]	@ (80015fc <HAL_UART_MspInit+0x1fc>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80014d8:	4b48      	ldr	r3, [pc, #288]	@ (80015fc <HAL_UART_MspInit+0x1fc>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014de:	4b47      	ldr	r3, [pc, #284]	@ (80015fc <HAL_UART_MspInit+0x1fc>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80014e4:	4845      	ldr	r0, [pc, #276]	@ (80015fc <HAL_UART_MspInit+0x1fc>)
 80014e6:	f001 fe43 	bl	8003170 <HAL_DMA_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 80014f0:	f7ff fcf5 	bl	8000ede <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a41      	ldr	r2, [pc, #260]	@ (80015fc <HAL_UART_MspInit+0x1fc>)
 80014f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80014fc:	4a3f      	ldr	r2, [pc, #252]	@ (80015fc <HAL_UART_MspInit+0x1fc>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA2_Channel2;
 8001502:	4b40      	ldr	r3, [pc, #256]	@ (8001604 <HAL_UART_MspInit+0x204>)
 8001504:	4a40      	ldr	r2, [pc, #256]	@ (8001608 <HAL_UART_MspInit+0x208>)
 8001506:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8001508:	4b3e      	ldr	r3, [pc, #248]	@ (8001604 <HAL_UART_MspInit+0x204>)
 800150a:	2223      	movs	r2, #35	@ 0x23
 800150c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800150e:	4b3d      	ldr	r3, [pc, #244]	@ (8001604 <HAL_UART_MspInit+0x204>)
 8001510:	2210      	movs	r2, #16
 8001512:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001514:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <HAL_UART_MspInit+0x204>)
 8001516:	2200      	movs	r2, #0
 8001518:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800151a:	4b3a      	ldr	r3, [pc, #232]	@ (8001604 <HAL_UART_MspInit+0x204>)
 800151c:	2280      	movs	r2, #128	@ 0x80
 800151e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001520:	4b38      	ldr	r3, [pc, #224]	@ (8001604 <HAL_UART_MspInit+0x204>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001526:	4b37      	ldr	r3, [pc, #220]	@ (8001604 <HAL_UART_MspInit+0x204>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800152c:	4b35      	ldr	r3, [pc, #212]	@ (8001604 <HAL_UART_MspInit+0x204>)
 800152e:	2200      	movs	r2, #0
 8001530:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001532:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <HAL_UART_MspInit+0x204>)
 8001534:	2200      	movs	r2, #0
 8001536:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001538:	4832      	ldr	r0, [pc, #200]	@ (8001604 <HAL_UART_MspInit+0x204>)
 800153a:	f001 fe19 	bl	8003170 <HAL_DMA_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8001544:	f7ff fccb 	bl	8000ede <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a2e      	ldr	r2, [pc, #184]	@ (8001604 <HAL_UART_MspInit+0x204>)
 800154c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800154e:	4a2d      	ldr	r2, [pc, #180]	@ (8001604 <HAL_UART_MspInit+0x204>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	2046      	movs	r0, #70	@ 0x46
 800155a:	f001 fdd2 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800155e:	2046      	movs	r0, #70	@ 0x46
 8001560:	f001 fdeb 	bl	800313a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001564:	e040      	b.n	80015e8 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART3)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a28      	ldr	r2, [pc, #160]	@ (800160c <HAL_UART_MspInit+0x20c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d13b      	bne.n	80015e8 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001570:	2304      	movs	r3, #4
 8001572:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001574:	2300      	movs	r3, #0
 8001576:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001578:	f107 0318 	add.w	r3, r7, #24
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fcad 	bl	8005edc <HAL_RCCEx_PeriphCLKConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8001588:	f7ff fca9 	bl	8000ede <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800158c:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <HAL_UART_MspInit+0x1f4>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001590:	4a18      	ldr	r2, [pc, #96]	@ (80015f4 <HAL_UART_MspInit+0x1f4>)
 8001592:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001596:	6593      	str	r3, [r2, #88]	@ 0x58
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <HAL_UART_MspInit+0x1f4>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <HAL_UART_MspInit+0x1f4>)
 80015a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a8:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <HAL_UART_MspInit+0x1f4>)
 80015aa:	f043 0308 	orr.w	r3, r3, #8
 80015ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b0:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <HAL_UART_MspInit+0x1f4>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015d6:	2307      	movs	r3, #7
 80015d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015dc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015e0:	4619      	mov	r1, r3
 80015e2:	480b      	ldr	r0, [pc, #44]	@ (8001610 <HAL_UART_MspInit+0x210>)
 80015e4:	f002 f93a 	bl	800385c <HAL_GPIO_Init>
}
 80015e8:	bf00      	nop
 80015ea:	37c0      	adds	r7, #192	@ 0xc0
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40008000 	.word	0x40008000
 80015f4:	40021000 	.word	0x40021000
 80015f8:	48001800 	.word	0x48001800
 80015fc:	2000a560 	.word	0x2000a560
 8001600:	40020008 	.word	0x40020008
 8001604:	2000a5c0 	.word	0x2000a5c0
 8001608:	4002041c 	.word	0x4002041c
 800160c:	40004800 	.word	0x40004800
 8001610:	48000c00 	.word	0x48000c00

08001614 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800164c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001618:	f7ff fd1e 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800161c:	480c      	ldr	r0, [pc, #48]	@ (8001650 <LoopForever+0x6>)
  ldr r1, =_edata
 800161e:	490d      	ldr	r1, [pc, #52]	@ (8001654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001620:	4a0d      	ldr	r2, [pc, #52]	@ (8001658 <LoopForever+0xe>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0a      	ldr	r2, [pc, #40]	@ (800165c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001634:	4c0a      	ldr	r4, [pc, #40]	@ (8001660 <LoopForever+0x16>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001642:	f00b f92b 	bl	800c89c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001646:	f7ff fb75 	bl	8000d34 <main>

0800164a <LoopForever>:

LoopForever:
    b LoopForever
 800164a:	e7fe      	b.n	800164a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800164c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001658:	0800c9e0 	.word	0x0800c9e0
  ldr r2, =_sbss
 800165c:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001660:	2000c230 	.word	0x2000c230

08001664 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <CAN1_RX0_IRQHandler>

08001666 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f001 fd3b 	bl	80030ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001676:	2000      	movs	r0, #0
 8001678:	f000 f80e 	bl	8001698 <HAL_InitTick>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	71fb      	strb	r3, [r7, #7]
 8001686:	e001      	b.n	800168c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001688:	f7ff fc30 	bl	8000eec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800168c:	79fb      	ldrb	r3, [r7, #7]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016a4:	4b17      	ldr	r3, [pc, #92]	@ (8001704 <HAL_InitTick+0x6c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d023      	beq.n	80016f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <HAL_InitTick+0x70>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <HAL_InitTick+0x6c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80016be:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f001 fd47 	bl	8003156 <HAL_SYSTICK_Config>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10f      	bne.n	80016ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d809      	bhi.n	80016e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f001 fd11 	bl	8003102 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016e0:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <HAL_InitTick+0x74>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e007      	b.n	80016f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e004      	b.n	80016f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
 80016f2:	e001      	b.n	80016f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000008 	.word	0x20000008
 8001708:	20000000 	.word	0x20000000
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008
 8001734:	2000a620 	.word	0x2000a620

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	@ (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	2000a620 	.word	0x2000a620

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008

08001798 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	609a      	str	r2, [r3, #8]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	609a      	str	r2, [r3, #8]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
 800180c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3360      	adds	r3, #96	@ 0x60
 8001812:	461a      	mov	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <LL_ADC_SetOffset+0x44>)
 8001822:	4013      	ands	r3, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	4313      	orrs	r3, r2
 8001830:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001838:	bf00      	nop
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	03fff000 	.word	0x03fff000

08001848 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3360      	adds	r3, #96	@ 0x60
 8001856:	461a      	mov	r2, r3
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3360      	adds	r3, #96	@ 0x60
 8001884:	461a      	mov	r2, r3
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800189e:	bf00      	nop
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	615a      	str	r2, [r3, #20]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018e4:	2301      	movs	r3, #1
 80018e6:	e000      	b.n	80018ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b087      	sub	sp, #28
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	60f8      	str	r0, [r7, #12]
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	3330      	adds	r3, #48	@ 0x30
 8001906:	461a      	mov	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	4413      	add	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	211f      	movs	r1, #31
 8001922:	fa01 f303 	lsl.w	r3, r1, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	401a      	ands	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	0e9b      	lsrs	r3, r3, #26
 800192e:	f003 011f 	and.w	r1, r3, #31
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 031f 	and.w	r3, r3, #31
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	431a      	orrs	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001942:	bf00      	nop
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001974:	b480      	push	{r7}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3314      	adds	r3, #20
 8001984:	461a      	mov	r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	0e5b      	lsrs	r3, r3, #25
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	4413      	add	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	0d1b      	lsrs	r3, r3, #20
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	2107      	movs	r1, #7
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	401a      	ands	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	0d1b      	lsrs	r3, r3, #20
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019be:	bf00      	nop
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	43db      	mvns	r3, r3
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0318 	and.w	r3, r3, #24
 80019ee:	4908      	ldr	r1, [pc, #32]	@ (8001a10 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019f0:	40d9      	lsrs	r1, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	400b      	ands	r3, r1
 80019f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fa:	431a      	orrs	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	0007ffff 	.word	0x0007ffff

08001a14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6093      	str	r3, [r2, #8]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a4c:	d101      	bne.n	8001a52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001a70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a9c:	d101      	bne.n	8001aa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ac0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ac4:	f043 0201 	orr.w	r2, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ae8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001aec:	f043 0202 	orr.w	r2, r3, #2
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <LL_ADC_IsEnabled+0x18>
 8001b14:	2301      	movs	r3, #1
 8001b16:	e000      	b.n	8001b1a <LL_ADC_IsEnabled+0x1a>
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d101      	bne.n	8001b3e <LL_ADC_IsDisableOngoing+0x18>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <LL_ADC_IsDisableOngoing+0x1a>
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b60:	f043 0204 	orr.w	r2, r3, #4
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d101      	bne.n	8001b8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d101      	bne.n	8001bb2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e129      	b.n	8001e2e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d109      	bne.n	8001bfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7fe fce5 	bl	80005b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff19 	bl	8001a38 <LL_ADC_IsDeepPowerDownEnabled>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d004      	beq.n	8001c16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff feff 	bl	8001a14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff34 	bl	8001a88 <LL_ADC_IsInternalRegulatorEnabled>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d115      	bne.n	8001c52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff18 	bl	8001a60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c30:	4b81      	ldr	r3, [pc, #516]	@ (8001e38 <HAL_ADC_Init+0x278>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	4a81      	ldr	r2, [pc, #516]	@ (8001e3c <HAL_ADC_Init+0x27c>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	099b      	lsrs	r3, r3, #6
 8001c3e:	3301      	adds	r3, #1
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c44:	e002      	b.n	8001c4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f9      	bne.n	8001c46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff ff16 	bl	8001a88 <LL_ADC_IsInternalRegulatorEnabled>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10d      	bne.n	8001c7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	f043 0210 	orr.w	r2, r3, #16
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	f043 0201 	orr.w	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff76 	bl	8001b74 <LL_ADC_REG_IsConversionOngoing>
 8001c88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 80c2 	bne.w	8001e1c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 80be 	bne.w	8001e1c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ca8:	f043 0202 	orr.w	r2, r3, #2
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff23 	bl	8001b00 <LL_ADC_IsEnabled>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001cc0:	485f      	ldr	r0, [pc, #380]	@ (8001e40 <HAL_ADC_Init+0x280>)
 8001cc2:	f7ff ff1d 	bl	8001b00 <LL_ADC_IsEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d105      	bne.n	8001cd8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	485c      	ldr	r0, [pc, #368]	@ (8001e44 <HAL_ADC_Init+0x284>)
 8001cd4:	f7ff fd60 	bl	8001798 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	7e5b      	ldrb	r3, [r3, #25]
 8001cdc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ce2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ce8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d106      	bne.n	8001d14 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	045b      	lsls	r3, r3, #17
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d20:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d28:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	4b44      	ldr	r3, [pc, #272]	@ (8001e48 <HAL_ADC_Init+0x288>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	69b9      	ldr	r1, [r7, #24]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff26 	bl	8001b9a <LL_ADC_INJ_IsConversionOngoing>
 8001d4e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d140      	bne.n	8001dd8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d13d      	bne.n	8001dd8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	7e1b      	ldrb	r3, [r3, #24]
 8001d64:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d66:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d6e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d7e:	f023 0306 	bic.w	r3, r3, #6
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	69b9      	ldr	r1, [r7, #24]
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d118      	bne.n	8001dc8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001da0:	f023 0304 	bic.w	r3, r3, #4
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001dac:	4311      	orrs	r1, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001db2:	4311      	orrs	r1, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001db8:	430a      	orrs	r2, r1
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
 8001dc4:	611a      	str	r2, [r3, #16]
 8001dc6:	e007      	b.n	8001dd8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d10c      	bne.n	8001dfa <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	f023 010f 	bic.w	r1, r3, #15
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	1e5a      	subs	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001df8:	e007      	b.n	8001e0a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 020f 	bic.w	r2, r2, #15
 8001e08:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0e:	f023 0303 	bic.w	r3, r3, #3
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e1a:	e007      	b.n	8001e2c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	f043 0210 	orr.w	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	053e2d63 	.word	0x053e2d63
 8001e40:	50040000 	.word	0x50040000
 8001e44:	50040300 	.word	0x50040300
 8001e48:	fff0c007 	.word	0xfff0c007

08001e4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fe89 	bl	8001b74 <LL_ADC_REG_IsConversionOngoing>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d167      	bne.n	8001f38 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Start_DMA+0x2a>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e063      	b.n	8001f3e <HAL_ADC_Start_DMA+0xf2>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 fe2c 	bl	8002adc <ADC_Enable>
 8001e84:	4603      	mov	r3, r0
 8001e86:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d14f      	bne.n	8001f2e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d006      	beq.n	8001ebc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eb2:	f023 0206 	bic.w	r2, r3, #6
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001eba:	e002      	b.n	8001ec2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec6:	4a20      	ldr	r2, [pc, #128]	@ (8001f48 <HAL_ADC_Start_DMA+0xfc>)
 8001ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ece:	4a1f      	ldr	r2, [pc, #124]	@ (8001f4c <HAL_ADC_Start_DMA+0x100>)
 8001ed0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f50 <HAL_ADC_Start_DMA+0x104>)
 8001ed8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	221c      	movs	r2, #28
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 0210 	orr.w	r2, r2, #16
 8001ef8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0201 	orr.w	r2, r2, #1
 8001f08:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3340      	adds	r3, #64	@ 0x40
 8001f14:	4619      	mov	r1, r3
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f001 f9d1 	bl	80032c0 <HAL_DMA_Start_IT>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fe10 	bl	8001b4c <LL_ADC_REG_StartConversion>
 8001f2c:	e006      	b.n	8001f3c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001f36:	e001      	b.n	8001f3c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	08002ca7 	.word	0x08002ca7
 8001f4c:	08002d7f 	.word	0x08002d7f
 8001f50:	08002d9b 	.word	0x08002d9b

08001f54 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d017      	beq.n	8001faa <HAL_ADC_IRQHandler+0x56>
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d012      	beq.n	8001faa <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f94:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 ffcb 	bl	8002f38 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <HAL_ADC_IRQHandler+0x6a>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d109      	bne.n	8001fd2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d05e      	beq.n	8002086 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d059      	beq.n	8002086 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d105      	bne.n	8001fea <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fc6e 	bl	80018d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d03e      	beq.n	8002078 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d135      	bne.n	8002078 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b08      	cmp	r3, #8
 8002018:	d12e      	bne.n	8002078 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fda8 	bl	8001b74 <LL_ADC_REG_IsConversionOngoing>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d11a      	bne.n	8002060 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 020c 	bic.w	r2, r2, #12
 8002038:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800203e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d112      	bne.n	8002078 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	659a      	str	r2, [r3, #88]	@ 0x58
 800205e:	e00b      	b.n	8002078 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002064:	f043 0210 	orr.w	r2, r3, #16
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7fe fdd3 	bl	8000c24 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	220c      	movs	r2, #12
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	f003 0320 	and.w	r3, r3, #32
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <HAL_ADC_IRQHandler+0x146>
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d072      	beq.n	800218a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06d      	beq.n	800218a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d105      	bne.n	80020c6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020be:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fc3f 	bl	800194e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80020d0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fbfa 	bl	80018d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020dc:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d047      	beq.n	800217c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_ADC_IRQHandler+0x1b2>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d03f      	beq.n	800217c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002102:	2b00      	cmp	r3, #0
 8002104:	d13a      	bne.n	800217c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002110:	2b40      	cmp	r3, #64	@ 0x40
 8002112:	d133      	bne.n	800217c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d12e      	bne.n	800217c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fd39 	bl	8001b9a <LL_ADC_INJ_IsConversionOngoing>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d11a      	bne.n	8002164 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800213c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002142:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d112      	bne.n	800217c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	f043 0201 	orr.w	r2, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	659a      	str	r2, [r3, #88]	@ 0x58
 8002162:	e00b      	b.n	800217c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002168:	f043 0210 	orr.w	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 feb3 	bl	8002ee8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2260      	movs	r2, #96	@ 0x60
 8002188:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002190:	2b00      	cmp	r3, #0
 8002192:	d011      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x264>
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00c      	beq.n	80021b8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f886 	bl	80022bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2280      	movs	r2, #128	@ 0x80
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d012      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x294>
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00d      	beq.n	80021e8 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fe99 	bl	8002f10 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d012      	beq.n	8002218 <HAL_ADC_IRQHandler+0x2c4>
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002200:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 fe8b 	bl	8002f24 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002216:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	d02a      	beq.n	8002278 <HAL_ADC_IRQHandler+0x324>
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0310 	and.w	r3, r3, #16
 8002228:	2b00      	cmp	r3, #0
 800222a:	d025      	beq.n	8002278 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002234:	2301      	movs	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	e008      	b.n	800224c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002248:	2301      	movs	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d10e      	bne.n	8002270 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002256:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002262:	f043 0202 	orr.w	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f830 	bl	80022d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2210      	movs	r2, #16
 8002276:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227e:	2b00      	cmp	r3, #0
 8002280:	d018      	beq.n	80022b4 <HAL_ADC_IRQHandler+0x360>
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002288:	2b00      	cmp	r3, #0
 800228a:	d013      	beq.n	80022b4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002290:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229c:	f043 0208 	orr.w	r2, r3, #8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022ac:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fe24 	bl	8002efc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80022b4:	bf00      	nop
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b0b6      	sub	sp, #216	@ 0xd8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x22>
 8002302:	2302      	movs	r3, #2
 8002304:	e3d5      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x7ce>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fc2e 	bl	8001b74 <LL_ADC_REG_IsConversionOngoing>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	f040 83ba 	bne.w	8002a94 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b05      	cmp	r3, #5
 800232e:	d824      	bhi.n	800237a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	3b02      	subs	r3, #2
 8002336:	2b03      	cmp	r3, #3
 8002338:	d81b      	bhi.n	8002372 <HAL_ADC_ConfigChannel+0x8e>
 800233a:	a201      	add	r2, pc, #4	@ (adr r2, 8002340 <HAL_ADC_ConfigChannel+0x5c>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002351 	.word	0x08002351
 8002344:	08002359 	.word	0x08002359
 8002348:	08002361 	.word	0x08002361
 800234c:	08002369 	.word	0x08002369
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002350:	230c      	movs	r3, #12
 8002352:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002356:	e010      	b.n	800237a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002358:	2312      	movs	r3, #18
 800235a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800235e:	e00c      	b.n	800237a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002360:	2318      	movs	r3, #24
 8002362:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002366:	e008      	b.n	800237a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002368:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800236c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002370:	e003      	b.n	800237a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002372:	2306      	movs	r3, #6
 8002374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002378:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002388:	f7ff fab5 	bl	80018f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fbef 	bl	8001b74 <LL_ADC_REG_IsConversionOngoing>
 8002396:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fbfb 	bl	8001b9a <LL_ADC_INJ_IsConversionOngoing>
 80023a4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f040 81bf 	bne.w	8002730 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 81ba 	bne.w	8002730 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80023c4:	d10f      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7ff facf 	bl	8001974 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fa63 	bl	80018aa <LL_ADC_SetSamplingTimeCommonConfig>
 80023e4:	e00e      	b.n	8002404 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f7ff fabe 	bl	8001974 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fa53 	bl	80018aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	08db      	lsrs	r3, r3, #3
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b04      	cmp	r3, #4
 8002424:	d00a      	beq.n	800243c <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6919      	ldr	r1, [r3, #16]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002436:	f7ff f9e3 	bl	8001800 <LL_ADC_SetOffset>
 800243a:	e179      	b.n	8002730 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2100      	movs	r1, #0
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fa00 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10a      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x184>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2100      	movs	r1, #0
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff f9f5 	bl	8001848 <LL_ADC_GetOffsetChannel>
 800245e:	4603      	mov	r3, r0
 8002460:	0e9b      	lsrs	r3, r3, #26
 8002462:	f003 021f 	and.w	r2, r3, #31
 8002466:	e01e      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1c2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff f9ea 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8002474:	4603      	mov	r3, r0
 8002476:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002486:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800248a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800248e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002496:	2320      	movs	r3, #32
 8002498:	e004      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800249a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d105      	bne.n	80024be <HAL_ADC_ConfigChannel+0x1da>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0e9b      	lsrs	r3, r3, #26
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	e018      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x20c>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80024d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80024da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80024e2:	2320      	movs	r3, #32
 80024e4:	e004      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80024e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d106      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2200      	movs	r2, #0
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff f9b9 	bl	8001874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2101      	movs	r1, #1
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f99d 	bl	8001848 <LL_ADC_GetOffsetChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_ADC_ConfigChannel+0x24a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2101      	movs	r1, #1
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f992 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8002524:	4603      	mov	r3, r0
 8002526:	0e9b      	lsrs	r3, r3, #26
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	e01e      	b.n	800256c <HAL_ADC_ConfigChannel+0x288>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2101      	movs	r1, #1
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff f987 	bl	8001848 <LL_ADC_GetOffsetChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800254c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002550:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002554:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e004      	b.n	800256a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002560:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x2a0>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0e9b      	lsrs	r3, r3, #26
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	e018      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x2d2>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002598:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800259c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80025a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80025a8:	2320      	movs	r3, #32
 80025aa:	e004      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80025ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d106      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2200      	movs	r2, #0
 80025c0:	2101      	movs	r1, #1
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f956 	bl	8001874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2102      	movs	r1, #2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f93a 	bl	8001848 <LL_ADC_GetOffsetChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x310>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2102      	movs	r1, #2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff f92f 	bl	8001848 <LL_ADC_GetOffsetChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	f003 021f 	and.w	r2, r3, #31
 80025f2:	e01e      	b.n	8002632 <HAL_ADC_ConfigChannel+0x34e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2102      	movs	r1, #2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f924 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002612:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002616:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800261a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002622:	2320      	movs	r3, #32
 8002624:	e004      	b.n	8002630 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <HAL_ADC_ConfigChannel+0x366>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0e9b      	lsrs	r3, r3, #26
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	e014      	b.n	8002674 <HAL_ADC_ConfigChannel+0x390>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002658:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800265a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800265e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002666:	2320      	movs	r3, #32
 8002668:	e004      	b.n	8002674 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800266a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800266e:	fab3 f383 	clz	r3, r3
 8002672:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002674:	429a      	cmp	r2, r3
 8002676:	d106      	bne.n	8002686 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2200      	movs	r2, #0
 800267e:	2102      	movs	r1, #2
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff f8f7 	bl	8001874 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	2103      	movs	r1, #3
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff f8db 	bl	8001848 <LL_ADC_GetOffsetChannel>
 8002692:	4603      	mov	r3, r0
 8002694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x3ce>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2103      	movs	r1, #3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff f8d0 	bl	8001848 <LL_ADC_GetOffsetChannel>
 80026a8:	4603      	mov	r3, r0
 80026aa:	0e9b      	lsrs	r3, r3, #26
 80026ac:	f003 021f 	and.w	r2, r3, #31
 80026b0:	e017      	b.n	80026e2 <HAL_ADC_ConfigChannel+0x3fe>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2103      	movs	r1, #3
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff f8c5 	bl	8001848 <LL_ADC_GetOffsetChannel>
 80026be:	4603      	mov	r3, r0
 80026c0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80026ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026cc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80026ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80026d4:	2320      	movs	r3, #32
 80026d6:	e003      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80026d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d105      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x416>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	0e9b      	lsrs	r3, r3, #26
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	e011      	b.n	800271e <HAL_ADC_ConfigChannel+0x43a>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002708:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800270a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800270c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e003      	b.n	800271e <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002716:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800271e:	429a      	cmp	r2, r3
 8002720:	d106      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2200      	movs	r2, #0
 8002728:	2103      	movs	r1, #3
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff f8a2 	bl	8001874 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff f9e3 	bl	8001b00 <LL_ADC_IsEnabled>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 813f 	bne.w	80029c0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6819      	ldr	r1, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	461a      	mov	r2, r3
 8002750:	f7ff f93c 	bl	80019cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4a8e      	ldr	r2, [pc, #568]	@ (8002994 <HAL_ADC_ConfigChannel+0x6b0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	f040 8130 	bne.w	80029c0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10b      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x4a4>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0e9b      	lsrs	r3, r3, #26
 8002776:	3301      	adds	r3, #1
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	2b09      	cmp	r3, #9
 800277e:	bf94      	ite	ls
 8002780:	2301      	movls	r3, #1
 8002782:	2300      	movhi	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	e019      	b.n	80027bc <HAL_ADC_ConfigChannel+0x4d8>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002798:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800279a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80027a0:	2320      	movs	r3, #32
 80027a2:	e003      	b.n	80027ac <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80027a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a6:	fab3 f383 	clz	r3, r3
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	2b09      	cmp	r3, #9
 80027b4:	bf94      	ite	ls
 80027b6:	2301      	movls	r3, #1
 80027b8:	2300      	movhi	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d079      	beq.n	80028b4 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d107      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x4f8>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	0e9b      	lsrs	r3, r3, #26
 80027d2:	3301      	adds	r3, #1
 80027d4:	069b      	lsls	r3, r3, #26
 80027d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027da:	e015      	b.n	8002808 <HAL_ADC_ConfigChannel+0x524>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027e4:	fa93 f3a3 	rbit	r3, r3
 80027e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80027ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80027ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80027f4:	2320      	movs	r3, #32
 80027f6:	e003      	b.n	8002800 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80027f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027fa:	fab3 f383 	clz	r3, r3
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	3301      	adds	r3, #1
 8002802:	069b      	lsls	r3, r3, #26
 8002804:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x544>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0e9b      	lsrs	r3, r3, #26
 800281a:	3301      	adds	r3, #1
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	e017      	b.n	8002858 <HAL_ADC_ConfigChannel+0x574>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002830:	fa93 f3a3 	rbit	r3, r3
 8002834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002838:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800283a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002840:	2320      	movs	r3, #32
 8002842:	e003      	b.n	800284c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3301      	adds	r3, #1
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2101      	movs	r1, #1
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	ea42 0103 	orr.w	r1, r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <HAL_ADC_ConfigChannel+0x59a>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	0e9b      	lsrs	r3, r3, #26
 800286e:	3301      	adds	r3, #1
 8002870:	f003 021f 	and.w	r2, r3, #31
 8002874:	4613      	mov	r3, r2
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4413      	add	r3, r2
 800287a:	051b      	lsls	r3, r3, #20
 800287c:	e018      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x5cc>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800288c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002896:	2320      	movs	r3, #32
 8002898:	e003      	b.n	80028a2 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800289a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800289c:	fab3 f383 	clz	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f003 021f 	and.w	r2, r3, #31
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b0:	430b      	orrs	r3, r1
 80028b2:	e080      	b.n	80029b6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d107      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x5ec>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	0e9b      	lsrs	r3, r3, #26
 80028c6:	3301      	adds	r3, #1
 80028c8:	069b      	lsls	r3, r3, #26
 80028ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ce:	e015      	b.n	80028fc <HAL_ADC_ConfigChannel+0x618>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80028e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80028e8:	2320      	movs	r3, #32
 80028ea:	e003      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80028ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	3301      	adds	r3, #1
 80028f6:	069b      	lsls	r3, r3, #26
 80028f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <HAL_ADC_ConfigChannel+0x638>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0e9b      	lsrs	r3, r3, #26
 800290e:	3301      	adds	r3, #1
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	e017      	b.n	800294c <HAL_ADC_ConfigChannel+0x668>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	61bb      	str	r3, [r7, #24]
  return result;
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002934:	2320      	movs	r3, #32
 8002936:	e003      	b.n	8002940 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	fab3 f383 	clz	r3, r3
 800293e:	b2db      	uxtb	r3, r3
 8002940:	3301      	adds	r3, #1
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	2101      	movs	r1, #1
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	ea42 0103 	orr.w	r1, r2, r3
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10d      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x694>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	3301      	adds	r3, #1
 8002964:	f003 021f 	and.w	r2, r3, #31
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	3b1e      	subs	r3, #30
 8002970:	051b      	lsls	r3, r3, #20
 8002972:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002976:	e01d      	b.n	80029b4 <HAL_ADC_ConfigChannel+0x6d0>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	60fb      	str	r3, [r7, #12]
  return result;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e005      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x6bc>
 8002994:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	3301      	adds	r3, #1
 80029a2:	f003 021f 	and.w	r2, r3, #31
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	3b1e      	subs	r3, #30
 80029ae:	051b      	lsls	r3, r3, #20
 80029b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fe ffda 	bl	8001974 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4b3d      	ldr	r3, [pc, #244]	@ (8002abc <HAL_ADC_ConfigChannel+0x7d8>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d06c      	beq.n	8002aa6 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029cc:	483c      	ldr	r0, [pc, #240]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x7dc>)
 80029ce:	f7fe ff09 	bl	80017e4 <LL_ADC_GetCommonPathInternalCh>
 80029d2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a3a      	ldr	r2, [pc, #232]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x7e0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d127      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d121      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a35      	ldr	r2, [pc, #212]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x7e4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d157      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029fe:	4619      	mov	r1, r3
 8002a00:	482f      	ldr	r0, [pc, #188]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a02:	f7fe fedc 	bl	80017be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a06:	4b31      	ldr	r3, [pc, #196]	@ (8002acc <HAL_ADC_ConfigChannel+0x7e8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	099b      	lsrs	r3, r3, #6
 8002a0c:	4a30      	ldr	r2, [pc, #192]	@ (8002ad0 <HAL_ADC_ConfigChannel+0x7ec>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	099b      	lsrs	r3, r3, #6
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a20:	e002      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f9      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a2e:	e03a      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a27      	ldr	r2, [pc, #156]	@ (8002ad4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d113      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10d      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d12a      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4819      	ldr	r0, [pc, #100]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a5c:	f7fe feaf 	bl	80017be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a60:	e021      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d11c      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d116      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a12      	ldr	r2, [pc, #72]	@ (8002ac8 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d111      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	480c      	ldr	r0, [pc, #48]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a8e:	f7fe fe96 	bl	80017be <LL_ADC_SetCommonPathInternalCh>
 8002a92:	e008      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	f043 0220 	orr.w	r2, r3, #32
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002aae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	37d8      	adds	r7, #216	@ 0xd8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	80080000 	.word	0x80080000
 8002ac0:	50040300 	.word	0x50040300
 8002ac4:	c7520000 	.word	0xc7520000
 8002ac8:	50040000 	.word	0x50040000
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	053e2d63 	.word	0x053e2d63
 8002ad4:	cb840000 	.word	0xcb840000
 8002ad8:	80000001 	.word	0x80000001

08002adc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff f807 	bl	8001b00 <LL_ADC_IsEnabled>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d169      	bne.n	8002bcc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	4b36      	ldr	r3, [pc, #216]	@ (8002bd8 <ADC_Enable+0xfc>)
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0a:	f043 0210 	orr.w	r2, r3, #16
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b16:	f043 0201 	orr.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e055      	b.n	8002bce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe ffc2 	bl	8001ab0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b2c:	482b      	ldr	r0, [pc, #172]	@ (8002bdc <ADC_Enable+0x100>)
 8002b2e:	f7fe fe59 	bl	80017e4 <LL_ADC_GetCommonPathInternalCh>
 8002b32:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <ADC_Enable+0x104>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	4a28      	ldr	r2, [pc, #160]	@ (8002be4 <ADC_Enable+0x108>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	099b      	lsrs	r3, r3, #6
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b56:	e002      	b.n	8002b5e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f9      	bne.n	8002b58 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b64:	f7fe fde8 	bl	8001738 <HAL_GetTick>
 8002b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b6a:	e028      	b.n	8002bbe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe ffc5 	bl	8001b00 <LL_ADC_IsEnabled>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d104      	bne.n	8002b86 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe ff95 	bl	8001ab0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b86:	f7fe fdd7 	bl	8001738 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d914      	bls.n	8002bbe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d00d      	beq.n	8002bbe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba6:	f043 0210 	orr.w	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e007      	b.n	8002bce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d1cf      	bne.n	8002b6c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	8000003f 	.word	0x8000003f
 8002bdc:	50040300 	.word	0x50040300
 8002be0:	20000000 	.word	0x20000000
 8002be4:	053e2d63 	.word	0x053e2d63

08002be8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe ff96 	bl	8001b26 <LL_ADC_IsDisableOngoing>
 8002bfa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe ff7d 	bl	8001b00 <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d047      	beq.n	8002c9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d144      	bne.n	8002c9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030d 	and.w	r3, r3, #13
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d10c      	bne.n	8002c3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe ff57 	bl	8001ad8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2203      	movs	r2, #3
 8002c30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c32:	f7fe fd81 	bl	8001738 <HAL_GetTick>
 8002c36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c38:	e029      	b.n	8002c8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	f043 0210 	orr.w	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e023      	b.n	8002c9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c56:	f7fe fd6f 	bl	8001738 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d914      	bls.n	8002c8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00d      	beq.n	8002c8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e007      	b.n	8002c9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1dc      	bne.n	8002c56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d14b      	bne.n	8002d58 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d021      	beq.n	8002d1e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fdf6 	bl	80018d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d032      	beq.n	8002d50 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d12b      	bne.n	8002d50 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d11f      	bne.n	8002d50 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	f043 0201 	orr.w	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d1c:	e018      	b.n	8002d50 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d111      	bne.n	8002d50 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d30:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d48:	f043 0201 	orr.w	r2, r3, #1
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f7fd ff67 	bl	8000c24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d56:	e00e      	b.n	8002d76 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff fab3 	bl	80022d0 <HAL_ADC_ErrorCallback>
}
 8002d6a:	e004      	b.n	8002d76 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	4798      	blx	r3
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7fd ff8f 	bl	8000cb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db8:	f043 0204 	orr.w	r2, r3, #4
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f7ff fa85 	bl	80022d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <LL_ADC_StartCalibration>:
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002de0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_IsCalibrationOnGoing>:
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e14:	d101      	bne.n	8002e1a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADCEx_Calibration_Start+0x1c>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e04d      	b.n	8002ee0 <HAL_ADCEx_Calibration_Start+0xb8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fecb 	bl	8002be8 <ADC_Disable>
 8002e52:	4603      	mov	r3, r0
 8002e54:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d136      	bne.n	8002eca <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e60:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e64:	f023 0302 	bic.w	r3, r3, #2
 8002e68:	f043 0202 	orr.w	r2, r3, #2
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6839      	ldr	r1, [r7, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ffa9 	bl	8002dce <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e7c:	e014      	b.n	8002ea8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	3301      	adds	r3, #1
 8002e82:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002e8a:	d30d      	bcc.n	8002ea8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e90:	f023 0312 	bic.w	r3, r3, #18
 8002e94:	f043 0210 	orr.w	r2, r3, #16
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e01b      	b.n	8002ee0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ffa7 	bl	8002e00 <LL_ADC_IsCalibrationOnGoing>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e2      	bne.n	8002e7e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebc:	f023 0303 	bic.w	r3, r3, #3
 8002ec0:	f043 0201 	orr.w	r2, r3, #1
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ec8:	e005      	b.n	8002ed6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ece:	f043 0210 	orr.w	r2, r3, #16
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <__NVIC_SetPriorityGrouping+0x44>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f7e:	4a04      	ldr	r2, [pc, #16]	@ (8002f90 <__NVIC_SetPriorityGrouping+0x44>)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	60d3      	str	r3, [r2, #12]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f98:	4b04      	ldr	r3, [pc, #16]	@ (8002fac <__NVIC_GetPriorityGrouping+0x18>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	f003 0307 	and.w	r3, r3, #7
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	db0b      	blt.n	8002fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	4907      	ldr	r1, [pc, #28]	@ (8002fe8 <__NVIC_EnableIRQ+0x38>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000e100 	.word	0xe000e100

08002fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db0a      	blt.n	8003016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	490c      	ldr	r1, [pc, #48]	@ (8003038 <__NVIC_SetPriority+0x4c>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	440b      	add	r3, r1
 8003010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003014:	e00a      	b.n	800302c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4908      	ldr	r1, [pc, #32]	@ (800303c <__NVIC_SetPriority+0x50>)
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	3b04      	subs	r3, #4
 8003024:	0112      	lsls	r2, r2, #4
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	440b      	add	r3, r1
 800302a:	761a      	strb	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000e100 	.word	0xe000e100
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	@ 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f1c3 0307 	rsb	r3, r3, #7
 800305a:	2b04      	cmp	r3, #4
 800305c:	bf28      	it	cs
 800305e:	2304      	movcs	r3, #4
 8003060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3304      	adds	r3, #4
 8003066:	2b06      	cmp	r3, #6
 8003068:	d902      	bls.n	8003070 <NVIC_EncodePriority+0x30>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3b03      	subs	r3, #3
 800306e:	e000      	b.n	8003072 <NVIC_EncodePriority+0x32>
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	401a      	ands	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003088:	f04f 31ff 	mov.w	r1, #4294967295
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43d9      	mvns	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	4313      	orrs	r3, r2
         );
}
 800309a:	4618      	mov	r0, r3
 800309c:	3724      	adds	r7, #36	@ 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030b8:	d301      	bcc.n	80030be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ba:	2301      	movs	r3, #1
 80030bc:	e00f      	b.n	80030de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030be:	4a0a      	ldr	r2, [pc, #40]	@ (80030e8 <SysTick_Config+0x40>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030c6:	210f      	movs	r1, #15
 80030c8:	f04f 30ff 	mov.w	r0, #4294967295
 80030cc:	f7ff ff8e 	bl	8002fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d0:	4b05      	ldr	r3, [pc, #20]	@ (80030e8 <SysTick_Config+0x40>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d6:	4b04      	ldr	r3, [pc, #16]	@ (80030e8 <SysTick_Config+0x40>)
 80030d8:	2207      	movs	r2, #7
 80030da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	e000e010 	.word	0xe000e010

080030ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff29 	bl	8002f4c <__NVIC_SetPriorityGrouping>
}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b086      	sub	sp, #24
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003114:	f7ff ff3e 	bl	8002f94 <__NVIC_GetPriorityGrouping>
 8003118:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68b9      	ldr	r1, [r7, #8]
 800311e:	6978      	ldr	r0, [r7, #20]
 8003120:	f7ff ff8e 	bl	8003040 <NVIC_EncodePriority>
 8003124:	4602      	mov	r2, r0
 8003126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff ff5d 	bl	8002fec <__NVIC_SetPriority>
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	4603      	mov	r3, r0
 8003142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff31 	bl	8002fb0 <__NVIC_EnableIRQ>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ffa2 	bl	80030a8 <SysTick_Config>
 8003164:	4603      	mov	r3, r0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e08d      	b.n	800329e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	4b47      	ldr	r3, [pc, #284]	@ (80032a8 <HAL_DMA_Init+0x138>)
 800318a:	429a      	cmp	r2, r3
 800318c:	d80f      	bhi.n	80031ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	4b45      	ldr	r3, [pc, #276]	@ (80032ac <HAL_DMA_Init+0x13c>)
 8003196:	4413      	add	r3, r2
 8003198:	4a45      	ldr	r2, [pc, #276]	@ (80032b0 <HAL_DMA_Init+0x140>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	009a      	lsls	r2, r3, #2
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a42      	ldr	r2, [pc, #264]	@ (80032b4 <HAL_DMA_Init+0x144>)
 80031aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80031ac:	e00e      	b.n	80031cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b40      	ldr	r3, [pc, #256]	@ (80032b8 <HAL_DMA_Init+0x148>)
 80031b6:	4413      	add	r3, r2
 80031b8:	4a3d      	ldr	r2, [pc, #244]	@ (80032b0 <HAL_DMA_Init+0x140>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	009a      	lsls	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a3c      	ldr	r2, [pc, #240]	@ (80032bc <HAL_DMA_Init+0x14c>)
 80031ca:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80031e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003208:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 faba 	bl	8003798 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800322c:	d102      	bne.n	8003234 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003248:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d010      	beq.n	8003274 <HAL_DMA_Init+0x104>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b04      	cmp	r3, #4
 8003258:	d80c      	bhi.n	8003274 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fada 	bl	8003814 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	e008      	b.n	8003286 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40020407 	.word	0x40020407
 80032ac:	bffdfff8 	.word	0xbffdfff8
 80032b0:	cccccccd 	.word	0xcccccccd
 80032b4:	40020000 	.word	0x40020000
 80032b8:	bffdfbf8 	.word	0xbffdfbf8
 80032bc:	40020400 	.word	0x40020400

080032c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_DMA_Start_IT+0x20>
 80032dc:	2302      	movs	r3, #2
 80032de:	e066      	b.n	80033ae <HAL_DMA_Start_IT+0xee>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d155      	bne.n	80033a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f9ff 	bl	800371c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	2b00      	cmp	r3, #0
 8003324:	d008      	beq.n	8003338 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 020e 	orr.w	r2, r2, #14
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	e00f      	b.n	8003358 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0204 	bic.w	r2, r2, #4
 8003346:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 020a 	orr.w	r2, r2, #10
 8003356:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003370:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003374:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003388:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800338c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0201 	orr.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	e005      	b.n	80033ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80033a8:	2302      	movs	r3, #2
 80033aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b085      	sub	sp, #20
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d008      	beq.n	80033e0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2204      	movs	r2, #4
 80033d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e040      	b.n	8003462 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 020e 	bic.w	r2, r2, #14
 80033ee:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033fe:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003414:	f003 021c 	and.w	r2, r3, #28
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	2101      	movs	r1, #1
 800341e:	fa01 f202 	lsl.w	r2, r1, r2
 8003422:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800342c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003440:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003444:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800344e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003460:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d005      	beq.n	8003492 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2204      	movs	r2, #4
 800348a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
 8003490:	e047      	b.n	8003522 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 020e 	bic.w	r2, r2, #14
 80034a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	f003 021c 	and.w	r2, r3, #28
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	2101      	movs	r1, #1
 80034d0:	fa01 f202 	lsl.w	r2, r1, r2
 80034d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00c      	beq.n	8003502 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003500:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
    }
  }
  return status;
 8003522:	7bfb      	ldrb	r3, [r7, #15]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003548:	f003 031c 	and.w	r3, r3, #28
 800354c:	2204      	movs	r2, #4
 800354e:	409a      	lsls	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4013      	ands	r3, r2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d026      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x7a>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b00      	cmp	r3, #0
 8003560:	d021      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d107      	bne.n	8003580 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0204 	bic.w	r2, r2, #4
 800357e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003584:	f003 021c 	and.w	r2, r3, #28
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	2104      	movs	r1, #4
 800358e:	fa01 f202 	lsl.w	r2, r1, r2
 8003592:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003598:	2b00      	cmp	r3, #0
 800359a:	d071      	beq.n	8003680 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035a4:	e06c      	b.n	8003680 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	f003 031c 	and.w	r3, r3, #28
 80035ae:	2202      	movs	r2, #2
 80035b0:	409a      	lsls	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d02e      	beq.n	8003618 <HAL_DMA_IRQHandler+0xec>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d029      	beq.n	8003618 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10b      	bne.n	80035ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 020a 	bic.w	r2, r2, #10
 80035e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f003 021c 	and.w	r2, r3, #28
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	2102      	movs	r1, #2
 80035f8:	fa01 f202 	lsl.w	r2, r1, r2
 80035fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d038      	beq.n	8003680 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003616:	e033      	b.n	8003680 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361c:	f003 031c 	and.w	r3, r3, #28
 8003620:	2208      	movs	r2, #8
 8003622:	409a      	lsls	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d02a      	beq.n	8003682 <HAL_DMA_IRQHandler+0x156>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d025      	beq.n	8003682 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 020e 	bic.w	r2, r2, #14
 8003644:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	f003 021c 	and.w	r2, r3, #28
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	2101      	movs	r1, #1
 8003654:	fa01 f202 	lsl.w	r2, r1, r2
 8003658:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003680:	bf00      	nop
 8003682:	bf00      	nop
}
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	460b      	mov	r3, r1
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_DMA_RegisterCallback+0x20>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e031      	b.n	8003710 <HAL_DMA_RegisterCallback+0x84>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d120      	bne.n	8003702 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80036c0:	7afb      	ldrb	r3, [r7, #11]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d81a      	bhi.n	80036fc <HAL_DMA_RegisterCallback+0x70>
 80036c6:	a201      	add	r2, pc, #4	@ (adr r2, 80036cc <HAL_DMA_RegisterCallback+0x40>)
 80036c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036e5 	.word	0x080036e5
 80036d4:	080036ed 	.word	0x080036ed
 80036d8:	080036f5 	.word	0x080036f5
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 80036e2:	e010      	b.n	8003706 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 80036ea:	e00c      	b.n	8003706 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80036f2:	e008      	b.n	8003706 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80036fa:	e004      	b.n	8003706 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	75fb      	strb	r3, [r7, #23]
        break;
 8003700:	e001      	b.n	8003706 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800370e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003710:	4618      	mov	r0, r3
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003732:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003738:	2b00      	cmp	r3, #0
 800373a:	d004      	beq.n	8003746 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003744:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f003 021c 	and.w	r2, r3, #28
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	2101      	movs	r1, #1
 8003754:	fa01 f202 	lsl.w	r2, r1, r2
 8003758:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b10      	cmp	r3, #16
 8003768:	d108      	bne.n	800377c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800377a:	e007      	b.n	800378c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	60da      	str	r2, [r3, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b17      	ldr	r3, [pc, #92]	@ (8003804 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d80a      	bhi.n	80037c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b0:	089b      	lsrs	r3, r3, #2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037b8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6493      	str	r3, [r2, #72]	@ 0x48
 80037c0:	e007      	b.n	80037d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	009a      	lsls	r2, r3, #2
 80037ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003808 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80037cc:	4413      	add	r3, r2
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3b08      	subs	r3, #8
 80037da:	4a0c      	ldr	r2, [pc, #48]	@ (800380c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003810 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80037e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 031f 	and.w	r3, r3, #31
 80037f0:	2201      	movs	r2, #1
 80037f2:	409a      	lsls	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	40020407 	.word	0x40020407
 8003808:	4002081c 	.word	0x4002081c
 800380c:	cccccccd 	.word	0xcccccccd
 8003810:	40020880 	.word	0x40020880

08003814 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	461a      	mov	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a08      	ldr	r2, [pc, #32]	@ (8003858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003836:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	3b01      	subs	r3, #1
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	2201      	movs	r2, #1
 8003842:	409a      	lsls	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	1000823f 	.word	0x1000823f
 8003858:	40020940 	.word	0x40020940

0800385c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800386a:	e166      	b.n	8003b3a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	2101      	movs	r1, #1
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	fa01 f303 	lsl.w	r3, r1, r3
 8003878:	4013      	ands	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2b00      	cmp	r3, #0
 8003880:	f000 8158 	beq.w	8003b34 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b01      	cmp	r3, #1
 800388e:	d005      	beq.n	800389c <HAL_GPIO_Init+0x40>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d130      	bne.n	80038fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	2203      	movs	r2, #3
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038d2:	2201      	movs	r2, #1
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	091b      	lsrs	r3, r3, #4
 80038e8:	f003 0201 	and.w	r2, r3, #1
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	2b03      	cmp	r3, #3
 8003908:	d017      	beq.n	800393a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d123      	bne.n	800398e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	08da      	lsrs	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3208      	adds	r2, #8
 800394e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	220f      	movs	r2, #15
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	08da      	lsrs	r2, r3, #3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3208      	adds	r2, #8
 8003988:	6939      	ldr	r1, [r7, #16]
 800398a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	2203      	movs	r2, #3
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4013      	ands	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 0203 	and.w	r2, r3, #3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80b2 	beq.w	8003b34 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d0:	4b61      	ldr	r3, [pc, #388]	@ (8003b58 <HAL_GPIO_Init+0x2fc>)
 80039d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d4:	4a60      	ldr	r2, [pc, #384]	@ (8003b58 <HAL_GPIO_Init+0x2fc>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6613      	str	r3, [r2, #96]	@ 0x60
 80039dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003b58 <HAL_GPIO_Init+0x2fc>)
 80039de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039e8:	4a5c      	ldr	r2, [pc, #368]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	089b      	lsrs	r3, r3, #2
 80039ee:	3302      	adds	r3, #2
 80039f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	220f      	movs	r2, #15
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a12:	d02b      	beq.n	8003a6c <HAL_GPIO_Init+0x210>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a52      	ldr	r2, [pc, #328]	@ (8003b60 <HAL_GPIO_Init+0x304>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d025      	beq.n	8003a68 <HAL_GPIO_Init+0x20c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a51      	ldr	r2, [pc, #324]	@ (8003b64 <HAL_GPIO_Init+0x308>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d01f      	beq.n	8003a64 <HAL_GPIO_Init+0x208>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a50      	ldr	r2, [pc, #320]	@ (8003b68 <HAL_GPIO_Init+0x30c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d019      	beq.n	8003a60 <HAL_GPIO_Init+0x204>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a4f      	ldr	r2, [pc, #316]	@ (8003b6c <HAL_GPIO_Init+0x310>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d013      	beq.n	8003a5c <HAL_GPIO_Init+0x200>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a4e      	ldr	r2, [pc, #312]	@ (8003b70 <HAL_GPIO_Init+0x314>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00d      	beq.n	8003a58 <HAL_GPIO_Init+0x1fc>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a4d      	ldr	r2, [pc, #308]	@ (8003b74 <HAL_GPIO_Init+0x318>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d007      	beq.n	8003a54 <HAL_GPIO_Init+0x1f8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a4c      	ldr	r2, [pc, #304]	@ (8003b78 <HAL_GPIO_Init+0x31c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_GPIO_Init+0x1f4>
 8003a4c:	2307      	movs	r3, #7
 8003a4e:	e00e      	b.n	8003a6e <HAL_GPIO_Init+0x212>
 8003a50:	2308      	movs	r3, #8
 8003a52:	e00c      	b.n	8003a6e <HAL_GPIO_Init+0x212>
 8003a54:	2306      	movs	r3, #6
 8003a56:	e00a      	b.n	8003a6e <HAL_GPIO_Init+0x212>
 8003a58:	2305      	movs	r3, #5
 8003a5a:	e008      	b.n	8003a6e <HAL_GPIO_Init+0x212>
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	e006      	b.n	8003a6e <HAL_GPIO_Init+0x212>
 8003a60:	2303      	movs	r3, #3
 8003a62:	e004      	b.n	8003a6e <HAL_GPIO_Init+0x212>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e002      	b.n	8003a6e <HAL_GPIO_Init+0x212>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <HAL_GPIO_Init+0x212>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	f002 0203 	and.w	r2, r2, #3
 8003a74:	0092      	lsls	r2, r2, #2
 8003a76:	4093      	lsls	r3, r2
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a7e:	4937      	ldr	r1, [pc, #220]	@ (8003b5c <HAL_GPIO_Init+0x300>)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	089b      	lsrs	r3, r3, #2
 8003a84:	3302      	adds	r3, #2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b7c <HAL_GPIO_Init+0x320>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ab0:	4a32      	ldr	r2, [pc, #200]	@ (8003b7c <HAL_GPIO_Init+0x320>)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ab6:	4b31      	ldr	r3, [pc, #196]	@ (8003b7c <HAL_GPIO_Init+0x320>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ada:	4a28      	ldr	r2, [pc, #160]	@ (8003b7c <HAL_GPIO_Init+0x320>)
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ae0:	4b26      	ldr	r3, [pc, #152]	@ (8003b7c <HAL_GPIO_Init+0x320>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b04:	4a1d      	ldr	r2, [pc, #116]	@ (8003b7c <HAL_GPIO_Init+0x320>)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b7c <HAL_GPIO_Init+0x320>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b2e:	4a13      	ldr	r2, [pc, #76]	@ (8003b7c <HAL_GPIO_Init+0x320>)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	3301      	adds	r3, #1
 8003b38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f47f ae91 	bne.w	800386c <HAL_GPIO_Init+0x10>
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	48000400 	.word	0x48000400
 8003b64:	48000800 	.word	0x48000800
 8003b68:	48000c00 	.word	0x48000c00
 8003b6c:	48001000 	.word	0x48001000
 8003b70:	48001400 	.word	0x48001400
 8003b74:	48001800 	.word	0x48001800
 8003b78:	48001c00 	.word	0x48001c00
 8003b7c:	40010400 	.word	0x40010400

08003b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	807b      	strh	r3, [r7, #2]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b90:	787b      	ldrb	r3, [r7, #1]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b9c:	e002      	b.n	8003ba4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bc2:	887a      	ldrh	r2, [r7, #2]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	041a      	lsls	r2, r3, #16
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	43d9      	mvns	r1, r3
 8003bce:	887b      	ldrh	r3, [r7, #2]
 8003bd0:	400b      	ands	r3, r1
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	619a      	str	r2, [r3, #24]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bee:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf0:	695a      	ldr	r2, [r3, #20]
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d006      	beq.n	8003c08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bfa:	4a05      	ldr	r2, [pc, #20]	@ (8003c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fc feae 	bl	8000964 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40010400 	.word	0x40010400

08003c14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c16:	b08f      	sub	sp, #60	@ 0x3c
 8003c18:	af0a      	add	r7, sp, #40	@ 0x28
 8003c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e116      	b.n	8003e54 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f008 f9dd 	bl	800c000 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2203      	movs	r2, #3
 8003c4a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f004 fe34 	bl	80088d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	687e      	ldr	r6, [r7, #4]
 8003c72:	466d      	mov	r5, sp
 8003c74:	f106 0410 	add.w	r4, r6, #16
 8003c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c84:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c88:	1d33      	adds	r3, r6, #4
 8003c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c8c:	6838      	ldr	r0, [r7, #0]
 8003c8e:	f004 fd47 	bl	8008720 <USB_CoreInit>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e0d7      	b.n	8003e54 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2100      	movs	r1, #0
 8003caa:	4618      	mov	r0, r3
 8003cac:	f004 fe22 	bl	80088f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	73fb      	strb	r3, [r7, #15]
 8003cb4:	e04a      	b.n	8003d4c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cb6:	7bfa      	ldrb	r2, [r7, #15]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	333d      	adds	r3, #61	@ 0x3d
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cca:	7bfa      	ldrb	r2, [r7, #15]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	333c      	adds	r3, #60	@ 0x3c
 8003cda:	7bfa      	ldrb	r2, [r7, #15]
 8003cdc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	b298      	uxth	r0, r3
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	3356      	adds	r3, #86	@ 0x56
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	3340      	adds	r3, #64	@ 0x40
 8003d06:	2200      	movs	r2, #0
 8003d08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d0a:	7bfa      	ldrb	r2, [r7, #15]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	3344      	adds	r3, #68	@ 0x44
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d1e:	7bfa      	ldrb	r2, [r7, #15]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3348      	adds	r3, #72	@ 0x48
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d32:	7bfa      	ldrb	r2, [r7, #15]
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	334c      	adds	r3, #76	@ 0x4c
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	7bfa      	ldrb	r2, [r7, #15]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d3af      	bcc.n	8003cb6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]
 8003d5a:	e044      	b.n	8003de6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	4613      	mov	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	440b      	add	r3, r1
 8003d6a:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003d6e:	2200      	movs	r2, #0
 8003d70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003d84:	7bfa      	ldrb	r2, [r7, #15]
 8003d86:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d88:	7bfa      	ldrb	r2, [r7, #15]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d9e:	7bfa      	ldrb	r2, [r7, #15]
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dca:	7bfa      	ldrb	r2, [r7, #15]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	3301      	adds	r3, #1
 8003de4:	73fb      	strb	r3, [r7, #15]
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d3b5      	bcc.n	8003d5c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	687e      	ldr	r6, [r7, #4]
 8003df8:	466d      	mov	r5, sp
 8003dfa:	f106 0410 	add.w	r4, r6, #16
 8003dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e0e:	1d33      	adds	r3, r6, #4
 8003e10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e12:	6838      	ldr	r0, [r7, #0]
 8003e14:	f004 fdba 	bl	800898c <USB_DevInit>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e014      	b.n	8003e54 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d102      	bne.n	8003e48 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f001 f86a 	bl	8004f1c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f005 fd68 	bl	8009922 <USB_DevDisconnect>

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e5c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_PCD_Start+0x1c>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e01c      	b.n	8003eb2 <HAL_PCD_Start+0x56>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f004 fd09 	bl	80088b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f005 fd1c 	bl	80098e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003eba:	b590      	push	{r4, r7, lr}
 8003ebc:	b08d      	sub	sp, #52	@ 0x34
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f005 fdda 	bl	8009a8a <USB_GetMode>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f040 847e 	bne.w	80047da <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f005 fd3e 	bl	8009964 <USB_ReadInterrupts>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8474 	beq.w	80047d8 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	0a1b      	lsrs	r3, r3, #8
 8003efa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f005 fd2b 	bl	8009964 <USB_ReadInterrupts>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d107      	bne.n	8003f28 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f002 0202 	and.w	r2, r2, #2
 8003f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f005 fd19 	bl	8009964 <USB_ReadInterrupts>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b10      	cmp	r3, #16
 8003f3a:	d161      	bne.n	8004000 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0210 	bic.w	r2, r2, #16
 8003f4a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f003 020f 	and.w	r2, r3, #15
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4413      	add	r3, r2
 8003f68:	3304      	adds	r3, #4
 8003f6a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	0c5b      	lsrs	r3, r3, #17
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d124      	bne.n	8003fc2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d035      	beq.n	8003ff0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	6a38      	ldr	r0, [r7, #32]
 8003f98:	f005 fb50 	bl	800963c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	091b      	lsrs	r3, r3, #4
 8003fa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fa8:	441a      	add	r2, r3
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fba:	441a      	add	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	615a      	str	r2, [r3, #20]
 8003fc0:	e016      	b.n	8003ff0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	0c5b      	lsrs	r3, r3, #17
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d110      	bne.n	8003ff0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6a38      	ldr	r0, [r7, #32]
 8003fda:	f005 fb2f 	bl	800963c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	091b      	lsrs	r3, r3, #4
 8003fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fea:	441a      	add	r2, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0210 	orr.w	r2, r2, #16
 8003ffe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f005 fcad 	bl	8009964 <USB_ReadInterrupts>
 800400a:	4603      	mov	r3, r0
 800400c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004010:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004014:	f040 80a7 	bne.w	8004166 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f005 fcb2 	bl	800998a <USB_ReadDevAllOutEpInterrupt>
 8004026:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004028:	e099      	b.n	800415e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800402a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 808e 	beq.w	8004152 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f005 fcd6 	bl	80099f2 <USB_ReadDevOutEPInterrupt>
 8004046:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00c      	beq.n	800406c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800405e:	461a      	mov	r2, r3
 8004060:	2301      	movs	r3, #1
 8004062:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004064:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fe7e 	bl	8004d68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00c      	beq.n	8004090 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004082:	461a      	mov	r2, r3
 8004084:	2308      	movs	r3, #8
 8004086:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004088:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 feba 	bl	8004e04 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a6:	461a      	mov	r2, r3
 80040a8:	2310      	movs	r3, #16
 80040aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d030      	beq.n	8004118 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040be:	2b80      	cmp	r3, #128	@ 0x80
 80040c0:	d109      	bne.n	80040d6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040d4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80040d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	3304      	adds	r3, #4
 80040ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	78db      	ldrb	r3, [r3, #3]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d108      	bne.n	8004106 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2200      	movs	r2, #0
 80040f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	4619      	mov	r1, r3
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f008 f8d3 	bl	800c2ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004112:	461a      	mov	r2, r3
 8004114:	2302      	movs	r3, #2
 8004116:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800412e:	461a      	mov	r2, r3
 8004130:	2320      	movs	r3, #32
 8004132:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800414a:	461a      	mov	r2, r3
 800414c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004150:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	3301      	adds	r3, #1
 8004156:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415a:	085b      	lsrs	r3, r3, #1
 800415c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800415e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	f47f af62 	bne.w	800402a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f005 fbfa 	bl	8009964 <USB_ReadInterrupts>
 8004170:	4603      	mov	r3, r0
 8004172:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004176:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800417a:	f040 80a4 	bne.w	80042c6 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f005 fc1b 	bl	80099be <USB_ReadDevAllInEpInterrupt>
 8004188:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800418e:	e096      	b.n	80042be <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 808b 	beq.w	80042b2 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f005 fc41 	bl	8009a2e <USB_ReadDevInEPInterrupt>
 80041ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d020      	beq.n	80041fa <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	2201      	movs	r2, #1
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	43db      	mvns	r3, r3
 80041d2:	69f9      	ldr	r1, [r7, #28]
 80041d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041d8:	4013      	ands	r3, r2
 80041da:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80041dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041de:	015a      	lsls	r2, r3, #5
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4413      	add	r3, r2
 80041e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e8:	461a      	mov	r2, r3
 80041ea:	2301      	movs	r3, #1
 80041ec:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	4619      	mov	r1, r3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f007 ffc4 	bl	800c182 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004210:	461a      	mov	r2, r3
 8004212:	2308      	movs	r3, #8
 8004214:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800422c:	461a      	mov	r2, r3
 800422e:	2310      	movs	r3, #16
 8004230:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	4413      	add	r3, r2
 8004244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004248:	461a      	mov	r2, r3
 800424a:	2340      	movs	r3, #64	@ 0x40
 800424c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d023      	beq.n	80042a0 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800425a:	6a38      	ldr	r0, [r7, #32]
 800425c:	f004 fcd8 	bl	8008c10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004262:	4613      	mov	r3, r2
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	3338      	adds	r3, #56	@ 0x38
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	4413      	add	r3, r2
 8004270:	3304      	adds	r3, #4
 8004272:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	78db      	ldrb	r3, [r3, #3]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d108      	bne.n	800428e <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2200      	movs	r2, #0
 8004280:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	b2db      	uxtb	r3, r3
 8004286:	4619      	mov	r1, r3
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f008 f821 	bl	800c2d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800429a:	461a      	mov	r2, r3
 800429c:	2302      	movs	r3, #2
 800429e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80042aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fcd2 	bl	8004c56 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	3301      	adds	r3, #1
 80042b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80042b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80042be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f47f af65 	bne.w	8004190 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f005 fb4a 	bl	8009964 <USB_ReadInterrupts>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042da:	d122      	bne.n	8004322 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042ea:	f023 0301 	bic.w	r3, r3, #1
 80042ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d108      	bne.n	800430c <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004302:	2100      	movs	r1, #0
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f008 fa55 	bl	800c7b4 <HAL_PCDEx_LPM_Callback>
 800430a:	e002      	b.n	8004312 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f007 ffa5 	bl	800c25c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f005 fb1c 	bl	8009964 <USB_ReadInterrupts>
 800432c:	4603      	mov	r3, r0
 800432e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004336:	d112      	bne.n	800435e <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b01      	cmp	r3, #1
 8004346:	d102      	bne.n	800434e <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f007 ff61 	bl	800c210 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800435c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f005 fafe 	bl	8009964 <USB_ReadInterrupts>
 8004368:	4603      	mov	r3, r0
 800436a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800436e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004372:	d121      	bne.n	80043b8 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695a      	ldr	r2, [r3, #20]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004382:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d111      	bne.n	80043b2 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800439c:	089b      	lsrs	r3, r3, #2
 800439e:	f003 020f 	and.w	r2, r3, #15
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80043a8:	2101      	movs	r1, #1
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f008 fa02 	bl	800c7b4 <HAL_PCDEx_LPM_Callback>
 80043b0:	e002      	b.n	80043b8 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f007 ff2c 	bl	800c210 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f005 fad1 	bl	8009964 <USB_ReadInterrupts>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043cc:	f040 80b5 	bne.w	800453a <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	69fa      	ldr	r2, [r7, #28]
 80043da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2110      	movs	r1, #16
 80043ea:	4618      	mov	r0, r3
 80043ec:	f004 fc10 	bl	8008c10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043f4:	e046      	b.n	8004484 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80043f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004402:	461a      	mov	r2, r3
 8004404:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004408:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800440a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004424:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004428:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004436:	461a      	mov	r2, r3
 8004438:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800443c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800443e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800444e:	0151      	lsls	r1, r2, #5
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	440a      	add	r2, r1
 8004454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004458:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800445c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800445e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800446e:	0151      	lsls	r1, r2, #5
 8004470:	69fa      	ldr	r2, [r7, #28]
 8004472:	440a      	add	r2, r1
 8004474:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004478:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800447c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800447e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004480:	3301      	adds	r3, #1
 8004482:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800448a:	429a      	cmp	r2, r3
 800448c:	d3b3      	bcc.n	80043f6 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800449c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80044a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d016      	beq.n	80044d8 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044ba:	f043 030b 	orr.w	r3, r3, #11
 80044be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044d0:	f043 030b 	orr.w	r3, r3, #11
 80044d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80044d6:	e015      	b.n	8004504 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044ea:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80044ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044fe:	f043 030b 	orr.w	r3, r3, #11
 8004502:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004512:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004516:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004522:	4619      	mov	r1, r3
 8004524:	4610      	mov	r0, r2
 8004526:	f005 fae1 	bl	8009aec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695a      	ldr	r2, [r3, #20]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004538:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f005 fa10 	bl	8009964 <USB_ReadInterrupts>
 8004544:	4603      	mov	r3, r0
 8004546:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800454a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454e:	d124      	bne.n	800459a <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f005 faa6 	bl	8009aa6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f004 fbd3 	bl	8008d0a <USB_GetDevSpeed>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681c      	ldr	r4, [r3, #0]
 8004570:	f001 fbbc 	bl	8005cec <HAL_RCC_GetHCLKFreq>
 8004574:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800457a:	b2db      	uxtb	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	4620      	mov	r0, r4
 8004580:	f004 f8fa 	bl	8008778 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f007 fe24 	bl	800c1d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004598:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f005 f9e0 	bl	8009964 <USB_ReadInterrupts>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d10a      	bne.n	80045c4 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f007 fe01 	bl	800c1b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f002 0208 	and.w	r2, r2, #8
 80045c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f005 f9cb 	bl	8009964 <USB_ReadInterrupts>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d4:	2b80      	cmp	r3, #128	@ 0x80
 80045d6:	d122      	bne.n	800461e <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045e4:	2301      	movs	r3, #1
 80045e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e8:	e014      	b.n	8004614 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ee:	4613      	mov	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d105      	bne.n	800460e <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	b2db      	uxtb	r3, r3
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 faf3 	bl	8004bf4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	3301      	adds	r3, #1
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800461a:	429a      	cmp	r2, r3
 800461c:	d3e5      	bcc.n	80045ea <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f005 f99e 	bl	8009964 <USB_ReadInterrupts>
 8004628:	4603      	mov	r3, r0
 800462a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800462e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004632:	d13b      	bne.n	80046ac <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004634:	2301      	movs	r3, #1
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
 8004638:	e02b      	b.n	8004692 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464e:	4613      	mov	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	3340      	adds	r3, #64	@ 0x40
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d115      	bne.n	800468c <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004660:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004662:	2b00      	cmp	r3, #0
 8004664:	da12      	bge.n	800468c <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800466a:	4613      	mov	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	333f      	adds	r3, #63	@ 0x3f
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004682:	b2db      	uxtb	r3, r3
 8004684:	4619      	mov	r1, r3
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 fab4 	bl	8004bf4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468e:	3301      	adds	r3, #1
 8004690:	627b      	str	r3, [r7, #36]	@ 0x24
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004698:	429a      	cmp	r2, r3
 800469a:	d3ce      	bcc.n	800463a <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695a      	ldr	r2, [r3, #20]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80046aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f005 f957 	bl	8009964 <USB_ReadInterrupts>
 80046b6:	4603      	mov	r3, r0
 80046b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046c0:	d155      	bne.n	800476e <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046c2:	2301      	movs	r3, #1
 80046c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c6:	e045      	b.n	8004754 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046d8:	6879      	ldr	r1, [r7, #4]
 80046da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d12e      	bne.n	800474e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80046f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	da2b      	bge.n	800474e <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004702:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004706:	429a      	cmp	r2, r3
 8004708:	d121      	bne.n	800474e <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800474a:	6053      	str	r3, [r2, #4]
            break;
 800474c:	e007      	b.n	800475e <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	3301      	adds	r3, #1
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800475a:	429a      	cmp	r2, r3
 800475c:	d3b4      	bcc.n	80046c8 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695a      	ldr	r2, [r3, #20]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800476c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f005 f8f6 	bl	8009964 <USB_ReadInterrupts>
 8004778:	4603      	mov	r3, r0
 800477a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800477e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004782:	d10a      	bne.n	800479a <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f007 fdb5 	bl	800c2f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695a      	ldr	r2, [r3, #20]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004798:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f005 f8e0 	bl	8009964 <USB_ReadInterrupts>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d115      	bne.n	80047da <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f007 fda5 	bl	800c310 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6859      	ldr	r1, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	e000      	b.n	80047da <HAL_PCD_IRQHandler+0x920>
      return;
 80047d8:	bf00      	nop
    }
  }
}
 80047da:	3734      	adds	r7, #52	@ 0x34
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd90      	pop	{r4, r7, pc}

080047e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_PCD_SetAddress+0x1a>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e013      	b.n	8004822 <HAL_PCD_SetAddress+0x42>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	78fa      	ldrb	r2, [r7, #3]
 8004810:	4611      	mov	r1, r2
 8004812:	4618      	mov	r0, r3
 8004814:	f005 f83e 	bl	8009894 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	4608      	mov	r0, r1
 8004834:	4611      	mov	r1, r2
 8004836:	461a      	mov	r2, r3
 8004838:	4603      	mov	r3, r0
 800483a:	70fb      	strb	r3, [r7, #3]
 800483c:	460b      	mov	r3, r1
 800483e:	803b      	strh	r3, [r7, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800484c:	2b00      	cmp	r3, #0
 800484e:	da0f      	bge.n	8004870 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004850:	78fb      	ldrb	r3, [r7, #3]
 8004852:	f003 020f 	and.w	r2, r3, #15
 8004856:	4613      	mov	r3, r2
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	3338      	adds	r3, #56	@ 0x38
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	4413      	add	r3, r2
 8004864:	3304      	adds	r3, #4
 8004866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	705a      	strb	r2, [r3, #1]
 800486e:	e00f      	b.n	8004890 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	f003 020f 	and.w	r2, r3, #15
 8004876:	4613      	mov	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4413      	add	r3, r2
 8004886:	3304      	adds	r3, #4
 8004888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004890:	78fb      	ldrb	r3, [r7, #3]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	b2da      	uxtb	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800489c:	883a      	ldrh	r2, [r7, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	78ba      	ldrb	r2, [r7, #2]
 80048a6:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	461a      	mov	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048ba:	78bb      	ldrb	r3, [r7, #2]
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d102      	bne.n	80048c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_PCD_EP_Open+0xaa>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e00e      	b.n	80048f2 <HAL_PCD_EP_Open+0xc8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f004 fa30 	bl	8008d48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80048f0:	7afb      	ldrb	r3, [r7, #11]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
 8004902:	460b      	mov	r3, r1
 8004904:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004906:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800490a:	2b00      	cmp	r3, #0
 800490c:	da0f      	bge.n	800492e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800490e:	78fb      	ldrb	r3, [r7, #3]
 8004910:	f003 020f 	and.w	r2, r3, #15
 8004914:	4613      	mov	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	3338      	adds	r3, #56	@ 0x38
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4413      	add	r3, r2
 8004922:	3304      	adds	r3, #4
 8004924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	705a      	strb	r2, [r3, #1]
 800492c:	e00f      	b.n	800494e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	f003 020f 	and.w	r2, r3, #15
 8004934:	4613      	mov	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	4413      	add	r3, r2
 8004944:	3304      	adds	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800494e:	78fb      	ldrb	r3, [r7, #3]
 8004950:	f003 030f 	and.w	r3, r3, #15
 8004954:	b2da      	uxtb	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_PCD_EP_Close+0x6e>
 8004964:	2302      	movs	r3, #2
 8004966:	e00e      	b.n	8004986 <HAL_PCD_EP_Close+0x8c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68f9      	ldr	r1, [r7, #12]
 8004976:	4618      	mov	r0, r3
 8004978:	f004 fa6e 	bl	8008e58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b086      	sub	sp, #24
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
 800499a:	460b      	mov	r3, r1
 800499c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800499e:	7afb      	ldrb	r3, [r7, #11]
 80049a0:	f003 020f 	and.w	r2, r3, #15
 80049a4:	4613      	mov	r3, r2
 80049a6:	00db      	lsls	r3, r3, #3
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	4413      	add	r3, r2
 80049b4:	3304      	adds	r3, #4
 80049b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2200      	movs	r2, #0
 80049c8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2200      	movs	r2, #0
 80049ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049d0:	7afb      	ldrb	r3, [r7, #11]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6979      	ldr	r1, [r7, #20]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f004 fb14 	bl	8009010 <USB_EPStartXfer>

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	460b      	mov	r3, r1
 80049fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80049fe:	78fb      	ldrb	r3, [r7, #3]
 8004a00:	f003 020f 	and.w	r2, r3, #15
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004a14:	681b      	ldr	r3, [r3, #0]
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a32:	7afb      	ldrb	r3, [r7, #11]
 8004a34:	f003 020f 	and.w	r2, r3, #15
 8004a38:	4613      	mov	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	3338      	adds	r3, #56	@ 0x38
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4413      	add	r3, r2
 8004a46:	3304      	adds	r3, #4
 8004a48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a62:	7afb      	ldrb	r3, [r7, #11]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6979      	ldr	r1, [r7, #20]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f004 facb 	bl	8009010 <USB_EPStartXfer>

  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3718      	adds	r7, #24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	f003 020f 	and.w	r2, r3, #15
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d901      	bls.n	8004aa2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e04e      	b.n	8004b40 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004aa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da0f      	bge.n	8004aca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 020f 	and.w	r2, r3, #15
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	3338      	adds	r3, #56	@ 0x38
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	3304      	adds	r3, #4
 8004ac0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	705a      	strb	r2, [r3, #1]
 8004ac8:	e00d      	b.n	8004ae6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	4413      	add	r3, r2
 8004adc:	3304      	adds	r3, #4
 8004ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_PCD_EP_SetStall+0x82>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e01c      	b.n	8004b40 <HAL_PCD_EP_SetStall+0xbc>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f004 fde9 	bl	80096ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d108      	bne.n	8004b36 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f004 ffdb 	bl	8009aec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	f003 020f 	and.w	r2, r3, #15
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d901      	bls.n	8004b66 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e042      	b.n	8004bec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	da0f      	bge.n	8004b8e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	f003 020f 	and.w	r2, r3, #15
 8004b74:	4613      	mov	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	3338      	adds	r3, #56	@ 0x38
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	4413      	add	r3, r2
 8004b82:	3304      	adds	r3, #4
 8004b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	705a      	strb	r2, [r3, #1]
 8004b8c:	e00f      	b.n	8004bae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	f003 020f 	and.w	r2, r3, #15
 8004b94:	4613      	mov	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_PCD_EP_ClrStall+0x86>
 8004bca:	2302      	movs	r3, #2
 8004bcc:	e00e      	b.n	8004bec <HAL_PCD_EP_ClrStall+0xa4>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68f9      	ldr	r1, [r7, #12]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f004 fdf3 	bl	80097c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	da0c      	bge.n	8004c22 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	f003 020f 	and.w	r2, r3, #15
 8004c0e:	4613      	mov	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4413      	add	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	3338      	adds	r3, #56	@ 0x38
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	e00c      	b.n	8004c3c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	4613      	mov	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4413      	add	r3, r2
 8004c38:	3304      	adds	r3, #4
 8004c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68f9      	ldr	r1, [r7, #12]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f004 fc16 	bl	8009474 <USB_EPStopXfer>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004c4c:	7afb      	ldrb	r3, [r7, #11]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b088      	sub	sp, #32
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	3338      	adds	r3, #56	@ 0x38
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	4413      	add	r3, r2
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d901      	bls.n	8004c8e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e067      	b.n	8004d5e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d902      	bls.n	8004caa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3303      	adds	r3, #3
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cb2:	e026      	b.n	8004d02 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d902      	bls.n	8004cd0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	3303      	adds	r3, #3
 8004cd4:	089b      	lsrs	r3, r3, #2
 8004cd6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	68d9      	ldr	r1, [r3, #12]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	6978      	ldr	r0, [r7, #20]
 8004ce6:	f004 fc6f 	bl	80095c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	441a      	add	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	441a      	add	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d809      	bhi.n	8004d2c <PCD_WriteEmptyTxFifo+0xd6>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d203      	bcs.n	8004d2c <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1c3      	bne.n	8004cb4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d811      	bhi.n	8004d5c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	2201      	movs	r2, #1
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	43db      	mvns	r3, r3
 8004d52:	6939      	ldr	r1, [r7, #16]
 8004d54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d58:	4013      	ands	r3, r2
 8004d5a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3720      	adds	r7, #32
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	333c      	adds	r3, #60	@ 0x3c
 8004d80:	3304      	adds	r3, #4
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a19      	ldr	r2, [pc, #100]	@ (8004e00 <PCD_EP_OutXfrComplete_int+0x98>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d124      	bne.n	8004de8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db4:	461a      	mov	r2, r3
 8004db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dba:	6093      	str	r3, [r2, #8]
 8004dbc:	e01a      	b.n	8004df4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f003 0320 	and.w	r3, r3, #32
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	2320      	movs	r3, #32
 8004dd8:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	4619      	mov	r1, r3
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f007 f9b3 	bl	800c14c <HAL_PCD_DataOutStageCallback>
 8004de6:	e005      	b.n	8004df4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	4619      	mov	r1, r3
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f007 f9ac 	bl	800c14c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	4f54310a 	.word	0x4f54310a

08004e04 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	333c      	adds	r3, #60	@ 0x3c
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4a0c      	ldr	r2, [pc, #48]	@ (8004e68 <PCD_EP_OutSetupPacket_int+0x64>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d90e      	bls.n	8004e58 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d009      	beq.n	8004e58 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e50:	461a      	mov	r2, r3
 8004e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e56:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f007 f965 	bl	800c128 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3718      	adds	r7, #24
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	4f54300a 	.word	0x4f54300a

08004e6c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	70fb      	strb	r3, [r7, #3]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e82:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d107      	bne.n	8004e9a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004e8a:	883b      	ldrh	r3, [r7, #0]
 8004e8c:	0419      	lsls	r1, r3, #16
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e98:	e028      	b.n	8004eec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea0:	0c1b      	lsrs	r3, r3, #16
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	73fb      	strb	r3, [r7, #15]
 8004eac:	e00d      	b.n	8004eca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	3340      	adds	r3, #64	@ 0x40
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	0c1b      	lsrs	r3, r3, #16
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	73fb      	strb	r3, [r7, #15]
 8004eca:	7bfa      	ldrb	r2, [r7, #15]
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d3ec      	bcc.n	8004eae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ed4:	883b      	ldrh	r3, [r7, #0]
 8004ed6:	0418      	lsls	r0, r3, #16
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6819      	ldr	r1, [r3, #0]
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	4302      	orrs	r2, r0
 8004ee4:	3340      	adds	r3, #64	@ 0x40
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	887a      	ldrh	r2, [r7, #2]
 8004f0c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f4e:	f043 0303 	orr.w	r3, r3, #3
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f68:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f74:	d102      	bne.n	8004f7c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f7a:	e00b      	b.n	8004f94 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004f7c:	4b08      	ldr	r3, [pc, #32]	@ (8004fa0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f8a:	d102      	bne.n	8004f92 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004f8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f90:	e000      	b.n	8004f94 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004f92:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40007000 	.word	0x40007000

08004fa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d141      	bne.n	8005036 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fb2:	4b4b      	ldr	r3, [pc, #300]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fbe:	d131      	bne.n	8005024 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fc0:	4b47      	ldr	r3, [pc, #284]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fc6:	4a46      	ldr	r2, [pc, #280]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fd0:	4b43      	ldr	r3, [pc, #268]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004fd8:	4a41      	ldr	r2, [pc, #260]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004fe0:	4b40      	ldr	r3, [pc, #256]	@ (80050e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2232      	movs	r2, #50	@ 0x32
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	4a3f      	ldr	r2, [pc, #252]	@ (80050e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	0c9b      	lsrs	r3, r3, #18
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ff6:	e002      	b.n	8004ffe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ffe:	4b38      	ldr	r3, [pc, #224]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500a:	d102      	bne.n	8005012 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1f2      	bne.n	8004ff8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005012:	4b33      	ldr	r3, [pc, #204]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800501a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501e:	d158      	bne.n	80050d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e057      	b.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005024:	4b2e      	ldr	r3, [pc, #184]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800502a:	4a2d      	ldr	r2, [pc, #180]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800502c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005030:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005034:	e04d      	b.n	80050d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800503c:	d141      	bne.n	80050c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800503e:	4b28      	ldr	r3, [pc, #160]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800504a:	d131      	bne.n	80050b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800504c:	4b24      	ldr	r3, [pc, #144]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005052:	4a23      	ldr	r2, [pc, #140]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005058:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800505c:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005064:	4a1e      	ldr	r2, [pc, #120]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800506a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800506c:	4b1d      	ldr	r3, [pc, #116]	@ (80050e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2232      	movs	r2, #50	@ 0x32
 8005072:	fb02 f303 	mul.w	r3, r2, r3
 8005076:	4a1c      	ldr	r2, [pc, #112]	@ (80050e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005078:	fba2 2303 	umull	r2, r3, r2, r3
 800507c:	0c9b      	lsrs	r3, r3, #18
 800507e:	3301      	adds	r3, #1
 8005080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005082:	e002      	b.n	800508a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	3b01      	subs	r3, #1
 8005088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800508a:	4b15      	ldr	r3, [pc, #84]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005096:	d102      	bne.n	800509e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1f2      	bne.n	8005084 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800509e:	4b10      	ldr	r3, [pc, #64]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050aa:	d112      	bne.n	80050d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e011      	b.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050b0:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050b6:	4a0a      	ldr	r2, [pc, #40]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050c0:	e007      	b.n	80050d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050c2:	4b07      	ldr	r3, [pc, #28]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050ca:	4a05      	ldr	r2, [pc, #20]	@ (80050e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050d0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	40007000 	.word	0x40007000
 80050e4:	20000000 	.word	0x20000000
 80050e8:	431bde83 	.word	0x431bde83

080050ec <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80050f0:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <HAL_PWREx_EnableVddUSB+0x1c>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	4a04      	ldr	r2, [pc, #16]	@ (8005108 <HAL_PWREx_EnableVddUSB+0x1c>)
 80050f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050fa:	6053      	str	r3, [r2, #4]
}
 80050fc:	bf00      	nop
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	40007000 	.word	0x40007000

0800510c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005110:	4b05      	ldr	r3, [pc, #20]	@ (8005128 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4a04      	ldr	r2, [pc, #16]	@ (8005128 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800511a:	6053      	str	r3, [r2, #4]
}
 800511c:	bf00      	nop
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40007000 	.word	0x40007000

0800512c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b088      	sub	sp, #32
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d102      	bne.n	8005140 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	f000 bc08 	b.w	8005950 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005140:	4b96      	ldr	r3, [pc, #600]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 030c 	and.w	r3, r3, #12
 8005148:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800514a:	4b94      	ldr	r3, [pc, #592]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 80e4 	beq.w	800532a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d007      	beq.n	8005178 <HAL_RCC_OscConfig+0x4c>
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	2b0c      	cmp	r3, #12
 800516c:	f040 808b 	bne.w	8005286 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2b01      	cmp	r3, #1
 8005174:	f040 8087 	bne.w	8005286 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005178:	4b88      	ldr	r3, [pc, #544]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_RCC_OscConfig+0x64>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e3df      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1a      	ldr	r2, [r3, #32]
 8005194:	4b81      	ldr	r3, [pc, #516]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <HAL_RCC_OscConfig+0x7e>
 80051a0:	4b7e      	ldr	r3, [pc, #504]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051a8:	e005      	b.n	80051b6 <HAL_RCC_OscConfig+0x8a>
 80051aa:	4b7c      	ldr	r3, [pc, #496]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80051ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d223      	bcs.n	8005202 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fdcc 	bl	8005d5c <RCC_SetFlashLatencyFromMSIRange>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e3c0      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051ce:	4b73      	ldr	r3, [pc, #460]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a72      	ldr	r2, [pc, #456]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80051d4:	f043 0308 	orr.w	r3, r3, #8
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	4b70      	ldr	r3, [pc, #448]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	496d      	ldr	r1, [pc, #436]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051ec:	4b6b      	ldr	r3, [pc, #428]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	4968      	ldr	r1, [pc, #416]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	604b      	str	r3, [r1, #4]
 8005200:	e025      	b.n	800524e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005202:	4b66      	ldr	r3, [pc, #408]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a65      	ldr	r2, [pc, #404]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005208:	f043 0308 	orr.w	r3, r3, #8
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	4b63      	ldr	r3, [pc, #396]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	4960      	ldr	r1, [pc, #384]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 800521c:	4313      	orrs	r3, r2
 800521e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005220:	4b5e      	ldr	r3, [pc, #376]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	495b      	ldr	r1, [pc, #364]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005230:	4313      	orrs	r3, r2
 8005232:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fd8c 	bl	8005d5c <RCC_SetFlashLatencyFromMSIRange>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e380      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800524e:	f000 fcc1 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8005252:	4602      	mov	r2, r0
 8005254:	4b51      	ldr	r3, [pc, #324]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	4950      	ldr	r1, [pc, #320]	@ (80053a0 <HAL_RCC_OscConfig+0x274>)
 8005260:	5ccb      	ldrb	r3, [r1, r3]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	fa22 f303 	lsr.w	r3, r2, r3
 800526a:	4a4e      	ldr	r2, [pc, #312]	@ (80053a4 <HAL_RCC_OscConfig+0x278>)
 800526c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800526e:	4b4e      	ldr	r3, [pc, #312]	@ (80053a8 <HAL_RCC_OscConfig+0x27c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f7fc fa10 	bl	8001698 <HAL_InitTick>
 8005278:	4603      	mov	r3, r0
 800527a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d052      	beq.n	8005328 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	e364      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d032      	beq.n	80052f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800528e:	4b43      	ldr	r3, [pc, #268]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a42      	ldr	r2, [pc, #264]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800529a:	f7fc fa4d 	bl	8001738 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052a2:	f7fc fa49 	bl	8001738 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e34d      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052b4:	4b39      	ldr	r3, [pc, #228]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052c0:	4b36      	ldr	r3, [pc, #216]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a35      	ldr	r2, [pc, #212]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80052c6:	f043 0308 	orr.w	r3, r3, #8
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4b33      	ldr	r3, [pc, #204]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	4930      	ldr	r1, [pc, #192]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052de:	4b2f      	ldr	r3, [pc, #188]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	492b      	ldr	r1, [pc, #172]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	604b      	str	r3, [r1, #4]
 80052f2:	e01a      	b.n	800532a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052f4:	4b29      	ldr	r3, [pc, #164]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a28      	ldr	r2, [pc, #160]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005300:	f7fc fa1a 	bl	8001738 <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005308:	f7fc fa16 	bl	8001738 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e31a      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800531a:	4b20      	ldr	r3, [pc, #128]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x1dc>
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005328:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d073      	beq.n	800541e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d005      	beq.n	8005348 <HAL_RCC_OscConfig+0x21c>
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b0c      	cmp	r3, #12
 8005340:	d10e      	bne.n	8005360 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d10b      	bne.n	8005360 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005348:	4b14      	ldr	r3, [pc, #80]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d063      	beq.n	800541c <HAL_RCC_OscConfig+0x2f0>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d15f      	bne.n	800541c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e2f7      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005368:	d106      	bne.n	8005378 <HAL_RCC_OscConfig+0x24c>
 800536a:	4b0c      	ldr	r3, [pc, #48]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a0b      	ldr	r2, [pc, #44]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005374:	6013      	str	r3, [r2, #0]
 8005376:	e025      	b.n	80053c4 <HAL_RCC_OscConfig+0x298>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005380:	d114      	bne.n	80053ac <HAL_RCC_OscConfig+0x280>
 8005382:	4b06      	ldr	r3, [pc, #24]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a05      	ldr	r2, [pc, #20]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005388:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	4b03      	ldr	r3, [pc, #12]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a02      	ldr	r2, [pc, #8]	@ (800539c <HAL_RCC_OscConfig+0x270>)
 8005394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	e013      	b.n	80053c4 <HAL_RCC_OscConfig+0x298>
 800539c:	40021000 	.word	0x40021000
 80053a0:	0800c960 	.word	0x0800c960
 80053a4:	20000000 	.word	0x20000000
 80053a8:	20000004 	.word	0x20000004
 80053ac:	4ba0      	ldr	r3, [pc, #640]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a9f      	ldr	r2, [pc, #636]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 80053b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	4b9d      	ldr	r3, [pc, #628]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a9c      	ldr	r2, [pc, #624]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 80053be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d013      	beq.n	80053f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053cc:	f7fc f9b4 	bl	8001738 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d4:	f7fc f9b0 	bl	8001738 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b64      	cmp	r3, #100	@ 0x64
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e2b4      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053e6:	4b92      	ldr	r3, [pc, #584]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCC_OscConfig+0x2a8>
 80053f2:	e014      	b.n	800541e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f4:	f7fc f9a0 	bl	8001738 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053fc:	f7fc f99c 	bl	8001738 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b64      	cmp	r3, #100	@ 0x64
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e2a0      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800540e:	4b88      	ldr	r3, [pc, #544]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1f0      	bne.n	80053fc <HAL_RCC_OscConfig+0x2d0>
 800541a:	e000      	b.n	800541e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800541c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d060      	beq.n	80054ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b04      	cmp	r3, #4
 800542e:	d005      	beq.n	800543c <HAL_RCC_OscConfig+0x310>
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b0c      	cmp	r3, #12
 8005434:	d119      	bne.n	800546a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d116      	bne.n	800546a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800543c:	4b7c      	ldr	r3, [pc, #496]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <HAL_RCC_OscConfig+0x328>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e27d      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005454:	4b76      	ldr	r3, [pc, #472]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	061b      	lsls	r3, r3, #24
 8005462:	4973      	ldr	r1, [pc, #460]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005464:	4313      	orrs	r3, r2
 8005466:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005468:	e040      	b.n	80054ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d023      	beq.n	80054ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005472:	4b6f      	ldr	r3, [pc, #444]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a6e      	ldr	r2, [pc, #440]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800547c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547e:	f7fc f95b 	bl	8001738 <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005484:	e008      	b.n	8005498 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005486:	f7fc f957 	bl	8001738 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e25b      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005498:	4b65      	ldr	r3, [pc, #404]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0f0      	beq.n	8005486 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a4:	4b62      	ldr	r3, [pc, #392]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	061b      	lsls	r3, r3, #24
 80054b2:	495f      	ldr	r1, [pc, #380]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	604b      	str	r3, [r1, #4]
 80054b8:	e018      	b.n	80054ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ba:	4b5d      	ldr	r3, [pc, #372]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a5c      	ldr	r2, [pc, #368]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 80054c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c6:	f7fc f937 	bl	8001738 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054ce:	f7fc f933 	bl	8001738 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e237      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054e0:	4b53      	ldr	r3, [pc, #332]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f0      	bne.n	80054ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d03c      	beq.n	8005572 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01c      	beq.n	800553a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005500:	4b4b      	ldr	r3, [pc, #300]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005506:	4a4a      	ldr	r2, [pc, #296]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005510:	f7fc f912 	bl	8001738 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005518:	f7fc f90e 	bl	8001738 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b02      	cmp	r3, #2
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e212      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800552a:	4b41      	ldr	r3, [pc, #260]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 800552c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ef      	beq.n	8005518 <HAL_RCC_OscConfig+0x3ec>
 8005538:	e01b      	b.n	8005572 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800553a:	4b3d      	ldr	r3, [pc, #244]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 800553c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005540:	4a3b      	ldr	r2, [pc, #236]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554a:	f7fc f8f5 	bl	8001738 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005550:	e008      	b.n	8005564 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005552:	f7fc f8f1 	bl	8001738 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e1f5      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005564:	4b32      	ldr	r3, [pc, #200]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ef      	bne.n	8005552 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0304 	and.w	r3, r3, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 80a6 	beq.w	80056cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005580:	2300      	movs	r3, #0
 8005582:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005584:	4b2a      	ldr	r3, [pc, #168]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10d      	bne.n	80055ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005590:	4b27      	ldr	r3, [pc, #156]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005594:	4a26      	ldr	r2, [pc, #152]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800559a:	6593      	str	r3, [r2, #88]	@ 0x58
 800559c:	4b24      	ldr	r3, [pc, #144]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 800559e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055a8:	2301      	movs	r3, #1
 80055aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ac:	4b21      	ldr	r3, [pc, #132]	@ (8005634 <HAL_RCC_OscConfig+0x508>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d118      	bne.n	80055ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005634 <HAL_RCC_OscConfig+0x508>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005634 <HAL_RCC_OscConfig+0x508>)
 80055be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055c4:	f7fc f8b8 	bl	8001738 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055cc:	f7fc f8b4 	bl	8001738 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e1b8      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055de:	4b15      	ldr	r3, [pc, #84]	@ (8005634 <HAL_RCC_OscConfig+0x508>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d108      	bne.n	8005604 <HAL_RCC_OscConfig+0x4d8>
 80055f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f8:	4a0d      	ldr	r2, [pc, #52]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005602:	e029      	b.n	8005658 <HAL_RCC_OscConfig+0x52c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b05      	cmp	r3, #5
 800560a:	d115      	bne.n	8005638 <HAL_RCC_OscConfig+0x50c>
 800560c:	4b08      	ldr	r3, [pc, #32]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005612:	4a07      	ldr	r2, [pc, #28]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005614:	f043 0304 	orr.w	r3, r3, #4
 8005618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800561c:	4b04      	ldr	r3, [pc, #16]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005622:	4a03      	ldr	r2, [pc, #12]	@ (8005630 <HAL_RCC_OscConfig+0x504>)
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800562c:	e014      	b.n	8005658 <HAL_RCC_OscConfig+0x52c>
 800562e:	bf00      	nop
 8005630:	40021000 	.word	0x40021000
 8005634:	40007000 	.word	0x40007000
 8005638:	4b9d      	ldr	r3, [pc, #628]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563e:	4a9c      	ldr	r2, [pc, #624]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005648:	4b99      	ldr	r3, [pc, #612]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564e:	4a98      	ldr	r2, [pc, #608]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 8005650:	f023 0304 	bic.w	r3, r3, #4
 8005654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d016      	beq.n	800568e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005660:	f7fc f86a 	bl	8001738 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005666:	e00a      	b.n	800567e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005668:	f7fc f866 	bl	8001738 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005676:	4293      	cmp	r3, r2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e168      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800567e:	4b8c      	ldr	r3, [pc, #560]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 8005680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0ed      	beq.n	8005668 <HAL_RCC_OscConfig+0x53c>
 800568c:	e015      	b.n	80056ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568e:	f7fc f853 	bl	8001738 <HAL_GetTick>
 8005692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005694:	e00a      	b.n	80056ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005696:	f7fc f84f 	bl	8001738 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e151      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056ac:	4b80      	ldr	r3, [pc, #512]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1ed      	bne.n	8005696 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ba:	7ffb      	ldrb	r3, [r7, #31]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d105      	bne.n	80056cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056c0:	4b7b      	ldr	r3, [pc, #492]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 80056c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c4:	4a7a      	ldr	r2, [pc, #488]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 80056c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d03c      	beq.n	8005752 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d01c      	beq.n	800571a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056e0:	4b73      	ldr	r3, [pc, #460]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 80056e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056e6:	4a72      	ldr	r2, [pc, #456]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f0:	f7fc f822 	bl	8001738 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056f8:	f7fc f81e 	bl	8001738 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e122      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800570a:	4b69      	ldr	r3, [pc, #420]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 800570c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ef      	beq.n	80056f8 <HAL_RCC_OscConfig+0x5cc>
 8005718:	e01b      	b.n	8005752 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800571a:	4b65      	ldr	r3, [pc, #404]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 800571c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005720:	4a63      	ldr	r2, [pc, #396]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572a:	f7fc f805 	bl	8001738 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005732:	f7fc f801 	bl	8001738 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e105      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005744:	4b5a      	ldr	r3, [pc, #360]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 8005746:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1ef      	bne.n	8005732 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	2b00      	cmp	r3, #0
 8005758:	f000 80f9 	beq.w	800594e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005760:	2b02      	cmp	r3, #2
 8005762:	f040 80cf 	bne.w	8005904 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005766:	4b52      	ldr	r3, [pc, #328]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f003 0203 	and.w	r2, r3, #3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	429a      	cmp	r2, r3
 8005778:	d12c      	bne.n	80057d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005784:	3b01      	subs	r3, #1
 8005786:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005788:	429a      	cmp	r2, r3
 800578a:	d123      	bne.n	80057d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005796:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005798:	429a      	cmp	r2, r3
 800579a:	d11b      	bne.n	80057d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d113      	bne.n	80057d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b6:	085b      	lsrs	r3, r3, #1
 80057b8:	3b01      	subs	r3, #1
 80057ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057bc:	429a      	cmp	r2, r3
 80057be:	d109      	bne.n	80057d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	085b      	lsrs	r3, r3, #1
 80057cc:	3b01      	subs	r3, #1
 80057ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d071      	beq.n	80058b8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	2b0c      	cmp	r3, #12
 80057d8:	d068      	beq.n	80058ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80057da:	4b35      	ldr	r3, [pc, #212]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80057e6:	4b32      	ldr	r3, [pc, #200]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e0ac      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80057f6:	4b2e      	ldr	r3, [pc, #184]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2d      	ldr	r2, [pc, #180]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 80057fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005800:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005802:	f7fb ff99 	bl	8001738 <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580a:	f7fb ff95 	bl	8001738 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e099      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800581c:	4b24      	ldr	r3, [pc, #144]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f0      	bne.n	800580a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005828:	4b21      	ldr	r3, [pc, #132]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	4b21      	ldr	r3, [pc, #132]	@ (80058b4 <HAL_RCC_OscConfig+0x788>)
 800582e:	4013      	ands	r3, r2
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005838:	3a01      	subs	r2, #1
 800583a:	0112      	lsls	r2, r2, #4
 800583c:	4311      	orrs	r1, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005842:	0212      	lsls	r2, r2, #8
 8005844:	4311      	orrs	r1, r2
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800584a:	0852      	lsrs	r2, r2, #1
 800584c:	3a01      	subs	r2, #1
 800584e:	0552      	lsls	r2, r2, #21
 8005850:	4311      	orrs	r1, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005856:	0852      	lsrs	r2, r2, #1
 8005858:	3a01      	subs	r2, #1
 800585a:	0652      	lsls	r2, r2, #25
 800585c:	4311      	orrs	r1, r2
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005862:	06d2      	lsls	r2, r2, #27
 8005864:	430a      	orrs	r2, r1
 8005866:	4912      	ldr	r1, [pc, #72]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 8005868:	4313      	orrs	r3, r2
 800586a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800586c:	4b10      	ldr	r3, [pc, #64]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a0f      	ldr	r2, [pc, #60]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 8005872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005876:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005878:	4b0d      	ldr	r3, [pc, #52]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	4a0c      	ldr	r2, [pc, #48]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 800587e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005882:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005884:	f7fb ff58 	bl	8001738 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800588c:	f7fb ff54 	bl	8001738 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e058      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800589e:	4b04      	ldr	r3, [pc, #16]	@ (80058b0 <HAL_RCC_OscConfig+0x784>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058aa:	e050      	b.n	800594e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e04f      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
 80058b0:	40021000 	.word	0x40021000
 80058b4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058b8:	4b27      	ldr	r3, [pc, #156]	@ (8005958 <HAL_RCC_OscConfig+0x82c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d144      	bne.n	800594e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80058c4:	4b24      	ldr	r3, [pc, #144]	@ (8005958 <HAL_RCC_OscConfig+0x82c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a23      	ldr	r2, [pc, #140]	@ (8005958 <HAL_RCC_OscConfig+0x82c>)
 80058ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058d0:	4b21      	ldr	r3, [pc, #132]	@ (8005958 <HAL_RCC_OscConfig+0x82c>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	4a20      	ldr	r2, [pc, #128]	@ (8005958 <HAL_RCC_OscConfig+0x82c>)
 80058d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058dc:	f7fb ff2c 	bl	8001738 <HAL_GetTick>
 80058e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e4:	f7fb ff28 	bl	8001738 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e02c      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f6:	4b18      	ldr	r3, [pc, #96]	@ (8005958 <HAL_RCC_OscConfig+0x82c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0x7b8>
 8005902:	e024      	b.n	800594e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	2b0c      	cmp	r3, #12
 8005908:	d01f      	beq.n	800594a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590a:	4b13      	ldr	r3, [pc, #76]	@ (8005958 <HAL_RCC_OscConfig+0x82c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a12      	ldr	r2, [pc, #72]	@ (8005958 <HAL_RCC_OscConfig+0x82c>)
 8005910:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005916:	f7fb ff0f 	bl	8001738 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591e:	f7fb ff0b 	bl	8001738 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e00f      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005930:	4b09      	ldr	r3, [pc, #36]	@ (8005958 <HAL_RCC_OscConfig+0x82c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f0      	bne.n	800591e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800593c:	4b06      	ldr	r3, [pc, #24]	@ (8005958 <HAL_RCC_OscConfig+0x82c>)
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	4905      	ldr	r1, [pc, #20]	@ (8005958 <HAL_RCC_OscConfig+0x82c>)
 8005942:	4b06      	ldr	r3, [pc, #24]	@ (800595c <HAL_RCC_OscConfig+0x830>)
 8005944:	4013      	ands	r3, r2
 8005946:	60cb      	str	r3, [r1, #12]
 8005948:	e001      	b.n	800594e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40021000 	.word	0x40021000
 800595c:	feeefffc 	.word	0xfeeefffc

08005960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e11d      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005978:	4b90      	ldr	r3, [pc, #576]	@ (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d910      	bls.n	80059a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005986:	4b8d      	ldr	r3, [pc, #564]	@ (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 020f 	bic.w	r2, r3, #15
 800598e:	498b      	ldr	r1, [pc, #556]	@ (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	4313      	orrs	r3, r2
 8005994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005996:	4b89      	ldr	r3, [pc, #548]	@ (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d001      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e105      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d010      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	4b81      	ldr	r3, [pc, #516]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d908      	bls.n	80059d6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c4:	4b7e      	ldr	r3, [pc, #504]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	497b      	ldr	r1, [pc, #492]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d079      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d11e      	bne.n	8005a28 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ea:	4b75      	ldr	r3, [pc, #468]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e0dc      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80059fa:	f000 fa09 	bl	8005e10 <RCC_GetSysClockFreqFromPLLSource>
 80059fe:	4603      	mov	r3, r0
 8005a00:	4a70      	ldr	r2, [pc, #448]	@ (8005bc4 <HAL_RCC_ClockConfig+0x264>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d946      	bls.n	8005a94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a06:	4b6e      	ldr	r3, [pc, #440]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d140      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a12:	4b6b      	ldr	r3, [pc, #428]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a1a:	4a69      	ldr	r2, [pc, #420]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a22:	2380      	movs	r3, #128	@ 0x80
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e035      	b.n	8005a94 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d107      	bne.n	8005a40 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a30:	4b63      	ldr	r3, [pc, #396]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d115      	bne.n	8005a68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0b9      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d107      	bne.n	8005a58 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a48:	4b5d      	ldr	r3, [pc, #372]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d109      	bne.n	8005a68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e0ad      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a58:	4b59      	ldr	r3, [pc, #356]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0a5      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005a68:	f000 f8b4 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	4a55      	ldr	r2, [pc, #340]	@ (8005bc4 <HAL_RCC_ClockConfig+0x264>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d90f      	bls.n	8005a94 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005a74:	4b52      	ldr	r3, [pc, #328]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d109      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a80:	4b4f      	ldr	r3, [pc, #316]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a88:	4a4d      	ldr	r2, [pc, #308]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a8e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a90:	2380      	movs	r3, #128	@ 0x80
 8005a92:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a94:	4b4a      	ldr	r3, [pc, #296]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f023 0203 	bic.w	r2, r3, #3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4947      	ldr	r1, [pc, #284]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa6:	f7fb fe47 	bl	8001738 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aac:	e00a      	b.n	8005ac4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aae:	f7fb fe43 	bl	8001738 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e077      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac4:	4b3e      	ldr	r3, [pc, #248]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 020c 	and.w	r2, r3, #12
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d1eb      	bne.n	8005aae <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b80      	cmp	r3, #128	@ 0x80
 8005ada:	d105      	bne.n	8005ae8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005adc:	4b38      	ldr	r3, [pc, #224]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	4a37      	ldr	r2, [pc, #220]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005ae2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ae6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d010      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	4b31      	ldr	r3, [pc, #196]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d208      	bcs.n	8005b16 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b04:	4b2e      	ldr	r3, [pc, #184]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	492b      	ldr	r1, [pc, #172]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b16:	4b29      	ldr	r3, [pc, #164]	@ (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d210      	bcs.n	8005b46 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b24:	4b25      	ldr	r3, [pc, #148]	@ (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f023 020f 	bic.w	r2, r3, #15
 8005b2c:	4923      	ldr	r1, [pc, #140]	@ (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b34:	4b21      	ldr	r3, [pc, #132]	@ (8005bbc <HAL_RCC_ClockConfig+0x25c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d001      	beq.n	8005b46 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e036      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d008      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b52:	4b1b      	ldr	r3, [pc, #108]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	4918      	ldr	r1, [pc, #96]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d009      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b70:	4b13      	ldr	r3, [pc, #76]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4910      	ldr	r1, [pc, #64]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b84:	f000 f826 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc0 <HAL_RCC_ClockConfig+0x260>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	490c      	ldr	r1, [pc, #48]	@ (8005bc8 <HAL_RCC_ClockConfig+0x268>)
 8005b96:	5ccb      	ldrb	r3, [r1, r3]
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bcc <HAL_RCC_ClockConfig+0x26c>)
 8005ba2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd0 <HAL_RCC_ClockConfig+0x270>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fb fd75 	bl	8001698 <HAL_InitTick>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	73fb      	strb	r3, [r7, #15]

  return status;
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	40022000 	.word	0x40022000
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	04c4b400 	.word	0x04c4b400
 8005bc8:	0800c960 	.word	0x0800c960
 8005bcc:	20000000 	.word	0x20000000
 8005bd0:	20000004 	.word	0x20000004

08005bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b089      	sub	sp, #36	@ 0x24
 8005bd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
 8005bde:	2300      	movs	r3, #0
 8005be0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005be2:	4b3e      	ldr	r3, [pc, #248]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 030c 	and.w	r3, r3, #12
 8005bea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bec:	4b3b      	ldr	r3, [pc, #236]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <HAL_RCC_GetSysClockFreq+0x34>
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b0c      	cmp	r3, #12
 8005c00:	d121      	bne.n	8005c46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d11e      	bne.n	8005c46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c08:	4b34      	ldr	r3, [pc, #208]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0308 	and.w	r3, r3, #8
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d107      	bne.n	8005c24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005c14:	4b31      	ldr	r3, [pc, #196]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	61fb      	str	r3, [r7, #28]
 8005c22:	e005      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005c24:	4b2d      	ldr	r3, [pc, #180]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	091b      	lsrs	r3, r3, #4
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005c30:	4a2b      	ldr	r2, [pc, #172]	@ (8005ce0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10d      	bne.n	8005c5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c44:	e00a      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d102      	bne.n	8005c52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c4e:	61bb      	str	r3, [r7, #24]
 8005c50:	e004      	b.n	8005c5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d101      	bne.n	8005c5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c58:	4b23      	ldr	r3, [pc, #140]	@ (8005ce8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	2b0c      	cmp	r3, #12
 8005c60:	d134      	bne.n	8005ccc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c62:	4b1e      	ldr	r3, [pc, #120]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d003      	beq.n	8005c7a <HAL_RCC_GetSysClockFreq+0xa6>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d003      	beq.n	8005c80 <HAL_RCC_GetSysClockFreq+0xac>
 8005c78:	e005      	b.n	8005c86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ce4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005c7c:	617b      	str	r3, [r7, #20]
      break;
 8005c7e:	e005      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005c80:	4b19      	ldr	r3, [pc, #100]	@ (8005ce8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005c82:	617b      	str	r3, [r7, #20]
      break;
 8005c84:	e002      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	617b      	str	r3, [r7, #20]
      break;
 8005c8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c8c:	4b13      	ldr	r3, [pc, #76]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	3301      	adds	r3, #1
 8005c98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005c9a:	4b10      	ldr	r3, [pc, #64]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	0a1b      	lsrs	r3, r3, #8
 8005ca0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	fb03 f202 	mul.w	r2, r3, r2
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	0e5b      	lsrs	r3, r3, #25
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005ccc:	69bb      	ldr	r3, [r7, #24]
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3724      	adds	r7, #36	@ 0x24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40021000 	.word	0x40021000
 8005ce0:	0800c978 	.word	0x0800c978
 8005ce4:	00f42400 	.word	0x00f42400
 8005ce8:	007a1200 	.word	0x007a1200

08005cec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cf0:	4b03      	ldr	r3, [pc, #12]	@ (8005d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	20000000 	.word	0x20000000

08005d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d08:	f7ff fff0 	bl	8005cec <HAL_RCC_GetHCLKFreq>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	f003 0307 	and.w	r3, r3, #7
 8005d18:	4904      	ldr	r1, [pc, #16]	@ (8005d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d1a:	5ccb      	ldrb	r3, [r1, r3]
 8005d1c:	f003 031f 	and.w	r3, r3, #31
 8005d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	0800c970 	.word	0x0800c970

08005d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005d34:	f7ff ffda 	bl	8005cec <HAL_RCC_GetHCLKFreq>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	0adb      	lsrs	r3, r3, #11
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	4904      	ldr	r1, [pc, #16]	@ (8005d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d46:	5ccb      	ldrb	r3, [r1, r3]
 8005d48:	f003 031f 	and.w	r3, r3, #31
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40021000 	.word	0x40021000
 8005d58:	0800c970 	.word	0x0800c970

08005d5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d64:	2300      	movs	r3, #0
 8005d66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d68:	4b27      	ldr	r3, [pc, #156]	@ (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d74:	f7ff f8f6 	bl	8004f64 <HAL_PWREx_GetVoltageRange>
 8005d78:	6178      	str	r0, [r7, #20]
 8005d7a:	e014      	b.n	8005da6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d7c:	4b22      	ldr	r3, [pc, #136]	@ (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d80:	4a21      	ldr	r2, [pc, #132]	@ (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d86:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d88:	4b1f      	ldr	r3, [pc, #124]	@ (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d94:	f7ff f8e6 	bl	8004f64 <HAL_PWREx_GetVoltageRange>
 8005d98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005e08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005da4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dac:	d10b      	bne.n	8005dc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b80      	cmp	r3, #128	@ 0x80
 8005db2:	d913      	bls.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2ba0      	cmp	r3, #160	@ 0xa0
 8005db8:	d902      	bls.n	8005dc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005dba:	2302      	movs	r3, #2
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	e00d      	b.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	613b      	str	r3, [r7, #16]
 8005dc4:	e00a      	b.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dca:	d902      	bls.n	8005dd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005dcc:	2302      	movs	r3, #2
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	e004      	b.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b70      	cmp	r3, #112	@ 0x70
 8005dd6:	d101      	bne.n	8005ddc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005dd8:	2301      	movs	r3, #1
 8005dda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f023 020f 	bic.w	r2, r3, #15
 8005de4:	4909      	ldr	r1, [pc, #36]	@ (8005e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005dec:	4b07      	ldr	r3, [pc, #28]	@ (8005e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d001      	beq.n	8005dfe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3718      	adds	r7, #24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40022000 	.word	0x40022000

08005e10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e16:	4b2d      	ldr	r3, [pc, #180]	@ (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d00b      	beq.n	8005e3e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b03      	cmp	r3, #3
 8005e2a:	d825      	bhi.n	8005e78 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d008      	beq.n	8005e44 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d11f      	bne.n	8005e78 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005e38:	4b25      	ldr	r3, [pc, #148]	@ (8005ed0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005e3a:	613b      	str	r3, [r7, #16]
    break;
 8005e3c:	e01f      	b.n	8005e7e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005e3e:	4b25      	ldr	r3, [pc, #148]	@ (8005ed4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005e40:	613b      	str	r3, [r7, #16]
    break;
 8005e42:	e01c      	b.n	8005e7e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e44:	4b21      	ldr	r3, [pc, #132]	@ (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d107      	bne.n	8005e60 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e50:	4b1e      	ldr	r3, [pc, #120]	@ (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e56:	0a1b      	lsrs	r3, r3, #8
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	e005      	b.n	8005e6c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e60:	4b1a      	ldr	r3, [pc, #104]	@ (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	091b      	lsrs	r3, r3, #4
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005e6c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ed8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e74:	613b      	str	r3, [r7, #16]
    break;
 8005e76:	e002      	b.n	8005e7e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	613b      	str	r3, [r7, #16]
    break;
 8005e7c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e7e:	4b13      	ldr	r3, [pc, #76]	@ (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	f003 030f 	and.w	r3, r3, #15
 8005e88:	3301      	adds	r3, #1
 8005e8a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	0a1b      	lsrs	r3, r3, #8
 8005e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	fb03 f202 	mul.w	r2, r3, r2
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ea4:	4b09      	ldr	r3, [pc, #36]	@ (8005ecc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	0e5b      	lsrs	r3, r3, #25
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	3301      	adds	r3, #1
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005ebe:	683b      	ldr	r3, [r7, #0]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	00f42400 	.word	0x00f42400
 8005ed4:	007a1200 	.word	0x007a1200
 8005ed8:	0800c978 	.word	0x0800c978

08005edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ee8:	2300      	movs	r3, #0
 8005eea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d040      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005efc:	2b80      	cmp	r3, #128	@ 0x80
 8005efe:	d02a      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f00:	2b80      	cmp	r3, #128	@ 0x80
 8005f02:	d825      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f04:	2b60      	cmp	r3, #96	@ 0x60
 8005f06:	d026      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005f08:	2b60      	cmp	r3, #96	@ 0x60
 8005f0a:	d821      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f0c:	2b40      	cmp	r3, #64	@ 0x40
 8005f0e:	d006      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005f10:	2b40      	cmp	r3, #64	@ 0x40
 8005f12:	d81d      	bhi.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005f18:	2b20      	cmp	r3, #32
 8005f1a:	d010      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005f1c:	e018      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f1e:	4b89      	ldr	r3, [pc, #548]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	4a88      	ldr	r2, [pc, #544]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f28:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f2a:	e015      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	2100      	movs	r1, #0
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fb02 	bl	800653c <RCCEx_PLLSAI1_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f3c:	e00c      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3320      	adds	r3, #32
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 fbed 	bl	8006724 <RCCEx_PLLSAI2_Config>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f4e:	e003      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	74fb      	strb	r3, [r7, #19]
      break;
 8005f54:	e000      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f58:	7cfb      	ldrb	r3, [r7, #19]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10b      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f5e:	4b79      	ldr	r3, [pc, #484]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f64:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f6c:	4975      	ldr	r1, [pc, #468]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005f74:	e001      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	7cfb      	ldrb	r3, [r7, #19]
 8005f78:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d047      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f8e:	d030      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f94:	d82a      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f9a:	d02a      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fa0:	d824      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fa6:	d008      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fac:	d81e      	bhi.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fb6:	d010      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005fb8:	e018      	b.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005fba:	4b62      	ldr	r3, [pc, #392]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	4a61      	ldr	r2, [pc, #388]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fc4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fc6:	e015      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	2100      	movs	r1, #0
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fab4 	bl	800653c <RCCEx_PLLSAI1_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fd8:	e00c      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3320      	adds	r3, #32
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fb9f 	bl	8006724 <RCCEx_PLLSAI2_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005fea:	e003      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	74fb      	strb	r3, [r7, #19]
      break;
 8005ff0:	e000      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff4:	7cfb      	ldrb	r3, [r7, #19]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ffa:	4b52      	ldr	r3, [pc, #328]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006000:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006008:	494e      	ldr	r1, [pc, #312]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800600a:	4313      	orrs	r3, r2
 800600c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006010:	e001      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006012:	7cfb      	ldrb	r3, [r7, #19]
 8006014:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 809f 	beq.w	8006162 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006024:	2300      	movs	r3, #0
 8006026:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006028:	4b46      	ldr	r3, [pc, #280]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800602a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800602c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006034:	2301      	movs	r3, #1
 8006036:	e000      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006038:	2300      	movs	r3, #0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00d      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800603e:	4b41      	ldr	r3, [pc, #260]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006042:	4a40      	ldr	r2, [pc, #256]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006048:	6593      	str	r3, [r2, #88]	@ 0x58
 800604a:	4b3e      	ldr	r3, [pc, #248]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800604c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006056:	2301      	movs	r3, #1
 8006058:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800605a:	4b3b      	ldr	r3, [pc, #236]	@ (8006148 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a3a      	ldr	r2, [pc, #232]	@ (8006148 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006060:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006066:	f7fb fb67 	bl	8001738 <HAL_GetTick>
 800606a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800606c:	e009      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800606e:	f7fb fb63 	bl	8001738 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	2b02      	cmp	r3, #2
 800607a:	d902      	bls.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	74fb      	strb	r3, [r7, #19]
        break;
 8006080:	e005      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006082:	4b31      	ldr	r3, [pc, #196]	@ (8006148 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0ef      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800608e:	7cfb      	ldrb	r3, [r7, #19]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d15b      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006094:	4b2b      	ldr	r3, [pc, #172]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800609a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800609e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01f      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d019      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060b2:	4b24      	ldr	r3, [pc, #144]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060be:	4b21      	ldr	r3, [pc, #132]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ce:	4b1d      	ldr	r3, [pc, #116]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d4:	4a1b      	ldr	r2, [pc, #108]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060de:	4a19      	ldr	r2, [pc, #100]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d016      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f0:	f7fb fb22 	bl	8001738 <HAL_GetTick>
 80060f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060f6:	e00b      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f8:	f7fb fb1e 	bl	8001738 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006106:	4293      	cmp	r3, r2
 8006108:	d902      	bls.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	74fb      	strb	r3, [r7, #19]
            break;
 800610e:	e006      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006110:	4b0c      	ldr	r3, [pc, #48]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0ec      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800611e:	7cfb      	ldrb	r3, [r7, #19]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10c      	bne.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006124:	4b07      	ldr	r3, [pc, #28]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006134:	4903      	ldr	r1, [pc, #12]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800613c:	e008      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800613e:	7cfb      	ldrb	r3, [r7, #19]
 8006140:	74bb      	strb	r3, [r7, #18]
 8006142:	e005      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006144:	40021000 	.word	0x40021000
 8006148:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614c:	7cfb      	ldrb	r3, [r7, #19]
 800614e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006150:	7c7b      	ldrb	r3, [r7, #17]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d105      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006156:	4ba0      	ldr	r3, [pc, #640]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800615a:	4a9f      	ldr	r2, [pc, #636]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800615c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006160:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800616e:	4b9a      	ldr	r3, [pc, #616]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006174:	f023 0203 	bic.w	r2, r3, #3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617c:	4996      	ldr	r1, [pc, #600]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006190:	4b91      	ldr	r3, [pc, #580]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006196:	f023 020c 	bic.w	r2, r3, #12
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619e:	498e      	ldr	r1, [pc, #568]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061b2:	4b89      	ldr	r3, [pc, #548]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c0:	4985      	ldr	r1, [pc, #532]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061d4:	4b80      	ldr	r3, [pc, #512]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e2:	497d      	ldr	r1, [pc, #500]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061f6:	4b78      	ldr	r3, [pc, #480]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006204:	4974      	ldr	r1, [pc, #464]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006218:	4b6f      	ldr	r3, [pc, #444]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006226:	496c      	ldr	r1, [pc, #432]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800623a:	4b67      	ldr	r3, [pc, #412]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006240:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006248:	4963      	ldr	r1, [pc, #396]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800625c:	4b5e      	ldr	r3, [pc, #376]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006262:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800626a:	495b      	ldr	r1, [pc, #364]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800627e:	4b56      	ldr	r3, [pc, #344]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006284:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800628c:	4952      	ldr	r1, [pc, #328]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062a0:	4b4d      	ldr	r3, [pc, #308]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ae:	494a      	ldr	r1, [pc, #296]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062c2:	4b45      	ldr	r3, [pc, #276]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d0:	4941      	ldr	r1, [pc, #260]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062e4:	4b3c      	ldr	r3, [pc, #240]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062ea:	f023 0203 	bic.w	r2, r3, #3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f2:	4939      	ldr	r1, [pc, #228]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d028      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006306:	4b34      	ldr	r3, [pc, #208]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800630c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006314:	4930      	ldr	r1, [pc, #192]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006320:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006324:	d106      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006326:	4b2c      	ldr	r3, [pc, #176]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	4a2b      	ldr	r2, [pc, #172]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800632c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006330:	60d3      	str	r3, [r2, #12]
 8006332:	e011      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006338:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800633c:	d10c      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	3304      	adds	r3, #4
 8006342:	2101      	movs	r1, #1
 8006344:	4618      	mov	r0, r3
 8006346:	f000 f8f9 	bl	800653c <RCCEx_PLLSAI1_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800634e:	7cfb      	ldrb	r3, [r7, #19]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006354:	7cfb      	ldrb	r3, [r7, #19]
 8006356:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d04d      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006368:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800636c:	d108      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800636e:	4b1a      	ldr	r3, [pc, #104]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006370:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006374:	4a18      	ldr	r2, [pc, #96]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006376:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800637a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800637e:	e012      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006380:	4b15      	ldr	r3, [pc, #84]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006386:	4a14      	ldr	r2, [pc, #80]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006388:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800638c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006390:	4b11      	ldr	r3, [pc, #68]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006396:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800639e:	490e      	ldr	r1, [pc, #56]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80063ae:	d106      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063b0:	4b09      	ldr	r3, [pc, #36]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4a08      	ldr	r2, [pc, #32]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ba:	60d3      	str	r3, [r2, #12]
 80063bc:	e020      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063c6:	d109      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063c8:	4b03      	ldr	r3, [pc, #12]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	4a02      	ldr	r2, [pc, #8]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80063ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063d2:	60d3      	str	r3, [r2, #12]
 80063d4:	e014      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80063d6:	bf00      	nop
 80063d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80063e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063e4:	d10c      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	3304      	adds	r3, #4
 80063ea:	2101      	movs	r1, #1
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 f8a5 	bl	800653c <RCCEx_PLLSAI1_Config>
 80063f2:	4603      	mov	r3, r0
 80063f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80063f6:	7cfb      	ldrb	r3, [r7, #19]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80063fc:	7cfb      	ldrb	r3, [r7, #19]
 80063fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d028      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800640c:	4b4a      	ldr	r3, [pc, #296]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800640e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006412:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800641a:	4947      	ldr	r1, [pc, #284]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800641c:	4313      	orrs	r3, r2
 800641e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006426:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800642a:	d106      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800642c:	4b42      	ldr	r3, [pc, #264]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	4a41      	ldr	r2, [pc, #260]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006436:	60d3      	str	r3, [r2, #12]
 8006438:	e011      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800643e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006442:	d10c      	bne.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	2101      	movs	r1, #1
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f876 	bl	800653c <RCCEx_PLLSAI1_Config>
 8006450:	4603      	mov	r3, r0
 8006452:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006454:	7cfb      	ldrb	r3, [r7, #19]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800645a:	7cfb      	ldrb	r3, [r7, #19]
 800645c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01e      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800646a:	4b33      	ldr	r3, [pc, #204]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800646c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006470:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800647a:	492f      	ldr	r1, [pc, #188]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006488:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800648c:	d10c      	bne.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	3304      	adds	r3, #4
 8006492:	2102      	movs	r1, #2
 8006494:	4618      	mov	r0, r3
 8006496:	f000 f851 	bl	800653c <RCCEx_PLLSAI1_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800649e:	7cfb      	ldrb	r3, [r7, #19]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80064a4:	7cfb      	ldrb	r3, [r7, #19]
 80064a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064b4:	4b20      	ldr	r3, [pc, #128]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064ba:	f023 0204 	bic.w	r2, r3, #4
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064c4:	491c      	ldr	r1, [pc, #112]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80064d8:	4b17      	ldr	r3, [pc, #92]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80064de:	f023 0218 	bic.w	r2, r3, #24
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e8:	4913      	ldr	r1, [pc, #76]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d017      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80064fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80064fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006502:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800650c:	490a      	ldr	r1, [pc, #40]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800650e:	4313      	orrs	r3, r2
 8006510:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800651a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800651e:	d105      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006520:	4b05      	ldr	r3, [pc, #20]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	4a04      	ldr	r2, [pc, #16]	@ (8006538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006526:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800652a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800652c:	7cbb      	ldrb	r3, [r7, #18]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40021000 	.word	0x40021000

0800653c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800654a:	4b72      	ldr	r3, [pc, #456]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00e      	beq.n	8006574 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006556:	4b6f      	ldr	r3, [pc, #444]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f003 0203 	and.w	r2, r3, #3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	429a      	cmp	r2, r3
 8006564:	d103      	bne.n	800656e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
       ||
 800656a:	2b00      	cmp	r3, #0
 800656c:	d142      	bne.n	80065f4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	73fb      	strb	r3, [r7, #15]
 8006572:	e03f      	b.n	80065f4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b03      	cmp	r3, #3
 800657a:	d018      	beq.n	80065ae <RCCEx_PLLSAI1_Config+0x72>
 800657c:	2b03      	cmp	r3, #3
 800657e:	d825      	bhi.n	80065cc <RCCEx_PLLSAI1_Config+0x90>
 8006580:	2b01      	cmp	r3, #1
 8006582:	d002      	beq.n	800658a <RCCEx_PLLSAI1_Config+0x4e>
 8006584:	2b02      	cmp	r3, #2
 8006586:	d009      	beq.n	800659c <RCCEx_PLLSAI1_Config+0x60>
 8006588:	e020      	b.n	80065cc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800658a:	4b62      	ldr	r3, [pc, #392]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d11d      	bne.n	80065d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800659a:	e01a      	b.n	80065d2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800659c:	4b5d      	ldr	r3, [pc, #372]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d116      	bne.n	80065d6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065ac:	e013      	b.n	80065d6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065ae:	4b59      	ldr	r3, [pc, #356]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10f      	bne.n	80065da <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065ba:	4b56      	ldr	r3, [pc, #344]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065ca:	e006      	b.n	80065da <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	73fb      	strb	r3, [r7, #15]
      break;
 80065d0:	e004      	b.n	80065dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80065d2:	bf00      	nop
 80065d4:	e002      	b.n	80065dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80065d6:	bf00      	nop
 80065d8:	e000      	b.n	80065dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80065da:	bf00      	nop
    }

    if(status == HAL_OK)
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d108      	bne.n	80065f4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80065e2:	4b4c      	ldr	r3, [pc, #304]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f023 0203 	bic.w	r2, r3, #3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4949      	ldr	r1, [pc, #292]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f040 8086 	bne.w	8006708 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80065fc:	4b45      	ldr	r3, [pc, #276]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a44      	ldr	r2, [pc, #272]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006602:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006608:	f7fb f896 	bl	8001738 <HAL_GetTick>
 800660c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800660e:	e009      	b.n	8006624 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006610:	f7fb f892 	bl	8001738 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d902      	bls.n	8006624 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	73fb      	strb	r3, [r7, #15]
        break;
 8006622:	e005      	b.n	8006630 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006624:	4b3b      	ldr	r3, [pc, #236]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1ef      	bne.n	8006610 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006630:	7bfb      	ldrb	r3, [r7, #15]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d168      	bne.n	8006708 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d113      	bne.n	8006664 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800663c:	4b35      	ldr	r3, [pc, #212]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	4b35      	ldr	r3, [pc, #212]	@ (8006718 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006642:	4013      	ands	r3, r2
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	6892      	ldr	r2, [r2, #8]
 8006648:	0211      	lsls	r1, r2, #8
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	68d2      	ldr	r2, [r2, #12]
 800664e:	06d2      	lsls	r2, r2, #27
 8006650:	4311      	orrs	r1, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6852      	ldr	r2, [r2, #4]
 8006656:	3a01      	subs	r2, #1
 8006658:	0112      	lsls	r2, r2, #4
 800665a:	430a      	orrs	r2, r1
 800665c:	492d      	ldr	r1, [pc, #180]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 800665e:	4313      	orrs	r3, r2
 8006660:	610b      	str	r3, [r1, #16]
 8006662:	e02d      	b.n	80066c0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d115      	bne.n	8006696 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800666a:	4b2a      	ldr	r3, [pc, #168]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 800666c:	691a      	ldr	r2, [r3, #16]
 800666e:	4b2b      	ldr	r3, [pc, #172]	@ (800671c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006670:	4013      	ands	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6892      	ldr	r2, [r2, #8]
 8006676:	0211      	lsls	r1, r2, #8
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6912      	ldr	r2, [r2, #16]
 800667c:	0852      	lsrs	r2, r2, #1
 800667e:	3a01      	subs	r2, #1
 8006680:	0552      	lsls	r2, r2, #21
 8006682:	4311      	orrs	r1, r2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6852      	ldr	r2, [r2, #4]
 8006688:	3a01      	subs	r2, #1
 800668a:	0112      	lsls	r2, r2, #4
 800668c:	430a      	orrs	r2, r1
 800668e:	4921      	ldr	r1, [pc, #132]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006690:	4313      	orrs	r3, r2
 8006692:	610b      	str	r3, [r1, #16]
 8006694:	e014      	b.n	80066c0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006696:	4b1f      	ldr	r3, [pc, #124]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006698:	691a      	ldr	r2, [r3, #16]
 800669a:	4b21      	ldr	r3, [pc, #132]	@ (8006720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800669c:	4013      	ands	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6892      	ldr	r2, [r2, #8]
 80066a2:	0211      	lsls	r1, r2, #8
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6952      	ldr	r2, [r2, #20]
 80066a8:	0852      	lsrs	r2, r2, #1
 80066aa:	3a01      	subs	r2, #1
 80066ac:	0652      	lsls	r2, r2, #25
 80066ae:	4311      	orrs	r1, r2
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6852      	ldr	r2, [r2, #4]
 80066b4:	3a01      	subs	r2, #1
 80066b6:	0112      	lsls	r2, r2, #4
 80066b8:	430a      	orrs	r2, r1
 80066ba:	4916      	ldr	r1, [pc, #88]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80066c0:	4b14      	ldr	r3, [pc, #80]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a13      	ldr	r2, [pc, #76]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80066ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066cc:	f7fb f834 	bl	8001738 <HAL_GetTick>
 80066d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066d2:	e009      	b.n	80066e8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066d4:	f7fb f830 	bl	8001738 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d902      	bls.n	80066e8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80066e2:	2303      	movs	r3, #3
 80066e4:	73fb      	strb	r3, [r7, #15]
          break;
 80066e6:	e005      	b.n	80066f4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0ef      	beq.n	80066d4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d106      	bne.n	8006708 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80066fa:	4b06      	ldr	r3, [pc, #24]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	4904      	ldr	r1, [pc, #16]	@ (8006714 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006704:	4313      	orrs	r3, r2
 8006706:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006708:	7bfb      	ldrb	r3, [r7, #15]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40021000 	.word	0x40021000
 8006718:	07ff800f 	.word	0x07ff800f
 800671c:	ff9f800f 	.word	0xff9f800f
 8006720:	f9ff800f 	.word	0xf9ff800f

08006724 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006732:	4b72      	ldr	r3, [pc, #456]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00e      	beq.n	800675c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800673e:	4b6f      	ldr	r3, [pc, #444]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f003 0203 	and.w	r2, r3, #3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d103      	bne.n	8006756 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
       ||
 8006752:	2b00      	cmp	r3, #0
 8006754:	d142      	bne.n	80067dc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	73fb      	strb	r3, [r7, #15]
 800675a:	e03f      	b.n	80067dc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b03      	cmp	r3, #3
 8006762:	d018      	beq.n	8006796 <RCCEx_PLLSAI2_Config+0x72>
 8006764:	2b03      	cmp	r3, #3
 8006766:	d825      	bhi.n	80067b4 <RCCEx_PLLSAI2_Config+0x90>
 8006768:	2b01      	cmp	r3, #1
 800676a:	d002      	beq.n	8006772 <RCCEx_PLLSAI2_Config+0x4e>
 800676c:	2b02      	cmp	r3, #2
 800676e:	d009      	beq.n	8006784 <RCCEx_PLLSAI2_Config+0x60>
 8006770:	e020      	b.n	80067b4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006772:	4b62      	ldr	r3, [pc, #392]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d11d      	bne.n	80067ba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006782:	e01a      	b.n	80067ba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006784:	4b5d      	ldr	r3, [pc, #372]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800678c:	2b00      	cmp	r3, #0
 800678e:	d116      	bne.n	80067be <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006794:	e013      	b.n	80067be <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006796:	4b59      	ldr	r3, [pc, #356]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10f      	bne.n	80067c2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80067a2:	4b56      	ldr	r3, [pc, #344]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d109      	bne.n	80067c2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067b2:	e006      	b.n	80067c2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
      break;
 80067b8:	e004      	b.n	80067c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80067ba:	bf00      	nop
 80067bc:	e002      	b.n	80067c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80067be:	bf00      	nop
 80067c0:	e000      	b.n	80067c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80067c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80067c4:	7bfb      	ldrb	r3, [r7, #15]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d108      	bne.n	80067dc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80067ca:	4b4c      	ldr	r3, [pc, #304]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f023 0203 	bic.w	r2, r3, #3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4949      	ldr	r1, [pc, #292]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f040 8086 	bne.w	80068f0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80067e4:	4b45      	ldr	r3, [pc, #276]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a44      	ldr	r2, [pc, #272]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80067ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067f0:	f7fa ffa2 	bl	8001738 <HAL_GetTick>
 80067f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80067f6:	e009      	b.n	800680c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067f8:	f7fa ff9e 	bl	8001738 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d902      	bls.n	800680c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	73fb      	strb	r3, [r7, #15]
        break;
 800680a:	e005      	b.n	8006818 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800680c:	4b3b      	ldr	r3, [pc, #236]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1ef      	bne.n	80067f8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006818:	7bfb      	ldrb	r3, [r7, #15]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d168      	bne.n	80068f0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d113      	bne.n	800684c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006824:	4b35      	ldr	r3, [pc, #212]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006826:	695a      	ldr	r2, [r3, #20]
 8006828:	4b35      	ldr	r3, [pc, #212]	@ (8006900 <RCCEx_PLLSAI2_Config+0x1dc>)
 800682a:	4013      	ands	r3, r2
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6892      	ldr	r2, [r2, #8]
 8006830:	0211      	lsls	r1, r2, #8
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	68d2      	ldr	r2, [r2, #12]
 8006836:	06d2      	lsls	r2, r2, #27
 8006838:	4311      	orrs	r1, r2
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6852      	ldr	r2, [r2, #4]
 800683e:	3a01      	subs	r2, #1
 8006840:	0112      	lsls	r2, r2, #4
 8006842:	430a      	orrs	r2, r1
 8006844:	492d      	ldr	r1, [pc, #180]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006846:	4313      	orrs	r3, r2
 8006848:	614b      	str	r3, [r1, #20]
 800684a:	e02d      	b.n	80068a8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d115      	bne.n	800687e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006852:	4b2a      	ldr	r3, [pc, #168]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006854:	695a      	ldr	r2, [r3, #20]
 8006856:	4b2b      	ldr	r3, [pc, #172]	@ (8006904 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006858:	4013      	ands	r3, r2
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	6892      	ldr	r2, [r2, #8]
 800685e:	0211      	lsls	r1, r2, #8
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6912      	ldr	r2, [r2, #16]
 8006864:	0852      	lsrs	r2, r2, #1
 8006866:	3a01      	subs	r2, #1
 8006868:	0552      	lsls	r2, r2, #21
 800686a:	4311      	orrs	r1, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6852      	ldr	r2, [r2, #4]
 8006870:	3a01      	subs	r2, #1
 8006872:	0112      	lsls	r2, r2, #4
 8006874:	430a      	orrs	r2, r1
 8006876:	4921      	ldr	r1, [pc, #132]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006878:	4313      	orrs	r3, r2
 800687a:	614b      	str	r3, [r1, #20]
 800687c:	e014      	b.n	80068a8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800687e:	4b1f      	ldr	r3, [pc, #124]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8006880:	695a      	ldr	r2, [r3, #20]
 8006882:	4b21      	ldr	r3, [pc, #132]	@ (8006908 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006884:	4013      	ands	r3, r2
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	6892      	ldr	r2, [r2, #8]
 800688a:	0211      	lsls	r1, r2, #8
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	6952      	ldr	r2, [r2, #20]
 8006890:	0852      	lsrs	r2, r2, #1
 8006892:	3a01      	subs	r2, #1
 8006894:	0652      	lsls	r2, r2, #25
 8006896:	4311      	orrs	r1, r2
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6852      	ldr	r2, [r2, #4]
 800689c:	3a01      	subs	r2, #1
 800689e:	0112      	lsls	r2, r2, #4
 80068a0:	430a      	orrs	r2, r1
 80068a2:	4916      	ldr	r1, [pc, #88]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80068a8:	4b14      	ldr	r3, [pc, #80]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a13      	ldr	r2, [pc, #76]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b4:	f7fa ff40 	bl	8001738 <HAL_GetTick>
 80068b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068ba:	e009      	b.n	80068d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80068bc:	f7fa ff3c 	bl	8001738 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d902      	bls.n	80068d0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	73fb      	strb	r3, [r7, #15]
          break;
 80068ce:	e005      	b.n	80068dc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80068d0:	4b0a      	ldr	r3, [pc, #40]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0ef      	beq.n	80068bc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d106      	bne.n	80068f0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80068e2:	4b06      	ldr	r3, [pc, #24]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068e4:	695a      	ldr	r2, [r3, #20]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	4904      	ldr	r1, [pc, #16]	@ (80068fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	40021000 	.word	0x40021000
 8006900:	07ff800f 	.word	0x07ff800f
 8006904:	ff9f800f 	.word	0xff9f800f
 8006908:	f9ff800f 	.word	0xf9ff800f

0800690c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e049      	b.n	80069b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d106      	bne.n	8006938 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7fa fc76 	bl	8001224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2202      	movs	r2, #2
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3304      	adds	r3, #4
 8006948:	4619      	mov	r1, r3
 800694a:	4610      	mov	r0, r2
 800694c:	f000 fb02 	bl	8006f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d001      	beq.n	80069d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e047      	b.n	8006a64 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a23      	ldr	r2, [pc, #140]	@ (8006a70 <HAL_TIM_Base_Start+0xb4>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01d      	beq.n	8006a22 <HAL_TIM_Base_Start+0x66>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ee:	d018      	beq.n	8006a22 <HAL_TIM_Base_Start+0x66>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a74 <HAL_TIM_Base_Start+0xb8>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <HAL_TIM_Base_Start+0x66>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006a78 <HAL_TIM_Base_Start+0xbc>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <HAL_TIM_Base_Start+0x66>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1c      	ldr	r2, [pc, #112]	@ (8006a7c <HAL_TIM_Base_Start+0xc0>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d009      	beq.n	8006a22 <HAL_TIM_Base_Start+0x66>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1b      	ldr	r2, [pc, #108]	@ (8006a80 <HAL_TIM_Base_Start+0xc4>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_TIM_Base_Start+0x66>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a19      	ldr	r2, [pc, #100]	@ (8006a84 <HAL_TIM_Base_Start+0xc8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d115      	bne.n	8006a4e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	4b17      	ldr	r3, [pc, #92]	@ (8006a88 <HAL_TIM_Base_Start+0xcc>)
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b06      	cmp	r3, #6
 8006a32:	d015      	beq.n	8006a60 <HAL_TIM_Base_Start+0xa4>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a3a:	d011      	beq.n	8006a60 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0201 	orr.w	r2, r2, #1
 8006a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a4c:	e008      	b.n	8006a60 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0201 	orr.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e000      	b.n	8006a62 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	40012c00 	.word	0x40012c00
 8006a74:	40000400 	.word	0x40000400
 8006a78:	40000800 	.word	0x40000800
 8006a7c:	40000c00 	.word	0x40000c00
 8006a80:	40013400 	.word	0x40013400
 8006a84:	40014000 	.word	0x40014000
 8006a88:	00010007 	.word	0x00010007

08006a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d001      	beq.n	8006aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e04f      	b.n	8006b44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0201 	orr.w	r2, r2, #1
 8006aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a23      	ldr	r2, [pc, #140]	@ (8006b50 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01d      	beq.n	8006b02 <HAL_TIM_Base_Start_IT+0x76>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ace:	d018      	beq.n	8006b02 <HAL_TIM_Base_Start_IT+0x76>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1f      	ldr	r2, [pc, #124]	@ (8006b54 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d013      	beq.n	8006b02 <HAL_TIM_Base_Start_IT+0x76>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a1e      	ldr	r2, [pc, #120]	@ (8006b58 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00e      	beq.n	8006b02 <HAL_TIM_Base_Start_IT+0x76>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8006b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d009      	beq.n	8006b02 <HAL_TIM_Base_Start_IT+0x76>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a1b      	ldr	r2, [pc, #108]	@ (8006b60 <HAL_TIM_Base_Start_IT+0xd4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d004      	beq.n	8006b02 <HAL_TIM_Base_Start_IT+0x76>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a19      	ldr	r2, [pc, #100]	@ (8006b64 <HAL_TIM_Base_Start_IT+0xd8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d115      	bne.n	8006b2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	4b17      	ldr	r3, [pc, #92]	@ (8006b68 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b06      	cmp	r3, #6
 8006b12:	d015      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0xb4>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b1a:	d011      	beq.n	8006b40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b2c:	e008      	b.n	8006b40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	e000      	b.n	8006b42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3714      	adds	r7, #20
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	40012c00 	.word	0x40012c00
 8006b54:	40000400 	.word	0x40000400
 8006b58:	40000800 	.word	0x40000800
 8006b5c:	40000c00 	.word	0x40000c00
 8006b60:	40013400 	.word	0x40013400
 8006b64:	40014000 	.word	0x40014000
 8006b68:	00010007 	.word	0x00010007

08006b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d020      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01b      	beq.n	8006bd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f06f 0202 	mvn.w	r2, #2
 8006ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f9ad 	bl	8006f16 <HAL_TIM_IC_CaptureCallback>
 8006bbc:	e005      	b.n	8006bca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f99f 	bl	8006f02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f9b0 	bl	8006f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	f003 0304 	and.w	r3, r3, #4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d020      	beq.n	8006c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d01b      	beq.n	8006c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f06f 0204 	mvn.w	r2, #4
 8006bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f987 	bl	8006f16 <HAL_TIM_IC_CaptureCallback>
 8006c08:	e005      	b.n	8006c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f979 	bl	8006f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f98a 	bl	8006f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f003 0308 	and.w	r3, r3, #8
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d020      	beq.n	8006c68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f003 0308 	and.w	r3, r3, #8
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01b      	beq.n	8006c68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0208 	mvn.w	r2, #8
 8006c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2204      	movs	r2, #4
 8006c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f003 0303 	and.w	r3, r3, #3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f961 	bl	8006f16 <HAL_TIM_IC_CaptureCallback>
 8006c54:	e005      	b.n	8006c62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f953 	bl	8006f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f964 	bl	8006f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	f003 0310 	and.w	r3, r3, #16
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d020      	beq.n	8006cb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f003 0310 	and.w	r3, r3, #16
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01b      	beq.n	8006cb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f06f 0210 	mvn.w	r2, #16
 8006c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2208      	movs	r2, #8
 8006c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f93b 	bl	8006f16 <HAL_TIM_IC_CaptureCallback>
 8006ca0:	e005      	b.n	8006cae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 f92d 	bl	8006f02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 f93e 	bl	8006f2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00c      	beq.n	8006cd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d007      	beq.n	8006cd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0201 	mvn.w	r2, #1
 8006cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7f9 ff52 	bl	8000b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00c      	beq.n	8006cfc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 faf2 	bl	80072e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00c      	beq.n	8006d20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 faea 	bl	80072f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00c      	beq.n	8006d44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f8fd 	bl	8006f3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00c      	beq.n	8006d68 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d007      	beq.n	8006d68 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0220 	mvn.w	r2, #32
 8006d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fab2 	bl	80072cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d68:	bf00      	nop
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_TIM_ConfigClockSource+0x1c>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e0b6      	b.n	8006efa <HAL_TIM_ConfigClockSource+0x18a>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006daa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dc8:	d03e      	beq.n	8006e48 <HAL_TIM_ConfigClockSource+0xd8>
 8006dca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dce:	f200 8087 	bhi.w	8006ee0 <HAL_TIM_ConfigClockSource+0x170>
 8006dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dd6:	f000 8086 	beq.w	8006ee6 <HAL_TIM_ConfigClockSource+0x176>
 8006dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dde:	d87f      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x170>
 8006de0:	2b70      	cmp	r3, #112	@ 0x70
 8006de2:	d01a      	beq.n	8006e1a <HAL_TIM_ConfigClockSource+0xaa>
 8006de4:	2b70      	cmp	r3, #112	@ 0x70
 8006de6:	d87b      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x170>
 8006de8:	2b60      	cmp	r3, #96	@ 0x60
 8006dea:	d050      	beq.n	8006e8e <HAL_TIM_ConfigClockSource+0x11e>
 8006dec:	2b60      	cmp	r3, #96	@ 0x60
 8006dee:	d877      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x170>
 8006df0:	2b50      	cmp	r3, #80	@ 0x50
 8006df2:	d03c      	beq.n	8006e6e <HAL_TIM_ConfigClockSource+0xfe>
 8006df4:	2b50      	cmp	r3, #80	@ 0x50
 8006df6:	d873      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x170>
 8006df8:	2b40      	cmp	r3, #64	@ 0x40
 8006dfa:	d058      	beq.n	8006eae <HAL_TIM_ConfigClockSource+0x13e>
 8006dfc:	2b40      	cmp	r3, #64	@ 0x40
 8006dfe:	d86f      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x170>
 8006e00:	2b30      	cmp	r3, #48	@ 0x30
 8006e02:	d064      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x15e>
 8006e04:	2b30      	cmp	r3, #48	@ 0x30
 8006e06:	d86b      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x170>
 8006e08:	2b20      	cmp	r3, #32
 8006e0a:	d060      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x15e>
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d867      	bhi.n	8006ee0 <HAL_TIM_ConfigClockSource+0x170>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d05c      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x15e>
 8006e14:	2b10      	cmp	r3, #16
 8006e16:	d05a      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x15e>
 8006e18:	e062      	b.n	8006ee0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e2a:	f000 f9a7 	bl	800717c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68ba      	ldr	r2, [r7, #8]
 8006e44:	609a      	str	r2, [r3, #8]
      break;
 8006e46:	e04f      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e58:	f000 f990 	bl	800717c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e6a:	609a      	str	r2, [r3, #8]
      break;
 8006e6c:	e03c      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f000 f904 	bl	8007088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2150      	movs	r1, #80	@ 0x50
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 f95d 	bl	8007146 <TIM_ITRx_SetConfig>
      break;
 8006e8c:	e02c      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f000 f923 	bl	80070e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2160      	movs	r1, #96	@ 0x60
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 f94d 	bl	8007146 <TIM_ITRx_SetConfig>
      break;
 8006eac:	e01c      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f000 f8e4 	bl	8007088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2140      	movs	r1, #64	@ 0x40
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 f93d 	bl	8007146 <TIM_ITRx_SetConfig>
      break;
 8006ecc:	e00c      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4610      	mov	r0, r2
 8006eda:	f000 f934 	bl	8007146 <TIM_ITRx_SetConfig>
      break;
 8006ede:	e003      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee4:	e000      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a40      	ldr	r2, [pc, #256]	@ (8007068 <TIM_Base_SetConfig+0x114>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d013      	beq.n	8006f94 <TIM_Base_SetConfig+0x40>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f72:	d00f      	beq.n	8006f94 <TIM_Base_SetConfig+0x40>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a3d      	ldr	r2, [pc, #244]	@ (800706c <TIM_Base_SetConfig+0x118>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d00b      	beq.n	8006f94 <TIM_Base_SetConfig+0x40>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a3c      	ldr	r2, [pc, #240]	@ (8007070 <TIM_Base_SetConfig+0x11c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d007      	beq.n	8006f94 <TIM_Base_SetConfig+0x40>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a3b      	ldr	r2, [pc, #236]	@ (8007074 <TIM_Base_SetConfig+0x120>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d003      	beq.n	8006f94 <TIM_Base_SetConfig+0x40>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a3a      	ldr	r2, [pc, #232]	@ (8007078 <TIM_Base_SetConfig+0x124>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d108      	bne.n	8006fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8007068 <TIM_Base_SetConfig+0x114>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01f      	beq.n	8006fee <TIM_Base_SetConfig+0x9a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fb4:	d01b      	beq.n	8006fee <TIM_Base_SetConfig+0x9a>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800706c <TIM_Base_SetConfig+0x118>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d017      	beq.n	8006fee <TIM_Base_SetConfig+0x9a>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8007070 <TIM_Base_SetConfig+0x11c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d013      	beq.n	8006fee <TIM_Base_SetConfig+0x9a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8007074 <TIM_Base_SetConfig+0x120>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00f      	beq.n	8006fee <TIM_Base_SetConfig+0x9a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a29      	ldr	r2, [pc, #164]	@ (8007078 <TIM_Base_SetConfig+0x124>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <TIM_Base_SetConfig+0x9a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a28      	ldr	r2, [pc, #160]	@ (800707c <TIM_Base_SetConfig+0x128>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <TIM_Base_SetConfig+0x9a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a27      	ldr	r2, [pc, #156]	@ (8007080 <TIM_Base_SetConfig+0x12c>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_Base_SetConfig+0x9a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a26      	ldr	r2, [pc, #152]	@ (8007084 <TIM_Base_SetConfig+0x130>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d108      	bne.n	8007000 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	4313      	orrs	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a10      	ldr	r2, [pc, #64]	@ (8007068 <TIM_Base_SetConfig+0x114>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00f      	beq.n	800704c <TIM_Base_SetConfig+0xf8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a12      	ldr	r2, [pc, #72]	@ (8007078 <TIM_Base_SetConfig+0x124>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00b      	beq.n	800704c <TIM_Base_SetConfig+0xf8>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a11      	ldr	r2, [pc, #68]	@ (800707c <TIM_Base_SetConfig+0x128>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d007      	beq.n	800704c <TIM_Base_SetConfig+0xf8>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a10      	ldr	r2, [pc, #64]	@ (8007080 <TIM_Base_SetConfig+0x12c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d003      	beq.n	800704c <TIM_Base_SetConfig+0xf8>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a0f      	ldr	r2, [pc, #60]	@ (8007084 <TIM_Base_SetConfig+0x130>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d103      	bne.n	8007054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	691a      	ldr	r2, [r3, #16]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	615a      	str	r2, [r3, #20]
}
 800705a:	bf00      	nop
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40000400 	.word	0x40000400
 8007070:	40000800 	.word	0x40000800
 8007074:	40000c00 	.word	0x40000c00
 8007078:	40013400 	.word	0x40013400
 800707c:	40014000 	.word	0x40014000
 8007080:	40014400 	.word	0x40014400
 8007084:	40014800 	.word	0x40014800

08007088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	f023 0201 	bic.w	r2, r3, #1
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	011b      	lsls	r3, r3, #4
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f023 030a 	bic.w	r3, r3, #10
 80070c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	bf00      	nop
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b087      	sub	sp, #28
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	f023 0210 	bic.w	r2, r3, #16
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	031b      	lsls	r3, r3, #12
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	4313      	orrs	r3, r2
 800711a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007122:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	621a      	str	r2, [r3, #32]
}
 800713a:	bf00      	nop
 800713c:	371c      	adds	r7, #28
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800715c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	f043 0307 	orr.w	r3, r3, #7
 8007168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	609a      	str	r2, [r3, #8]
}
 8007170:	bf00      	nop
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	021a      	lsls	r2, r3, #8
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	431a      	orrs	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	609a      	str	r2, [r3, #8]
}
 80071b0:	bf00      	nop
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e068      	b.n	80072a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a2e      	ldr	r2, [pc, #184]	@ (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d004      	beq.n	8007208 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a2d      	ldr	r2, [pc, #180]	@ (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d108      	bne.n	800721a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800720e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	4313      	orrs	r3, r2
 8007218:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007220:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1e      	ldr	r2, [pc, #120]	@ (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d01d      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007246:	d018      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a1b      	ldr	r2, [pc, #108]	@ (80072bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d013      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a1a      	ldr	r2, [pc, #104]	@ (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d00e      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a18      	ldr	r2, [pc, #96]	@ (80072c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d009      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a13      	ldr	r2, [pc, #76]	@ (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d004      	beq.n	800727a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a14      	ldr	r2, [pc, #80]	@ (80072c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d10c      	bne.n	8007294 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	4313      	orrs	r3, r2
 800728a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	40012c00 	.word	0x40012c00
 80072b8:	40013400 	.word	0x40013400
 80072bc:	40000400 	.word	0x40000400
 80072c0:	40000800 	.word	0x40000800
 80072c4:	40000c00 	.word	0x40000c00
 80072c8:	40014000 	.word	0x40014000

080072cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e042      	b.n	80073a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007320:	2b00      	cmp	r3, #0
 8007322:	d106      	bne.n	8007332 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7fa f867 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2224      	movs	r2, #36	@ 0x24
 8007336:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0201 	bic.w	r2, r2, #1
 8007348:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fe68 	bl	8008028 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fb69 	bl	8007a30 <UART_SetConfig>
 800735e:	4603      	mov	r3, r0
 8007360:	2b01      	cmp	r3, #1
 8007362:	d101      	bne.n	8007368 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e01b      	b.n	80073a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007376:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007386:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f042 0201 	orr.w	r2, r2, #1
 8007396:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fee7 	bl	800816c <UART_CheckIdleState>
 800739e:	4603      	mov	r3, r0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b0ba      	sub	sp, #232	@ 0xe8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80073d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80073d6:	4013      	ands	r3, r2
 80073d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80073dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d11b      	bne.n	800741c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d015      	beq.n	800741c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073f4:	f003 0320 	and.w	r3, r3, #32
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80073fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d009      	beq.n	800741c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 82e3 	beq.w	80079d8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	4798      	blx	r3
      }
      return;
 800741a:	e2dd      	b.n	80079d8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800741c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007420:	2b00      	cmp	r3, #0
 8007422:	f000 8123 	beq.w	800766c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007426:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800742a:	4b8d      	ldr	r3, [pc, #564]	@ (8007660 <HAL_UART_IRQHandler+0x2b8>)
 800742c:	4013      	ands	r3, r2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007432:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007436:	4b8b      	ldr	r3, [pc, #556]	@ (8007664 <HAL_UART_IRQHandler+0x2bc>)
 8007438:	4013      	ands	r3, r2
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 8116 	beq.w	800766c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007444:	f003 0301 	and.w	r3, r3, #1
 8007448:	2b00      	cmp	r3, #0
 800744a:	d011      	beq.n	8007470 <HAL_UART_IRQHandler+0xc8>
 800744c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00b      	beq.n	8007470 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2201      	movs	r2, #1
 800745e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007466:	f043 0201 	orr.w	r2, r3, #1
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d011      	beq.n	80074a0 <HAL_UART_IRQHandler+0xf8>
 800747c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2202      	movs	r2, #2
 800748e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007496:	f043 0204 	orr.w	r2, r3, #4
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d011      	beq.n	80074d0 <HAL_UART_IRQHandler+0x128>
 80074ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00b      	beq.n	80074d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2204      	movs	r2, #4
 80074be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c6:	f043 0202 	orr.w	r2, r3, #2
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074d4:	f003 0308 	and.w	r3, r3, #8
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d017      	beq.n	800750c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d105      	bne.n	80074f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80074e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80074ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007660 <HAL_UART_IRQHandler+0x2b8>)
 80074ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00b      	beq.n	800750c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2208      	movs	r2, #8
 80074fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007502:	f043 0208 	orr.w	r2, r3, #8
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800750c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007510:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007514:	2b00      	cmp	r3, #0
 8007516:	d012      	beq.n	800753e <HAL_UART_IRQHandler+0x196>
 8007518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800751c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00c      	beq.n	800753e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800752c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007534:	f043 0220 	orr.w	r2, r3, #32
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 8249 	beq.w	80079dc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800754a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b00      	cmp	r3, #0
 8007554:	d013      	beq.n	800757e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b00      	cmp	r3, #0
 8007560:	d105      	bne.n	800756e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d007      	beq.n	800757e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007584:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007592:	2b40      	cmp	r3, #64	@ 0x40
 8007594:	d005      	beq.n	80075a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800759a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d054      	beq.n	800764c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fef3 	bl	800838e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075b2:	2b40      	cmp	r3, #64	@ 0x40
 80075b4:	d146      	bne.n	8007644 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3308      	adds	r3, #8
 80075bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80075cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3308      	adds	r3, #8
 80075de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80075e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80075e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80075ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075f2:	e841 2300 	strex	r3, r2, [r1]
 80075f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80075fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1d9      	bne.n	80075b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007608:	2b00      	cmp	r3, #0
 800760a:	d017      	beq.n	800763c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007612:	4a15      	ldr	r2, [pc, #84]	@ (8007668 <HAL_UART_IRQHandler+0x2c0>)
 8007614:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800761c:	4618      	mov	r0, r3
 800761e:	f7fb ff26 	bl	800346e <HAL_DMA_Abort_IT>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d019      	beq.n	800765c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800762e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007636:	4610      	mov	r0, r2
 8007638:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763a:	e00f      	b.n	800765c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f9e1 	bl	8007a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007642:	e00b      	b.n	800765c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f9dd 	bl	8007a04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764a:	e007      	b.n	800765c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f9d9 	bl	8007a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800765a:	e1bf      	b.n	80079dc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800765c:	bf00      	nop
    return;
 800765e:	e1bd      	b.n	80079dc <HAL_UART_IRQHandler+0x634>
 8007660:	10000001 	.word	0x10000001
 8007664:	04000120 	.word	0x04000120
 8007668:	0800845b 	.word	0x0800845b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007670:	2b01      	cmp	r3, #1
 8007672:	f040 8153 	bne.w	800791c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800767a:	f003 0310 	and.w	r3, r3, #16
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 814c 	beq.w	800791c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 8145 	beq.w	800791c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2210      	movs	r2, #16
 8007698:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a4:	2b40      	cmp	r3, #64	@ 0x40
 80076a6:	f040 80bb 	bne.w	8007820 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 818f 	beq.w	80079e0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076cc:	429a      	cmp	r2, r3
 80076ce:	f080 8187 	bcs.w	80079e0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0320 	and.w	r3, r3, #32
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f040 8087 	bne.w	80077fe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007704:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800770c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800771a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800771e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007726:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1da      	bne.n	80076f0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800774a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800774c:	f023 0301 	bic.w	r3, r3, #1
 8007750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3308      	adds	r3, #8
 800775a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800775e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007762:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007766:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007770:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e1      	bne.n	800773a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3308      	adds	r3, #8
 800777c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800778c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3308      	adds	r3, #8
 8007796:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800779a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800779c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80077a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80077a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e3      	bne.n	8007776 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077cc:	f023 0310 	bic.w	r3, r3, #16
 80077d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	461a      	mov	r2, r3
 80077da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e4      	bne.n	80077bc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fb fddc 	bl	80033b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2202      	movs	r2, #2
 8007802:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007810:	b29b      	uxth	r3, r3
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	b29b      	uxth	r3, r3
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f8fd 	bl	8007a18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800781e:	e0df      	b.n	80079e0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800782c:	b29b      	uxth	r3, r3
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800783a:	b29b      	uxth	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 80d1 	beq.w	80079e4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007842:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 80cc 	beq.w	80079e4 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800785a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800785c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007860:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800786e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007870:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007872:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800787c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e4      	bne.n	800784c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	623b      	str	r3, [r7, #32]
   return(result);
 8007892:	6a3b      	ldr	r3, [r7, #32]
 8007894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007898:	f023 0301 	bic.w	r3, r3, #1
 800789c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3308      	adds	r3, #8
 80078a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80078aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80078ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e1      	bne.n	8007882 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	60fb      	str	r3, [r7, #12]
   return(result);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 0310 	bic.w	r3, r3, #16
 80078e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078f4:	61fb      	str	r3, [r7, #28]
 80078f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	69b9      	ldr	r1, [r7, #24]
 80078fa:	69fa      	ldr	r2, [r7, #28]
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	617b      	str	r3, [r7, #20]
   return(result);
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e4      	bne.n	80078d2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800790e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 f87f 	bl	8007a18 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800791a:	e063      	b.n	80079e4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800791c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007920:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00e      	beq.n	8007946 <HAL_UART_IRQHandler+0x59e>
 8007928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800792c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d008      	beq.n	8007946 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800793c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fdcc 	bl	80084dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007944:	e051      	b.n	80079ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800794e:	2b00      	cmp	r3, #0
 8007950:	d014      	beq.n	800797c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800795a:	2b00      	cmp	r3, #0
 800795c:	d105      	bne.n	800796a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800795e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007962:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d008      	beq.n	800797c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800796e:	2b00      	cmp	r3, #0
 8007970:	d03a      	beq.n	80079e8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
    }
    return;
 800797a:	e035      	b.n	80079e8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800797c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007984:	2b00      	cmp	r3, #0
 8007986:	d009      	beq.n	800799c <HAL_UART_IRQHandler+0x5f4>
 8007988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800798c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fd76 	bl	8008486 <UART_EndTransmit_IT>
    return;
 800799a:	e026      	b.n	80079ea <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800799c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d009      	beq.n	80079bc <HAL_UART_IRQHandler+0x614>
 80079a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fda5 	bl	8008504 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079ba:	e016      	b.n	80079ea <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80079bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d010      	beq.n	80079ea <HAL_UART_IRQHandler+0x642>
 80079c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	da0c      	bge.n	80079ea <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fd8d 	bl	80084f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079d6:	e008      	b.n	80079ea <HAL_UART_IRQHandler+0x642>
      return;
 80079d8:	bf00      	nop
 80079da:	e006      	b.n	80079ea <HAL_UART_IRQHandler+0x642>
    return;
 80079dc:	bf00      	nop
 80079de:	e004      	b.n	80079ea <HAL_UART_IRQHandler+0x642>
      return;
 80079e0:	bf00      	nop
 80079e2:	e002      	b.n	80079ea <HAL_UART_IRQHandler+0x642>
      return;
 80079e4:	bf00      	nop
 80079e6:	e000      	b.n	80079ea <HAL_UART_IRQHandler+0x642>
    return;
 80079e8:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80079ea:	37e8      	adds	r7, #232	@ 0xe8
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	460b      	mov	r3, r1
 8007a22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a34:	b08c      	sub	sp, #48	@ 0x30
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	689a      	ldr	r2, [r3, #8]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	4baa      	ldr	r3, [pc, #680]	@ (8007d08 <UART_SetConfig+0x2d8>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	6812      	ldr	r2, [r2, #0]
 8007a66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	699b      	ldr	r3, [r3, #24]
 8007a86:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a9f      	ldr	r2, [pc, #636]	@ (8007d0c <UART_SetConfig+0x2dc>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d004      	beq.n	8007a9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007aa6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	6812      	ldr	r2, [r2, #0]
 8007aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ab0:	430b      	orrs	r3, r1
 8007ab2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aba:	f023 010f 	bic.w	r1, r3, #15
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a90      	ldr	r2, [pc, #576]	@ (8007d10 <UART_SetConfig+0x2e0>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d125      	bne.n	8007b20 <UART_SetConfig+0xf0>
 8007ad4:	4b8f      	ldr	r3, [pc, #572]	@ (8007d14 <UART_SetConfig+0x2e4>)
 8007ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d81a      	bhi.n	8007b18 <UART_SetConfig+0xe8>
 8007ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae8 <UART_SetConfig+0xb8>)
 8007ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae8:	08007af9 	.word	0x08007af9
 8007aec:	08007b09 	.word	0x08007b09
 8007af0:	08007b01 	.word	0x08007b01
 8007af4:	08007b11 	.word	0x08007b11
 8007af8:	2301      	movs	r3, #1
 8007afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007afe:	e116      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007b00:	2302      	movs	r3, #2
 8007b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b06:	e112      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007b08:	2304      	movs	r3, #4
 8007b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b0e:	e10e      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007b10:	2308      	movs	r3, #8
 8007b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b16:	e10a      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007b18:	2310      	movs	r3, #16
 8007b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b1e:	e106      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a7c      	ldr	r2, [pc, #496]	@ (8007d18 <UART_SetConfig+0x2e8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d138      	bne.n	8007b9c <UART_SetConfig+0x16c>
 8007b2a:	4b7a      	ldr	r3, [pc, #488]	@ (8007d14 <UART_SetConfig+0x2e4>)
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b30:	f003 030c 	and.w	r3, r3, #12
 8007b34:	2b0c      	cmp	r3, #12
 8007b36:	d82d      	bhi.n	8007b94 <UART_SetConfig+0x164>
 8007b38:	a201      	add	r2, pc, #4	@ (adr r2, 8007b40 <UART_SetConfig+0x110>)
 8007b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3e:	bf00      	nop
 8007b40:	08007b75 	.word	0x08007b75
 8007b44:	08007b95 	.word	0x08007b95
 8007b48:	08007b95 	.word	0x08007b95
 8007b4c:	08007b95 	.word	0x08007b95
 8007b50:	08007b85 	.word	0x08007b85
 8007b54:	08007b95 	.word	0x08007b95
 8007b58:	08007b95 	.word	0x08007b95
 8007b5c:	08007b95 	.word	0x08007b95
 8007b60:	08007b7d 	.word	0x08007b7d
 8007b64:	08007b95 	.word	0x08007b95
 8007b68:	08007b95 	.word	0x08007b95
 8007b6c:	08007b95 	.word	0x08007b95
 8007b70:	08007b8d 	.word	0x08007b8d
 8007b74:	2300      	movs	r3, #0
 8007b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b7a:	e0d8      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007b7c:	2302      	movs	r3, #2
 8007b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b82:	e0d4      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007b84:	2304      	movs	r3, #4
 8007b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b8a:	e0d0      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007b8c:	2308      	movs	r3, #8
 8007b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b92:	e0cc      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007b94:	2310      	movs	r3, #16
 8007b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b9a:	e0c8      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a5e      	ldr	r2, [pc, #376]	@ (8007d1c <UART_SetConfig+0x2ec>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d125      	bne.n	8007bf2 <UART_SetConfig+0x1c2>
 8007ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8007d14 <UART_SetConfig+0x2e4>)
 8007ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007bb0:	2b30      	cmp	r3, #48	@ 0x30
 8007bb2:	d016      	beq.n	8007be2 <UART_SetConfig+0x1b2>
 8007bb4:	2b30      	cmp	r3, #48	@ 0x30
 8007bb6:	d818      	bhi.n	8007bea <UART_SetConfig+0x1ba>
 8007bb8:	2b20      	cmp	r3, #32
 8007bba:	d00a      	beq.n	8007bd2 <UART_SetConfig+0x1a2>
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	d814      	bhi.n	8007bea <UART_SetConfig+0x1ba>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d002      	beq.n	8007bca <UART_SetConfig+0x19a>
 8007bc4:	2b10      	cmp	r3, #16
 8007bc6:	d008      	beq.n	8007bda <UART_SetConfig+0x1aa>
 8007bc8:	e00f      	b.n	8007bea <UART_SetConfig+0x1ba>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bd0:	e0ad      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bd8:	e0a9      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007bda:	2304      	movs	r3, #4
 8007bdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007be0:	e0a5      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007be2:	2308      	movs	r3, #8
 8007be4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007be8:	e0a1      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007bea:	2310      	movs	r3, #16
 8007bec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bf0:	e09d      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a4a      	ldr	r2, [pc, #296]	@ (8007d20 <UART_SetConfig+0x2f0>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d125      	bne.n	8007c48 <UART_SetConfig+0x218>
 8007bfc:	4b45      	ldr	r3, [pc, #276]	@ (8007d14 <UART_SetConfig+0x2e4>)
 8007bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c08:	d016      	beq.n	8007c38 <UART_SetConfig+0x208>
 8007c0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007c0c:	d818      	bhi.n	8007c40 <UART_SetConfig+0x210>
 8007c0e:	2b80      	cmp	r3, #128	@ 0x80
 8007c10:	d00a      	beq.n	8007c28 <UART_SetConfig+0x1f8>
 8007c12:	2b80      	cmp	r3, #128	@ 0x80
 8007c14:	d814      	bhi.n	8007c40 <UART_SetConfig+0x210>
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <UART_SetConfig+0x1f0>
 8007c1a:	2b40      	cmp	r3, #64	@ 0x40
 8007c1c:	d008      	beq.n	8007c30 <UART_SetConfig+0x200>
 8007c1e:	e00f      	b.n	8007c40 <UART_SetConfig+0x210>
 8007c20:	2300      	movs	r3, #0
 8007c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c26:	e082      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c2e:	e07e      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007c30:	2304      	movs	r3, #4
 8007c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c36:	e07a      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007c38:	2308      	movs	r3, #8
 8007c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c3e:	e076      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007c40:	2310      	movs	r3, #16
 8007c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c46:	e072      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a35      	ldr	r2, [pc, #212]	@ (8007d24 <UART_SetConfig+0x2f4>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d12a      	bne.n	8007ca8 <UART_SetConfig+0x278>
 8007c52:	4b30      	ldr	r3, [pc, #192]	@ (8007d14 <UART_SetConfig+0x2e4>)
 8007c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c60:	d01a      	beq.n	8007c98 <UART_SetConfig+0x268>
 8007c62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c66:	d81b      	bhi.n	8007ca0 <UART_SetConfig+0x270>
 8007c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c6c:	d00c      	beq.n	8007c88 <UART_SetConfig+0x258>
 8007c6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c72:	d815      	bhi.n	8007ca0 <UART_SetConfig+0x270>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d003      	beq.n	8007c80 <UART_SetConfig+0x250>
 8007c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c7c:	d008      	beq.n	8007c90 <UART_SetConfig+0x260>
 8007c7e:	e00f      	b.n	8007ca0 <UART_SetConfig+0x270>
 8007c80:	2300      	movs	r3, #0
 8007c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c86:	e052      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c8e:	e04e      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007c90:	2304      	movs	r3, #4
 8007c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c96:	e04a      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007c98:	2308      	movs	r3, #8
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c9e:	e046      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ca6:	e042      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a17      	ldr	r2, [pc, #92]	@ (8007d0c <UART_SetConfig+0x2dc>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d13a      	bne.n	8007d28 <UART_SetConfig+0x2f8>
 8007cb2:	4b18      	ldr	r3, [pc, #96]	@ (8007d14 <UART_SetConfig+0x2e4>)
 8007cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007cbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cc0:	d01a      	beq.n	8007cf8 <UART_SetConfig+0x2c8>
 8007cc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007cc6:	d81b      	bhi.n	8007d00 <UART_SetConfig+0x2d0>
 8007cc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ccc:	d00c      	beq.n	8007ce8 <UART_SetConfig+0x2b8>
 8007cce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007cd2:	d815      	bhi.n	8007d00 <UART_SetConfig+0x2d0>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <UART_SetConfig+0x2b0>
 8007cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cdc:	d008      	beq.n	8007cf0 <UART_SetConfig+0x2c0>
 8007cde:	e00f      	b.n	8007d00 <UART_SetConfig+0x2d0>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce6:	e022      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007ce8:	2302      	movs	r3, #2
 8007cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cee:	e01e      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007cf0:	2304      	movs	r3, #4
 8007cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cf6:	e01a      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cfe:	e016      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007d00:	2310      	movs	r3, #16
 8007d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d06:	e012      	b.n	8007d2e <UART_SetConfig+0x2fe>
 8007d08:	cfff69f3 	.word	0xcfff69f3
 8007d0c:	40008000 	.word	0x40008000
 8007d10:	40013800 	.word	0x40013800
 8007d14:	40021000 	.word	0x40021000
 8007d18:	40004400 	.word	0x40004400
 8007d1c:	40004800 	.word	0x40004800
 8007d20:	40004c00 	.word	0x40004c00
 8007d24:	40005000 	.word	0x40005000
 8007d28:	2310      	movs	r3, #16
 8007d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4aae      	ldr	r2, [pc, #696]	@ (8007fec <UART_SetConfig+0x5bc>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	f040 8097 	bne.w	8007e68 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d3e:	2b08      	cmp	r3, #8
 8007d40:	d823      	bhi.n	8007d8a <UART_SetConfig+0x35a>
 8007d42:	a201      	add	r2, pc, #4	@ (adr r2, 8007d48 <UART_SetConfig+0x318>)
 8007d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d48:	08007d6d 	.word	0x08007d6d
 8007d4c:	08007d8b 	.word	0x08007d8b
 8007d50:	08007d75 	.word	0x08007d75
 8007d54:	08007d8b 	.word	0x08007d8b
 8007d58:	08007d7b 	.word	0x08007d7b
 8007d5c:	08007d8b 	.word	0x08007d8b
 8007d60:	08007d8b 	.word	0x08007d8b
 8007d64:	08007d8b 	.word	0x08007d8b
 8007d68:	08007d83 	.word	0x08007d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d6c:	f7fd ffca 	bl	8005d04 <HAL_RCC_GetPCLK1Freq>
 8007d70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d72:	e010      	b.n	8007d96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d74:	4b9e      	ldr	r3, [pc, #632]	@ (8007ff0 <UART_SetConfig+0x5c0>)
 8007d76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d78:	e00d      	b.n	8007d96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d7a:	f7fd ff2b 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8007d7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d80:	e009      	b.n	8007d96 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d88:	e005      	b.n	8007d96 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 8130 	beq.w	8007ffe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da2:	4a94      	ldr	r2, [pc, #592]	@ (8007ff4 <UART_SetConfig+0x5c4>)
 8007da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007da8:	461a      	mov	r2, r3
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007db0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	4613      	mov	r3, r2
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	4413      	add	r3, r2
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d305      	bcc.n	8007dce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d903      	bls.n	8007dd6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007dd4:	e113      	b.n	8007ffe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	2200      	movs	r2, #0
 8007dda:	60bb      	str	r3, [r7, #8]
 8007ddc:	60fa      	str	r2, [r7, #12]
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de2:	4a84      	ldr	r2, [pc, #528]	@ (8007ff4 <UART_SetConfig+0x5c4>)
 8007de4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	2200      	movs	r2, #0
 8007dec:	603b      	str	r3, [r7, #0]
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007df4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007df8:	f7f8 fa00 	bl	80001fc <__aeabi_uldivmod>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4610      	mov	r0, r2
 8007e02:	4619      	mov	r1, r3
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	020b      	lsls	r3, r1, #8
 8007e0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e12:	0202      	lsls	r2, r0, #8
 8007e14:	6979      	ldr	r1, [r7, #20]
 8007e16:	6849      	ldr	r1, [r1, #4]
 8007e18:	0849      	lsrs	r1, r1, #1
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	4605      	mov	r5, r0
 8007e20:	eb12 0804 	adds.w	r8, r2, r4
 8007e24:	eb43 0905 	adc.w	r9, r3, r5
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	469a      	mov	sl, r3
 8007e30:	4693      	mov	fp, r2
 8007e32:	4652      	mov	r2, sl
 8007e34:	465b      	mov	r3, fp
 8007e36:	4640      	mov	r0, r8
 8007e38:	4649      	mov	r1, r9
 8007e3a:	f7f8 f9df 	bl	80001fc <__aeabi_uldivmod>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4613      	mov	r3, r2
 8007e44:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e4c:	d308      	bcc.n	8007e60 <UART_SetConfig+0x430>
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e54:	d204      	bcs.n	8007e60 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	6a3a      	ldr	r2, [r7, #32]
 8007e5c:	60da      	str	r2, [r3, #12]
 8007e5e:	e0ce      	b.n	8007ffe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e66:	e0ca      	b.n	8007ffe <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e70:	d166      	bne.n	8007f40 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007e72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e76:	2b08      	cmp	r3, #8
 8007e78:	d827      	bhi.n	8007eca <UART_SetConfig+0x49a>
 8007e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e80 <UART_SetConfig+0x450>)
 8007e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e80:	08007ea5 	.word	0x08007ea5
 8007e84:	08007ead 	.word	0x08007ead
 8007e88:	08007eb5 	.word	0x08007eb5
 8007e8c:	08007ecb 	.word	0x08007ecb
 8007e90:	08007ebb 	.word	0x08007ebb
 8007e94:	08007ecb 	.word	0x08007ecb
 8007e98:	08007ecb 	.word	0x08007ecb
 8007e9c:	08007ecb 	.word	0x08007ecb
 8007ea0:	08007ec3 	.word	0x08007ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea4:	f7fd ff2e 	bl	8005d04 <HAL_RCC_GetPCLK1Freq>
 8007ea8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eaa:	e014      	b.n	8007ed6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007eac:	f7fd ff40 	bl	8005d30 <HAL_RCC_GetPCLK2Freq>
 8007eb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eb2:	e010      	b.n	8007ed6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb4:	4b4e      	ldr	r3, [pc, #312]	@ (8007ff0 <UART_SetConfig+0x5c0>)
 8007eb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007eb8:	e00d      	b.n	8007ed6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eba:	f7fd fe8b 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8007ebe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ec0:	e009      	b.n	8007ed6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ec6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ec8:	e005      	b.n	8007ed6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ed4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 8090 	beq.w	8007ffe <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee2:	4a44      	ldr	r2, [pc, #272]	@ (8007ff4 <UART_SetConfig+0x5c4>)
 8007ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ef0:	005a      	lsls	r2, r3, #1
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	085b      	lsrs	r3, r3, #1
 8007ef8:	441a      	add	r2, r3
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f02:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	2b0f      	cmp	r3, #15
 8007f08:	d916      	bls.n	8007f38 <UART_SetConfig+0x508>
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f10:	d212      	bcs.n	8007f38 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f023 030f 	bic.w	r3, r3, #15
 8007f1a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	085b      	lsrs	r3, r3, #1
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	8bfb      	ldrh	r3, [r7, #30]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	8bfa      	ldrh	r2, [r7, #30]
 8007f34:	60da      	str	r2, [r3, #12]
 8007f36:	e062      	b.n	8007ffe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f3e:	e05e      	b.n	8007ffe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d828      	bhi.n	8007f9a <UART_SetConfig+0x56a>
 8007f48:	a201      	add	r2, pc, #4	@ (adr r2, 8007f50 <UART_SetConfig+0x520>)
 8007f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4e:	bf00      	nop
 8007f50:	08007f75 	.word	0x08007f75
 8007f54:	08007f7d 	.word	0x08007f7d
 8007f58:	08007f85 	.word	0x08007f85
 8007f5c:	08007f9b 	.word	0x08007f9b
 8007f60:	08007f8b 	.word	0x08007f8b
 8007f64:	08007f9b 	.word	0x08007f9b
 8007f68:	08007f9b 	.word	0x08007f9b
 8007f6c:	08007f9b 	.word	0x08007f9b
 8007f70:	08007f93 	.word	0x08007f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f74:	f7fd fec6 	bl	8005d04 <HAL_RCC_GetPCLK1Freq>
 8007f78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f7a:	e014      	b.n	8007fa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f7c:	f7fd fed8 	bl	8005d30 <HAL_RCC_GetPCLK2Freq>
 8007f80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f82:	e010      	b.n	8007fa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f84:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff0 <UART_SetConfig+0x5c0>)
 8007f86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f88:	e00d      	b.n	8007fa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f8a:	f7fd fe23 	bl	8005bd4 <HAL_RCC_GetSysClockFreq>
 8007f8e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f90:	e009      	b.n	8007fa6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f98:	e005      	b.n	8007fa6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007fa4:	bf00      	nop
    }

    if (pclk != 0U)
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d028      	beq.n	8007ffe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb0:	4a10      	ldr	r2, [pc, #64]	@ (8007ff4 <UART_SetConfig+0x5c4>)
 8007fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fba:	fbb3 f2f2 	udiv	r2, r3, r2
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	085b      	lsrs	r3, r3, #1
 8007fc4:	441a      	add	r2, r3
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	2b0f      	cmp	r3, #15
 8007fd4:	d910      	bls.n	8007ff8 <UART_SetConfig+0x5c8>
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fdc:	d20c      	bcs.n	8007ff8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60da      	str	r2, [r3, #12]
 8007fe8:	e009      	b.n	8007ffe <UART_SetConfig+0x5ce>
 8007fea:	bf00      	nop
 8007fec:	40008000 	.word	0x40008000
 8007ff0:	00f42400 	.word	0x00f42400
 8007ff4:	0800c9a8 	.word	0x0800c9a8
      }
      else
      {
        ret = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2201      	movs	r2, #1
 8008002:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2201      	movs	r2, #1
 800800a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2200      	movs	r2, #0
 8008012:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2200      	movs	r2, #0
 8008018:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800801a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800801e:	4618      	mov	r0, r3
 8008020:	3730      	adds	r7, #48	@ 0x30
 8008022:	46bd      	mov	sp, r7
 8008024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008028 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008034:	f003 0308 	and.w	r3, r3, #8
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809a:	f003 0304 	and.w	r3, r3, #4
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00a      	beq.n	80080da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01a      	beq.n	800813e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	430a      	orrs	r2, r1
 800811c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008126:	d10a      	bne.n	800813e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	605a      	str	r2, [r3, #4]
  }
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b098      	sub	sp, #96	@ 0x60
 8008170:	af02      	add	r7, sp, #8
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800817c:	f7f9 fadc 	bl	8001738 <HAL_GetTick>
 8008180:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f003 0308 	and.w	r3, r3, #8
 800818c:	2b08      	cmp	r3, #8
 800818e:	d12f      	bne.n	80081f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008190:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008198:	2200      	movs	r2, #0
 800819a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f88e 	bl	80082c0 <UART_WaitOnFlagUntilTimeout>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d022      	beq.n	80081f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b2:	e853 3f00 	ldrex	r3, [r3]
 80081b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80081be:	653b      	str	r3, [r7, #80]	@ 0x50
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	461a      	mov	r2, r3
 80081c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80081ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081d0:	e841 2300 	strex	r3, r2, [r1]
 80081d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1e6      	bne.n	80081aa <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2220      	movs	r2, #32
 80081e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e063      	b.n	80082b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 0304 	and.w	r3, r3, #4
 80081fa:	2b04      	cmp	r3, #4
 80081fc:	d149      	bne.n	8008292 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008206:	2200      	movs	r2, #0
 8008208:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f857 	bl	80082c0 <UART_WaitOnFlagUntilTimeout>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d03c      	beq.n	8008292 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	623b      	str	r3, [r7, #32]
   return(result);
 8008226:	6a3b      	ldr	r3, [r7, #32]
 8008228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800822c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008236:	633b      	str	r3, [r7, #48]	@ 0x30
 8008238:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800823c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e6      	bne.n	8008218 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3308      	adds	r3, #8
 8008250:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	60fb      	str	r3, [r7, #12]
   return(result);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f023 0301 	bic.w	r3, r3, #1
 8008260:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3308      	adds	r3, #8
 8008268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800826a:	61fa      	str	r2, [r7, #28]
 800826c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	69b9      	ldr	r1, [r7, #24]
 8008270:	69fa      	ldr	r2, [r7, #28]
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	617b      	str	r3, [r7, #20]
   return(result);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e5      	bne.n	800824a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2220      	movs	r2, #32
 8008282:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e012      	b.n	80082b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2220      	movs	r2, #32
 8008296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3758      	adds	r7, #88	@ 0x58
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	603b      	str	r3, [r7, #0]
 80082cc:	4613      	mov	r3, r2
 80082ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082d0:	e049      	b.n	8008366 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d8:	d045      	beq.n	8008366 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082da:	f7f9 fa2d 	bl	8001738 <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d302      	bcc.n	80082f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e048      	b.n	8008386 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0304 	and.w	r3, r3, #4
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d031      	beq.n	8008366 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	f003 0308 	and.w	r3, r3, #8
 800830c:	2b08      	cmp	r3, #8
 800830e:	d110      	bne.n	8008332 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2208      	movs	r2, #8
 8008316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f000 f838 	bl	800838e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2208      	movs	r2, #8
 8008322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	e029      	b.n	8008386 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800833c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008340:	d111      	bne.n	8008366 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800834a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 f81e 	bl	800838e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2220      	movs	r2, #32
 8008356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e00f      	b.n	8008386 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	69da      	ldr	r2, [r3, #28]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	4013      	ands	r3, r2
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	429a      	cmp	r2, r3
 8008374:	bf0c      	ite	eq
 8008376:	2301      	moveq	r3, #1
 8008378:	2300      	movne	r3, #0
 800837a:	b2db      	uxtb	r3, r3
 800837c:	461a      	mov	r2, r3
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	429a      	cmp	r2, r3
 8008382:	d0a6      	beq.n	80082d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800838e:	b480      	push	{r7}
 8008390:	b095      	sub	sp, #84	@ 0x54
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80083b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e6      	bne.n	8008396 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3308      	adds	r3, #8
 80083ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	e853 3f00 	ldrex	r3, [r3]
 80083d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083de:	f023 0301 	bic.w	r3, r3, #1
 80083e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3308      	adds	r3, #8
 80083ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e3      	bne.n	80083c8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008404:	2b01      	cmp	r3, #1
 8008406:	d118      	bne.n	800843a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	e853 3f00 	ldrex	r3, [r3]
 8008414:	60bb      	str	r3, [r7, #8]
   return(result);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f023 0310 	bic.w	r3, r3, #16
 800841c:	647b      	str	r3, [r7, #68]	@ 0x44
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008426:	61bb      	str	r3, [r7, #24]
 8008428:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842a:	6979      	ldr	r1, [r7, #20]
 800842c:	69ba      	ldr	r2, [r7, #24]
 800842e:	e841 2300 	strex	r3, r2, [r1]
 8008432:	613b      	str	r3, [r7, #16]
   return(result);
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1e6      	bne.n	8008408 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2220      	movs	r2, #32
 800843e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800844e:	bf00      	nop
 8008450:	3754      	adds	r7, #84	@ 0x54
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr

0800845a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008466:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f7ff fac3 	bl	8007a04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800847e:	bf00      	nop
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b088      	sub	sp, #32
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	e853 3f00 	ldrex	r3, [r3]
 800849a:	60bb      	str	r3, [r7, #8]
   return(result);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	461a      	mov	r2, r3
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	61bb      	str	r3, [r7, #24]
 80084ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b0:	6979      	ldr	r1, [r7, #20]
 80084b2:	69ba      	ldr	r2, [r7, #24]
 80084b4:	e841 2300 	strex	r3, r2, [r1]
 80084b8:	613b      	str	r3, [r7, #16]
   return(result);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e6      	bne.n	800848e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2220      	movs	r2, #32
 80084c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7ff fa8e 	bl	80079f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084d4:	bf00      	nop
 80084d6:	3720      	adds	r7, #32
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800850c:	bf00      	nop
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008526:	2b01      	cmp	r3, #1
 8008528:	d101      	bne.n	800852e <HAL_UARTEx_DisableFifoMode+0x16>
 800852a:	2302      	movs	r3, #2
 800852c:	e027      	b.n	800857e <HAL_UARTEx_DisableFifoMode+0x66>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2224      	movs	r2, #36	@ 0x24
 800853a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 0201 	bic.w	r2, r2, #1
 8008554:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800855c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2220      	movs	r2, #32
 8008570:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b084      	sub	sp, #16
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800859a:	2b01      	cmp	r3, #1
 800859c:	d101      	bne.n	80085a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800859e:	2302      	movs	r3, #2
 80085a0:	e02d      	b.n	80085fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2224      	movs	r2, #36	@ 0x24
 80085ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0201 	bic.w	r2, r2, #1
 80085c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f850 	bl	8008684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2220      	movs	r2, #32
 80085f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008616:	2b01      	cmp	r3, #1
 8008618:	d101      	bne.n	800861e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800861a:	2302      	movs	r3, #2
 800861c:	e02d      	b.n	800867a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2224      	movs	r2, #36	@ 0x24
 800862a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 0201 	bic.w	r2, r2, #1
 8008644:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f812 	bl	8008684 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2220      	movs	r2, #32
 800866c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
	...

08008684 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008690:	2b00      	cmp	r3, #0
 8008692:	d108      	bne.n	80086a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086a4:	e031      	b.n	800870a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086a6:	2308      	movs	r3, #8
 80086a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086aa:	2308      	movs	r3, #8
 80086ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	0e5b      	lsrs	r3, r3, #25
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f003 0307 	and.w	r3, r3, #7
 80086bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	0f5b      	lsrs	r3, r3, #29
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	7b3a      	ldrb	r2, [r7, #12]
 80086d2:	4911      	ldr	r1, [pc, #68]	@ (8008718 <UARTEx_SetNbDataToProcess+0x94>)
 80086d4:	5c8a      	ldrb	r2, [r1, r2]
 80086d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086da:	7b3a      	ldrb	r2, [r7, #12]
 80086dc:	490f      	ldr	r1, [pc, #60]	@ (800871c <UARTEx_SetNbDataToProcess+0x98>)
 80086de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
 80086ee:	7b7a      	ldrb	r2, [r7, #13]
 80086f0:	4909      	ldr	r1, [pc, #36]	@ (8008718 <UARTEx_SetNbDataToProcess+0x94>)
 80086f2:	5c8a      	ldrb	r2, [r1, r2]
 80086f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086f8:	7b7a      	ldrb	r2, [r7, #13]
 80086fa:	4908      	ldr	r1, [pc, #32]	@ (800871c <UARTEx_SetNbDataToProcess+0x98>)
 80086fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	0800c9c0 	.word	0x0800c9c0
 800871c:	0800c9c8 	.word	0x0800c9c8

08008720 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008720:	b084      	sub	sp, #16
 8008722:	b580      	push	{r7, lr}
 8008724:	b084      	sub	sp, #16
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	f107 001c 	add.w	r0, r7, #28
 800872e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f001 fa1c 	bl	8009b7c <USB_CoreReset>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	d106      	bne.n	800875c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008752:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	639a      	str	r2, [r3, #56]	@ 0x38
 800875a:	e005      	b.n	8008768 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008760:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008768:	7bfb      	ldrb	r3, [r7, #15]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008774:	b004      	add	sp, #16
 8008776:	4770      	bx	lr

08008778 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	4613      	mov	r3, r2
 8008784:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008786:	79fb      	ldrb	r3, [r7, #7]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d165      	bne.n	8008858 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	4a3e      	ldr	r2, [pc, #248]	@ (8008888 <USB_SetTurnaroundTime+0x110>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d906      	bls.n	80087a2 <USB_SetTurnaroundTime+0x2a>
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	4a3d      	ldr	r2, [pc, #244]	@ (800888c <USB_SetTurnaroundTime+0x114>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d202      	bcs.n	80087a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800879c:	230f      	movs	r3, #15
 800879e:	617b      	str	r3, [r7, #20]
 80087a0:	e05c      	b.n	800885c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	4a39      	ldr	r2, [pc, #228]	@ (800888c <USB_SetTurnaroundTime+0x114>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d306      	bcc.n	80087b8 <USB_SetTurnaroundTime+0x40>
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	4a38      	ldr	r2, [pc, #224]	@ (8008890 <USB_SetTurnaroundTime+0x118>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d202      	bcs.n	80087b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80087b2:	230e      	movs	r3, #14
 80087b4:	617b      	str	r3, [r7, #20]
 80087b6:	e051      	b.n	800885c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	4a35      	ldr	r2, [pc, #212]	@ (8008890 <USB_SetTurnaroundTime+0x118>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d306      	bcc.n	80087ce <USB_SetTurnaroundTime+0x56>
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4a34      	ldr	r2, [pc, #208]	@ (8008894 <USB_SetTurnaroundTime+0x11c>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d202      	bcs.n	80087ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80087c8:	230d      	movs	r3, #13
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	e046      	b.n	800885c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	4a30      	ldr	r2, [pc, #192]	@ (8008894 <USB_SetTurnaroundTime+0x11c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d306      	bcc.n	80087e4 <USB_SetTurnaroundTime+0x6c>
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	4a2f      	ldr	r2, [pc, #188]	@ (8008898 <USB_SetTurnaroundTime+0x120>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d802      	bhi.n	80087e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80087de:	230c      	movs	r3, #12
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	e03b      	b.n	800885c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4a2c      	ldr	r2, [pc, #176]	@ (8008898 <USB_SetTurnaroundTime+0x120>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d906      	bls.n	80087fa <USB_SetTurnaroundTime+0x82>
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	4a2b      	ldr	r2, [pc, #172]	@ (800889c <USB_SetTurnaroundTime+0x124>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d802      	bhi.n	80087fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80087f4:	230b      	movs	r3, #11
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	e030      	b.n	800885c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	4a27      	ldr	r2, [pc, #156]	@ (800889c <USB_SetTurnaroundTime+0x124>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d906      	bls.n	8008810 <USB_SetTurnaroundTime+0x98>
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	4a26      	ldr	r2, [pc, #152]	@ (80088a0 <USB_SetTurnaroundTime+0x128>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d802      	bhi.n	8008810 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800880a:	230a      	movs	r3, #10
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	e025      	b.n	800885c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4a23      	ldr	r2, [pc, #140]	@ (80088a0 <USB_SetTurnaroundTime+0x128>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d906      	bls.n	8008826 <USB_SetTurnaroundTime+0xae>
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4a22      	ldr	r2, [pc, #136]	@ (80088a4 <USB_SetTurnaroundTime+0x12c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d202      	bcs.n	8008826 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008820:	2309      	movs	r3, #9
 8008822:	617b      	str	r3, [r7, #20]
 8008824:	e01a      	b.n	800885c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	4a1e      	ldr	r2, [pc, #120]	@ (80088a4 <USB_SetTurnaroundTime+0x12c>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d306      	bcc.n	800883c <USB_SetTurnaroundTime+0xc4>
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	4a1d      	ldr	r2, [pc, #116]	@ (80088a8 <USB_SetTurnaroundTime+0x130>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d802      	bhi.n	800883c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008836:	2308      	movs	r3, #8
 8008838:	617b      	str	r3, [r7, #20]
 800883a:	e00f      	b.n	800885c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	4a1a      	ldr	r2, [pc, #104]	@ (80088a8 <USB_SetTurnaroundTime+0x130>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d906      	bls.n	8008852 <USB_SetTurnaroundTime+0xda>
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4a19      	ldr	r2, [pc, #100]	@ (80088ac <USB_SetTurnaroundTime+0x134>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d202      	bcs.n	8008852 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800884c:	2307      	movs	r3, #7
 800884e:	617b      	str	r3, [r7, #20]
 8008850:	e004      	b.n	800885c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008852:	2306      	movs	r3, #6
 8008854:	617b      	str	r3, [r7, #20]
 8008856:	e001      	b.n	800885c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008858:	2309      	movs	r3, #9
 800885a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	029b      	lsls	r3, r3, #10
 8008870:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008874:	431a      	orrs	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	371c      	adds	r7, #28
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	00d8acbf 	.word	0x00d8acbf
 800888c:	00e4e1c0 	.word	0x00e4e1c0
 8008890:	00f42400 	.word	0x00f42400
 8008894:	01067380 	.word	0x01067380
 8008898:	011a499f 	.word	0x011a499f
 800889c:	01312cff 	.word	0x01312cff
 80088a0:	014ca43f 	.word	0x014ca43f
 80088a4:	016e3600 	.word	0x016e3600
 80088a8:	01a6ab1f 	.word	0x01a6ab1f
 80088ac:	01e84800 	.word	0x01e84800

080088b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f043 0201 	orr.w	r2, r3, #1
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088d2:	b480      	push	{r7}
 80088d4:	b083      	sub	sp, #12
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f023 0201 	bic.w	r2, r3, #1
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d115      	bne.n	8008942 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008922:	2001      	movs	r0, #1
 8008924:	f7f8 ff14 	bl	8001750 <HAL_Delay>
      ms++;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3301      	adds	r3, #1
 800892c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 f8ab 	bl	8009a8a <USB_GetMode>
 8008934:	4603      	mov	r3, r0
 8008936:	2b01      	cmp	r3, #1
 8008938:	d01e      	beq.n	8008978 <USB_SetCurrentMode+0x84>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2b31      	cmp	r3, #49	@ 0x31
 800893e:	d9f0      	bls.n	8008922 <USB_SetCurrentMode+0x2e>
 8008940:	e01a      	b.n	8008978 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d115      	bne.n	8008974 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008954:	2001      	movs	r0, #1
 8008956:	f7f8 fefb 	bl	8001750 <HAL_Delay>
      ms++;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3301      	adds	r3, #1
 800895e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f001 f892 	bl	8009a8a <USB_GetMode>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <USB_SetCurrentMode+0x84>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b31      	cmp	r3, #49	@ 0x31
 8008970:	d9f0      	bls.n	8008954 <USB_SetCurrentMode+0x60>
 8008972:	e001      	b.n	8008978 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e005      	b.n	8008984 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b32      	cmp	r3, #50	@ 0x32
 800897c:	d101      	bne.n	8008982 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e000      	b.n	8008984 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800898c:	b084      	sub	sp, #16
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800899a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80089a6:	2300      	movs	r3, #0
 80089a8:	613b      	str	r3, [r7, #16]
 80089aa:	e009      	b.n	80089c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	3340      	adds	r3, #64	@ 0x40
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	2200      	movs	r2, #0
 80089b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	3301      	adds	r3, #1
 80089be:	613b      	str	r3, [r7, #16]
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	2b0e      	cmp	r3, #14
 80089c4:	d9f2      	bls.n	80089ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80089c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d11c      	bne.n	8008a06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80089da:	f043 0302 	orr.w	r3, r3, #2
 80089de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	e005      	b.n	8008a12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a18:	461a      	mov	r2, r3
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a1e:	2103      	movs	r1, #3
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f959 	bl	8008cd8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a26:	2110      	movs	r1, #16
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f8f1 	bl	8008c10 <USB_FlushTxFifo>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 f91d 	bl	8008c78 <USB_FlushRxFifo>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a4e:	461a      	mov	r2, r3
 8008a50:	2300      	movs	r3, #0
 8008a52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a66:	461a      	mov	r2, r3
 8008a68:	2300      	movs	r3, #0
 8008a6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	613b      	str	r3, [r7, #16]
 8008a70:	e043      	b.n	8008afa <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a88:	d118      	bne.n	8008abc <USB_DevInit+0x130>
    {
      if (i == 0U)
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10a      	bne.n	8008aa6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	e013      	b.n	8008ace <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	e008      	b.n	8008ace <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ac8:	461a      	mov	r2, r3
 8008aca:	2300      	movs	r3, #0
 8008acc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ada:	461a      	mov	r2, r3
 8008adc:	2300      	movs	r3, #0
 8008ade:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aec:	461a      	mov	r2, r3
 8008aee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008af2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	3301      	adds	r3, #1
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d3b7      	bcc.n	8008a72 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b02:	2300      	movs	r3, #0
 8008b04:	613b      	str	r3, [r7, #16]
 8008b06:	e043      	b.n	8008b90 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b1e:	d118      	bne.n	8008b52 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10a      	bne.n	8008b3c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b32:	461a      	mov	r2, r3
 8008b34:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b38:	6013      	str	r3, [r2, #0]
 8008b3a:	e013      	b.n	8008b64 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b48:	461a      	mov	r2, r3
 8008b4a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	e008      	b.n	8008b64 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b5e:	461a      	mov	r2, r3
 8008b60:	2300      	movs	r3, #0
 8008b62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b70:	461a      	mov	r2, r3
 8008b72:	2300      	movs	r3, #0
 8008b74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	015a      	lsls	r2, r3, #5
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b82:	461a      	mov	r2, r3
 8008b84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008b88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	613b      	str	r3, [r7, #16]
 8008b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d3b7      	bcc.n	8008b08 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	68fa      	ldr	r2, [r7, #12]
 8008ba2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ba6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008baa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008bb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	f043 0210 	orr.w	r2, r3, #16
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	699a      	ldr	r2, [r3, #24]
 8008bca:	4b10      	ldr	r3, [pc, #64]	@ (8008c0c <USB_DevInit+0x280>)
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d005      	beq.n	8008be4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	f043 0208 	orr.w	r2, r3, #8
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d107      	bne.n	8008bfa <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008bf2:	f043 0304 	orr.w	r3, r3, #4
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c06:	b004      	add	sp, #16
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	803c3800 	.word	0x803c3800

08008c10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	3301      	adds	r3, #1
 8008c22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	4a13      	ldr	r2, [pc, #76]	@ (8008c74 <USB_FlushTxFifo+0x64>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d901      	bls.n	8008c30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e01b      	b.n	8008c68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	daf2      	bge.n	8008c1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	019b      	lsls	r3, r3, #6
 8008c40:	f043 0220 	orr.w	r2, r3, #32
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	4a08      	ldr	r2, [pc, #32]	@ (8008c74 <USB_FlushTxFifo+0x64>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d901      	bls.n	8008c5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e006      	b.n	8008c68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	f003 0320 	and.w	r3, r3, #32
 8008c62:	2b20      	cmp	r3, #32
 8008c64:	d0f0      	beq.n	8008c48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	00030d40 	.word	0x00030d40

08008c78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c80:	2300      	movs	r3, #0
 8008c82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	3301      	adds	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4a11      	ldr	r2, [pc, #68]	@ (8008cd4 <USB_FlushRxFifo+0x5c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d901      	bls.n	8008c96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e018      	b.n	8008cc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	daf2      	bge.n	8008c84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2210      	movs	r2, #16
 8008ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	3301      	adds	r3, #1
 8008cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	4a08      	ldr	r2, [pc, #32]	@ (8008cd4 <USB_FlushRxFifo+0x5c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d901      	bls.n	8008cba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e006      	b.n	8008cc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	f003 0310 	and.w	r3, r3, #16
 8008cc2:	2b10      	cmp	r3, #16
 8008cc4:	d0f0      	beq.n	8008ca8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	00030d40 	.word	0x00030d40

08008cd8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	68f9      	ldr	r1, [r7, #12]
 8008cf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr

08008d0a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008d0a:	b480      	push	{r7}
 8008d0c:	b087      	sub	sp, #28
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f003 0306 	and.w	r3, r3, #6
 8008d22:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d002      	beq.n	8008d30 <USB_GetDevSpeed+0x26>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b06      	cmp	r3, #6
 8008d2e:	d102      	bne.n	8008d36 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008d30:	2302      	movs	r3, #2
 8008d32:	75fb      	strb	r3, [r7, #23]
 8008d34:	e001      	b.n	8008d3a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8008d36:	230f      	movs	r3, #15
 8008d38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	371c      	adds	r7, #28
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	785b      	ldrb	r3, [r3, #1]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d13a      	bne.n	8008dda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d6a:	69da      	ldr	r2, [r3, #28]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	f003 030f 	and.w	r3, r3, #15
 8008d74:	2101      	movs	r1, #1
 8008d76:	fa01 f303 	lsl.w	r3, r1, r3
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	68f9      	ldr	r1, [r7, #12]
 8008d7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d82:	4313      	orrs	r3, r2
 8008d84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	015a      	lsls	r2, r3, #5
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d155      	bne.n	8008e48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	791b      	ldrb	r3, [r3, #4]
 8008db6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008db8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	059b      	lsls	r3, r3, #22
 8008dbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	0151      	lsls	r1, r2, #5
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	440a      	add	r2, r1
 8008dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	e036      	b.n	8008e48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008de0:	69da      	ldr	r2, [r3, #28]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	2101      	movs	r1, #1
 8008dec:	fa01 f303 	lsl.w	r3, r1, r3
 8008df0:	041b      	lsls	r3, r3, #16
 8008df2:	68f9      	ldr	r1, [r7, #12]
 8008df4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d11a      	bne.n	8008e48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	015a      	lsls	r2, r3, #5
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	4413      	add	r3, r2
 8008e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	791b      	ldrb	r3, [r3, #4]
 8008e2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e2e:	430b      	orrs	r3, r1
 8008e30:	4313      	orrs	r3, r2
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	0151      	lsls	r1, r2, #5
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	440a      	add	r2, r1
 8008e3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
	...

08008e58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	785b      	ldrb	r3, [r3, #1]
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d161      	bne.n	8008f38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e8a:	d11f      	bne.n	8008ecc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	0151      	lsls	r1, r2, #5
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ea6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008eaa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	0151      	lsls	r1, r2, #5
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	440a      	add	r2, r1
 8008ec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ec6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008eca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ed2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	f003 030f 	and.w	r3, r3, #15
 8008edc:	2101      	movs	r1, #1
 8008ede:	fa01 f303 	lsl.w	r3, r1, r3
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	43db      	mvns	r3, r3
 8008ee6:	68f9      	ldr	r1, [r7, #12]
 8008ee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008eec:	4013      	ands	r3, r2
 8008eee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ef6:	69da      	ldr	r2, [r3, #28]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	2101      	movs	r1, #1
 8008f02:	fa01 f303 	lsl.w	r3, r1, r3
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	68f9      	ldr	r1, [r7, #12]
 8008f0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f10:	4013      	ands	r3, r2
 8008f12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	0159      	lsls	r1, r3, #5
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	440b      	add	r3, r1
 8008f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4b35      	ldr	r3, [pc, #212]	@ (8009008 <USB_DeactivateEndpoint+0x1b0>)
 8008f32:	4013      	ands	r3, r2
 8008f34:	600b      	str	r3, [r1, #0]
 8008f36:	e060      	b.n	8008ffa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f4e:	d11f      	bne.n	8008f90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	0151      	lsls	r1, r2, #5
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	440a      	add	r2, r1
 8008f66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	0151      	lsls	r1, r2, #5
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	440a      	add	r2, r1
 8008f86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f8a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	f003 030f 	and.w	r3, r3, #15
 8008fa0:	2101      	movs	r1, #1
 8008fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa6:	041b      	lsls	r3, r3, #16
 8008fa8:	43db      	mvns	r3, r3
 8008faa:	68f9      	ldr	r1, [r7, #12]
 8008fac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fba:	69da      	ldr	r2, [r3, #28]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	f003 030f 	and.w	r3, r3, #15
 8008fc4:	2101      	movs	r1, #1
 8008fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8008fca:	041b      	lsls	r3, r3, #16
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	68f9      	ldr	r1, [r7, #12]
 8008fd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	0159      	lsls	r1, r3, #5
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	440b      	add	r3, r1
 8008fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	4b05      	ldr	r3, [pc, #20]	@ (800900c <USB_DeactivateEndpoint+0x1b4>)
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	ec337800 	.word	0xec337800
 800900c:	eff37800 	.word	0xeff37800

08009010 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	785b      	ldrb	r3, [r3, #1]
 8009028:	2b01      	cmp	r3, #1
 800902a:	f040 8128 	bne.w	800927e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d132      	bne.n	800909c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	015a      	lsls	r2, r3, #5
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	4413      	add	r3, r2
 800903e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	0151      	lsls	r1, r2, #5
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	440a      	add	r2, r1
 800904c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009050:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009054:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009058:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	0151      	lsls	r1, r2, #5
 800906c:	697a      	ldr	r2, [r7, #20]
 800906e:	440a      	add	r2, r1
 8009070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009074:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009078:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	015a      	lsls	r2, r3, #5
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	4413      	add	r3, r2
 8009082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	0151      	lsls	r1, r2, #5
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	440a      	add	r2, r1
 8009090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009094:	0cdb      	lsrs	r3, r3, #19
 8009096:	04db      	lsls	r3, r3, #19
 8009098:	6113      	str	r3, [r2, #16]
 800909a:	e092      	b.n	80091c2 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	0151      	lsls	r1, r2, #5
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	440a      	add	r2, r1
 80090b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090b6:	0cdb      	lsrs	r3, r3, #19
 80090b8:	04db      	lsls	r3, r3, #19
 80090ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	0151      	lsls	r1, r2, #5
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	440a      	add	r2, r1
 80090d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80090da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80090de:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d11a      	bne.n	800911c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	691a      	ldr	r2, [r3, #16]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d903      	bls.n	80090fa <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	689a      	ldr	r2, [r3, #8]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	015a      	lsls	r2, r3, #5
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	4413      	add	r3, r2
 8009102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	0151      	lsls	r1, r2, #5
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	440a      	add	r2, r1
 8009110:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009114:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009118:	6113      	str	r3, [r2, #16]
 800911a:	e01b      	b.n	8009154 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009128:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	6919      	ldr	r1, [r3, #16]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	440b      	add	r3, r1
 8009134:	1e59      	subs	r1, r3, #1
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	fbb1 f3f3 	udiv	r3, r1, r3
 800913e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009140:	4b8d      	ldr	r3, [pc, #564]	@ (8009378 <USB_EPStartXfer+0x368>)
 8009142:	400b      	ands	r3, r1
 8009144:	6939      	ldr	r1, [r7, #16]
 8009146:	0148      	lsls	r0, r1, #5
 8009148:	6979      	ldr	r1, [r7, #20]
 800914a:	4401      	add	r1, r0
 800914c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009150:	4313      	orrs	r3, r2
 8009152:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	015a      	lsls	r2, r3, #5
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	4413      	add	r3, r2
 800915c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800916a:	6939      	ldr	r1, [r7, #16]
 800916c:	0148      	lsls	r0, r1, #5
 800916e:	6979      	ldr	r1, [r7, #20]
 8009170:	4401      	add	r1, r0
 8009172:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009176:	4313      	orrs	r3, r2
 8009178:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	791b      	ldrb	r3, [r3, #4]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d11f      	bne.n	80091c2 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	0151      	lsls	r1, r2, #5
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	440a      	add	r2, r1
 8009198:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800919c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80091a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	015a      	lsls	r2, r3, #5
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	4413      	add	r3, r2
 80091aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	0151      	lsls	r1, r2, #5
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	440a      	add	r2, r1
 80091b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80091c0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	0151      	lsls	r1, r2, #5
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	440a      	add	r2, r1
 80091d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091dc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80091e0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	791b      	ldrb	r3, [r3, #4]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d015      	beq.n	8009216 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 8139 	beq.w	8009466 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f003 030f 	and.w	r3, r3, #15
 8009204:	2101      	movs	r1, #1
 8009206:	fa01 f303 	lsl.w	r3, r1, r3
 800920a:	6979      	ldr	r1, [r7, #20]
 800920c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009210:	4313      	orrs	r3, r2
 8009212:	634b      	str	r3, [r1, #52]	@ 0x34
 8009214:	e127      	b.n	8009466 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009222:	2b00      	cmp	r3, #0
 8009224:	d110      	bne.n	8009248 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	4413      	add	r3, r2
 800922e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	0151      	lsls	r1, r2, #5
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	440a      	add	r2, r1
 800923c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009240:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009244:	6013      	str	r3, [r2, #0]
 8009246:	e00f      	b.n	8009268 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	4413      	add	r3, r2
 8009250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	0151      	lsls	r1, r2, #5
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	440a      	add	r2, r1
 800925e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009266:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	68d9      	ldr	r1, [r3, #12]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	781a      	ldrb	r2, [r3, #0]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	b29b      	uxth	r3, r3
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f9a6 	bl	80095c8 <USB_WritePacket>
 800927c:	e0f3      	b.n	8009466 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	015a      	lsls	r2, r3, #5
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	4413      	add	r3, r2
 8009286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	0151      	lsls	r1, r2, #5
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	440a      	add	r2, r1
 8009294:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009298:	0cdb      	lsrs	r3, r3, #19
 800929a:	04db      	lsls	r3, r3, #19
 800929c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	0151      	lsls	r1, r2, #5
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	440a      	add	r2, r1
 80092b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80092bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80092c0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d12f      	bne.n	8009328 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	689a      	ldr	r2, [r3, #8]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	689a      	ldr	r2, [r3, #8]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ec:	691a      	ldr	r2, [r3, #16]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092f6:	6939      	ldr	r1, [r7, #16]
 80092f8:	0148      	lsls	r0, r1, #5
 80092fa:	6979      	ldr	r1, [r7, #20]
 80092fc:	4401      	add	r1, r0
 80092fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009302:	4313      	orrs	r3, r2
 8009304:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	0151      	lsls	r1, r2, #5
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	440a      	add	r2, r1
 800931c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009320:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009324:	6113      	str	r3, [r2, #16]
 8009326:	e061      	b.n	80093ec <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d125      	bne.n	800937c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800933c:	691a      	ldr	r2, [r3, #16]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009346:	6939      	ldr	r1, [r7, #16]
 8009348:	0148      	lsls	r0, r1, #5
 800934a:	6979      	ldr	r1, [r7, #20]
 800934c:	4401      	add	r1, r0
 800934e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009352:	4313      	orrs	r3, r2
 8009354:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	4413      	add	r3, r2
 800935e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	0151      	lsls	r1, r2, #5
 8009368:	697a      	ldr	r2, [r7, #20]
 800936a:	440a      	add	r2, r1
 800936c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009370:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009374:	6113      	str	r3, [r2, #16]
 8009376:	e039      	b.n	80093ec <USB_EPStartXfer+0x3dc>
 8009378:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	691a      	ldr	r2, [r3, #16]
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	4413      	add	r3, r2
 8009386:	1e5a      	subs	r2, r3, #1
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009390:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	89fa      	ldrh	r2, [r7, #14]
 8009398:	fb03 f202 	mul.w	r2, r3, r2
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ac:	691a      	ldr	r2, [r3, #16]
 80093ae:	89fb      	ldrh	r3, [r7, #14]
 80093b0:	04d9      	lsls	r1, r3, #19
 80093b2:	4b2f      	ldr	r3, [pc, #188]	@ (8009470 <USB_EPStartXfer+0x460>)
 80093b4:	400b      	ands	r3, r1
 80093b6:	6939      	ldr	r1, [r7, #16]
 80093b8:	0148      	lsls	r0, r1, #5
 80093ba:	6979      	ldr	r1, [r7, #20]
 80093bc:	4401      	add	r1, r0
 80093be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093c2:	4313      	orrs	r3, r2
 80093c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	015a      	lsls	r2, r3, #5
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093d2:	691a      	ldr	r2, [r3, #16]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	6a1b      	ldr	r3, [r3, #32]
 80093d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093dc:	6939      	ldr	r1, [r7, #16]
 80093de:	0148      	lsls	r0, r1, #5
 80093e0:	6979      	ldr	r1, [r7, #20]
 80093e2:	4401      	add	r1, r0
 80093e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093e8:	4313      	orrs	r3, r2
 80093ea:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	791b      	ldrb	r3, [r3, #4]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d128      	bne.n	8009446 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009400:	2b00      	cmp	r3, #0
 8009402:	d110      	bne.n	8009426 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	015a      	lsls	r2, r3, #5
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	4413      	add	r3, r2
 800940c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	693a      	ldr	r2, [r7, #16]
 8009414:	0151      	lsls	r1, r2, #5
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	440a      	add	r2, r1
 800941a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800941e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009422:	6013      	str	r3, [r2, #0]
 8009424:	e00f      	b.n	8009446 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	015a      	lsls	r2, r3, #5
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	4413      	add	r3, r2
 800942e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	0151      	lsls	r1, r2, #5
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	440a      	add	r2, r1
 800943c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009440:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009444:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	0151      	lsls	r1, r2, #5
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	440a      	add	r2, r1
 800945c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009460:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009464:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3718      	adds	r7, #24
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	1ff80000 	.word	0x1ff80000

08009474 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800947e:	2300      	movs	r3, #0
 8009480:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	785b      	ldrb	r3, [r3, #1]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d14a      	bne.n	8009528 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	015a      	lsls	r2, r3, #5
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	4413      	add	r3, r2
 800949c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094aa:	f040 8086 	bne.w	80095ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	015a      	lsls	r2, r3, #5
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	7812      	ldrb	r2, [r2, #0]
 80094c2:	0151      	lsls	r1, r2, #5
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	440a      	add	r2, r1
 80094c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80094d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	7812      	ldrb	r2, [r2, #0]
 80094e6:	0151      	lsls	r1, r2, #5
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	440a      	add	r2, r1
 80094ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80094f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	3301      	adds	r3, #1
 80094fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009502:	4293      	cmp	r3, r2
 8009504:	d902      	bls.n	800950c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	75fb      	strb	r3, [r7, #23]
          break;
 800950a:	e056      	b.n	80095ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	015a      	lsls	r2, r3, #5
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	4413      	add	r3, r2
 8009516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009524:	d0e7      	beq.n	80094f6 <USB_EPStopXfer+0x82>
 8009526:	e048      	b.n	80095ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	015a      	lsls	r2, r3, #5
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	4413      	add	r3, r2
 8009532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800953c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009540:	d13b      	bne.n	80095ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	7812      	ldrb	r2, [r2, #0]
 8009556:	0151      	lsls	r1, r2, #5
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	440a      	add	r2, r1
 800955c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009560:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009564:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	015a      	lsls	r2, r3, #5
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	4413      	add	r3, r2
 8009570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	7812      	ldrb	r2, [r2, #0]
 800957a:	0151      	lsls	r1, r2, #5
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	440a      	add	r2, r1
 8009580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009584:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009588:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	3301      	adds	r3, #1
 800958e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009596:	4293      	cmp	r3, r2
 8009598:	d902      	bls.n	80095a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	75fb      	strb	r3, [r7, #23]
          break;
 800959e:	e00c      	b.n	80095ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	015a      	lsls	r2, r3, #5
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	4413      	add	r3, r2
 80095aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095b8:	d0e7      	beq.n	800958a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	371c      	adds	r7, #28
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b089      	sub	sp, #36	@ 0x24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	4611      	mov	r1, r2
 80095d4:	461a      	mov	r2, r3
 80095d6:	460b      	mov	r3, r1
 80095d8:	71fb      	strb	r3, [r7, #7]
 80095da:	4613      	mov	r3, r2
 80095dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80095e6:	88bb      	ldrh	r3, [r7, #4]
 80095e8:	3303      	adds	r3, #3
 80095ea:	089b      	lsrs	r3, r3, #2
 80095ec:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80095ee:	2300      	movs	r3, #0
 80095f0:	61bb      	str	r3, [r7, #24]
 80095f2:	e018      	b.n	8009626 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	031a      	lsls	r2, r3, #12
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009600:	461a      	mov	r2, r3
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	3301      	adds	r3, #1
 800960c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	3301      	adds	r3, #1
 8009612:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	3301      	adds	r3, #1
 8009618:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	3301      	adds	r3, #1
 800961e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	3301      	adds	r3, #1
 8009624:	61bb      	str	r3, [r7, #24]
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	429a      	cmp	r2, r3
 800962c:	d3e2      	bcc.n	80095f4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3724      	adds	r7, #36	@ 0x24
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800963c:	b480      	push	{r7}
 800963e:	b08b      	sub	sp, #44	@ 0x2c
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	4613      	mov	r3, r2
 8009648:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009652:	88fb      	ldrh	r3, [r7, #6]
 8009654:	089b      	lsrs	r3, r3, #2
 8009656:	b29b      	uxth	r3, r3
 8009658:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800965a:	88fb      	ldrh	r3, [r7, #6]
 800965c:	f003 0303 	and.w	r3, r3, #3
 8009660:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009662:	2300      	movs	r3, #0
 8009664:	623b      	str	r3, [r7, #32]
 8009666:	e014      	b.n	8009692 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009672:	601a      	str	r2, [r3, #0]
    pDest++;
 8009674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009676:	3301      	adds	r3, #1
 8009678:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800967a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800967c:	3301      	adds	r3, #1
 800967e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009682:	3301      	adds	r3, #1
 8009684:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009688:	3301      	adds	r3, #1
 800968a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	3301      	adds	r3, #1
 8009690:	623b      	str	r3, [r7, #32]
 8009692:	6a3a      	ldr	r2, [r7, #32]
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	429a      	cmp	r2, r3
 8009698:	d3e6      	bcc.n	8009668 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800969a:	8bfb      	ldrh	r3, [r7, #30]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d01e      	beq.n	80096de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096aa:	461a      	mov	r2, r3
 80096ac:	f107 0310 	add.w	r3, r7, #16
 80096b0:	6812      	ldr	r2, [r2, #0]
 80096b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	00db      	lsls	r3, r3, #3
 80096bc:	fa22 f303 	lsr.w	r3, r2, r3
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096c4:	701a      	strb	r2, [r3, #0]
      i++;
 80096c6:	6a3b      	ldr	r3, [r7, #32]
 80096c8:	3301      	adds	r3, #1
 80096ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80096cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ce:	3301      	adds	r3, #1
 80096d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80096d2:	8bfb      	ldrh	r3, [r7, #30]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80096d8:	8bfb      	ldrh	r3, [r7, #30]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1ea      	bne.n	80096b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80096de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	372c      	adds	r7, #44	@ 0x2c
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	785b      	ldrb	r3, [r3, #1]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d12c      	bne.n	8009762 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	015a      	lsls	r2, r3, #5
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	4413      	add	r3, r2
 8009710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	db12      	blt.n	8009740 <USB_EPSetStall+0x54>
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00f      	beq.n	8009740 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	015a      	lsls	r2, r3, #5
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	4413      	add	r3, r2
 8009728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	0151      	lsls	r1, r2, #5
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	440a      	add	r2, r1
 8009736:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800973a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800973e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	015a      	lsls	r2, r3, #5
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	4413      	add	r3, r2
 8009748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68ba      	ldr	r2, [r7, #8]
 8009750:	0151      	lsls	r1, r2, #5
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	440a      	add	r2, r1
 8009756:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800975a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	e02b      	b.n	80097ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	015a      	lsls	r2, r3, #5
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4413      	add	r3, r2
 800976a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	db12      	blt.n	800979a <USB_EPSetStall+0xae>
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00f      	beq.n	800979a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	0151      	lsls	r1, r2, #5
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	440a      	add	r2, r1
 8009790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009794:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009798:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	015a      	lsls	r2, r3, #5
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4413      	add	r3, r2
 80097a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	0151      	lsls	r1, r2, #5
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	440a      	add	r2, r1
 80097b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80097b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	785b      	ldrb	r3, [r3, #1]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d128      	bne.n	8009836 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68ba      	ldr	r2, [r7, #8]
 80097f4:	0151      	lsls	r1, r2, #5
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	440a      	add	r2, r1
 80097fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009802:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	791b      	ldrb	r3, [r3, #4]
 8009808:	2b03      	cmp	r3, #3
 800980a:	d003      	beq.n	8009814 <USB_EPClearStall+0x4c>
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	791b      	ldrb	r3, [r3, #4]
 8009810:	2b02      	cmp	r3, #2
 8009812:	d138      	bne.n	8009886 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	0151      	lsls	r1, r2, #5
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	440a      	add	r2, r1
 800982a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800982e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	e027      	b.n	8009886 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	4413      	add	r3, r2
 800983e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68ba      	ldr	r2, [r7, #8]
 8009846:	0151      	lsls	r1, r2, #5
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	440a      	add	r2, r1
 800984c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009850:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009854:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	791b      	ldrb	r3, [r3, #4]
 800985a:	2b03      	cmp	r3, #3
 800985c:	d003      	beq.n	8009866 <USB_EPClearStall+0x9e>
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	791b      	ldrb	r3, [r3, #4]
 8009862:	2b02      	cmp	r3, #2
 8009864:	d10f      	bne.n	8009886 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	4413      	add	r3, r2
 800986e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	0151      	lsls	r1, r2, #5
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	440a      	add	r2, r1
 800987c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009884:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3714      	adds	r7, #20
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009894:	b480      	push	{r7}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098b2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80098b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80098c8:	68f9      	ldr	r1, [r7, #12]
 80098ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098ce:	4313      	orrs	r3, r2
 80098d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3714      	adds	r7, #20
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80098fa:	f023 0303 	bic.w	r3, r3, #3
 80098fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800990e:	f023 0302 	bic.w	r3, r3, #2
 8009912:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009922:	b480      	push	{r7}
 8009924:	b085      	sub	sp, #20
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800993c:	f023 0303 	bic.w	r3, r3, #3
 8009940:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009950:	f043 0302 	orr.w	r3, r3, #2
 8009954:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3714      	adds	r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	4013      	ands	r3, r2
 800997a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800997c:	68fb      	ldr	r3, [r7, #12]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800998a:	b480      	push	{r7}
 800998c:	b085      	sub	sp, #20
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	4013      	ands	r3, r2
 80099ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	0c1b      	lsrs	r3, r3, #16
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr

080099be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80099be:	b480      	push	{r7}
 80099c0:	b085      	sub	sp, #20
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099da:	69db      	ldr	r3, [r3, #28]
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	4013      	ands	r3, r2
 80099e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	b29b      	uxth	r3, r3
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b085      	sub	sp, #20
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	460b      	mov	r3, r1
 80099fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009a02:	78fb      	ldrb	r3, [r7, #3]
 8009a04:	015a      	lsls	r2, r3, #5
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	4413      	add	r3, r2
 8009a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a20:	68bb      	ldr	r3, [r7, #8]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b087      	sub	sp, #28
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	460b      	mov	r3, r1
 8009a38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009a52:	78fb      	ldrb	r3, [r7, #3]
 8009a54:	f003 030f 	and.w	r3, r3, #15
 8009a58:	68fa      	ldr	r2, [r7, #12]
 8009a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a5e:	01db      	lsls	r3, r3, #7
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	693a      	ldr	r2, [r7, #16]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	371c      	adds	r7, #28
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	f003 0301 	and.w	r3, r3, #1
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b085      	sub	sp, #20
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ac0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009ac4:	f023 0307 	bic.w	r3, r3, #7
 8009ac8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009adc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	333c      	adds	r3, #60	@ 0x3c
 8009afe:	3304      	adds	r3, #4
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	4a1c      	ldr	r2, [pc, #112]	@ (8009b78 <USB_EP0_OutStart+0x8c>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d90a      	bls.n	8009b22 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b1c:	d101      	bne.n	8009b22 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	e024      	b.n	8009b6c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b28:	461a      	mov	r2, r3
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b50:	f043 0318 	orr.w	r3, r3, #24
 8009b54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b64:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009b68:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3714      	adds	r7, #20
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	4f54300a 	.word	0x4f54300a

08009b7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b84:	2300      	movs	r3, #0
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4a13      	ldr	r2, [pc, #76]	@ (8009be0 <USB_CoreReset+0x64>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d901      	bls.n	8009b9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e01b      	b.n	8009bd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	daf2      	bge.n	8009b88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	f043 0201 	orr.w	r2, r3, #1
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4a09      	ldr	r2, [pc, #36]	@ (8009be0 <USB_CoreReset+0x64>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d901      	bls.n	8009bc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e006      	b.n	8009bd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d0f0      	beq.n	8009bb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3714      	adds	r7, #20
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	00030d40 	.word	0x00030d40

08009be4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	460b      	mov	r3, r1
 8009bee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bf0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009bf4:	f002 fe2c 	bl	800c850 <USBD_static_malloc>
 8009bf8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d109      	bne.n	8009c14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	32b0      	adds	r2, #176	@ 0xb0
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009c10:	2302      	movs	r3, #2
 8009c12:	e0d4      	b.n	8009dbe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009c14:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009c18:	2100      	movs	r1, #0
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f002 fe36 	bl	800c88c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	32b0      	adds	r2, #176	@ 0xb0
 8009c2a:	68f9      	ldr	r1, [r7, #12]
 8009c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	32b0      	adds	r2, #176	@ 0xb0
 8009c3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	7c1b      	ldrb	r3, [r3, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d138      	bne.n	8009cbe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c4c:	4b5e      	ldr	r3, [pc, #376]	@ (8009dc8 <USBD_CDC_Init+0x1e4>)
 8009c4e:	7819      	ldrb	r1, [r3, #0]
 8009c50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c54:	2202      	movs	r2, #2
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f002 fbe6 	bl	800c428 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c5c:	4b5a      	ldr	r3, [pc, #360]	@ (8009dc8 <USBD_CDC_Init+0x1e4>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	f003 020f 	and.w	r2, r3, #15
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	440b      	add	r3, r1
 8009c70:	3324      	adds	r3, #36	@ 0x24
 8009c72:	2201      	movs	r2, #1
 8009c74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c76:	4b55      	ldr	r3, [pc, #340]	@ (8009dcc <USBD_CDC_Init+0x1e8>)
 8009c78:	7819      	ldrb	r1, [r3, #0]
 8009c7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c7e:	2202      	movs	r2, #2
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f002 fbd1 	bl	800c428 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c86:	4b51      	ldr	r3, [pc, #324]	@ (8009dcc <USBD_CDC_Init+0x1e8>)
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	f003 020f 	and.w	r2, r3, #15
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	4613      	mov	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	440b      	add	r3, r1
 8009c9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8009dd0 <USBD_CDC_Init+0x1ec>)
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	f003 020f 	and.w	r2, r3, #15
 8009caa:	6879      	ldr	r1, [r7, #4]
 8009cac:	4613      	mov	r3, r2
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	4413      	add	r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	440b      	add	r3, r1
 8009cb6:	3326      	adds	r3, #38	@ 0x26
 8009cb8:	2210      	movs	r2, #16
 8009cba:	801a      	strh	r2, [r3, #0]
 8009cbc:	e035      	b.n	8009d2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009cbe:	4b42      	ldr	r3, [pc, #264]	@ (8009dc8 <USBD_CDC_Init+0x1e4>)
 8009cc0:	7819      	ldrb	r1, [r3, #0]
 8009cc2:	2340      	movs	r3, #64	@ 0x40
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f002 fbae 	bl	800c428 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ccc:	4b3e      	ldr	r3, [pc, #248]	@ (8009dc8 <USBD_CDC_Init+0x1e4>)
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	f003 020f 	and.w	r2, r3, #15
 8009cd4:	6879      	ldr	r1, [r7, #4]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	440b      	add	r3, r1
 8009ce0:	3324      	adds	r3, #36	@ 0x24
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009ce6:	4b39      	ldr	r3, [pc, #228]	@ (8009dcc <USBD_CDC_Init+0x1e8>)
 8009ce8:	7819      	ldrb	r1, [r3, #0]
 8009cea:	2340      	movs	r3, #64	@ 0x40
 8009cec:	2202      	movs	r2, #2
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f002 fb9a 	bl	800c428 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009cf4:	4b35      	ldr	r3, [pc, #212]	@ (8009dcc <USBD_CDC_Init+0x1e8>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	f003 020f 	and.w	r2, r3, #15
 8009cfc:	6879      	ldr	r1, [r7, #4]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	440b      	add	r3, r1
 8009d08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d10:	4b2f      	ldr	r3, [pc, #188]	@ (8009dd0 <USBD_CDC_Init+0x1ec>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	f003 020f 	and.w	r2, r3, #15
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	440b      	add	r3, r1
 8009d24:	3326      	adds	r3, #38	@ 0x26
 8009d26:	2210      	movs	r2, #16
 8009d28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d2a:	4b29      	ldr	r3, [pc, #164]	@ (8009dd0 <USBD_CDC_Init+0x1ec>)
 8009d2c:	7819      	ldrb	r1, [r3, #0]
 8009d2e:	2308      	movs	r3, #8
 8009d30:	2203      	movs	r2, #3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f002 fb78 	bl	800c428 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009d38:	4b25      	ldr	r3, [pc, #148]	@ (8009dd0 <USBD_CDC_Init+0x1ec>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	f003 020f 	and.w	r2, r3, #15
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	4613      	mov	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	440b      	add	r3, r1
 8009d4c:	3324      	adds	r3, #36	@ 0x24
 8009d4e:	2201      	movs	r2, #1
 8009d50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	33b0      	adds	r3, #176	@ 0xb0
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d88:	2302      	movs	r3, #2
 8009d8a:	e018      	b.n	8009dbe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	7c1b      	ldrb	r3, [r3, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10a      	bne.n	8009daa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d94:	4b0d      	ldr	r3, [pc, #52]	@ (8009dcc <USBD_CDC_Init+0x1e8>)
 8009d96:	7819      	ldrb	r1, [r3, #0]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f002 fcba 	bl	800c71c <USBD_LL_PrepareReceive>
 8009da8:	e008      	b.n	8009dbc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009daa:	4b08      	ldr	r3, [pc, #32]	@ (8009dcc <USBD_CDC_Init+0x1e8>)
 8009dac:	7819      	ldrb	r1, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009db4:	2340      	movs	r3, #64	@ 0x40
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f002 fcb0 	bl	800c71c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20000093 	.word	0x20000093
 8009dcc:	20000094 	.word	0x20000094
 8009dd0:	20000095 	.word	0x20000095

08009dd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	460b      	mov	r3, r1
 8009dde:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009de0:	4b3a      	ldr	r3, [pc, #232]	@ (8009ecc <USBD_CDC_DeInit+0xf8>)
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	4619      	mov	r1, r3
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f002 fb5c 	bl	800c4a4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009dec:	4b37      	ldr	r3, [pc, #220]	@ (8009ecc <USBD_CDC_DeInit+0xf8>)
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	f003 020f 	and.w	r2, r3, #15
 8009df4:	6879      	ldr	r1, [r7, #4]
 8009df6:	4613      	mov	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	440b      	add	r3, r1
 8009e00:	3324      	adds	r3, #36	@ 0x24
 8009e02:	2200      	movs	r2, #0
 8009e04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009e06:	4b32      	ldr	r3, [pc, #200]	@ (8009ed0 <USBD_CDC_DeInit+0xfc>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f002 fb49 	bl	800c4a4 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009e12:	4b2f      	ldr	r3, [pc, #188]	@ (8009ed0 <USBD_CDC_DeInit+0xfc>)
 8009e14:	781b      	ldrb	r3, [r3, #0]
 8009e16:	f003 020f 	and.w	r2, r3, #15
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	440b      	add	r3, r1
 8009e26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009e2e:	4b29      	ldr	r3, [pc, #164]	@ (8009ed4 <USBD_CDC_DeInit+0x100>)
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f002 fb35 	bl	800c4a4 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009e3a:	4b26      	ldr	r3, [pc, #152]	@ (8009ed4 <USBD_CDC_DeInit+0x100>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	f003 020f 	and.w	r2, r3, #15
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	4613      	mov	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	4413      	add	r3, r2
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	440b      	add	r3, r1
 8009e4e:	3324      	adds	r3, #36	@ 0x24
 8009e50:	2200      	movs	r2, #0
 8009e52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009e54:	4b1f      	ldr	r3, [pc, #124]	@ (8009ed4 <USBD_CDC_DeInit+0x100>)
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	f003 020f 	and.w	r2, r3, #15
 8009e5c:	6879      	ldr	r1, [r7, #4]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4413      	add	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	440b      	add	r3, r1
 8009e68:	3326      	adds	r3, #38	@ 0x26
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	32b0      	adds	r2, #176	@ 0xb0
 8009e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d01f      	beq.n	8009ec0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	33b0      	adds	r3, #176	@ 0xb0
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	32b0      	adds	r2, #176	@ 0xb0
 8009e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f002 fce2 	bl	800c86c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	32b0      	adds	r2, #176	@ 0xb0
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	20000093 	.word	0x20000093
 8009ed0:	20000094 	.word	0x20000094
 8009ed4:	20000095 	.word	0x20000095

08009ed8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	32b0      	adds	r2, #176	@ 0xb0
 8009eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e0bf      	b.n	800a088 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d050      	beq.n	8009fb6 <USBD_CDC_Setup+0xde>
 8009f14:	2b20      	cmp	r3, #32
 8009f16:	f040 80af 	bne.w	800a078 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	88db      	ldrh	r3, [r3, #6]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d03a      	beq.n	8009f98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	b25b      	sxtb	r3, r3
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	da1b      	bge.n	8009f64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	33b0      	adds	r3, #176	@ 0xb0
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009f42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	88d2      	ldrh	r2, [r2, #6]
 8009f48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	88db      	ldrh	r3, [r3, #6]
 8009f4e:	2b07      	cmp	r3, #7
 8009f50:	bf28      	it	cs
 8009f52:	2307      	movcs	r3, #7
 8009f54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	89fa      	ldrh	r2, [r7, #14]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 fdb1 	bl	800bac4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009f62:	e090      	b.n	800a086 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	785a      	ldrb	r2, [r3, #1]
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	88db      	ldrh	r3, [r3, #6]
 8009f72:	2b3f      	cmp	r3, #63	@ 0x3f
 8009f74:	d803      	bhi.n	8009f7e <USBD_CDC_Setup+0xa6>
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	88db      	ldrh	r3, [r3, #6]
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	e000      	b.n	8009f80 <USBD_CDC_Setup+0xa8>
 8009f7e:	2240      	movs	r2, #64	@ 0x40
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f86:	6939      	ldr	r1, [r7, #16]
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009f8e:	461a      	mov	r2, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 fdc3 	bl	800bb1c <USBD_CtlPrepareRx>
      break;
 8009f96:	e076      	b.n	800a086 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	33b0      	adds	r3, #176	@ 0xb0
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	683a      	ldr	r2, [r7, #0]
 8009fac:	7850      	ldrb	r0, [r2, #1]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	4798      	blx	r3
      break;
 8009fb4:	e067      	b.n	800a086 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	785b      	ldrb	r3, [r3, #1]
 8009fba:	2b0b      	cmp	r3, #11
 8009fbc:	d851      	bhi.n	800a062 <USBD_CDC_Setup+0x18a>
 8009fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc4 <USBD_CDC_Setup+0xec>)
 8009fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc4:	08009ff5 	.word	0x08009ff5
 8009fc8:	0800a071 	.word	0x0800a071
 8009fcc:	0800a063 	.word	0x0800a063
 8009fd0:	0800a063 	.word	0x0800a063
 8009fd4:	0800a063 	.word	0x0800a063
 8009fd8:	0800a063 	.word	0x0800a063
 8009fdc:	0800a063 	.word	0x0800a063
 8009fe0:	0800a063 	.word	0x0800a063
 8009fe4:	0800a063 	.word	0x0800a063
 8009fe8:	0800a063 	.word	0x0800a063
 8009fec:	0800a01f 	.word	0x0800a01f
 8009ff0:	0800a049 	.word	0x0800a049
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	2b03      	cmp	r3, #3
 8009ffe:	d107      	bne.n	800a010 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a000:	f107 030a 	add.w	r3, r7, #10
 800a004:	2202      	movs	r2, #2
 800a006:	4619      	mov	r1, r3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f001 fd5b 	bl	800bac4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a00e:	e032      	b.n	800a076 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f001 fce5 	bl	800b9e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a018:	2303      	movs	r3, #3
 800a01a:	75fb      	strb	r3, [r7, #23]
          break;
 800a01c:	e02b      	b.n	800a076 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a024:	b2db      	uxtb	r3, r3
 800a026:	2b03      	cmp	r3, #3
 800a028:	d107      	bne.n	800a03a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a02a:	f107 030d 	add.w	r3, r7, #13
 800a02e:	2201      	movs	r2, #1
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 fd46 	bl	800bac4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a038:	e01d      	b.n	800a076 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f001 fcd0 	bl	800b9e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a042:	2303      	movs	r3, #3
 800a044:	75fb      	strb	r3, [r7, #23]
          break;
 800a046:	e016      	b.n	800a076 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a04e:	b2db      	uxtb	r3, r3
 800a050:	2b03      	cmp	r3, #3
 800a052:	d00f      	beq.n	800a074 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f001 fcc3 	bl	800b9e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800a05c:	2303      	movs	r3, #3
 800a05e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a060:	e008      	b.n	800a074 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f001 fcbc 	bl	800b9e2 <USBD_CtlError>
          ret = USBD_FAIL;
 800a06a:	2303      	movs	r3, #3
 800a06c:	75fb      	strb	r3, [r7, #23]
          break;
 800a06e:	e002      	b.n	800a076 <USBD_CDC_Setup+0x19e>
          break;
 800a070:	bf00      	nop
 800a072:	e008      	b.n	800a086 <USBD_CDC_Setup+0x1ae>
          break;
 800a074:	bf00      	nop
      }
      break;
 800a076:	e006      	b.n	800a086 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 fcb1 	bl	800b9e2 <USBD_CtlError>
      ret = USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	75fb      	strb	r3, [r7, #23]
      break;
 800a084:	bf00      	nop
  }

  return (uint8_t)ret;
 800a086:	7dfb      	ldrb	r3, [r7, #23]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	32b0      	adds	r2, #176	@ 0xb0
 800a0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d101      	bne.n	800a0ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e065      	b.n	800a186 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	32b0      	adds	r2, #176	@ 0xb0
 800a0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0ca:	78fb      	ldrb	r3, [r7, #3]
 800a0cc:	f003 020f 	and.w	r2, r3, #15
 800a0d0:	6879      	ldr	r1, [r7, #4]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	440b      	add	r3, r1
 800a0dc:	3318      	adds	r3, #24
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d02f      	beq.n	800a144 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	f003 020f 	and.w	r2, r3, #15
 800a0ea:	6879      	ldr	r1, [r7, #4]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	440b      	add	r3, r1
 800a0f6:	3318      	adds	r3, #24
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	78fb      	ldrb	r3, [r7, #3]
 800a0fc:	f003 010f 	and.w	r1, r3, #15
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	460b      	mov	r3, r1
 800a104:	00db      	lsls	r3, r3, #3
 800a106:	440b      	add	r3, r1
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4403      	add	r3, r0
 800a10c:	3344      	adds	r3, #68	@ 0x44
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	fbb2 f1f3 	udiv	r1, r2, r3
 800a114:	fb01 f303 	mul.w	r3, r1, r3
 800a118:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d112      	bne.n	800a144 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a11e:	78fb      	ldrb	r3, [r7, #3]
 800a120:	f003 020f 	and.w	r2, r3, #15
 800a124:	6879      	ldr	r1, [r7, #4]
 800a126:	4613      	mov	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4413      	add	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	440b      	add	r3, r1
 800a130:	3318      	adds	r3, #24
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a136:	78f9      	ldrb	r1, [r7, #3]
 800a138:	2300      	movs	r3, #0
 800a13a:	2200      	movs	r2, #0
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f002 fab5 	bl	800c6ac <USBD_LL_Transmit>
 800a142:	e01f      	b.n	800a184 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	2200      	movs	r2, #0
 800a148:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	33b0      	adds	r3, #176	@ 0xb0
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	4413      	add	r3, r2
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d010      	beq.n	800a184 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	33b0      	adds	r3, #176	@ 0xb0
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a180:	78fa      	ldrb	r2, [r7, #3]
 800a182:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	32b0      	adds	r2, #176	@ 0xb0
 800a1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	32b0      	adds	r2, #176	@ 0xb0
 800a1b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e01a      	b.n	800a1f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f002 fae1 	bl	800c78c <USBD_LL_GetRxDataSize>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	33b0      	adds	r3, #176	@ 0xb0
 800a1dc:	009b      	lsls	r3, r3, #2
 800a1de:	4413      	add	r3, r2
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	32b0      	adds	r2, #176	@ 0xb0
 800a210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a214:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d101      	bne.n	800a220 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e024      	b.n	800a26a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	33b0      	adds	r3, #176	@ 0xb0
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d019      	beq.n	800a268 <USBD_CDC_EP0_RxReady+0x6a>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a23a:	2bff      	cmp	r3, #255	@ 0xff
 800a23c:	d014      	beq.n	800a268 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	33b0      	adds	r3, #176	@ 0xb0
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	68fa      	ldr	r2, [r7, #12]
 800a252:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a256:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a25e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	22ff      	movs	r2, #255	@ 0xff
 800a264:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a27c:	2182      	movs	r1, #130	@ 0x82
 800a27e:	4818      	ldr	r0, [pc, #96]	@ (800a2e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a280:	f000 fd4f 	bl	800ad22 <USBD_GetEpDesc>
 800a284:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a286:	2101      	movs	r1, #1
 800a288:	4815      	ldr	r0, [pc, #84]	@ (800a2e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a28a:	f000 fd4a 	bl	800ad22 <USBD_GetEpDesc>
 800a28e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a290:	2181      	movs	r1, #129	@ 0x81
 800a292:	4813      	ldr	r0, [pc, #76]	@ (800a2e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a294:	f000 fd45 	bl	800ad22 <USBD_GetEpDesc>
 800a298:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	2210      	movs	r2, #16
 800a2a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d006      	beq.n	800a2ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2b4:	711a      	strb	r2, [r3, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d006      	beq.n	800a2ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2c8:	711a      	strb	r2, [r3, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2243      	movs	r2, #67	@ 0x43
 800a2d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2d4:	4b02      	ldr	r3, [pc, #8]	@ (800a2e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	20000050 	.word	0x20000050

0800a2e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2ec:	2182      	movs	r1, #130	@ 0x82
 800a2ee:	4818      	ldr	r0, [pc, #96]	@ (800a350 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2f0:	f000 fd17 	bl	800ad22 <USBD_GetEpDesc>
 800a2f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	4815      	ldr	r0, [pc, #84]	@ (800a350 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2fa:	f000 fd12 	bl	800ad22 <USBD_GetEpDesc>
 800a2fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a300:	2181      	movs	r1, #129	@ 0x81
 800a302:	4813      	ldr	r0, [pc, #76]	@ (800a350 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a304:	f000 fd0d 	bl	800ad22 <USBD_GetEpDesc>
 800a308:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	2210      	movs	r2, #16
 800a314:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d006      	beq.n	800a32a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	2200      	movs	r2, #0
 800a320:	711a      	strb	r2, [r3, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	f042 0202 	orr.w	r2, r2, #2
 800a328:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d006      	beq.n	800a33e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	711a      	strb	r2, [r3, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f042 0202 	orr.w	r2, r2, #2
 800a33c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2243      	movs	r2, #67	@ 0x43
 800a342:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a344:	4b02      	ldr	r3, [pc, #8]	@ (800a350 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a346:	4618      	mov	r0, r3
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	20000050 	.word	0x20000050

0800a354 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b086      	sub	sp, #24
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a35c:	2182      	movs	r1, #130	@ 0x82
 800a35e:	4818      	ldr	r0, [pc, #96]	@ (800a3c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a360:	f000 fcdf 	bl	800ad22 <USBD_GetEpDesc>
 800a364:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a366:	2101      	movs	r1, #1
 800a368:	4815      	ldr	r0, [pc, #84]	@ (800a3c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a36a:	f000 fcda 	bl	800ad22 <USBD_GetEpDesc>
 800a36e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a370:	2181      	movs	r1, #129	@ 0x81
 800a372:	4813      	ldr	r0, [pc, #76]	@ (800a3c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a374:	f000 fcd5 	bl	800ad22 <USBD_GetEpDesc>
 800a378:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2210      	movs	r2, #16
 800a384:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d006      	beq.n	800a39a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	2200      	movs	r2, #0
 800a390:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a394:	711a      	strb	r2, [r3, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d006      	beq.n	800a3ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a3a8:	711a      	strb	r2, [r3, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2243      	movs	r2, #67	@ 0x43
 800a3b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3b4:	4b02      	ldr	r3, [pc, #8]	@ (800a3c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3718      	adds	r7, #24
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20000050 	.word	0x20000050

0800a3c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	220a      	movs	r2, #10
 800a3d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a3d2:	4b03      	ldr	r3, [pc, #12]	@ (800a3e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	2000000c 	.word	0x2000000c

0800a3e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d101      	bne.n	800a3f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e009      	b.n	800a40c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	33b0      	adds	r3, #176	@ 0xb0
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a418:	b480      	push	{r7}
 800a41a:	b087      	sub	sp, #28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	32b0      	adds	r2, #176	@ 0xb0
 800a42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a432:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d101      	bne.n	800a43e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a43a:	2303      	movs	r3, #3
 800a43c:	e008      	b.n	800a450 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	68ba      	ldr	r2, [r7, #8]
 800a442:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	371c      	adds	r7, #28
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	32b0      	adds	r2, #176	@ 0xb0
 800a470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a474:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e004      	b.n	800a48a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
	...

0800a498 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	32b0      	adds	r2, #176	@ 0xb0
 800a4aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d101      	bne.n	800a4be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e025      	b.n	800a50a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d11f      	bne.n	800a508 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a4d0:	4b10      	ldr	r3, [pc, #64]	@ (800a514 <USBD_CDC_TransmitPacket+0x7c>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	f003 020f 	and.w	r2, r3, #15
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4403      	add	r3, r0
 800a4ea:	3318      	adds	r3, #24
 800a4ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a4ee:	4b09      	ldr	r3, [pc, #36]	@ (800a514 <USBD_CDC_TransmitPacket+0x7c>)
 800a4f0:	7819      	ldrb	r1, [r3, #0]
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f002 f8d4 	bl	800c6ac <USBD_LL_Transmit>

    ret = USBD_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a508:	7bfb      	ldrb	r3, [r7, #15]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20000093 	.word	0x20000093

0800a518 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	32b0      	adds	r2, #176	@ 0xb0
 800a52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	32b0      	adds	r2, #176	@ 0xb0
 800a53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a542:	2303      	movs	r3, #3
 800a544:	e018      	b.n	800a578 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	7c1b      	ldrb	r3, [r3, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10a      	bne.n	800a564 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a54e:	4b0c      	ldr	r3, [pc, #48]	@ (800a580 <USBD_CDC_ReceivePacket+0x68>)
 800a550:	7819      	ldrb	r1, [r3, #0]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a558:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f002 f8dd 	bl	800c71c <USBD_LL_PrepareReceive>
 800a562:	e008      	b.n	800a576 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a564:	4b06      	ldr	r3, [pc, #24]	@ (800a580 <USBD_CDC_ReceivePacket+0x68>)
 800a566:	7819      	ldrb	r1, [r3, #0]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a56e:	2340      	movs	r3, #64	@ 0x40
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f002 f8d3 	bl	800c71c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	20000094 	.word	0x20000094

0800a584 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	4613      	mov	r3, r2
 800a590:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d101      	bne.n	800a59c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a598:	2303      	movs	r3, #3
 800a59a:	e01f      	b.n	800a5dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d003      	beq.n	800a5c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	79fa      	ldrb	r2, [r7, #7]
 800a5ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f001 feab 	bl	800c32c <USBD_LL_Init>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a5da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b084      	sub	sp, #16
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d101      	bne.n	800a5fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e025      	b.n	800a648 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	32ae      	adds	r2, #174	@ 0xae
 800a60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00f      	beq.n	800a638 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	32ae      	adds	r2, #174	@ 0xae
 800a622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a628:	f107 020e 	add.w	r2, r7, #14
 800a62c:	4610      	mov	r0, r2
 800a62e:	4798      	blx	r3
 800a630:	4602      	mov	r2, r0
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a63e:	1c5a      	adds	r2, r3, #1
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3710      	adds	r7, #16
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f001 feb3 	bl	800c3c4 <USBD_LL_Start>
 800a65e:	4603      	mov	r3, r0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a670:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a672:	4618      	mov	r0, r3
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b084      	sub	sp, #16
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	460b      	mov	r3, r1
 800a688:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a694:	2b00      	cmp	r3, #0
 800a696:	d009      	beq.n	800a6ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	78fa      	ldrb	r2, [r7, #3]
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	4798      	blx	r3
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	78fa      	ldrb	r2, [r7, #3]
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	4798      	blx	r3
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b084      	sub	sp, #16
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f001 f936 	bl	800b96e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a710:	461a      	mov	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a71e:	f003 031f 	and.w	r3, r3, #31
 800a722:	2b02      	cmp	r3, #2
 800a724:	d01a      	beq.n	800a75c <USBD_LL_SetupStage+0x72>
 800a726:	2b02      	cmp	r3, #2
 800a728:	d822      	bhi.n	800a770 <USBD_LL_SetupStage+0x86>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d002      	beq.n	800a734 <USBD_LL_SetupStage+0x4a>
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d00a      	beq.n	800a748 <USBD_LL_SetupStage+0x5e>
 800a732:	e01d      	b.n	800a770 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 fb63 	bl	800ae08 <USBD_StdDevReq>
 800a742:	4603      	mov	r3, r0
 800a744:	73fb      	strb	r3, [r7, #15]
      break;
 800a746:	e020      	b.n	800a78a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a74e:	4619      	mov	r1, r3
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fbcb 	bl	800aeec <USBD_StdItfReq>
 800a756:	4603      	mov	r3, r0
 800a758:	73fb      	strb	r3, [r7, #15]
      break;
 800a75a:	e016      	b.n	800a78a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a762:	4619      	mov	r1, r3
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f000 fc2d 	bl	800afc4 <USBD_StdEPReq>
 800a76a:	4603      	mov	r3, r0
 800a76c:	73fb      	strb	r3, [r7, #15]
      break;
 800a76e:	e00c      	b.n	800a78a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a776:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	4619      	mov	r1, r3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f001 fec6 	bl	800c510 <USBD_LL_StallEP>
 800a784:	4603      	mov	r3, r0
 800a786:	73fb      	strb	r3, [r7, #15]
      break;
 800a788:	bf00      	nop
  }

  return ret;
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	460b      	mov	r3, r1
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a7a6:	7afb      	ldrb	r3, [r7, #11]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d16e      	bne.n	800a88a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a7b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	f040 8098 	bne.w	800a8f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	689a      	ldr	r2, [r3, #8]
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d913      	bls.n	800a7f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	689a      	ldr	r2, [r3, #8]
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	1ad2      	subs	r2, r2, r3
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	68da      	ldr	r2, [r3, #12]
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	bf28      	it	cs
 800a7e6:	4613      	movcs	r3, r2
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f001 f9b2 	bl	800bb56 <USBD_CtlContinueRx>
 800a7f2:	e07d      	b.n	800a8f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a7fa:	f003 031f 	and.w	r3, r3, #31
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d014      	beq.n	800a82c <USBD_LL_DataOutStage+0x98>
 800a802:	2b02      	cmp	r3, #2
 800a804:	d81d      	bhi.n	800a842 <USBD_LL_DataOutStage+0xae>
 800a806:	2b00      	cmp	r3, #0
 800a808:	d002      	beq.n	800a810 <USBD_LL_DataOutStage+0x7c>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d003      	beq.n	800a816 <USBD_LL_DataOutStage+0x82>
 800a80e:	e018      	b.n	800a842 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a810:	2300      	movs	r3, #0
 800a812:	75bb      	strb	r3, [r7, #22]
            break;
 800a814:	e018      	b.n	800a848 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	4619      	mov	r1, r3
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f000 fa64 	bl	800acee <USBD_CoreFindIF>
 800a826:	4603      	mov	r3, r0
 800a828:	75bb      	strb	r3, [r7, #22]
            break;
 800a82a:	e00d      	b.n	800a848 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a832:	b2db      	uxtb	r3, r3
 800a834:	4619      	mov	r1, r3
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f000 fa66 	bl	800ad08 <USBD_CoreFindEP>
 800a83c:	4603      	mov	r3, r0
 800a83e:	75bb      	strb	r3, [r7, #22]
            break;
 800a840:	e002      	b.n	800a848 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a842:	2300      	movs	r3, #0
 800a844:	75bb      	strb	r3, [r7, #22]
            break;
 800a846:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a848:	7dbb      	ldrb	r3, [r7, #22]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d119      	bne.n	800a882 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b03      	cmp	r3, #3
 800a858:	d113      	bne.n	800a882 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a85a:	7dba      	ldrb	r2, [r7, #22]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	32ae      	adds	r2, #174	@ 0xae
 800a860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00b      	beq.n	800a882 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a86a:	7dba      	ldrb	r2, [r7, #22]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a872:	7dba      	ldrb	r2, [r7, #22]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	32ae      	adds	r2, #174	@ 0xae
 800a878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f001 f978 	bl	800bb78 <USBD_CtlSendStatus>
 800a888:	e032      	b.n	800a8f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a88a:	7afb      	ldrb	r3, [r7, #11]
 800a88c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a890:	b2db      	uxtb	r3, r3
 800a892:	4619      	mov	r1, r3
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f000 fa37 	bl	800ad08 <USBD_CoreFindEP>
 800a89a:	4603      	mov	r3, r0
 800a89c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a89e:	7dbb      	ldrb	r3, [r7, #22]
 800a8a0:	2bff      	cmp	r3, #255	@ 0xff
 800a8a2:	d025      	beq.n	800a8f0 <USBD_LL_DataOutStage+0x15c>
 800a8a4:	7dbb      	ldrb	r3, [r7, #22]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d122      	bne.n	800a8f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	2b03      	cmp	r3, #3
 800a8b4:	d117      	bne.n	800a8e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a8b6:	7dba      	ldrb	r2, [r7, #22]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	32ae      	adds	r2, #174	@ 0xae
 800a8bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00f      	beq.n	800a8e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a8c6:	7dba      	ldrb	r2, [r7, #22]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a8ce:	7dba      	ldrb	r2, [r7, #22]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	32ae      	adds	r2, #174	@ 0xae
 800a8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	7afa      	ldrb	r2, [r7, #11]
 800a8dc:	4611      	mov	r1, r2
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	4798      	blx	r3
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a8e6:	7dfb      	ldrb	r3, [r7, #23]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d001      	beq.n	800a8f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a8ec:	7dfb      	ldrb	r3, [r7, #23]
 800a8ee:	e000      	b.n	800a8f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b086      	sub	sp, #24
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	60f8      	str	r0, [r7, #12]
 800a902:	460b      	mov	r3, r1
 800a904:	607a      	str	r2, [r7, #4]
 800a906:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a908:	7afb      	ldrb	r3, [r7, #11]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d16f      	bne.n	800a9ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3314      	adds	r3, #20
 800a912:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d15a      	bne.n	800a9d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	689a      	ldr	r2, [r3, #8]
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	429a      	cmp	r2, r3
 800a928:	d914      	bls.n	800a954 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	689a      	ldr	r2, [r3, #8]
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	1ad2      	subs	r2, r2, r3
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	461a      	mov	r2, r3
 800a93e:	6879      	ldr	r1, [r7, #4]
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f001 f8da 	bl	800bafa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a946:	2300      	movs	r3, #0
 800a948:	2200      	movs	r2, #0
 800a94a:	2100      	movs	r1, #0
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f001 fee5 	bl	800c71c <USBD_LL_PrepareReceive>
 800a952:	e03f      	b.n	800a9d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	68da      	ldr	r2, [r3, #12]
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d11c      	bne.n	800a99a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a968:	429a      	cmp	r2, r3
 800a96a:	d316      	bcc.n	800a99a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	685a      	ldr	r2, [r3, #4]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a976:	429a      	cmp	r2, r3
 800a978:	d20f      	bcs.n	800a99a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a97a:	2200      	movs	r2, #0
 800a97c:	2100      	movs	r1, #0
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f001 f8bb 	bl	800bafa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a98c:	2300      	movs	r3, #0
 800a98e:	2200      	movs	r2, #0
 800a990:	2100      	movs	r1, #0
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f001 fec2 	bl	800c71c <USBD_LL_PrepareReceive>
 800a998:	e01c      	b.n	800a9d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d10f      	bne.n	800a9c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d009      	beq.n	800a9c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	68f8      	ldr	r0, [r7, #12]
 800a9c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9c6:	2180      	movs	r1, #128	@ 0x80
 800a9c8:	68f8      	ldr	r0, [r7, #12]
 800a9ca:	f001 fda1 	bl	800c510 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f001 f8e5 	bl	800bb9e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d03a      	beq.n	800aa54 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f7ff fe42 	bl	800a668 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a9ec:	e032      	b.n	800aa54 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a9ee:	7afb      	ldrb	r3, [r7, #11]
 800a9f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f000 f985 	bl	800ad08 <USBD_CoreFindEP>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa02:	7dfb      	ldrb	r3, [r7, #23]
 800aa04:	2bff      	cmp	r3, #255	@ 0xff
 800aa06:	d025      	beq.n	800aa54 <USBD_LL_DataInStage+0x15a>
 800aa08:	7dfb      	ldrb	r3, [r7, #23]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d122      	bne.n	800aa54 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d11c      	bne.n	800aa54 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aa1a:	7dfa      	ldrb	r2, [r7, #23]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	32ae      	adds	r2, #174	@ 0xae
 800aa20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa24:	695b      	ldr	r3, [r3, #20]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d014      	beq.n	800aa54 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aa2a:	7dfa      	ldrb	r2, [r7, #23]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aa32:	7dfa      	ldrb	r2, [r7, #23]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	32ae      	adds	r2, #174	@ 0xae
 800aa38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3c:	695b      	ldr	r3, [r3, #20]
 800aa3e:	7afa      	ldrb	r2, [r7, #11]
 800aa40:	4611      	mov	r1, r2
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	4798      	blx	r3
 800aa46:	4603      	mov	r3, r0
 800aa48:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aa4a:	7dbb      	ldrb	r3, [r7, #22]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d001      	beq.n	800aa54 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aa50:	7dbb      	ldrb	r3, [r7, #22]
 800aa52:	e000      	b.n	800aa56 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b084      	sub	sp, #16
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d014      	beq.n	800aac4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00e      	beq.n	800aac4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	6852      	ldr	r2, [r2, #4]
 800aab2:	b2d2      	uxtb	r2, r2
 800aab4:	4611      	mov	r1, r2
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	4798      	blx	r3
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d001      	beq.n	800aac4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aac0:	2303      	movs	r3, #3
 800aac2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aac4:	2340      	movs	r3, #64	@ 0x40
 800aac6:	2200      	movs	r2, #0
 800aac8:	2100      	movs	r1, #0
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f001 fcac 	bl	800c428 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2240      	movs	r2, #64	@ 0x40
 800aadc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aae0:	2340      	movs	r3, #64	@ 0x40
 800aae2:	2200      	movs	r2, #0
 800aae4:	2180      	movs	r1, #128	@ 0x80
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f001 fc9e 	bl	800c428 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2240      	movs	r2, #64	@ 0x40
 800aaf6:	621a      	str	r2, [r3, #32]

  return ret;
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab02:	b480      	push	{r7}
 800ab04:	b083      	sub	sp, #12
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	78fa      	ldrb	r2, [r7, #3]
 800ab12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d006      	beq.n	800ab44 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2204      	movs	r2, #4
 800ab48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	b083      	sub	sp, #12
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	2b04      	cmp	r3, #4
 800ab6c:	d106      	bne.n	800ab7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ab74:	b2da      	uxtb	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b082      	sub	sp, #8
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d110      	bne.n	800abc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00b      	beq.n	800abc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abae:	69db      	ldr	r3, [r3, #28]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d005      	beq.n	800abc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abba:	69db      	ldr	r3, [r3, #28]
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b082      	sub	sp, #8
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	460b      	mov	r3, r1
 800abd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	32ae      	adds	r2, #174	@ 0xae
 800abe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d101      	bne.n	800abec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800abe8:	2303      	movs	r3, #3
 800abea:	e01c      	b.n	800ac26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	d115      	bne.n	800ac24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	32ae      	adds	r2, #174	@ 0xae
 800ac02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac06:	6a1b      	ldr	r3, [r3, #32]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00b      	beq.n	800ac24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	32ae      	adds	r2, #174	@ 0xae
 800ac16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	78fa      	ldrb	r2, [r7, #3]
 800ac1e:	4611      	mov	r1, r2
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	460b      	mov	r3, r1
 800ac38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	32ae      	adds	r2, #174	@ 0xae
 800ac44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d101      	bne.n	800ac50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e01c      	b.n	800ac8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b03      	cmp	r3, #3
 800ac5a:	d115      	bne.n	800ac88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	32ae      	adds	r2, #174	@ 0xae
 800ac66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d00b      	beq.n	800ac88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	32ae      	adds	r2, #174	@ 0xae
 800ac7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac80:	78fa      	ldrb	r2, [r7, #3]
 800ac82:	4611      	mov	r1, r2
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b083      	sub	sp, #12
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2201      	movs	r2, #1
 800acb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00e      	beq.n	800ace4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	6852      	ldr	r2, [r2, #4]
 800acd2:	b2d2      	uxtb	r2, r2
 800acd4:	4611      	mov	r1, r2
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	4798      	blx	r3
 800acda:	4603      	mov	r3, r0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d001      	beq.n	800ace4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ace0:	2303      	movs	r3, #3
 800ace2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800acee:	b480      	push	{r7}
 800acf0:	b083      	sub	sp, #12
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	460b      	mov	r3, r1
 800acf8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800acfa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b086      	sub	sp, #24
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	885b      	ldrh	r3, [r3, #2]
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	7812      	ldrb	r2, [r2, #0]
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d91f      	bls.n	800ad88 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ad4e:	e013      	b.n	800ad78 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ad50:	f107 030a 	add.w	r3, r7, #10
 800ad54:	4619      	mov	r1, r3
 800ad56:	6978      	ldr	r0, [r7, #20]
 800ad58:	f000 f81b 	bl	800ad92 <USBD_GetNextDesc>
 800ad5c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	785b      	ldrb	r3, [r3, #1]
 800ad62:	2b05      	cmp	r3, #5
 800ad64:	d108      	bne.n	800ad78 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	789b      	ldrb	r3, [r3, #2]
 800ad6e:	78fa      	ldrb	r2, [r7, #3]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d008      	beq.n	800ad86 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ad74:	2300      	movs	r3, #0
 800ad76:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	885b      	ldrh	r3, [r3, #2]
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	897b      	ldrh	r3, [r7, #10]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d8e5      	bhi.n	800ad50 <USBD_GetEpDesc+0x2e>
 800ad84:	e000      	b.n	800ad88 <USBD_GetEpDesc+0x66>
          break;
 800ad86:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad88:	693b      	ldr	r3, [r7, #16]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3718      	adds	r7, #24
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b085      	sub	sp, #20
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	881b      	ldrh	r3, [r3, #0]
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	7812      	ldrb	r2, [r2, #0]
 800ada8:	4413      	add	r3, r2
 800adaa:	b29a      	uxth	r2, r3
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4413      	add	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800adbc:	68fb      	ldr	r3, [r7, #12]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3714      	adds	r7, #20
 800adc2:	46bd      	mov	sp, r7
 800adc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc8:	4770      	bx	lr

0800adca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800adca:	b480      	push	{r7}
 800adcc:	b087      	sub	sp, #28
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	3301      	adds	r3, #1
 800ade0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ade8:	8a3b      	ldrh	r3, [r7, #16]
 800adea:	021b      	lsls	r3, r3, #8
 800adec:	b21a      	sxth	r2, r3
 800adee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	b21b      	sxth	r3, r3
 800adf6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800adf8:	89fb      	ldrh	r3, [r7, #14]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	371c      	adds	r7, #28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr
	...

0800ae08 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae1e:	2b40      	cmp	r3, #64	@ 0x40
 800ae20:	d005      	beq.n	800ae2e <USBD_StdDevReq+0x26>
 800ae22:	2b40      	cmp	r3, #64	@ 0x40
 800ae24:	d857      	bhi.n	800aed6 <USBD_StdDevReq+0xce>
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00f      	beq.n	800ae4a <USBD_StdDevReq+0x42>
 800ae2a:	2b20      	cmp	r3, #32
 800ae2c:	d153      	bne.n	800aed6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	32ae      	adds	r2, #174	@ 0xae
 800ae38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	4798      	blx	r3
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]
      break;
 800ae48:	e04a      	b.n	800aee0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	785b      	ldrb	r3, [r3, #1]
 800ae4e:	2b09      	cmp	r3, #9
 800ae50:	d83b      	bhi.n	800aeca <USBD_StdDevReq+0xc2>
 800ae52:	a201      	add	r2, pc, #4	@ (adr r2, 800ae58 <USBD_StdDevReq+0x50>)
 800ae54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae58:	0800aead 	.word	0x0800aead
 800ae5c:	0800aec1 	.word	0x0800aec1
 800ae60:	0800aecb 	.word	0x0800aecb
 800ae64:	0800aeb7 	.word	0x0800aeb7
 800ae68:	0800aecb 	.word	0x0800aecb
 800ae6c:	0800ae8b 	.word	0x0800ae8b
 800ae70:	0800ae81 	.word	0x0800ae81
 800ae74:	0800aecb 	.word	0x0800aecb
 800ae78:	0800aea3 	.word	0x0800aea3
 800ae7c:	0800ae95 	.word	0x0800ae95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae80:	6839      	ldr	r1, [r7, #0]
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fa3c 	bl	800b300 <USBD_GetDescriptor>
          break;
 800ae88:	e024      	b.n	800aed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f000 fbcb 	bl	800b628 <USBD_SetAddress>
          break;
 800ae92:	e01f      	b.n	800aed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fc0a 	bl	800b6b0 <USBD_SetConfig>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	73fb      	strb	r3, [r7, #15]
          break;
 800aea0:	e018      	b.n	800aed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fcad 	bl	800b804 <USBD_GetConfig>
          break;
 800aeaa:	e013      	b.n	800aed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aeac:	6839      	ldr	r1, [r7, #0]
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 fcde 	bl	800b870 <USBD_GetStatus>
          break;
 800aeb4:	e00e      	b.n	800aed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fd0d 	bl	800b8d8 <USBD_SetFeature>
          break;
 800aebe:	e009      	b.n	800aed4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fd31 	bl	800b92a <USBD_ClrFeature>
          break;
 800aec8:	e004      	b.n	800aed4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fd88 	bl	800b9e2 <USBD_CtlError>
          break;
 800aed2:	bf00      	nop
      }
      break;
 800aed4:	e004      	b.n	800aee0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aed6:	6839      	ldr	r1, [r7, #0]
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 fd82 	bl	800b9e2 <USBD_CtlError>
      break;
 800aede:	bf00      	nop
  }

  return ret;
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop

0800aeec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af02:	2b40      	cmp	r3, #64	@ 0x40
 800af04:	d005      	beq.n	800af12 <USBD_StdItfReq+0x26>
 800af06:	2b40      	cmp	r3, #64	@ 0x40
 800af08:	d852      	bhi.n	800afb0 <USBD_StdItfReq+0xc4>
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d001      	beq.n	800af12 <USBD_StdItfReq+0x26>
 800af0e:	2b20      	cmp	r3, #32
 800af10:	d14e      	bne.n	800afb0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	3b01      	subs	r3, #1
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d840      	bhi.n	800afa2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	889b      	ldrh	r3, [r3, #4]
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b01      	cmp	r3, #1
 800af28:	d836      	bhi.n	800af98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	889b      	ldrh	r3, [r3, #4]
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	4619      	mov	r1, r3
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7ff fedb 	bl	800acee <USBD_CoreFindIF>
 800af38:	4603      	mov	r3, r0
 800af3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af3c:	7bbb      	ldrb	r3, [r7, #14]
 800af3e:	2bff      	cmp	r3, #255	@ 0xff
 800af40:	d01d      	beq.n	800af7e <USBD_StdItfReq+0x92>
 800af42:	7bbb      	ldrb	r3, [r7, #14]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d11a      	bne.n	800af7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800af48:	7bba      	ldrb	r2, [r7, #14]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	32ae      	adds	r2, #174	@ 0xae
 800af4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00f      	beq.n	800af78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af58:	7bba      	ldrb	r2, [r7, #14]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af60:	7bba      	ldrb	r2, [r7, #14]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	32ae      	adds	r2, #174	@ 0xae
 800af66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	4798      	blx	r3
 800af72:	4603      	mov	r3, r0
 800af74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af76:	e004      	b.n	800af82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800af78:	2303      	movs	r3, #3
 800af7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af7c:	e001      	b.n	800af82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800af7e:	2303      	movs	r3, #3
 800af80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	88db      	ldrh	r3, [r3, #6]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d110      	bne.n	800afac <USBD_StdItfReq+0xc0>
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10d      	bne.n	800afac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fdf1 	bl	800bb78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af96:	e009      	b.n	800afac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fd21 	bl	800b9e2 <USBD_CtlError>
          break;
 800afa0:	e004      	b.n	800afac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fd1c 	bl	800b9e2 <USBD_CtlError>
          break;
 800afaa:	e000      	b.n	800afae <USBD_StdItfReq+0xc2>
          break;
 800afac:	bf00      	nop
      }
      break;
 800afae:	e004      	b.n	800afba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fd15 	bl	800b9e2 <USBD_CtlError>
      break;
 800afb8:	bf00      	nop
  }

  return ret;
 800afba:	7bfb      	ldrb	r3, [r7, #15]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	889b      	ldrh	r3, [r3, #4]
 800afd6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800afe0:	2b40      	cmp	r3, #64	@ 0x40
 800afe2:	d007      	beq.n	800aff4 <USBD_StdEPReq+0x30>
 800afe4:	2b40      	cmp	r3, #64	@ 0x40
 800afe6:	f200 817f 	bhi.w	800b2e8 <USBD_StdEPReq+0x324>
 800afea:	2b00      	cmp	r3, #0
 800afec:	d02a      	beq.n	800b044 <USBD_StdEPReq+0x80>
 800afee:	2b20      	cmp	r3, #32
 800aff0:	f040 817a 	bne.w	800b2e8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aff4:	7bbb      	ldrb	r3, [r7, #14]
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f7ff fe85 	bl	800ad08 <USBD_CoreFindEP>
 800affe:	4603      	mov	r3, r0
 800b000:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b002:	7b7b      	ldrb	r3, [r7, #13]
 800b004:	2bff      	cmp	r3, #255	@ 0xff
 800b006:	f000 8174 	beq.w	800b2f2 <USBD_StdEPReq+0x32e>
 800b00a:	7b7b      	ldrb	r3, [r7, #13]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f040 8170 	bne.w	800b2f2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b012:	7b7a      	ldrb	r2, [r7, #13]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b01a:	7b7a      	ldrb	r2, [r7, #13]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	32ae      	adds	r2, #174	@ 0xae
 800b020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 8163 	beq.w	800b2f2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b02c:	7b7a      	ldrb	r2, [r7, #13]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	32ae      	adds	r2, #174	@ 0xae
 800b032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	4798      	blx	r3
 800b03e:	4603      	mov	r3, r0
 800b040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b042:	e156      	b.n	800b2f2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	785b      	ldrb	r3, [r3, #1]
 800b048:	2b03      	cmp	r3, #3
 800b04a:	d008      	beq.n	800b05e <USBD_StdEPReq+0x9a>
 800b04c:	2b03      	cmp	r3, #3
 800b04e:	f300 8145 	bgt.w	800b2dc <USBD_StdEPReq+0x318>
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 809b 	beq.w	800b18e <USBD_StdEPReq+0x1ca>
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d03c      	beq.n	800b0d6 <USBD_StdEPReq+0x112>
 800b05c:	e13e      	b.n	800b2dc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b064:	b2db      	uxtb	r3, r3
 800b066:	2b02      	cmp	r3, #2
 800b068:	d002      	beq.n	800b070 <USBD_StdEPReq+0xac>
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d016      	beq.n	800b09c <USBD_StdEPReq+0xd8>
 800b06e:	e02c      	b.n	800b0ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d00d      	beq.n	800b092 <USBD_StdEPReq+0xce>
 800b076:	7bbb      	ldrb	r3, [r7, #14]
 800b078:	2b80      	cmp	r3, #128	@ 0x80
 800b07a:	d00a      	beq.n	800b092 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
 800b07e:	4619      	mov	r1, r3
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f001 fa45 	bl	800c510 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b086:	2180      	movs	r1, #128	@ 0x80
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f001 fa41 	bl	800c510 <USBD_LL_StallEP>
 800b08e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b090:	e020      	b.n	800b0d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fca4 	bl	800b9e2 <USBD_CtlError>
              break;
 800b09a:	e01b      	b.n	800b0d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	885b      	ldrh	r3, [r3, #2]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10e      	bne.n	800b0c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b0a4:	7bbb      	ldrb	r3, [r7, #14]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00b      	beq.n	800b0c2 <USBD_StdEPReq+0xfe>
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	2b80      	cmp	r3, #128	@ 0x80
 800b0ae:	d008      	beq.n	800b0c2 <USBD_StdEPReq+0xfe>
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	88db      	ldrh	r3, [r3, #6]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d104      	bne.n	800b0c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0b8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f001 fa27 	bl	800c510 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fd58 	bl	800bb78 <USBD_CtlSendStatus>

              break;
 800b0c8:	e004      	b.n	800b0d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fc88 	bl	800b9e2 <USBD_CtlError>
              break;
 800b0d2:	bf00      	nop
          }
          break;
 800b0d4:	e107      	b.n	800b2e6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d002      	beq.n	800b0e8 <USBD_StdEPReq+0x124>
 800b0e2:	2b03      	cmp	r3, #3
 800b0e4:	d016      	beq.n	800b114 <USBD_StdEPReq+0x150>
 800b0e6:	e04b      	b.n	800b180 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00d      	beq.n	800b10a <USBD_StdEPReq+0x146>
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
 800b0f0:	2b80      	cmp	r3, #128	@ 0x80
 800b0f2:	d00a      	beq.n	800b10a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f001 fa09 	bl	800c510 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0fe:	2180      	movs	r1, #128	@ 0x80
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f001 fa05 	bl	800c510 <USBD_LL_StallEP>
 800b106:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b108:	e040      	b.n	800b18c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b10a:	6839      	ldr	r1, [r7, #0]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fc68 	bl	800b9e2 <USBD_CtlError>
              break;
 800b112:	e03b      	b.n	800b18c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	885b      	ldrh	r3, [r3, #2]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d136      	bne.n	800b18a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b11c:	7bbb      	ldrb	r3, [r7, #14]
 800b11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b122:	2b00      	cmp	r3, #0
 800b124:	d004      	beq.n	800b130 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b126:	7bbb      	ldrb	r3, [r7, #14]
 800b128:	4619      	mov	r1, r3
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f001 fa26 	bl	800c57c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fd21 	bl	800bb78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b136:	7bbb      	ldrb	r3, [r7, #14]
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff fde4 	bl	800ad08 <USBD_CoreFindEP>
 800b140:	4603      	mov	r3, r0
 800b142:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b144:	7b7b      	ldrb	r3, [r7, #13]
 800b146:	2bff      	cmp	r3, #255	@ 0xff
 800b148:	d01f      	beq.n	800b18a <USBD_StdEPReq+0x1c6>
 800b14a:	7b7b      	ldrb	r3, [r7, #13]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d11c      	bne.n	800b18a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b150:	7b7a      	ldrb	r2, [r7, #13]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b158:	7b7a      	ldrb	r2, [r7, #13]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	32ae      	adds	r2, #174	@ 0xae
 800b15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d010      	beq.n	800b18a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b168:	7b7a      	ldrb	r2, [r7, #13]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	32ae      	adds	r2, #174	@ 0xae
 800b16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	6839      	ldr	r1, [r7, #0]
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	4798      	blx	r3
 800b17a:	4603      	mov	r3, r0
 800b17c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b17e:	e004      	b.n	800b18a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b180:	6839      	ldr	r1, [r7, #0]
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fc2d 	bl	800b9e2 <USBD_CtlError>
              break;
 800b188:	e000      	b.n	800b18c <USBD_StdEPReq+0x1c8>
              break;
 800b18a:	bf00      	nop
          }
          break;
 800b18c:	e0ab      	b.n	800b2e6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b02      	cmp	r3, #2
 800b198:	d002      	beq.n	800b1a0 <USBD_StdEPReq+0x1dc>
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d032      	beq.n	800b204 <USBD_StdEPReq+0x240>
 800b19e:	e097      	b.n	800b2d0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d007      	beq.n	800b1b6 <USBD_StdEPReq+0x1f2>
 800b1a6:	7bbb      	ldrb	r3, [r7, #14]
 800b1a8:	2b80      	cmp	r3, #128	@ 0x80
 800b1aa:	d004      	beq.n	800b1b6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 fc17 	bl	800b9e2 <USBD_CtlError>
                break;
 800b1b4:	e091      	b.n	800b2da <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	da0b      	bge.n	800b1d6 <USBD_StdEPReq+0x212>
 800b1be:	7bbb      	ldrb	r3, [r7, #14]
 800b1c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	4413      	add	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	3310      	adds	r3, #16
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	3304      	adds	r3, #4
 800b1d4:	e00b      	b.n	800b1ee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1d6:	7bbb      	ldrb	r3, [r7, #14]
 800b1d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1dc:	4613      	mov	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	2202      	movs	r2, #2
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fc61 	bl	800bac4 <USBD_CtlSendData>
              break;
 800b202:	e06a      	b.n	800b2da <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b204:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	da11      	bge.n	800b230 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	f003 020f 	and.w	r2, r3, #15
 800b212:	6879      	ldr	r1, [r7, #4]
 800b214:	4613      	mov	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	440b      	add	r3, r1
 800b21e:	3324      	adds	r3, #36	@ 0x24
 800b220:	881b      	ldrh	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d117      	bne.n	800b256 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b226:	6839      	ldr	r1, [r7, #0]
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 fbda 	bl	800b9e2 <USBD_CtlError>
                  break;
 800b22e:	e054      	b.n	800b2da <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b230:	7bbb      	ldrb	r3, [r7, #14]
 800b232:	f003 020f 	and.w	r2, r3, #15
 800b236:	6879      	ldr	r1, [r7, #4]
 800b238:	4613      	mov	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	4413      	add	r3, r2
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	440b      	add	r3, r1
 800b242:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b246:	881b      	ldrh	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d104      	bne.n	800b256 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b24c:	6839      	ldr	r1, [r7, #0]
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 fbc7 	bl	800b9e2 <USBD_CtlError>
                  break;
 800b254:	e041      	b.n	800b2da <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b256:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	da0b      	bge.n	800b276 <USBD_StdEPReq+0x2b2>
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
 800b260:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b264:	4613      	mov	r3, r2
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	4413      	add	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	3310      	adds	r3, #16
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	4413      	add	r3, r2
 800b272:	3304      	adds	r3, #4
 800b274:	e00b      	b.n	800b28e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b276:	7bbb      	ldrb	r3, [r7, #14]
 800b278:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b27c:	4613      	mov	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	4413      	add	r3, r2
 800b28c:	3304      	adds	r3, #4
 800b28e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b290:	7bbb      	ldrb	r3, [r7, #14]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d002      	beq.n	800b29c <USBD_StdEPReq+0x2d8>
 800b296:	7bbb      	ldrb	r3, [r7, #14]
 800b298:	2b80      	cmp	r3, #128	@ 0x80
 800b29a:	d103      	bne.n	800b2a4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	601a      	str	r2, [r3, #0]
 800b2a2:	e00e      	b.n	800b2c2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b2a4:	7bbb      	ldrb	r3, [r7, #14]
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f001 f99d 	bl	800c5e8 <USBD_LL_IsStallEP>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d003      	beq.n	800b2bc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	601a      	str	r2, [r3, #0]
 800b2ba:	e002      	b.n	800b2c2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fbfb 	bl	800bac4 <USBD_CtlSendData>
              break;
 800b2ce:	e004      	b.n	800b2da <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b2d0:	6839      	ldr	r1, [r7, #0]
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f000 fb85 	bl	800b9e2 <USBD_CtlError>
              break;
 800b2d8:	bf00      	nop
          }
          break;
 800b2da:	e004      	b.n	800b2e6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b2dc:	6839      	ldr	r1, [r7, #0]
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fb7f 	bl	800b9e2 <USBD_CtlError>
          break;
 800b2e4:	bf00      	nop
      }
      break;
 800b2e6:	e005      	b.n	800b2f4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b2e8:	6839      	ldr	r1, [r7, #0]
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 fb79 	bl	800b9e2 <USBD_CtlError>
      break;
 800b2f0:	e000      	b.n	800b2f4 <USBD_StdEPReq+0x330>
      break;
 800b2f2:	bf00      	nop
  }

  return ret;
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
	...

0800b300 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b30a:	2300      	movs	r3, #0
 800b30c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b312:	2300      	movs	r3, #0
 800b314:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	885b      	ldrh	r3, [r3, #2]
 800b31a:	0a1b      	lsrs	r3, r3, #8
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	3b01      	subs	r3, #1
 800b320:	2b0e      	cmp	r3, #14
 800b322:	f200 8152 	bhi.w	800b5ca <USBD_GetDescriptor+0x2ca>
 800b326:	a201      	add	r2, pc, #4	@ (adr r2, 800b32c <USBD_GetDescriptor+0x2c>)
 800b328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32c:	0800b39d 	.word	0x0800b39d
 800b330:	0800b3b5 	.word	0x0800b3b5
 800b334:	0800b3f5 	.word	0x0800b3f5
 800b338:	0800b5cb 	.word	0x0800b5cb
 800b33c:	0800b5cb 	.word	0x0800b5cb
 800b340:	0800b56b 	.word	0x0800b56b
 800b344:	0800b597 	.word	0x0800b597
 800b348:	0800b5cb 	.word	0x0800b5cb
 800b34c:	0800b5cb 	.word	0x0800b5cb
 800b350:	0800b5cb 	.word	0x0800b5cb
 800b354:	0800b5cb 	.word	0x0800b5cb
 800b358:	0800b5cb 	.word	0x0800b5cb
 800b35c:	0800b5cb 	.word	0x0800b5cb
 800b360:	0800b5cb 	.word	0x0800b5cb
 800b364:	0800b369 	.word	0x0800b369
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b36e:	69db      	ldr	r3, [r3, #28]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d00b      	beq.n	800b38c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b37a:	69db      	ldr	r3, [r3, #28]
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	7c12      	ldrb	r2, [r2, #16]
 800b380:	f107 0108 	add.w	r1, r7, #8
 800b384:	4610      	mov	r0, r2
 800b386:	4798      	blx	r3
 800b388:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b38a:	e126      	b.n	800b5da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b38c:	6839      	ldr	r1, [r7, #0]
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 fb27 	bl	800b9e2 <USBD_CtlError>
        err++;
 800b394:	7afb      	ldrb	r3, [r7, #11]
 800b396:	3301      	adds	r3, #1
 800b398:	72fb      	strb	r3, [r7, #11]
      break;
 800b39a:	e11e      	b.n	800b5da <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	7c12      	ldrb	r2, [r2, #16]
 800b3a8:	f107 0108 	add.w	r1, r7, #8
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	4798      	blx	r3
 800b3b0:	60f8      	str	r0, [r7, #12]
      break;
 800b3b2:	e112      	b.n	800b5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	7c1b      	ldrb	r3, [r3, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10d      	bne.n	800b3d8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3c4:	f107 0208 	add.w	r2, r7, #8
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4798      	blx	r3
 800b3cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	2202      	movs	r2, #2
 800b3d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b3d6:	e100      	b.n	800b5da <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e0:	f107 0208 	add.w	r2, r7, #8
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4798      	blx	r3
 800b3e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	701a      	strb	r2, [r3, #0]
      break;
 800b3f2:	e0f2      	b.n	800b5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	885b      	ldrh	r3, [r3, #2]
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	2b05      	cmp	r3, #5
 800b3fc:	f200 80ac 	bhi.w	800b558 <USBD_GetDescriptor+0x258>
 800b400:	a201      	add	r2, pc, #4	@ (adr r2, 800b408 <USBD_GetDescriptor+0x108>)
 800b402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b406:	bf00      	nop
 800b408:	0800b421 	.word	0x0800b421
 800b40c:	0800b455 	.word	0x0800b455
 800b410:	0800b489 	.word	0x0800b489
 800b414:	0800b4bd 	.word	0x0800b4bd
 800b418:	0800b4f1 	.word	0x0800b4f1
 800b41c:	0800b525 	.word	0x0800b525
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00b      	beq.n	800b444 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	7c12      	ldrb	r2, [r2, #16]
 800b438:	f107 0108 	add.w	r1, r7, #8
 800b43c:	4610      	mov	r0, r2
 800b43e:	4798      	blx	r3
 800b440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b442:	e091      	b.n	800b568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 facb 	bl	800b9e2 <USBD_CtlError>
            err++;
 800b44c:	7afb      	ldrb	r3, [r7, #11]
 800b44e:	3301      	adds	r3, #1
 800b450:	72fb      	strb	r3, [r7, #11]
          break;
 800b452:	e089      	b.n	800b568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00b      	beq.n	800b478 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	7c12      	ldrb	r2, [r2, #16]
 800b46c:	f107 0108 	add.w	r1, r7, #8
 800b470:	4610      	mov	r0, r2
 800b472:	4798      	blx	r3
 800b474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b476:	e077      	b.n	800b568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 fab1 	bl	800b9e2 <USBD_CtlError>
            err++;
 800b480:	7afb      	ldrb	r3, [r7, #11]
 800b482:	3301      	adds	r3, #1
 800b484:	72fb      	strb	r3, [r7, #11]
          break;
 800b486:	e06f      	b.n	800b568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00b      	beq.n	800b4ac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	687a      	ldr	r2, [r7, #4]
 800b49e:	7c12      	ldrb	r2, [r2, #16]
 800b4a0:	f107 0108 	add.w	r1, r7, #8
 800b4a4:	4610      	mov	r0, r2
 800b4a6:	4798      	blx	r3
 800b4a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4aa:	e05d      	b.n	800b568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fa97 	bl	800b9e2 <USBD_CtlError>
            err++;
 800b4b4:	7afb      	ldrb	r3, [r7, #11]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ba:	e055      	b.n	800b568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00b      	beq.n	800b4e0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	7c12      	ldrb	r2, [r2, #16]
 800b4d4:	f107 0108 	add.w	r1, r7, #8
 800b4d8:	4610      	mov	r0, r2
 800b4da:	4798      	blx	r3
 800b4dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4de:	e043      	b.n	800b568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4e0:	6839      	ldr	r1, [r7, #0]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fa7d 	bl	800b9e2 <USBD_CtlError>
            err++;
 800b4e8:	7afb      	ldrb	r3, [r7, #11]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	72fb      	strb	r3, [r7, #11]
          break;
 800b4ee:	e03b      	b.n	800b568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4f6:	695b      	ldr	r3, [r3, #20]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00b      	beq.n	800b514 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b502:	695b      	ldr	r3, [r3, #20]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	7c12      	ldrb	r2, [r2, #16]
 800b508:	f107 0108 	add.w	r1, r7, #8
 800b50c:	4610      	mov	r0, r2
 800b50e:	4798      	blx	r3
 800b510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b512:	e029      	b.n	800b568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fa63 	bl	800b9e2 <USBD_CtlError>
            err++;
 800b51c:	7afb      	ldrb	r3, [r7, #11]
 800b51e:	3301      	adds	r3, #1
 800b520:	72fb      	strb	r3, [r7, #11]
          break;
 800b522:	e021      	b.n	800b568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00b      	beq.n	800b548 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	7c12      	ldrb	r2, [r2, #16]
 800b53c:	f107 0108 	add.w	r1, r7, #8
 800b540:	4610      	mov	r0, r2
 800b542:	4798      	blx	r3
 800b544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b546:	e00f      	b.n	800b568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fa49 	bl	800b9e2 <USBD_CtlError>
            err++;
 800b550:	7afb      	ldrb	r3, [r7, #11]
 800b552:	3301      	adds	r3, #1
 800b554:	72fb      	strb	r3, [r7, #11]
          break;
 800b556:	e007      	b.n	800b568 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b558:	6839      	ldr	r1, [r7, #0]
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 fa41 	bl	800b9e2 <USBD_CtlError>
          err++;
 800b560:	7afb      	ldrb	r3, [r7, #11]
 800b562:	3301      	adds	r3, #1
 800b564:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b566:	bf00      	nop
      }
      break;
 800b568:	e037      	b.n	800b5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	7c1b      	ldrb	r3, [r3, #16]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d109      	bne.n	800b586 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b57a:	f107 0208 	add.w	r2, r7, #8
 800b57e:	4610      	mov	r0, r2
 800b580:	4798      	blx	r3
 800b582:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b584:	e029      	b.n	800b5da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fa2a 	bl	800b9e2 <USBD_CtlError>
        err++;
 800b58e:	7afb      	ldrb	r3, [r7, #11]
 800b590:	3301      	adds	r3, #1
 800b592:	72fb      	strb	r3, [r7, #11]
      break;
 800b594:	e021      	b.n	800b5da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	7c1b      	ldrb	r3, [r3, #16]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d10d      	bne.n	800b5ba <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5a6:	f107 0208 	add.w	r2, r7, #8
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	4798      	blx	r3
 800b5ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	2207      	movs	r2, #7
 800b5b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5b8:	e00f      	b.n	800b5da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5ba:	6839      	ldr	r1, [r7, #0]
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fa10 	bl	800b9e2 <USBD_CtlError>
        err++;
 800b5c2:	7afb      	ldrb	r3, [r7, #11]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	72fb      	strb	r3, [r7, #11]
      break;
 800b5c8:	e007      	b.n	800b5da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 fa08 	bl	800b9e2 <USBD_CtlError>
      err++;
 800b5d2:	7afb      	ldrb	r3, [r7, #11]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	72fb      	strb	r3, [r7, #11]
      break;
 800b5d8:	bf00      	nop
  }

  if (err != 0U)
 800b5da:	7afb      	ldrb	r3, [r7, #11]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d11e      	bne.n	800b61e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	88db      	ldrh	r3, [r3, #6]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d016      	beq.n	800b616 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b5e8:	893b      	ldrh	r3, [r7, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00e      	beq.n	800b60c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	88da      	ldrh	r2, [r3, #6]
 800b5f2:	893b      	ldrh	r3, [r7, #8]
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	bf28      	it	cs
 800b5f8:	4613      	movcs	r3, r2
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b5fe:	893b      	ldrh	r3, [r7, #8]
 800b600:	461a      	mov	r2, r3
 800b602:	68f9      	ldr	r1, [r7, #12]
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fa5d 	bl	800bac4 <USBD_CtlSendData>
 800b60a:	e009      	b.n	800b620 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f9e7 	bl	800b9e2 <USBD_CtlError>
 800b614:	e004      	b.n	800b620 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 faae 	bl	800bb78 <USBD_CtlSendStatus>
 800b61c:	e000      	b.n	800b620 <USBD_GetDescriptor+0x320>
    return;
 800b61e:	bf00      	nop
  }
}
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop

0800b628 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	889b      	ldrh	r3, [r3, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d131      	bne.n	800b69e <USBD_SetAddress+0x76>
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	88db      	ldrh	r3, [r3, #6]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d12d      	bne.n	800b69e <USBD_SetAddress+0x76>
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	885b      	ldrh	r3, [r3, #2]
 800b646:	2b7f      	cmp	r3, #127	@ 0x7f
 800b648:	d829      	bhi.n	800b69e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	885b      	ldrh	r3, [r3, #2]
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b654:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d104      	bne.n	800b66c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f9bc 	bl	800b9e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b66a:	e01d      	b.n	800b6a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	7bfa      	ldrb	r2, [r7, #15]
 800b670:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b674:	7bfb      	ldrb	r3, [r7, #15]
 800b676:	4619      	mov	r1, r3
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 ffe1 	bl	800c640 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 fa7a 	bl	800bb78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b684:	7bfb      	ldrb	r3, [r7, #15]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d004      	beq.n	800b694 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2202      	movs	r2, #2
 800b68e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b692:	e009      	b.n	800b6a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b69c:	e004      	b.n	800b6a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 f99e 	bl	800b9e2 <USBD_CtlError>
  }
}
 800b6a6:	bf00      	nop
 800b6a8:	bf00      	nop
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	885b      	ldrh	r3, [r3, #2]
 800b6c2:	b2da      	uxtb	r2, r3
 800b6c4:	4b4e      	ldr	r3, [pc, #312]	@ (800b800 <USBD_SetConfig+0x150>)
 800b6c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6c8:	4b4d      	ldr	r3, [pc, #308]	@ (800b800 <USBD_SetConfig+0x150>)
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d905      	bls.n	800b6dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f985 	bl	800b9e2 <USBD_CtlError>
    return USBD_FAIL;
 800b6d8:	2303      	movs	r3, #3
 800b6da:	e08c      	b.n	800b7f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	2b02      	cmp	r3, #2
 800b6e6:	d002      	beq.n	800b6ee <USBD_SetConfig+0x3e>
 800b6e8:	2b03      	cmp	r3, #3
 800b6ea:	d029      	beq.n	800b740 <USBD_SetConfig+0x90>
 800b6ec:	e075      	b.n	800b7da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b6ee:	4b44      	ldr	r3, [pc, #272]	@ (800b800 <USBD_SetConfig+0x150>)
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d020      	beq.n	800b738 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b6f6:	4b42      	ldr	r3, [pc, #264]	@ (800b800 <USBD_SetConfig+0x150>)
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b700:	4b3f      	ldr	r3, [pc, #252]	@ (800b800 <USBD_SetConfig+0x150>)
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f7fe ffb9 	bl	800a67e <USBD_SetClassConfig>
 800b70c:	4603      	mov	r3, r0
 800b70e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b710:	7bfb      	ldrb	r3, [r7, #15]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d008      	beq.n	800b728 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f962 	bl	800b9e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2202      	movs	r2, #2
 800b722:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b726:	e065      	b.n	800b7f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fa25 	bl	800bb78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2203      	movs	r2, #3
 800b732:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b736:	e05d      	b.n	800b7f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fa1d 	bl	800bb78 <USBD_CtlSendStatus>
      break;
 800b73e:	e059      	b.n	800b7f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b740:	4b2f      	ldr	r3, [pc, #188]	@ (800b800 <USBD_SetConfig+0x150>)
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d112      	bne.n	800b76e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2202      	movs	r2, #2
 800b74c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b750:	4b2b      	ldr	r3, [pc, #172]	@ (800b800 <USBD_SetConfig+0x150>)
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	461a      	mov	r2, r3
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b75a:	4b29      	ldr	r3, [pc, #164]	@ (800b800 <USBD_SetConfig+0x150>)
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	4619      	mov	r1, r3
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f7fe ffa8 	bl	800a6b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 fa06 	bl	800bb78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b76c:	e042      	b.n	800b7f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b76e:	4b24      	ldr	r3, [pc, #144]	@ (800b800 <USBD_SetConfig+0x150>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	461a      	mov	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d02a      	beq.n	800b7d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	b2db      	uxtb	r3, r3
 800b782:	4619      	mov	r1, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f7fe ff96 	bl	800a6b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b78a:	4b1d      	ldr	r3, [pc, #116]	@ (800b800 <USBD_SetConfig+0x150>)
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	461a      	mov	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b794:	4b1a      	ldr	r3, [pc, #104]	@ (800b800 <USBD_SetConfig+0x150>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	4619      	mov	r1, r3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7fe ff6f 	bl	800a67e <USBD_SetClassConfig>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b7a4:	7bfb      	ldrb	r3, [r7, #15]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00f      	beq.n	800b7ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b7aa:	6839      	ldr	r1, [r7, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f918 	bl	800b9e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	b2db      	uxtb	r3, r3
 800b7b8:	4619      	mov	r1, r3
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7fe ff7b 	bl	800a6b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2202      	movs	r2, #2
 800b7c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b7c8:	e014      	b.n	800b7f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f9d4 	bl	800bb78 <USBD_CtlSendStatus>
      break;
 800b7d0:	e010      	b.n	800b7f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f9d0 	bl	800bb78 <USBD_CtlSendStatus>
      break;
 800b7d8:	e00c      	b.n	800b7f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f900 	bl	800b9e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7e2:	4b07      	ldr	r3, [pc, #28]	@ (800b800 <USBD_SetConfig+0x150>)
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7fe ff64 	bl	800a6b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b7f2:	bf00      	nop
  }

  return ret;
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	2000a624 	.word	0x2000a624

0800b804 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	88db      	ldrh	r3, [r3, #6]
 800b812:	2b01      	cmp	r3, #1
 800b814:	d004      	beq.n	800b820 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 f8e2 	bl	800b9e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b81e:	e023      	b.n	800b868 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b826:	b2db      	uxtb	r3, r3
 800b828:	2b02      	cmp	r3, #2
 800b82a:	dc02      	bgt.n	800b832 <USBD_GetConfig+0x2e>
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	dc03      	bgt.n	800b838 <USBD_GetConfig+0x34>
 800b830:	e015      	b.n	800b85e <USBD_GetConfig+0x5a>
 800b832:	2b03      	cmp	r3, #3
 800b834:	d00b      	beq.n	800b84e <USBD_GetConfig+0x4a>
 800b836:	e012      	b.n	800b85e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	3308      	adds	r3, #8
 800b842:	2201      	movs	r2, #1
 800b844:	4619      	mov	r1, r3
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f000 f93c 	bl	800bac4 <USBD_CtlSendData>
        break;
 800b84c:	e00c      	b.n	800b868 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	3304      	adds	r3, #4
 800b852:	2201      	movs	r2, #1
 800b854:	4619      	mov	r1, r3
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 f934 	bl	800bac4 <USBD_CtlSendData>
        break;
 800b85c:	e004      	b.n	800b868 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b85e:	6839      	ldr	r1, [r7, #0]
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 f8be 	bl	800b9e2 <USBD_CtlError>
        break;
 800b866:	bf00      	nop
}
 800b868:	bf00      	nop
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b880:	b2db      	uxtb	r3, r3
 800b882:	3b01      	subs	r3, #1
 800b884:	2b02      	cmp	r3, #2
 800b886:	d81e      	bhi.n	800b8c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	88db      	ldrh	r3, [r3, #6]
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d004      	beq.n	800b89a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b890:	6839      	ldr	r1, [r7, #0]
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f8a5 	bl	800b9e2 <USBD_CtlError>
        break;
 800b898:	e01a      	b.n	800b8d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d005      	beq.n	800b8b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	f043 0202 	orr.w	r2, r3, #2
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	330c      	adds	r3, #12
 800b8ba:	2202      	movs	r2, #2
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f900 	bl	800bac4 <USBD_CtlSendData>
      break;
 800b8c4:	e004      	b.n	800b8d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f88a 	bl	800b9e2 <USBD_CtlError>
      break;
 800b8ce:	bf00      	nop
  }
}
 800b8d0:	bf00      	nop
 800b8d2:	3708      	adds	r7, #8
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	885b      	ldrh	r3, [r3, #2]
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d107      	bne.n	800b8fa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f940 	bl	800bb78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b8f8:	e013      	b.n	800b922 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	885b      	ldrh	r3, [r3, #2]
 800b8fe:	2b02      	cmp	r3, #2
 800b900:	d10b      	bne.n	800b91a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	889b      	ldrh	r3, [r3, #4]
 800b906:	0a1b      	lsrs	r3, r3, #8
 800b908:	b29b      	uxth	r3, r3
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f930 	bl	800bb78 <USBD_CtlSendStatus>
}
 800b918:	e003      	b.n	800b922 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b91a:	6839      	ldr	r1, [r7, #0]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 f860 	bl	800b9e2 <USBD_CtlError>
}
 800b922:	bf00      	nop
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b082      	sub	sp, #8
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	3b01      	subs	r3, #1
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d80b      	bhi.n	800b95a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	885b      	ldrh	r3, [r3, #2]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d10c      	bne.n	800b964 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f910 	bl	800bb78 <USBD_CtlSendStatus>
      }
      break;
 800b958:	e004      	b.n	800b964 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f840 	bl	800b9e2 <USBD_CtlError>
      break;
 800b962:	e000      	b.n	800b966 <USBD_ClrFeature+0x3c>
      break;
 800b964:	bf00      	nop
  }
}
 800b966:	bf00      	nop
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}

0800b96e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b084      	sub	sp, #16
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	781a      	ldrb	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	3301      	adds	r3, #1
 800b988:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	781a      	ldrb	r2, [r3, #0]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	3301      	adds	r3, #1
 800b996:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f7ff fa16 	bl	800adca <SWAPBYTE>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f7ff fa09 	bl	800adca <SWAPBYTE>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f7ff f9fc 	bl	800adca <SWAPBYTE>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	80da      	strh	r2, [r3, #6]
}
 800b9da:	bf00      	nop
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9ec:	2180      	movs	r1, #128	@ 0x80
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fd8e 	bl	800c510 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fd8a 	bl	800c510 <USBD_LL_StallEP>
}
 800b9fc:	bf00      	nop
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba10:	2300      	movs	r3, #0
 800ba12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d036      	beq.n	800ba88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba1e:	6938      	ldr	r0, [r7, #16]
 800ba20:	f000 f836 	bl	800ba90 <USBD_GetLen>
 800ba24:	4603      	mov	r3, r0
 800ba26:	3301      	adds	r3, #1
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba32:	7dfb      	ldrb	r3, [r7, #23]
 800ba34:	68ba      	ldr	r2, [r7, #8]
 800ba36:	4413      	add	r3, r2
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	7812      	ldrb	r2, [r2, #0]
 800ba3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
 800ba40:	3301      	adds	r3, #1
 800ba42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba44:	7dfb      	ldrb	r3, [r7, #23]
 800ba46:	68ba      	ldr	r2, [r7, #8]
 800ba48:	4413      	add	r3, r2
 800ba4a:	2203      	movs	r2, #3
 800ba4c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba4e:	7dfb      	ldrb	r3, [r7, #23]
 800ba50:	3301      	adds	r3, #1
 800ba52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba54:	e013      	b.n	800ba7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ba56:	7dfb      	ldrb	r3, [r7, #23]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	693a      	ldr	r2, [r7, #16]
 800ba5e:	7812      	ldrb	r2, [r2, #0]
 800ba60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	3301      	adds	r3, #1
 800ba66:	613b      	str	r3, [r7, #16]
    idx++;
 800ba68:	7dfb      	ldrb	r3, [r7, #23]
 800ba6a:	3301      	adds	r3, #1
 800ba6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ba6e:	7dfb      	ldrb	r3, [r7, #23]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	4413      	add	r3, r2
 800ba74:	2200      	movs	r2, #0
 800ba76:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba78:	7dfb      	ldrb	r3, [r7, #23]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1e7      	bne.n	800ba56 <USBD_GetString+0x52>
 800ba86:	e000      	b.n	800ba8a <USBD_GetString+0x86>
    return;
 800ba88:	bf00      	nop
  }
}
 800ba8a:	3718      	adds	r7, #24
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba90:	b480      	push	{r7}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800baa0:	e005      	b.n	800baae <USBD_GetLen+0x1e>
  {
    len++;
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
 800baa4:	3301      	adds	r3, #1
 800baa6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	3301      	adds	r3, #1
 800baac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1f5      	bne.n	800baa2 <USBD_GetLen+0x12>
  }

  return len;
 800bab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2202      	movs	r2, #2
 800bad4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	2100      	movs	r1, #0
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f000 fdde 	bl	800c6ac <USBD_LL_Transmit>

  return USBD_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b084      	sub	sp, #16
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	60f8      	str	r0, [r7, #12]
 800bb02:	60b9      	str	r1, [r7, #8]
 800bb04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	68ba      	ldr	r2, [r7, #8]
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f000 fdcd 	bl	800c6ac <USBD_LL_Transmit>

  return USBD_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2203      	movs	r2, #3
 800bb2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	68ba      	ldr	r2, [r7, #8]
 800bb44:	2100      	movs	r1, #0
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f000 fde8 	bl	800c71c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b084      	sub	sp, #16
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	60b9      	str	r1, [r7, #8]
 800bb60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	68ba      	ldr	r2, [r7, #8]
 800bb66:	2100      	movs	r1, #0
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f000 fdd7 	bl	800c71c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2204      	movs	r2, #4
 800bb84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb88:	2300      	movs	r3, #0
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fd8c 	bl	800c6ac <USBD_LL_Transmit>

  return USBD_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3708      	adds	r7, #8
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b082      	sub	sp, #8
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2205      	movs	r2, #5
 800bbaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bbae:	2300      	movs	r3, #0
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	2100      	movs	r1, #0
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fdb1 	bl	800c71c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bbc8:	2200      	movs	r2, #0
 800bbca:	4912      	ldr	r1, [pc, #72]	@ (800bc14 <MX_USB_DEVICE_Init+0x50>)
 800bbcc:	4812      	ldr	r0, [pc, #72]	@ (800bc18 <MX_USB_DEVICE_Init+0x54>)
 800bbce:	f7fe fcd9 	bl	800a584 <USBD_Init>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bbd8:	f7f5 f981 	bl	8000ede <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bbdc:	490f      	ldr	r1, [pc, #60]	@ (800bc1c <MX_USB_DEVICE_Init+0x58>)
 800bbde:	480e      	ldr	r0, [pc, #56]	@ (800bc18 <MX_USB_DEVICE_Init+0x54>)
 800bbe0:	f7fe fd00 	bl	800a5e4 <USBD_RegisterClass>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d001      	beq.n	800bbee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bbea:	f7f5 f978 	bl	8000ede <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bbee:	490c      	ldr	r1, [pc, #48]	@ (800bc20 <MX_USB_DEVICE_Init+0x5c>)
 800bbf0:	4809      	ldr	r0, [pc, #36]	@ (800bc18 <MX_USB_DEVICE_Init+0x54>)
 800bbf2:	f7fe fbf7 	bl	800a3e4 <USBD_CDC_RegisterInterface>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d001      	beq.n	800bc00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bbfc:	f7f5 f96f 	bl	8000ede <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc00:	4805      	ldr	r0, [pc, #20]	@ (800bc18 <MX_USB_DEVICE_Init+0x54>)
 800bc02:	f7fe fd25 	bl	800a650 <USBD_Start>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d001      	beq.n	800bc10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bc0c:	f7f5 f967 	bl	8000ede <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc10:	bf00      	nop
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	200000ac 	.word	0x200000ac
 800bc18:	2000a628 	.word	0x2000a628
 800bc1c:	20000018 	.word	0x20000018
 800bc20:	20000098 	.word	0x20000098

0800bc24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc28:	2200      	movs	r2, #0
 800bc2a:	4905      	ldr	r1, [pc, #20]	@ (800bc40 <CDC_Init_FS+0x1c>)
 800bc2c:	4805      	ldr	r0, [pc, #20]	@ (800bc44 <CDC_Init_FS+0x20>)
 800bc2e:	f7fe fbf3 	bl	800a418 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc32:	4905      	ldr	r1, [pc, #20]	@ (800bc48 <CDC_Init_FS+0x24>)
 800bc34:	4803      	ldr	r0, [pc, #12]	@ (800bc44 <CDC_Init_FS+0x20>)
 800bc36:	f7fe fc11 	bl	800a45c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	2000b104 	.word	0x2000b104
 800bc44:	2000a628 	.word	0x2000a628
 800bc48:	2000a904 	.word	0x2000a904

0800bc4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	6039      	str	r1, [r7, #0]
 800bc66:	71fb      	strb	r3, [r7, #7]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc6c:	79fb      	ldrb	r3, [r7, #7]
 800bc6e:	2b23      	cmp	r3, #35	@ 0x23
 800bc70:	d84a      	bhi.n	800bd08 <CDC_Control_FS+0xac>
 800bc72:	a201      	add	r2, pc, #4	@ (adr r2, 800bc78 <CDC_Control_FS+0x1c>)
 800bc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc78:	0800bd09 	.word	0x0800bd09
 800bc7c:	0800bd09 	.word	0x0800bd09
 800bc80:	0800bd09 	.word	0x0800bd09
 800bc84:	0800bd09 	.word	0x0800bd09
 800bc88:	0800bd09 	.word	0x0800bd09
 800bc8c:	0800bd09 	.word	0x0800bd09
 800bc90:	0800bd09 	.word	0x0800bd09
 800bc94:	0800bd09 	.word	0x0800bd09
 800bc98:	0800bd09 	.word	0x0800bd09
 800bc9c:	0800bd09 	.word	0x0800bd09
 800bca0:	0800bd09 	.word	0x0800bd09
 800bca4:	0800bd09 	.word	0x0800bd09
 800bca8:	0800bd09 	.word	0x0800bd09
 800bcac:	0800bd09 	.word	0x0800bd09
 800bcb0:	0800bd09 	.word	0x0800bd09
 800bcb4:	0800bd09 	.word	0x0800bd09
 800bcb8:	0800bd09 	.word	0x0800bd09
 800bcbc:	0800bd09 	.word	0x0800bd09
 800bcc0:	0800bd09 	.word	0x0800bd09
 800bcc4:	0800bd09 	.word	0x0800bd09
 800bcc8:	0800bd09 	.word	0x0800bd09
 800bccc:	0800bd09 	.word	0x0800bd09
 800bcd0:	0800bd09 	.word	0x0800bd09
 800bcd4:	0800bd09 	.word	0x0800bd09
 800bcd8:	0800bd09 	.word	0x0800bd09
 800bcdc:	0800bd09 	.word	0x0800bd09
 800bce0:	0800bd09 	.word	0x0800bd09
 800bce4:	0800bd09 	.word	0x0800bd09
 800bce8:	0800bd09 	.word	0x0800bd09
 800bcec:	0800bd09 	.word	0x0800bd09
 800bcf0:	0800bd09 	.word	0x0800bd09
 800bcf4:	0800bd09 	.word	0x0800bd09
 800bcf8:	0800bd09 	.word	0x0800bd09
 800bcfc:	0800bd09 	.word	0x0800bd09
 800bd00:	0800bd09 	.word	0x0800bd09
 800bd04:	0800bd09 	.word	0x0800bd09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bd08:	bf00      	nop
  }

  return (USBD_OK);
 800bd0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd22:	6879      	ldr	r1, [r7, #4]
 800bd24:	4808      	ldr	r0, [pc, #32]	@ (800bd48 <CDC_Receive_FS+0x30>)
 800bd26:	f7fe fb99 	bl	800a45c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd2a:	4807      	ldr	r0, [pc, #28]	@ (800bd48 <CDC_Receive_FS+0x30>)
 800bd2c:	f7fe fbf4 	bl	800a518 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  USB_My_Receive(Buf, *Len);
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4619      	mov	r1, r3
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7f4 fece 	bl	8000ad8 <USB_My_Receive>

  return (USBD_OK);
 800bd3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
 800bd46:	bf00      	nop
 800bd48:	2000a628 	.word	0x2000a628

0800bd4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bd5c:	4b0d      	ldr	r3, [pc, #52]	@ (800bd94 <CDC_Transmit_FS+0x48>)
 800bd5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bd62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d001      	beq.n	800bd72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e00b      	b.n	800bd8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd72:	887b      	ldrh	r3, [r7, #2]
 800bd74:	461a      	mov	r2, r3
 800bd76:	6879      	ldr	r1, [r7, #4]
 800bd78:	4806      	ldr	r0, [pc, #24]	@ (800bd94 <CDC_Transmit_FS+0x48>)
 800bd7a:	f7fe fb4d 	bl	800a418 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bd7e:	4805      	ldr	r0, [pc, #20]	@ (800bd94 <CDC_Transmit_FS+0x48>)
 800bd80:	f7fe fb8a 	bl	800a498 <USBD_CDC_TransmitPacket>
 800bd84:	4603      	mov	r3, r0
 800bd86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bd88:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	2000a628 	.word	0x2000a628

0800bd98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b087      	sub	sp, #28
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	4613      	mov	r3, r2
 800bda4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bda6:	2300      	movs	r3, #0
 800bda8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bdaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	371c      	adds	r7, #28
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
	...

0800bdbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	6039      	str	r1, [r7, #0]
 800bdc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	2212      	movs	r2, #18
 800bdcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bdce:	4b03      	ldr	r3, [pc, #12]	@ (800bddc <USBD_FS_DeviceDescriptor+0x20>)
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr
 800bddc:	200000cc 	.word	0x200000cc

0800bde0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	4603      	mov	r3, r0
 800bde8:	6039      	str	r1, [r7, #0]
 800bdea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	2204      	movs	r2, #4
 800bdf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdf2:	4b03      	ldr	r3, [pc, #12]	@ (800be00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr
 800be00:	200000ec 	.word	0x200000ec

0800be04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	4603      	mov	r3, r0
 800be0c:	6039      	str	r1, [r7, #0]
 800be0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be10:	79fb      	ldrb	r3, [r7, #7]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d105      	bne.n	800be22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be16:	683a      	ldr	r2, [r7, #0]
 800be18:	4907      	ldr	r1, [pc, #28]	@ (800be38 <USBD_FS_ProductStrDescriptor+0x34>)
 800be1a:	4808      	ldr	r0, [pc, #32]	@ (800be3c <USBD_FS_ProductStrDescriptor+0x38>)
 800be1c:	f7ff fdf2 	bl	800ba04 <USBD_GetString>
 800be20:	e004      	b.n	800be2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	4904      	ldr	r1, [pc, #16]	@ (800be38 <USBD_FS_ProductStrDescriptor+0x34>)
 800be26:	4805      	ldr	r0, [pc, #20]	@ (800be3c <USBD_FS_ProductStrDescriptor+0x38>)
 800be28:	f7ff fdec 	bl	800ba04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be2c:	4b02      	ldr	r3, [pc, #8]	@ (800be38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	2000b904 	.word	0x2000b904
 800be3c:	0800c918 	.word	0x0800c918

0800be40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	4603      	mov	r3, r0
 800be48:	6039      	str	r1, [r7, #0]
 800be4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	4904      	ldr	r1, [pc, #16]	@ (800be60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be50:	4804      	ldr	r0, [pc, #16]	@ (800be64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be52:	f7ff fdd7 	bl	800ba04 <USBD_GetString>
  return USBD_StrDesc;
 800be56:	4b02      	ldr	r3, [pc, #8]	@ (800be60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	2000b904 	.word	0x2000b904
 800be64:	0800c930 	.word	0x0800c930

0800be68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	4603      	mov	r3, r0
 800be70:	6039      	str	r1, [r7, #0]
 800be72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	221a      	movs	r2, #26
 800be78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be7a:	f000 f855 	bl	800bf28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be7e:	4b02      	ldr	r3, [pc, #8]	@ (800be88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be80:	4618      	mov	r0, r3
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	200000f0 	.word	0x200000f0

0800be8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	4603      	mov	r3, r0
 800be94:	6039      	str	r1, [r7, #0]
 800be96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be98:	79fb      	ldrb	r3, [r7, #7]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d105      	bne.n	800beaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be9e:	683a      	ldr	r2, [r7, #0]
 800bea0:	4907      	ldr	r1, [pc, #28]	@ (800bec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bea2:	4808      	ldr	r0, [pc, #32]	@ (800bec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bea4:	f7ff fdae 	bl	800ba04 <USBD_GetString>
 800bea8:	e004      	b.n	800beb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beaa:	683a      	ldr	r2, [r7, #0]
 800beac:	4904      	ldr	r1, [pc, #16]	@ (800bec0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800beae:	4805      	ldr	r0, [pc, #20]	@ (800bec4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800beb0:	f7ff fda8 	bl	800ba04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800beb4:	4b02      	ldr	r3, [pc, #8]	@ (800bec0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3708      	adds	r7, #8
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	bf00      	nop
 800bec0:	2000b904 	.word	0x2000b904
 800bec4:	0800c944 	.word	0x0800c944

0800bec8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	4603      	mov	r3, r0
 800bed0:	6039      	str	r1, [r7, #0]
 800bed2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bed4:	79fb      	ldrb	r3, [r7, #7]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d105      	bne.n	800bee6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beda:	683a      	ldr	r2, [r7, #0]
 800bedc:	4907      	ldr	r1, [pc, #28]	@ (800befc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bede:	4808      	ldr	r0, [pc, #32]	@ (800bf00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bee0:	f7ff fd90 	bl	800ba04 <USBD_GetString>
 800bee4:	e004      	b.n	800bef0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	4904      	ldr	r1, [pc, #16]	@ (800befc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beea:	4805      	ldr	r0, [pc, #20]	@ (800bf00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800beec:	f7ff fd8a 	bl	800ba04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bef0:	4b02      	ldr	r3, [pc, #8]	@ (800befc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	2000b904 	.word	0x2000b904
 800bf00:	0800c950 	.word	0x0800c950

0800bf04 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	6039      	str	r1, [r7, #0]
 800bf0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	220c      	movs	r2, #12
 800bf14:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800bf16:	4b03      	ldr	r3, [pc, #12]	@ (800bf24 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	370c      	adds	r7, #12
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	200000e0 	.word	0x200000e0

0800bf28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf2e:	4b0f      	ldr	r3, [pc, #60]	@ (800bf6c <Get_SerialNum+0x44>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf34:	4b0e      	ldr	r3, [pc, #56]	@ (800bf70 <Get_SerialNum+0x48>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf3a:	4b0e      	ldr	r3, [pc, #56]	@ (800bf74 <Get_SerialNum+0x4c>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	4413      	add	r3, r2
 800bf46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d009      	beq.n	800bf62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf4e:	2208      	movs	r2, #8
 800bf50:	4909      	ldr	r1, [pc, #36]	@ (800bf78 <Get_SerialNum+0x50>)
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f000 f814 	bl	800bf80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf58:	2204      	movs	r2, #4
 800bf5a:	4908      	ldr	r1, [pc, #32]	@ (800bf7c <Get_SerialNum+0x54>)
 800bf5c:	68b8      	ldr	r0, [r7, #8]
 800bf5e:	f000 f80f 	bl	800bf80 <IntToUnicode>
  }
}
 800bf62:	bf00      	nop
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	1fff7590 	.word	0x1fff7590
 800bf70:	1fff7594 	.word	0x1fff7594
 800bf74:	1fff7598 	.word	0x1fff7598
 800bf78:	200000f2 	.word	0x200000f2
 800bf7c:	20000102 	.word	0x20000102

0800bf80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b087      	sub	sp, #28
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	4613      	mov	r3, r2
 800bf8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf92:	2300      	movs	r3, #0
 800bf94:	75fb      	strb	r3, [r7, #23]
 800bf96:	e027      	b.n	800bfe8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	0f1b      	lsrs	r3, r3, #28
 800bf9c:	2b09      	cmp	r3, #9
 800bf9e:	d80b      	bhi.n	800bfb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	0f1b      	lsrs	r3, r3, #28
 800bfa4:	b2da      	uxtb	r2, r3
 800bfa6:	7dfb      	ldrb	r3, [r7, #23]
 800bfa8:	005b      	lsls	r3, r3, #1
 800bfaa:	4619      	mov	r1, r3
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	440b      	add	r3, r1
 800bfb0:	3230      	adds	r2, #48	@ 0x30
 800bfb2:	b2d2      	uxtb	r2, r2
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	e00a      	b.n	800bfce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	0f1b      	lsrs	r3, r3, #28
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	7dfb      	ldrb	r3, [r7, #23]
 800bfc0:	005b      	lsls	r3, r3, #1
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	440b      	add	r3, r1
 800bfc8:	3237      	adds	r2, #55	@ 0x37
 800bfca:	b2d2      	uxtb	r2, r2
 800bfcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	011b      	lsls	r3, r3, #4
 800bfd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bfd4:	7dfb      	ldrb	r3, [r7, #23]
 800bfd6:	005b      	lsls	r3, r3, #1
 800bfd8:	3301      	adds	r3, #1
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	4413      	add	r3, r2
 800bfde:	2200      	movs	r2, #0
 800bfe0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bfe2:	7dfb      	ldrb	r3, [r7, #23]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	75fb      	strb	r3, [r7, #23]
 800bfe8:	7dfa      	ldrb	r2, [r7, #23]
 800bfea:	79fb      	ldrb	r3, [r7, #7]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d3d3      	bcc.n	800bf98 <IntToUnicode+0x18>
  }
}
 800bff0:	bf00      	nop
 800bff2:	bf00      	nop
 800bff4:	371c      	adds	r7, #28
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
	...

0800c000 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b0b0      	sub	sp, #192	@ 0xc0
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c008:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800c00c:	2200      	movs	r2, #0
 800c00e:	601a      	str	r2, [r3, #0]
 800c010:	605a      	str	r2, [r3, #4]
 800c012:	609a      	str	r2, [r3, #8]
 800c014:	60da      	str	r2, [r3, #12]
 800c016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c018:	f107 0318 	add.w	r3, r7, #24
 800c01c:	2294      	movs	r2, #148	@ 0x94
 800c01e:	2100      	movs	r1, #0
 800c020:	4618      	mov	r0, r3
 800c022:	f000 fc33 	bl	800c88c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c02e:	d174      	bne.n	800c11a <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c034:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c036:	2300      	movs	r3, #0
 800c038:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c03c:	f107 0318 	add.w	r3, r7, #24
 800c040:	4618      	mov	r0, r3
 800c042:	f7f9 ff4b 	bl	8005edc <HAL_RCCEx_PeriphCLKConfig>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d001      	beq.n	800c050 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800c04c:	f7f4 ff47 	bl	8000ede <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c050:	4b34      	ldr	r3, [pc, #208]	@ (800c124 <HAL_PCD_MspInit+0x124>)
 800c052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c054:	4a33      	ldr	r2, [pc, #204]	@ (800c124 <HAL_PCD_MspInit+0x124>)
 800c056:	f043 0301 	orr.w	r3, r3, #1
 800c05a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c05c:	4b31      	ldr	r3, [pc, #196]	@ (800c124 <HAL_PCD_MspInit+0x124>)
 800c05e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c060:	f003 0301 	and.w	r3, r3, #1
 800c064:	617b      	str	r3, [r7, #20]
 800c066:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800c068:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800c06c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c070:	2302      	movs	r3, #2
 800c072:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c076:	2300      	movs	r3, #0
 800c078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c07c:	2303      	movs	r3, #3
 800c07e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c082:	230a      	movs	r3, #10
 800c084:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c088:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800c08c:	4619      	mov	r1, r3
 800c08e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c092:	f7f7 fbe3 	bl	800385c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800c096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c09a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c0aa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c0b4:	f7f7 fbd2 	bl	800385c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c0b8:	4b1a      	ldr	r3, [pc, #104]	@ (800c124 <HAL_PCD_MspInit+0x124>)
 800c0ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0bc:	4a19      	ldr	r2, [pc, #100]	@ (800c124 <HAL_PCD_MspInit+0x124>)
 800c0be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c0c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c0c4:	4b17      	ldr	r3, [pc, #92]	@ (800c124 <HAL_PCD_MspInit+0x124>)
 800c0c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c0cc:	613b      	str	r3, [r7, #16]
 800c0ce:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c0d0:	4b14      	ldr	r3, [pc, #80]	@ (800c124 <HAL_PCD_MspInit+0x124>)
 800c0d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d114      	bne.n	800c106 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c0dc:	4b11      	ldr	r3, [pc, #68]	@ (800c124 <HAL_PCD_MspInit+0x124>)
 800c0de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0e0:	4a10      	ldr	r2, [pc, #64]	@ (800c124 <HAL_PCD_MspInit+0x124>)
 800c0e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c0e6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0e8:	4b0e      	ldr	r3, [pc, #56]	@ (800c124 <HAL_PCD_MspInit+0x124>)
 800c0ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c0f0:	60fb      	str	r3, [r7, #12]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800c0f4:	f7f8 fffa 	bl	80050ec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800c0f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c124 <HAL_PCD_MspInit+0x124>)
 800c0fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0fc:	4a09      	ldr	r2, [pc, #36]	@ (800c124 <HAL_PCD_MspInit+0x124>)
 800c0fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c102:	6593      	str	r3, [r2, #88]	@ 0x58
 800c104:	e001      	b.n	800c10a <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800c106:	f7f8 fff1 	bl	80050ec <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c10a:	2200      	movs	r2, #0
 800c10c:	2100      	movs	r1, #0
 800c10e:	2043      	movs	r0, #67	@ 0x43
 800c110:	f7f6 fff7 	bl	8003102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c114:	2043      	movs	r0, #67	@ 0x43
 800c116:	f7f7 f810 	bl	800313a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c11a:	bf00      	nop
 800c11c:	37c0      	adds	r7, #192	@ 0xc0
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	40021000 	.word	0x40021000

0800c128 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b082      	sub	sp, #8
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800c13c:	4619      	mov	r1, r3
 800c13e:	4610      	mov	r0, r2
 800c140:	f7fe fad3 	bl	800a6ea <USBD_LL_SetupStage>
}
 800c144:	bf00      	nop
 800c146:	3708      	adds	r7, #8
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c15e:	78fa      	ldrb	r2, [r7, #3]
 800c160:	6879      	ldr	r1, [r7, #4]
 800c162:	4613      	mov	r3, r2
 800c164:	00db      	lsls	r3, r3, #3
 800c166:	4413      	add	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	440b      	add	r3, r1
 800c16c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800c170:	681a      	ldr	r2, [r3, #0]
 800c172:	78fb      	ldrb	r3, [r7, #3]
 800c174:	4619      	mov	r1, r3
 800c176:	f7fe fb0d 	bl	800a794 <USBD_LL_DataOutStage>
}
 800c17a:	bf00      	nop
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b082      	sub	sp, #8
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
 800c18a:	460b      	mov	r3, r1
 800c18c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800c194:	78fa      	ldrb	r2, [r7, #3]
 800c196:	6879      	ldr	r1, [r7, #4]
 800c198:	4613      	mov	r3, r2
 800c19a:	00db      	lsls	r3, r3, #3
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	440b      	add	r3, r1
 800c1a2:	3348      	adds	r3, #72	@ 0x48
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	78fb      	ldrb	r3, [r7, #3]
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	f7fe fba6 	bl	800a8fa <USBD_LL_DataInStage>
}
 800c1ae:	bf00      	nop
 800c1b0:	3708      	adds	r7, #8
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b082      	sub	sp, #8
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fe fce0 	bl	800ab8a <USBD_LL_SOF>
}
 800c1ca:	bf00      	nop
 800c1cc:	3708      	adds	r7, #8
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	691b      	ldr	r3, [r3, #16]
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d001      	beq.n	800c1ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c1e6:	f7f4 fe7a 	bl	8000ede <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c1f0:	7bfa      	ldrb	r2, [r7, #15]
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe fc84 	bl	800ab02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c200:	4618      	mov	r0, r3
 800c202:	f7fe fc2c 	bl	800aa5e <USBD_LL_Reset>
}
 800c206:	bf00      	nop
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
	...

0800c210 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	6812      	ldr	r2, [r2, #0]
 800c226:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c22a:	f043 0301 	orr.w	r3, r3, #1
 800c22e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c236:	4618      	mov	r0, r3
 800c238:	f7fe fc73 	bl	800ab22 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a1b      	ldr	r3, [r3, #32]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c244:	4b04      	ldr	r3, [pc, #16]	@ (800c258 <HAL_PCD_SuspendCallback+0x48>)
 800c246:	691b      	ldr	r3, [r3, #16]
 800c248:	4a03      	ldr	r2, [pc, #12]	@ (800c258 <HAL_PCD_SuspendCallback+0x48>)
 800c24a:	f043 0306 	orr.w	r3, r3, #6
 800c24e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c250:	bf00      	nop
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	e000ed00 	.word	0xe000ed00

0800c25c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	6812      	ldr	r2, [r2, #0]
 800c272:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c276:	f023 0301 	bic.w	r3, r3, #1
 800c27a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6a1b      	ldr	r3, [r3, #32]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d007      	beq.n	800c294 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c284:	4b08      	ldr	r3, [pc, #32]	@ (800c2a8 <HAL_PCD_ResumeCallback+0x4c>)
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	4a07      	ldr	r2, [pc, #28]	@ (800c2a8 <HAL_PCD_ResumeCallback+0x4c>)
 800c28a:	f023 0306 	bic.w	r3, r3, #6
 800c28e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c290:	f000 faf6 	bl	800c880 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe fc5d 	bl	800ab5a <USBD_LL_Resume>
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	e000ed00 	.word	0xe000ed00

0800c2ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c2be:	78fa      	ldrb	r2, [r7, #3]
 800c2c0:	4611      	mov	r1, r2
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7fe fcb3 	bl	800ac2e <USBD_LL_IsoOUTIncomplete>
}
 800c2c8:	bf00      	nop
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	460b      	mov	r3, r1
 800c2da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c2e2:	78fa      	ldrb	r2, [r7, #3]
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fe fc6f 	bl	800abca <USBD_LL_IsoINIncomplete>
}
 800c2ec:	bf00      	nop
 800c2ee:	3708      	adds	r7, #8
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe fcc5 	bl	800ac92 <USBD_LL_DevConnected>
}
 800c308:	bf00      	nop
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fe fcc2 	bl	800aca8 <USBD_LL_DevDisconnected>
}
 800c324:	bf00      	nop
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d13c      	bne.n	800c3b6 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c33c:	4a20      	ldr	r2, [pc, #128]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a1e      	ldr	r2, [pc, #120]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c348:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c34c:	4b1c      	ldr	r3, [pc, #112]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c34e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c352:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c354:	4b1a      	ldr	r3, [pc, #104]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c356:	2206      	movs	r2, #6
 800c358:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c35a:	4b19      	ldr	r3, [pc, #100]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c35c:	2202      	movs	r2, #2
 800c35e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c360:	4b17      	ldr	r3, [pc, #92]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c362:	2202      	movs	r2, #2
 800c364:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800c366:	4b16      	ldr	r3, [pc, #88]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c368:	2201      	movs	r2, #1
 800c36a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c36c:	4b14      	ldr	r3, [pc, #80]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c36e:	2200      	movs	r2, #0
 800c370:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c372:	4b13      	ldr	r3, [pc, #76]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c374:	2200      	movs	r2, #0
 800c376:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800c378:	4b11      	ldr	r3, [pc, #68]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c37a:	2201      	movs	r2, #1
 800c37c:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c37e:	4b10      	ldr	r3, [pc, #64]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c380:	2200      	movs	r2, #0
 800c382:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c384:	4b0e      	ldr	r3, [pc, #56]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c386:	2201      	movs	r2, #1
 800c388:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c38a:	480d      	ldr	r0, [pc, #52]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c38c:	f7f7 fc42 	bl	8003c14 <HAL_PCD_Init>
 800c390:	4603      	mov	r3, r0
 800c392:	2b00      	cmp	r3, #0
 800c394:	d001      	beq.n	800c39a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c396:	f7f4 fda2 	bl	8000ede <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c39a:	2180      	movs	r1, #128	@ 0x80
 800c39c:	4808      	ldr	r0, [pc, #32]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c39e:	f7f8 fdac 	bl	8004efa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c3a2:	2240      	movs	r2, #64	@ 0x40
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	4806      	ldr	r0, [pc, #24]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c3a8:	f7f8 fd60 	bl	8004e6c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c3ac:	2280      	movs	r2, #128	@ 0x80
 800c3ae:	2101      	movs	r1, #1
 800c3b0:	4803      	ldr	r0, [pc, #12]	@ (800c3c0 <USBD_LL_Init+0x94>)
 800c3b2:	f7f8 fd5b 	bl	8004e6c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	2000bb04 	.word	0x2000bb04

0800c3c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7f7 fd3e 	bl	8003e5c <HAL_PCD_Start>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c3e4:	7bbb      	ldrb	r3, [r7, #14]
 800c3e6:	2b03      	cmp	r3, #3
 800c3e8:	d816      	bhi.n	800c418 <USBD_LL_Start+0x54>
 800c3ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c3f0 <USBD_LL_Start+0x2c>)
 800c3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3f0:	0800c401 	.word	0x0800c401
 800c3f4:	0800c407 	.word	0x0800c407
 800c3f8:	0800c40d 	.word	0x0800c40d
 800c3fc:	0800c413 	.word	0x0800c413
    case HAL_OK :
      usb_status = USBD_OK;
 800c400:	2300      	movs	r3, #0
 800c402:	73fb      	strb	r3, [r7, #15]
    break;
 800c404:	e00b      	b.n	800c41e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c406:	2303      	movs	r3, #3
 800c408:	73fb      	strb	r3, [r7, #15]
    break;
 800c40a:	e008      	b.n	800c41e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c40c:	2301      	movs	r3, #1
 800c40e:	73fb      	strb	r3, [r7, #15]
    break;
 800c410:	e005      	b.n	800c41e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c412:	2303      	movs	r3, #3
 800c414:	73fb      	strb	r3, [r7, #15]
    break;
 800c416:	e002      	b.n	800c41e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800c418:	2303      	movs	r3, #3
 800c41a:	73fb      	strb	r3, [r7, #15]
    break;
 800c41c:	bf00      	nop
  }
  return usb_status;
 800c41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3710      	adds	r7, #16
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	4608      	mov	r0, r1
 800c432:	4611      	mov	r1, r2
 800c434:	461a      	mov	r2, r3
 800c436:	4603      	mov	r3, r0
 800c438:	70fb      	strb	r3, [r7, #3]
 800c43a:	460b      	mov	r3, r1
 800c43c:	70bb      	strb	r3, [r7, #2]
 800c43e:	4613      	mov	r3, r2
 800c440:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c442:	2300      	movs	r3, #0
 800c444:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c446:	2300      	movs	r3, #0
 800c448:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c450:	78bb      	ldrb	r3, [r7, #2]
 800c452:	883a      	ldrh	r2, [r7, #0]
 800c454:	78f9      	ldrb	r1, [r7, #3]
 800c456:	f7f8 f9e8 	bl	800482a <HAL_PCD_EP_Open>
 800c45a:	4603      	mov	r3, r0
 800c45c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c45e:	7bbb      	ldrb	r3, [r7, #14]
 800c460:	2b03      	cmp	r3, #3
 800c462:	d817      	bhi.n	800c494 <USBD_LL_OpenEP+0x6c>
 800c464:	a201      	add	r2, pc, #4	@ (adr r2, 800c46c <USBD_LL_OpenEP+0x44>)
 800c466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46a:	bf00      	nop
 800c46c:	0800c47d 	.word	0x0800c47d
 800c470:	0800c483 	.word	0x0800c483
 800c474:	0800c489 	.word	0x0800c489
 800c478:	0800c48f 	.word	0x0800c48f
    case HAL_OK :
      usb_status = USBD_OK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	73fb      	strb	r3, [r7, #15]
    break;
 800c480:	e00b      	b.n	800c49a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c482:	2303      	movs	r3, #3
 800c484:	73fb      	strb	r3, [r7, #15]
    break;
 800c486:	e008      	b.n	800c49a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c488:	2301      	movs	r3, #1
 800c48a:	73fb      	strb	r3, [r7, #15]
    break;
 800c48c:	e005      	b.n	800c49a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c48e:	2303      	movs	r3, #3
 800c490:	73fb      	strb	r3, [r7, #15]
    break;
 800c492:	e002      	b.n	800c49a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800c494:	2303      	movs	r3, #3
 800c496:	73fb      	strb	r3, [r7, #15]
    break;
 800c498:	bf00      	nop
  }
  return usb_status;
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3710      	adds	r7, #16
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c4be:	78fa      	ldrb	r2, [r7, #3]
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7f8 fa19 	bl	80048fa <HAL_PCD_EP_Close>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c4cc:	7bbb      	ldrb	r3, [r7, #14]
 800c4ce:	2b03      	cmp	r3, #3
 800c4d0:	d816      	bhi.n	800c500 <USBD_LL_CloseEP+0x5c>
 800c4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800c4d8 <USBD_LL_CloseEP+0x34>)
 800c4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d8:	0800c4e9 	.word	0x0800c4e9
 800c4dc:	0800c4ef 	.word	0x0800c4ef
 800c4e0:	0800c4f5 	.word	0x0800c4f5
 800c4e4:	0800c4fb 	.word	0x0800c4fb
    case HAL_OK :
      usb_status = USBD_OK;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ec:	e00b      	b.n	800c506 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c4ee:	2303      	movs	r3, #3
 800c4f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c4f2:	e008      	b.n	800c506 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c4f8:	e005      	b.n	800c506 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4fa:	2303      	movs	r3, #3
 800c4fc:	73fb      	strb	r3, [r7, #15]
    break;
 800c4fe:	e002      	b.n	800c506 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c500:	2303      	movs	r3, #3
 800c502:	73fb      	strb	r3, [r7, #15]
    break;
 800c504:	bf00      	nop
  }
  return usb_status;
 800c506:	7bfb      	ldrb	r3, [r7, #15]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	460b      	mov	r3, r1
 800c51a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c51c:	2300      	movs	r3, #0
 800c51e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c520:	2300      	movs	r3, #0
 800c522:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c52a:	78fa      	ldrb	r2, [r7, #3]
 800c52c:	4611      	mov	r1, r2
 800c52e:	4618      	mov	r0, r3
 800c530:	f7f8 faa8 	bl	8004a84 <HAL_PCD_EP_SetStall>
 800c534:	4603      	mov	r3, r0
 800c536:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c538:	7bbb      	ldrb	r3, [r7, #14]
 800c53a:	2b03      	cmp	r3, #3
 800c53c:	d816      	bhi.n	800c56c <USBD_LL_StallEP+0x5c>
 800c53e:	a201      	add	r2, pc, #4	@ (adr r2, 800c544 <USBD_LL_StallEP+0x34>)
 800c540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c544:	0800c555 	.word	0x0800c555
 800c548:	0800c55b 	.word	0x0800c55b
 800c54c:	0800c561 	.word	0x0800c561
 800c550:	0800c567 	.word	0x0800c567
    case HAL_OK :
      usb_status = USBD_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	73fb      	strb	r3, [r7, #15]
    break;
 800c558:	e00b      	b.n	800c572 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c55a:	2303      	movs	r3, #3
 800c55c:	73fb      	strb	r3, [r7, #15]
    break;
 800c55e:	e008      	b.n	800c572 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c560:	2301      	movs	r3, #1
 800c562:	73fb      	strb	r3, [r7, #15]
    break;
 800c564:	e005      	b.n	800c572 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c566:	2303      	movs	r3, #3
 800c568:	73fb      	strb	r3, [r7, #15]
    break;
 800c56a:	e002      	b.n	800c572 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c56c:	2303      	movs	r3, #3
 800c56e:	73fb      	strb	r3, [r7, #15]
    break;
 800c570:	bf00      	nop
  }
  return usb_status;
 800c572:	7bfb      	ldrb	r3, [r7, #15]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	460b      	mov	r3, r1
 800c586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c588:	2300      	movs	r3, #0
 800c58a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c58c:	2300      	movs	r3, #0
 800c58e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c596:	78fa      	ldrb	r2, [r7, #3]
 800c598:	4611      	mov	r1, r2
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7f8 fad4 	bl	8004b48 <HAL_PCD_EP_ClrStall>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c5a4:	7bbb      	ldrb	r3, [r7, #14]
 800c5a6:	2b03      	cmp	r3, #3
 800c5a8:	d816      	bhi.n	800c5d8 <USBD_LL_ClearStallEP+0x5c>
 800c5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c5b0 <USBD_LL_ClearStallEP+0x34>)
 800c5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b0:	0800c5c1 	.word	0x0800c5c1
 800c5b4:	0800c5c7 	.word	0x0800c5c7
 800c5b8:	0800c5cd 	.word	0x0800c5cd
 800c5bc:	0800c5d3 	.word	0x0800c5d3
    case HAL_OK :
      usb_status = USBD_OK;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c4:	e00b      	b.n	800c5de <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ca:	e008      	b.n	800c5de <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d0:	e005      	b.n	800c5de <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5d2:	2303      	movs	r3, #3
 800c5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d6:	e002      	b.n	800c5de <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	73fb      	strb	r3, [r7, #15]
    break;
 800c5dc:	bf00      	nop
  }
  return usb_status;
 800c5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b085      	sub	sp, #20
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c5fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c5fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c600:	2b00      	cmp	r3, #0
 800c602:	da0b      	bge.n	800c61c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c604:	78fb      	ldrb	r3, [r7, #3]
 800c606:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c60a:	68f9      	ldr	r1, [r7, #12]
 800c60c:	4613      	mov	r3, r2
 800c60e:	00db      	lsls	r3, r3, #3
 800c610:	4413      	add	r3, r2
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	440b      	add	r3, r1
 800c616:	333e      	adds	r3, #62	@ 0x3e
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	e00b      	b.n	800c634 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c61c:	78fb      	ldrb	r3, [r7, #3]
 800c61e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c622:	68f9      	ldr	r1, [r7, #12]
 800c624:	4613      	mov	r3, r2
 800c626:	00db      	lsls	r3, r3, #3
 800c628:	4413      	add	r3, r2
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	440b      	add	r3, r1
 800c62e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800c632:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c634:	4618      	mov	r0, r3
 800c636:	3714      	adds	r7, #20
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	460b      	mov	r3, r1
 800c64a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c64c:	2300      	movs	r3, #0
 800c64e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c650:	2300      	movs	r3, #0
 800c652:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c65a:	78fa      	ldrb	r2, [r7, #3]
 800c65c:	4611      	mov	r1, r2
 800c65e:	4618      	mov	r0, r3
 800c660:	f7f8 f8be 	bl	80047e0 <HAL_PCD_SetAddress>
 800c664:	4603      	mov	r3, r0
 800c666:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800c668:	7bbb      	ldrb	r3, [r7, #14]
 800c66a:	2b03      	cmp	r3, #3
 800c66c:	d816      	bhi.n	800c69c <USBD_LL_SetUSBAddress+0x5c>
 800c66e:	a201      	add	r2, pc, #4	@ (adr r2, 800c674 <USBD_LL_SetUSBAddress+0x34>)
 800c670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c674:	0800c685 	.word	0x0800c685
 800c678:	0800c68b 	.word	0x0800c68b
 800c67c:	0800c691 	.word	0x0800c691
 800c680:	0800c697 	.word	0x0800c697
    case HAL_OK :
      usb_status = USBD_OK;
 800c684:	2300      	movs	r3, #0
 800c686:	73fb      	strb	r3, [r7, #15]
    break;
 800c688:	e00b      	b.n	800c6a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c68a:	2303      	movs	r3, #3
 800c68c:	73fb      	strb	r3, [r7, #15]
    break;
 800c68e:	e008      	b.n	800c6a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c690:	2301      	movs	r3, #1
 800c692:	73fb      	strb	r3, [r7, #15]
    break;
 800c694:	e005      	b.n	800c6a2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c696:	2303      	movs	r3, #3
 800c698:	73fb      	strb	r3, [r7, #15]
    break;
 800c69a:	e002      	b.n	800c6a2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800c69c:	2303      	movs	r3, #3
 800c69e:	73fb      	strb	r3, [r7, #15]
    break;
 800c6a0:	bf00      	nop
  }
  return usb_status;
 800c6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3710      	adds	r7, #16
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b086      	sub	sp, #24
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	607a      	str	r2, [r7, #4]
 800c6b6:	603b      	str	r3, [r7, #0]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c6ca:	7af9      	ldrb	r1, [r7, #11]
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	f7f8 f9a7 	bl	8004a22 <HAL_PCD_EP_Transmit>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c6d8:	7dbb      	ldrb	r3, [r7, #22]
 800c6da:	2b03      	cmp	r3, #3
 800c6dc:	d816      	bhi.n	800c70c <USBD_LL_Transmit+0x60>
 800c6de:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e4 <USBD_LL_Transmit+0x38>)
 800c6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e4:	0800c6f5 	.word	0x0800c6f5
 800c6e8:	0800c6fb 	.word	0x0800c6fb
 800c6ec:	0800c701 	.word	0x0800c701
 800c6f0:	0800c707 	.word	0x0800c707
    case HAL_OK :
      usb_status = USBD_OK;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	75fb      	strb	r3, [r7, #23]
    break;
 800c6f8:	e00b      	b.n	800c712 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	75fb      	strb	r3, [r7, #23]
    break;
 800c6fe:	e008      	b.n	800c712 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c700:	2301      	movs	r3, #1
 800c702:	75fb      	strb	r3, [r7, #23]
    break;
 800c704:	e005      	b.n	800c712 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c706:	2303      	movs	r3, #3
 800c708:	75fb      	strb	r3, [r7, #23]
    break;
 800c70a:	e002      	b.n	800c712 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800c70c:	2303      	movs	r3, #3
 800c70e:	75fb      	strb	r3, [r7, #23]
    break;
 800c710:	bf00      	nop
  }
  return usb_status;
 800c712:	7dfb      	ldrb	r3, [r7, #23]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3718      	adds	r7, #24
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	607a      	str	r2, [r7, #4]
 800c726:	603b      	str	r3, [r7, #0]
 800c728:	460b      	mov	r3, r1
 800c72a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c730:	2300      	movs	r3, #0
 800c732:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c73a:	7af9      	ldrb	r1, [r7, #11]
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	f7f8 f925 	bl	800498e <HAL_PCD_EP_Receive>
 800c744:	4603      	mov	r3, r0
 800c746:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800c748:	7dbb      	ldrb	r3, [r7, #22]
 800c74a:	2b03      	cmp	r3, #3
 800c74c:	d816      	bhi.n	800c77c <USBD_LL_PrepareReceive+0x60>
 800c74e:	a201      	add	r2, pc, #4	@ (adr r2, 800c754 <USBD_LL_PrepareReceive+0x38>)
 800c750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c754:	0800c765 	.word	0x0800c765
 800c758:	0800c76b 	.word	0x0800c76b
 800c75c:	0800c771 	.word	0x0800c771
 800c760:	0800c777 	.word	0x0800c777
    case HAL_OK :
      usb_status = USBD_OK;
 800c764:	2300      	movs	r3, #0
 800c766:	75fb      	strb	r3, [r7, #23]
    break;
 800c768:	e00b      	b.n	800c782 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c76a:	2303      	movs	r3, #3
 800c76c:	75fb      	strb	r3, [r7, #23]
    break;
 800c76e:	e008      	b.n	800c782 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c770:	2301      	movs	r3, #1
 800c772:	75fb      	strb	r3, [r7, #23]
    break;
 800c774:	e005      	b.n	800c782 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c776:	2303      	movs	r3, #3
 800c778:	75fb      	strb	r3, [r7, #23]
    break;
 800c77a:	e002      	b.n	800c782 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800c77c:	2303      	movs	r3, #3
 800c77e:	75fb      	strb	r3, [r7, #23]
    break;
 800c780:	bf00      	nop
  }
  return usb_status;
 800c782:	7dfb      	ldrb	r3, [r7, #23]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3718      	adds	r7, #24
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	460b      	mov	r3, r1
 800c796:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c79e:	78fa      	ldrb	r2, [r7, #3]
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7f8 f925 	bl	80049f2 <HAL_PCD_EP_GetRxCount>
 800c7a8:	4603      	mov	r3, r0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3708      	adds	r7, #8
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
	...

0800c7b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	460b      	mov	r3, r1
 800c7be:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c7c0:	78fb      	ldrb	r3, [r7, #3]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d002      	beq.n	800c7cc <HAL_PCDEx_LPM_Callback+0x18>
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d01f      	beq.n	800c80a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c7ca:	e03b      	b.n	800c844 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6a1b      	ldr	r3, [r3, #32]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d007      	beq.n	800c7e4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c7d4:	f000 f854 	bl	800c880 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c7d8:	4b1c      	ldr	r3, [pc, #112]	@ (800c84c <HAL_PCDEx_LPM_Callback+0x98>)
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	4a1b      	ldr	r2, [pc, #108]	@ (800c84c <HAL_PCDEx_LPM_Callback+0x98>)
 800c7de:	f023 0306 	bic.w	r3, r3, #6
 800c7e2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	687a      	ldr	r2, [r7, #4]
 800c7f0:	6812      	ldr	r2, [r2, #0]
 800c7f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c7f6:	f023 0301 	bic.w	r3, r3, #1
 800c7fa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c802:	4618      	mov	r0, r3
 800c804:	f7fe f9a9 	bl	800ab5a <USBD_LL_Resume>
    break;
 800c808:	e01c      	b.n	800c844 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	6812      	ldr	r2, [r2, #0]
 800c818:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c81c:	f043 0301 	orr.w	r3, r3, #1
 800c820:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fe f97a 	bl	800ab22 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d005      	beq.n	800c842 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c836:	4b05      	ldr	r3, [pc, #20]	@ (800c84c <HAL_PCDEx_LPM_Callback+0x98>)
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	4a04      	ldr	r2, [pc, #16]	@ (800c84c <HAL_PCDEx_LPM_Callback+0x98>)
 800c83c:	f043 0306 	orr.w	r3, r3, #6
 800c840:	6113      	str	r3, [r2, #16]
    break;
 800c842:	bf00      	nop
}
 800c844:	bf00      	nop
 800c846:	3708      	adds	r7, #8
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}
 800c84c:	e000ed00 	.word	0xe000ed00

0800c850 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c858:	4b03      	ldr	r3, [pc, #12]	@ (800c868 <USBD_static_malloc+0x18>)
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	370c      	adds	r7, #12
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	2000c010 	.word	0x2000c010

0800c86c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]

}
 800c874:	bf00      	nop
 800c876:	370c      	adds	r7, #12
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c884:	f7f4 fad8 	bl	8000e38 <SystemClock_Config>
}
 800c888:	bf00      	nop
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <memset>:
 800c88c:	4402      	add	r2, r0
 800c88e:	4603      	mov	r3, r0
 800c890:	4293      	cmp	r3, r2
 800c892:	d100      	bne.n	800c896 <memset+0xa>
 800c894:	4770      	bx	lr
 800c896:	f803 1b01 	strb.w	r1, [r3], #1
 800c89a:	e7f9      	b.n	800c890 <memset+0x4>

0800c89c <__libc_init_array>:
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	4d0d      	ldr	r5, [pc, #52]	@ (800c8d4 <__libc_init_array+0x38>)
 800c8a0:	4c0d      	ldr	r4, [pc, #52]	@ (800c8d8 <__libc_init_array+0x3c>)
 800c8a2:	1b64      	subs	r4, r4, r5
 800c8a4:	10a4      	asrs	r4, r4, #2
 800c8a6:	2600      	movs	r6, #0
 800c8a8:	42a6      	cmp	r6, r4
 800c8aa:	d109      	bne.n	800c8c0 <__libc_init_array+0x24>
 800c8ac:	4d0b      	ldr	r5, [pc, #44]	@ (800c8dc <__libc_init_array+0x40>)
 800c8ae:	4c0c      	ldr	r4, [pc, #48]	@ (800c8e0 <__libc_init_array+0x44>)
 800c8b0:	f000 f826 	bl	800c900 <_init>
 800c8b4:	1b64      	subs	r4, r4, r5
 800c8b6:	10a4      	asrs	r4, r4, #2
 800c8b8:	2600      	movs	r6, #0
 800c8ba:	42a6      	cmp	r6, r4
 800c8bc:	d105      	bne.n	800c8ca <__libc_init_array+0x2e>
 800c8be:	bd70      	pop	{r4, r5, r6, pc}
 800c8c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8c4:	4798      	blx	r3
 800c8c6:	3601      	adds	r6, #1
 800c8c8:	e7ee      	b.n	800c8a8 <__libc_init_array+0xc>
 800c8ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8ce:	4798      	blx	r3
 800c8d0:	3601      	adds	r6, #1
 800c8d2:	e7f2      	b.n	800c8ba <__libc_init_array+0x1e>
 800c8d4:	0800c9d8 	.word	0x0800c9d8
 800c8d8:	0800c9d8 	.word	0x0800c9d8
 800c8dc:	0800c9d8 	.word	0x0800c9d8
 800c8e0:	0800c9dc 	.word	0x0800c9dc

0800c8e4 <memcpy>:
 800c8e4:	440a      	add	r2, r1
 800c8e6:	4291      	cmp	r1, r2
 800c8e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c8ec:	d100      	bne.n	800c8f0 <memcpy+0xc>
 800c8ee:	4770      	bx	lr
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8fa:	4291      	cmp	r1, r2
 800c8fc:	d1f9      	bne.n	800c8f2 <memcpy+0xe>
 800c8fe:	bd10      	pop	{r4, pc}

0800c900 <_init>:
 800c900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c902:	bf00      	nop
 800c904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c906:	bc08      	pop	{r3}
 800c908:	469e      	mov	lr, r3
 800c90a:	4770      	bx	lr

0800c90c <_fini>:
 800c90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90e:	bf00      	nop
 800c910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c912:	bc08      	pop	{r3}
 800c914:	469e      	mov	lr, r3
 800c916:	4770      	bx	lr
