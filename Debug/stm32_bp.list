
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7c8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800d984  0800d984  0000e984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da3c  0800da3c  0000f10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800da3c  0800da3c  0000ea3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da44  0800da44  0000f10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da44  0800da44  0000ea44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da48  0800da48  0000ea48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800da4c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000507c  2000010c  0800db58  0000f10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005188  0800db58  0000f188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024614  00000000  00000000  0000f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e18  00000000  00000000  00033750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00038568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001606  00000000  00000000  0003a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff19  00000000  00000000  0003b7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023804  00000000  00000000  0006b6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d870  00000000  00000000  0008eee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac753  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000777c  00000000  00000000  001ac798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b3f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800d96c 	.word	0x0800d96c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800d96c 	.word	0x0800d96c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2201      	movs	r2, #1
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fca3 	bl	8001eb4 <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 fe55 	bl	8001222 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f002 f81f 	bl	80025d8 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 fe3f 	bl	8001222 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f002 f811 	bl	80025d8 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 fe31 	bl	8001222 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00d f97d 	bl	800d8f8 <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fdc9 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 fded 	bl	8001222 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f003 fa5d 	bl	8003b50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 fec7 	bl	8003464 <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 fda1 	bl	8001222 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 fe80 	bl	80033f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 fe99 	bl	800342e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 fe6a 	bl	8003464 <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 fd44 	bl	8001222 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 fe29 	bl	80033f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 fe42 	bl	800342e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 fe21 	bl	80033f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 fe3a 	bl	800342e <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800085e:	4b37      	ldr	r3, [pc, #220]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000862:	4a36      	ldr	r2, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000868:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086a:	4b34      	ldr	r3, [pc, #208]	@ (800093c <MX_GPIO_Init+0x16c>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000876:	f004 fdc3 	bl	8005400 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 faf7 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 faf2 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 faed 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f003 f94d 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f003 f93e 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f003 f932 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f003 f924 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f003 f916 	bl	8003b50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fd64 	bl	80033f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fd7d 	bl	800342e <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d119      	bne.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		static bool previous;
		if(previous == false){
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000974:	f003 fa7e 	bl	8003e74 <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	4806      	ldr	r0, [pc, #24]	@ (80009a0 <HAL_GPIO_EXTI_Callback+0x54>)
 8000988:	f003 fa74 	bl	8003e74 <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <HAL_GPIO_EXTI_Callback+0x50>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000250 	.word	0x20000250
 80009a0:	48000400 	.word	0x48000400

080009a4 <comms_reset_active_buffer>:
	DataValue data[255];
} CommsData;

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);

void comms_reset_active_buffer() {
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_active_buffer + 1)) = 0;
 80009a8:	4b07      	ldr	r3, [pc, #28]	@ (80009c8 <comms_reset_active_buffer+0x24>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	3301      	adds	r3, #1
 80009ae:	2200      	movs	r2, #0
 80009b0:	801a      	strh	r2, [r3, #0]
	//comms_active_buffer[1] = 0;
	comms_active_wr_pointer = comms_active_buffer + 3;
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <comms_reset_active_buffer+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	3303      	adds	r3, #3
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <comms_reset_active_buffer+0x28>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	20000a54 	.word	0x20000a54
 80009cc:	20000a58 	.word	0x20000a58

080009d0 <comms_init>:

void comms_init() {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	comms_active_buffer = comms_tx_buffer1;
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <comms_init+0x24>)
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <comms_init+0x28>)
 80009d8:	601a      	str	r2, [r3, #0]
	comms_prepared_buffer = comms_tx_buffer2;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <comms_init+0x2c>)
 80009dc:	4a08      	ldr	r2, [pc, #32]	@ (8000a00 <comms_init+0x30>)
 80009de:	601a      	str	r2, [r3, #0]

	comms_reset_active_buffer();
 80009e0:	f7ff ffe0 	bl	80009a4 <comms_reset_active_buffer>
	comms_prepared_wr_pointer = comms_prepared_buffer + 3;
 80009e4:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <comms_init+0x2c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3303      	adds	r3, #3
 80009ea:	4a06      	ldr	r2, [pc, #24]	@ (8000a04 <comms_init+0x34>)
 80009ec:	6013      	str	r3, [r2, #0]
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	20000a54 	.word	0x20000a54
 80009f8:	20000254 	.word	0x20000254
 80009fc:	20000a5c 	.word	0x20000a5c
 8000a00:	20000654 	.word	0x20000654
 8000a04:	20000a60 	.word	0x20000a60

08000a08 <comms_purge_id_register>:

void comms_purge_id_register() {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	memset(comms_id_register, NULL, sizeof(comms_id_register));
 8000a0c:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000a10:	2100      	movs	r1, #0
 8000a12:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <comms_purge_id_register+0x14>)
 8000a14:	f00c ff70 	bl	800d8f8 <memset>
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000a64 	.word	0x20000a64

08000a20 <comms_find_existing_data>:

void* comms_find_existing_data(uint8_t data_id) {
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
	if (comms_id_register[data_id] != NULL) {
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <comms_find_existing_data+0x30>)
 8000a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <comms_find_existing_data+0x20>
		return comms_id_register[data_id];
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <comms_find_existing_data+0x30>)
 8000a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a3e:	e000      	b.n	8000a42 <comms_find_existing_data+0x22>
	}
	return NULL;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	20000a64 	.word	0x20000a64

08000a54 <comms_increment_active_buffer_data>:

void comms_increment_active_buffer_data() {
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_active_buffer + 1)) += 1;
 8000a58:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <comms_increment_active_buffer_data+0x24>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	881a      	ldrh	r2, [r3, #0]
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <comms_increment_active_buffer_data+0x24>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	3201      	adds	r2, #1
 8000a68:	b292      	uxth	r2, r2
 8000a6a:	801a      	strh	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000a54 	.word	0x20000a54

08000a7c <comms_append_int32>:

int comms_append_int32(uint8_t data_id, uint8_t data_count, int *data) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	603a      	str	r2, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	71bb      	strb	r3, [r7, #6]
	// dissable interrupts
//	uint32_t primask = __get_PRIMASK();
//	__disable_irq();

	//check tx_register for same data id, return if existing
	if (comms_find_existing_data(data_id) != NULL) {
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ffc6 	bl	8000a20 <comms_find_existing_data>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <comms_append_int32+0x22>
		return 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e02a      	b.n	8000af4 <comms_append_int32+0x78>
	}

	if (wr_status) {
 8000a9e:	4b17      	ldr	r3, [pc, #92]	@ (8000afc <comms_append_int32+0x80>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <comms_append_int32+0x2e>
		return COMMS_WR_LOCKED;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	e024      	b.n	8000af4 <comms_append_int32+0x78>
//	else {
//		wr_status = COMMS_INPROGRESS;
//	}

	// save the pointer to new data to register
	comms_id_register[data_id] = (void*) comms_active_wr_pointer;
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a14      	ldr	r2, [pc, #80]	@ (8000b00 <comms_append_int32+0x84>)
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	4914      	ldr	r1, [pc, #80]	@ (8000b04 <comms_append_int32+0x88>)
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// increment total data in buffer
	comms_increment_active_buffer_data();
 8000ab6:	f7ff ffcd 	bl	8000a54 <comms_increment_active_buffer_data>

	// write id, bytes and count
	*comms_active_wr_pointer = data_id;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <comms_append_int32+0x84>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer + 1) = (uint8_t) sizeof(*data);
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <comms_append_int32+0x84>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	2204      	movs	r2, #4
 8000aca:	701a      	strb	r2, [r3, #0]
	*(comms_active_wr_pointer + 2) = data_count;
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <comms_append_int32+0x84>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	79ba      	ldrb	r2, [r7, #6]
 8000ad4:	701a      	strb	r2, [r3, #0]

	// write integer as 4 uint8_t to tx_buffer
	*((int*) (comms_active_wr_pointer + 3)) = *data;
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <comms_append_int32+0x84>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	3303      	adds	r3, #3
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	601a      	str	r2, [r3, #0]

	// move pointer comms_tx_buffer_wr_pointer
	comms_active_wr_pointer = (comms_active_wr_pointer + 3 + sizeof(*data));
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <comms_append_int32+0x84>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3307      	adds	r3, #7
 8000ae8:	4a05      	ldr	r2, [pc, #20]	@ (8000b00 <comms_append_int32+0x84>)
 8000aea:	6013      	str	r3, [r2, #0]

	wr_status = COMMS_READY;
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <comms_append_int32+0x80>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]

	// restore interrupts
//	__set_PRIMASK(primask);

	return 0;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20001268 	.word	0x20001268
 8000b00:	20000a58 	.word	0x20000a58
 8000b04:	20000a64 	.word	0x20000a64

08000b08 <comms_switch_buffers>:

void comms_switch_buffers() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8000b12:	603b      	str	r3, [r7, #0]
  return(result);
 8000b14:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000b16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
	__disable_irq();

	// switch buffers
	uint8_t *_temp = comms_prepared_buffer;
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <comms_switch_buffers+0x4c>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60bb      	str	r3, [r7, #8]
	comms_prepared_buffer = comms_active_buffer;
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <comms_switch_buffers+0x50>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a0b      	ldr	r2, [pc, #44]	@ (8000b54 <comms_switch_buffers+0x4c>)
 8000b28:	6013      	str	r3, [r2, #0]
	comms_active_buffer = _temp;
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b58 <comms_switch_buffers+0x50>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	6013      	str	r3, [r2, #0]

	// set pointer to the end of prepared buffer data
	comms_prepared_wr_pointer = comms_active_wr_pointer;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <comms_switch_buffers+0x54>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <comms_switch_buffers+0x58>)
 8000b36:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_buffer();
 8000b38:	f7ff ff34 	bl	80009a4 <comms_reset_active_buffer>
	comms_purge_id_register();
 8000b3c:	f7ff ff64 	bl	8000a08 <comms_purge_id_register>
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f383 8810 	msr	PRIMASK, r3
}
 8000b4a:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000b4c:	bf00      	nop
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	20000a5c 	.word	0x20000a5c
 8000b58:	20000a54 	.word	0x20000a54
 8000b5c:	20000a58 	.word	0x20000a58
 8000b60:	20000a60 	.word	0x20000a60

08000b64 <comms_send>:

int comms_send() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

	if (tx_status > 0) {
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <comms_send+0x84>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <comms_send+0x12>
		return COMMS_TX_LOCKED;
 8000b72:	2304      	movs	r3, #4
 8000b74:	e034      	b.n	8000be0 <comms_send+0x7c>
	}

	tx_status = COMMS_INPROGRESS;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <comms_send+0x84>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	701a      	strb	r2, [r3, #0]

	// need to switch buffers
	comms_switch_buffers();
 8000b7c:	f7ff ffc4 	bl	8000b08 <comms_switch_buffers>

	// buffer is empty
	if (comms_prepared_buffer[1] == 0) {
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <comms_send+0x88>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d109      	bne.n	8000ba0 <comms_send+0x3c>
		++empty;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <comms_send+0x8c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <comms_send+0x8c>)
 8000b94:	6013      	str	r3, [r2, #0]
		tx_status = COMMS_READY;
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <comms_send+0x84>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
		return COMMS_TX_BUFFER_EMPTY;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	e01f      	b.n	8000be0 <comms_send+0x7c>
	}

	// send data
	USBD_StatusTypeDef cdc_return = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_return = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	71bb      	strb	r3, [r7, #6]

	if(0){
		cdc_return = CDC_Transmit_FS(comms_prepared_buffer, comms_prepared_wr_pointer - comms_prepared_buffer);
	} else {
		uart_return = HAL_UART_Transmit(&hlpuart1, comms_prepared_buffer, comms_prepared_wr_pointer - comms_prepared_buffer, 100);
 8000ba8:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <comms_send+0x88>)
 8000baa:	6819      	ldr	r1, [r3, #0]
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <comms_send+0x90>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <comms_send+0x88>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	2364      	movs	r3, #100	@ 0x64
 8000bba:	480f      	ldr	r0, [pc, #60]	@ (8000bf8 <comms_send+0x94>)
 8000bbc:	f006 fd6e 	bl	800769c <HAL_UART_Transmit>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71bb      	strb	r3, [r7, #6]
	}

	tx_status = COMMS_READY;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <comms_send+0x84>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]

	if (cdc_return) {
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <comms_send+0x70>
		return COMMS_TX_CDC_FAIL;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	e005      	b.n	8000be0 <comms_send+0x7c>
	}

	if (uart_return) {
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <comms_send+0x7a>
		return COMMS_TX_UART_FAIL;
 8000bda:	2306      	movs	r3, #6
 8000bdc:	e000      	b.n	8000be0 <comms_send+0x7c>
	}

	return COMMS_SUCCESS;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20001269 	.word	0x20001269
 8000bec:	20000a5c 	.word	0x20000a5c
 8000bf0:	20001264 	.word	0x20001264
 8000bf4:	20000a60 	.word	0x20000a60
 8000bf8:	20003450 	.word	0x20003450

08000bfc <comms_cdc_rx_callback>:

void comms_cdc_rx_callback(uint8_t *buffer, uint32_t length) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	// call this func inside of usbd_cdc_if.c in CDC_Receive_FS()

	if (rx_status) {
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <comms_cdc_rx_callback+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d111      	bne.n	8000c32 <comms_cdc_rx_callback+0x36>
		// not ready yet
		return;
	}

	if (length < 3) {
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d910      	bls.n	8000c36 <comms_cdc_rx_callback+0x3a>
		// invalid
		return;
	}

	rx_status = COMMS_INPROGRESS;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	@ (8000c40 <comms_cdc_rx_callback+0x44>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	701a      	strb	r2, [r3, #0]

	//comms_rx_buffer = buffer;
	memcpy(comms_rx_buffer1, buffer, length);
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	4809      	ldr	r0, [pc, #36]	@ (8000c44 <comms_cdc_rx_callback+0x48>)
 8000c20:	f00c fe96 	bl	800d950 <memcpy>
	comms_rx_read_pointer = comms_rx_buffer1 + 3;
 8000c24:	4a08      	ldr	r2, [pc, #32]	@ (8000c48 <comms_cdc_rx_callback+0x4c>)
 8000c26:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <comms_cdc_rx_callback+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]

	rx_status = COMMS_RECEIVED;
 8000c2a:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <comms_cdc_rx_callback+0x44>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e002      	b.n	8000c38 <comms_cdc_rx_callback+0x3c>
		return;
 8000c32:	bf00      	nop
 8000c34:	e000      	b.n	8000c38 <comms_cdc_rx_callback+0x3c>
		return;
 8000c36:	bf00      	nop
}
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000126a 	.word	0x2000126a
 8000c44:	20000e60 	.word	0x20000e60
 8000c48:	20000e63 	.word	0x20000e63
 8000c4c:	20001260 	.word	0x20001260

08000c50 <comms_data_handler>:

__weak void comms_data_handler(CommsData *data) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

	if (data == NULL) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d00c      	beq.n	8000c78 <comms_data_handler+0x28>
		return;
	}

	switch (data->data_id) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b05      	cmp	r3, #5
 8000c64:	d10a      	bne.n	8000c7c <comms_data_handler+0x2c>
	case 5:
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
				(GPIO_PinState) (data->data[0].u8));
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	791b      	ldrb	r3, [r3, #4]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c70:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <comms_data_handler+0x34>)
 8000c72:	f003 f8ff 	bl	8003e74 <HAL_GPIO_WritePin>
		break;
 8000c76:	e002      	b.n	8000c7e <comms_data_handler+0x2e>
		return;
 8000c78:	bf00      	nop
 8000c7a:	e000      	b.n	8000c7e <comms_data_handler+0x2e>
	default:
		break;
 8000c7c:	bf00      	nop
	}

}
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	48000400 	.word	0x48000400

08000c88 <comms_rx_process>:

void comms_rx_process() {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000c8e:	af00      	add	r7, sp, #0
	if (!rx_status) {
 8000c90:	4b4f      	ldr	r3, [pc, #316]	@ (8000dd0 <comms_rx_process+0x148>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f000 8093 	beq.w	8000dc0 <comms_rx_process+0x138>
		// no data yet
		return;
	}

	if (comms_rx_buffer1[0] == 0) {
 8000c9a:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd4 <comms_rx_process+0x14c>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f040 808a 	bne.w	8000db8 <comms_rx_process+0x130>
		uint16_t elements = *((uint16_t*) (comms_rx_buffer1 + 1));
 8000ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd4 <comms_rx_process+0x14c>)
 8000ca6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000caa:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406

		for (; elements > 0; --elements) {
 8000cae:	e07e      	b.n	8000dae <comms_rx_process+0x126>
			CommsData data;
			data.data_id = *comms_rx_read_pointer;
 8000cb0:	4b49      	ldr	r3, [pc, #292]	@ (8000dd8 <comms_rx_process+0x150>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	781a      	ldrb	r2, [r3, #0]
 8000cb6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000cba:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000cbe:	701a      	strb	r2, [r3, #0]
			data.data_size = *(comms_rx_read_pointer + 1);
 8000cc0:	4b45      	ldr	r3, [pc, #276]	@ (8000dd8 <comms_rx_process+0x150>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	785a      	ldrb	r2, [r3, #1]
 8000cc6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000cca:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000cce:	705a      	strb	r2, [r3, #1]
			data.data_count = *(comms_rx_read_pointer + 2);
 8000cd0:	4b41      	ldr	r3, [pc, #260]	@ (8000dd8 <comms_rx_process+0x150>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	789a      	ldrb	r2, [r3, #2]
 8000cd6:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000cda:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000cde:	709a      	strb	r2, [r3, #2]

			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000ce6:	e03d      	b.n	8000d64 <comms_rx_process+0xdc>
				switch (data.data_size) {
 8000ce8:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000cec:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000cf0:	785b      	ldrb	r3, [r3, #1]
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d023      	beq.n	8000d3e <comms_rx_process+0xb6>
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	dc64      	bgt.n	8000dc4 <comms_rx_process+0x13c>
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d002      	beq.n	8000d04 <comms_rx_process+0x7c>
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d00e      	beq.n	8000d20 <comms_rx_process+0x98>
				case 4:
					data.data[x].u32 =
							*((uint32_t*) (comms_rx_read_pointer + 3));
					break;
				default:
					return;
 8000d02:	e05f      	b.n	8000dc4 <comms_rx_process+0x13c>
					data.data[x].u8 = *(comms_rx_read_pointer + 3);
 8000d04:	4b34      	ldr	r3, [pc, #208]	@ (8000dd8 <comms_rx_process+0x150>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d0c:	78d1      	ldrb	r1, [r2, #3]
 8000d0e:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000d12:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	460a      	mov	r2, r1
 8000d1c:	711a      	strb	r2, [r3, #4]
					break;
 8000d1e:	e01c      	b.n	8000d5a <comms_rx_process+0xd2>
					data.data[x].u16 =
 8000d20:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <comms_rx_process+0x150>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d28:	f8b2 1003 	ldrh.w	r1, [r2, #3]
 8000d2c:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000d30:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	460a      	mov	r2, r1
 8000d3a:	809a      	strh	r2, [r3, #4]
					break;
 8000d3c:	e00d      	b.n	8000d5a <comms_rx_process+0xd2>
					data.data[x].u32 =
 8000d3e:	4b26      	ldr	r3, [pc, #152]	@ (8000dd8 <comms_rx_process+0x150>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d46:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8000d4a:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8000d4e:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	440b      	add	r3, r1
 8000d56:	605a      	str	r2, [r3, #4]
					break;
 8000d58:	bf00      	nop
			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000d5a:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000d5e:	3301      	adds	r3, #1
 8000d60:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000d64:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d68:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d6c:	789b      	ldrb	r3, [r3, #2]
 8000d6e:	f897 2405 	ldrb.w	r2, [r7, #1029]	@ 0x405
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d3b8      	bcc.n	8000ce8 <comms_rx_process+0x60>
				}
			}

			comms_data_handler(&data);
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff69 	bl	8000c50 <comms_data_handler>

			comms_rx_read_pointer = (comms_rx_read_pointer + 3
					+ (data.data_size * data.data_count));
 8000d7e:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <comms_rx_process+0x150>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d86:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d8a:	785b      	ldrb	r3, [r3, #1]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d92:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d96:	789b      	ldrb	r3, [r3, #2]
 8000d98:	fb01 f303 	mul.w	r3, r1, r3
 8000d9c:	3303      	adds	r3, #3
 8000d9e:	4413      	add	r3, r2
			comms_rx_read_pointer = (comms_rx_read_pointer + 3
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <comms_rx_process+0x150>)
 8000da2:	6013      	str	r3, [r2, #0]
		for (; elements > 0; --elements) {
 8000da4:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000da8:	3b01      	subs	r3, #1
 8000daa:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406
 8000dae:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f47f af7c 	bne.w	8000cb0 <comms_rx_process+0x28>
		}
	}

	rx_status = COMMS_READY;
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <comms_rx_process+0x148>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	701a      	strb	r2, [r3, #0]
 8000dbe:	e002      	b.n	8000dc6 <comms_rx_process+0x13e>
		return;
 8000dc0:	bf00      	nop
 8000dc2:	e000      	b.n	8000dc6 <comms_rx_process+0x13e>
					return;
 8000dc4:	bf00      	nop
}
 8000dc6:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000126a 	.word	0x2000126a
 8000dd4:	20000e60 	.word	0x20000e60
 8000dd8:	20001260 	.word	0x20001260

08000ddc <comms_uart_init>:

void comms_uart_init() {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_buffer1,
 8000de2:	2203      	movs	r2, #3
 8000de4:	4904      	ldr	r1, [pc, #16]	@ (8000df8 <comms_uart_init+0x1c>)
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <comms_uart_init+0x20>)
 8000de8:	f006 fce6 	bl	80077b8 <HAL_UART_Receive_IT>
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
			3);
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000e60 	.word	0x20000e60
 8000dfc:	20003450 	.word	0x20003450

08000e00 <comms_lpuart_rx_callback>:

void comms_lpuart_rx_callback(UART_HandleTypeDef *huart) {
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	// FOR ELEMENT LOOP:
	//		load packet head
	//		load data
	static uint16_t elements = 0;

}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	// user defined __weak callback from stm32l4xx_hal_uart.c
	// uart loaded data
	if (huart == &hlpuart1) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <HAL_UART_RxCpltCallback+0x20>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d102      	bne.n	8000e2a <HAL_UART_RxCpltCallback+0x16>
		comms_lpuart_rx_callback(huart);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ffeb 	bl	8000e00 <comms_lpuart_rx_callback>
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20003450 	.word	0x20003450

08000e38 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d10d      	bne.n	8000e64 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e48:	2180      	movs	r1, #128	@ 0x80
 8000e4a:	4809      	ldr	r0, [pc, #36]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e4c:	f003 f82a 	bl	8003ea4 <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	3301      	adds	r3, #1
 8000e56:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e58:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		comms_append_int32(1, 1, &periodical);
 8000e5a:	4a06      	ldr	r2, [pc, #24]	@ (8000e74 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f7ff fe0c 	bl	8000a7c <comms_append_int32>
	}
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20003404 	.word	0x20003404
 8000e70:	48000400 	.word	0x48000400
 8000e74:	2000126c 	.word	0x2000126c

08000e78 <myDmaFunction>:
////    }
//
//}

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8000e80:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <myDmaFunction+0x28>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e86:	4a07      	ldr	r2, [pc, #28]	@ (8000ea4 <myDmaFunction+0x2c>)
 8000e88:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <myDmaFunction+0x28>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e90:	4a05      	ldr	r2, [pc, #20]	@ (8000ea8 <myDmaFunction+0x30>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	200033b8 	.word	0x200033b8
 8000ea4:	20001278 	.word	0x20001278
 8000ea8:	2000127c 	.word	0x2000127c

08000eac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);

    ++call_count;
 8000eb4:	4b58      	ldr	r3, [pc, #352]	@ (8001018 <HAL_ADC_ConvCpltCallback+0x16c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	4a57      	ldr	r2, [pc, #348]	@ (8001018 <HAL_ADC_ConvCpltCallback+0x16c>)
 8000ebc:	6013      	str	r3, [r2, #0]

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 8000ebe:	4b57      	ldr	r3, [pc, #348]	@ (800101c <HAL_ADC_ConvCpltCallback+0x170>)
 8000ec0:	f04f 0200 	mov.w	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 8000ec6:	4b56      	ldr	r3, [pc, #344]	@ (8001020 <HAL_ADC_ConvCpltCallback+0x174>)
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 100; i++) {
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	e027      	b.n	8000f24 <HAL_ADC_ConvCpltCallback+0x78>
        adcValue += dma_data_buffer[i + 100]; // Použití druhé poloviny DMA bufferu
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3364      	adds	r3, #100	@ 0x64
 8000ed8:	4a52      	ldr	r2, [pc, #328]	@ (8001024 <HAL_ADC_ConvCpltCallback+0x178>)
 8000eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ede:	ee07 3a90 	vmov	s15, r3
 8000ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ee6:	4b4d      	ldr	r3, [pc, #308]	@ (800101c <HAL_ADC_ConvCpltCallback+0x170>)
 8000ee8:	edd3 7a00 	vldr	s15, [r3]
 8000eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800101c <HAL_ADC_ConvCpltCallback+0x170>)
 8000ef2:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 100];
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	3365      	adds	r3, #101	@ 0x65
 8000efa:	4a4a      	ldr	r2, [pc, #296]	@ (8001024 <HAL_ADC_ConvCpltCallback+0x178>)
 8000efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f00:	ee07 3a90 	vmov	s15, r3
 8000f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f08:	4b45      	ldr	r3, [pc, #276]	@ (8001020 <HAL_ADC_ConvCpltCallback+0x174>)
 8000f0a:	edd3 7a00 	vldr	s15, [r3]
 8000f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f12:	4b43      	ldr	r3, [pc, #268]	@ (8001020 <HAL_ADC_ConvCpltCallback+0x174>)
 8000f14:	edc3 7a00 	vstr	s15, [r3]
        i++;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 100; i++) {
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	2b63      	cmp	r3, #99	@ 0x63
 8000f28:	ddd4      	ble.n	8000ed4 <HAL_ADC_ConvCpltCallback+0x28>
    }
    adcValue /= 50.0f;
 8000f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800101c <HAL_ADC_ConvCpltCallback+0x170>)
 8000f2c:	ed93 7a00 	vldr	s14, [r3]
 8000f30:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001028 <HAL_ADC_ConvCpltCallback+0x17c>
 8000f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f38:	4b38      	ldr	r3, [pc, #224]	@ (800101c <HAL_ADC_ConvCpltCallback+0x170>)
 8000f3a:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 8000f3e:	4b38      	ldr	r3, [pc, #224]	@ (8001020 <HAL_ADC_ConvCpltCallback+0x174>)
 8000f40:	ed93 7a00 	vldr	s14, [r3]
 8000f44:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001028 <HAL_ADC_ConvCpltCallback+0x17c>
 8000f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f4c:	4b34      	ldr	r3, [pc, #208]	@ (8001020 <HAL_ADC_ConvCpltCallback+0x174>)
 8000f4e:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8000f52:	4b32      	ldr	r3, [pc, #200]	@ (800101c <HAL_ADC_ConvCpltCallback+0x170>)
 8000f54:	ed93 7a00 	vldr	s14, [r3]
 8000f58:	eddf 6a34 	vldr	s13, [pc, #208]	@ 800102c <HAL_ADC_ConvCpltCallback+0x180>
 8000f5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f60:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001030 <HAL_ADC_ConvCpltCallback+0x184>
 8000f64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f68:	edc7 7a04 	vstr	s15, [r7, #16]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 8000f6c:	4b31      	ldr	r3, [pc, #196]	@ (8001034 <HAL_ADC_ConvCpltCallback+0x188>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f78:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800102c <HAL_ADC_ConvCpltCallback+0x180>
 8000f7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f80:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001030 <HAL_ADC_ConvCpltCallback+0x184>
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	edc7 7a03 	vstr	s15, [r7, #12]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <HAL_ADC_ConvCpltCallback+0x18c>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f98:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800102c <HAL_ADC_ConvCpltCallback+0x180>
 8000f9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001030 <HAL_ADC_ConvCpltCallback+0x184>
 8000fa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa8:	edc7 7a02 	vstr	s15, [r7, #8]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 8000fac:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fb8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800103c <HAL_ADC_ConvCpltCallback+0x190>
 8000fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc0:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <HAL_ADC_ConvCpltCallback+0x194>)
 8000fca:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <HAL_ADC_ConvCpltCallback+0x198>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <HAL_ADC_ConvCpltCallback+0x198>)
 8000fd6:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    temperatureInt = (int)temperature;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <HAL_ADC_ConvCpltCallback+0x194>)
 8000fda:	edd3 7a00 	vldr	s15, [r3]
 8000fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe2:	ee17 2a90 	vmov	r2, s15
 8000fe6:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000fe8:	601a      	str	r2, [r3, #0]

    adcIn1Int = (int)adcIn1;
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <HAL_ADC_ConvCpltCallback+0x174>)
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff4:	ee17 2a90 	vmov	r2, s15
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <HAL_ADC_ConvCpltCallback+0x1a0>)
 8000ffa:	601a      	str	r2, [r3, #0]


    comms_append_int32(2, 1, &temperatureInt);
 8000ffc:	4a12      	ldr	r2, [pc, #72]	@ (8001048 <HAL_ADC_ConvCpltCallback+0x19c>)
 8000ffe:	2101      	movs	r1, #1
 8001000:	2002      	movs	r0, #2
 8001002:	f7ff fd3b 	bl	8000a7c <comms_append_int32>
    comms_append_int32(23, 1, &adcIn1Int);
 8001006:	4a11      	ldr	r2, [pc, #68]	@ (800104c <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001008:	2101      	movs	r1, #1
 800100a:	2017      	movs	r0, #23
 800100c:	f7ff fd36 	bl	8000a7c <comms_append_int32>
}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20003368 	.word	0x20003368
 800101c:	20003350 	.word	0x20003350
 8001020:	20003358 	.word	0x20003358
 8001024:	200031c0 	.word	0x200031c0
 8001028:	42480000 	.word	0x42480000
 800102c:	45800000 	.word	0x45800000
 8001030:	40533333 	.word	0x40533333
 8001034:	1fff75a8 	.word	0x1fff75a8
 8001038:	1fff75ca 	.word	0x1fff75ca
 800103c:	42a00000 	.word	0x42a00000
 8001040:	20003354 	.word	0x20003354
 8001044:	2000335c 	.word	0x2000335c
 8001048:	20003360 	.word	0x20003360
 800104c:	20003364 	.word	0x20003364

08001050 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
//		adcValue = adcValue + dma_data_buffer[i];
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106a:	f000 fc76 	bl	800195a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106e:	f000 f885 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001072:	f7ff fbad 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001076:	f7ff fb4f 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 800107a:	f000 fa29 	bl	80014d0 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 800107e:	f00b fdfd 	bl	800cc7c <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8001082:	f000 f9d7 	bl	8001434 <MX_TIM5_Init>
  MX_ADC1_Init();
 8001086:	f7ff fa31 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 800108a:	f000 f985 	bl	8001398 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800108e:	f000 fafb 	bl	8001688 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8001092:	f000 faab 	bl	80015ec <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	2180      	movs	r1, #128	@ 0x80
 800109a:	482b      	ldr	r0, [pc, #172]	@ (8001148 <main+0xe4>)
 800109c:	f002 feea 	bl	8003e74 <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 80010a0:	482a      	ldr	r0, [pc, #168]	@ (800114c <main+0xe8>)
 80010a2:	f005 fe6d 	bl	8006d80 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 80010a6:	482a      	ldr	r0, [pc, #168]	@ (8001150 <main+0xec>)
 80010a8:	f005 fe02 	bl	8006cb0 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	e00d      	b.n	80010ce <main+0x6a>
		dma[i] = i;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010bc:	4a25      	ldr	r2, [pc, #148]	@ (8001154 <main+0xf0>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3301      	adds	r3, #1
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010d4:	dbed      	blt.n	80010b2 <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 80010d6:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <main+0xf4>)
 80010d8:	2100      	movs	r1, #0
 80010da:	4820      	ldr	r0, [pc, #128]	@ (800115c <main+0xf8>)
 80010dc:	f002 fc50 	bl	8003980 <HAL_DMA_RegisterCallback>
 80010e0:	4603      	mov	r3, r0
 80010e2:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <main+0xec>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001160 <main+0xfc>)
 80010ec:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 80010ee:	4919      	ldr	r1, [pc, #100]	@ (8001154 <main+0xf0>)
 80010f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001164 <main+0x100>)
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	4819      	ldr	r0, [pc, #100]	@ (800115c <main+0xf8>)
 80010f8:	f002 fa5c 	bl	80035b4 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <main+0xec>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001102:	4a19      	ldr	r2, [pc, #100]	@ (8001168 <main+0x104>)
 8001104:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 8001106:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <main+0xec>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110c:	4a17      	ldr	r2, [pc, #92]	@ (800116c <main+0x108>)
 800110e:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim3);
 8001110:	4817      	ldr	r0, [pc, #92]	@ (8001170 <main+0x10c>)
 8001112:	f005 fe35 	bl	8006d80 <HAL_TIM_Base_Start_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001116:	217f      	movs	r1, #127	@ 0x7f
 8001118:	4816      	ldr	r0, [pc, #88]	@ (8001174 <main+0x110>)
 800111a:	f001 ffff 	bl	800311c <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 800111e:	2032      	movs	r0, #50	@ 0x32
 8001120:	f000 fc90 	bl	8001a44 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 200);
 8001124:	22c8      	movs	r2, #200	@ 0xc8
 8001126:	4914      	ldr	r1, [pc, #80]	@ (8001178 <main+0x114>)
 8001128:	4812      	ldr	r0, [pc, #72]	@ (8001174 <main+0x110>)
 800112a:	f001 f809 	bl	8002140 <HAL_ADC_Start_DMA>
 800112e:	4603      	mov	r3, r0
 8001130:	70bb      	strb	r3, [r7, #2]

	comms_init();
 8001132:	f7ff fc4d 	bl	80009d0 <comms_init>
	comms_uart_init();
 8001136:	f7ff fe51 	bl	8000ddc <comms_uart_init>
//		memset(nazevpole2, NULL, 255*sizeof(void *));
//
//		comms_append_int32(1, 1, &periodical);
//	    comms_append_int32(2, 1, &temperatureInt);
//	    comms_append_int32(23, 1, &adcIn1Int);
		comms_send();
 800113a:	f7ff fd13 	bl	8000b64 <comms_send>

		//load_CPU();
		comms_rx_process();
 800113e:	f7ff fda3 	bl	8000c88 <comms_rx_process>
		comms_send();
 8001142:	bf00      	nop
 8001144:	e7f9      	b.n	800113a <main+0xd6>
 8001146:	bf00      	nop
 8001148:	48000800 	.word	0x48000800
 800114c:	20003404 	.word	0x20003404
 8001150:	200033b8 	.word	0x200033b8
 8001154:	20001280 	.word	0x20001280
 8001158:	08000e79 	.word	0x08000e79
 800115c:	200001f0 	.word	0x200001f0
 8001160:	20001270 	.word	0x20001270
 8001164:	20002220 	.word	0x20002220
 8001168:	2000127c 	.word	0x2000127c
 800116c:	20001274 	.word	0x20001274
 8001170:	2000336c 	.word	0x2000336c
 8001174:	20000128 	.word	0x20000128
 8001178:	200031c0 	.word	0x200031c0

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b096      	sub	sp, #88	@ 0x58
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2244      	movs	r2, #68	@ 0x44
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f00c fbb4 	bl	800d8f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800119e:	2000      	movs	r0, #0
 80011a0:	f004 f87a 	bl	8005298 <HAL_PWREx_ControlVoltageScaling>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x32>
  {
    Error_Handler();
 80011aa:	f000 f83a 	bl	8001222 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80011ae:	2322      	movs	r3, #34	@ 0x22
 80011b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011b8:	2301      	movs	r3, #1
 80011ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011bc:	2340      	movs	r3, #64	@ 0x40
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c0:	2302      	movs	r3, #2
 80011c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80011cc:	231e      	movs	r3, #30
 80011ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d0:	2302      	movs	r3, #2
 80011d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011d8:	2302      	movs	r3, #2
 80011da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 f91d 	bl	8005420 <HAL_RCC_OscConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80011ec:	f000 f819 	bl	8001222 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f0:	230f      	movs	r3, #15
 80011f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f4:	2303      	movs	r3, #3
 80011f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001200:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001206:	463b      	mov	r3, r7
 8001208:	2105      	movs	r1, #5
 800120a:	4618      	mov	r0, r3
 800120c:	f004 fd22 	bl	8005c54 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001216:	f000 f804 	bl	8001222 <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3758      	adds	r7, #88	@ 0x58
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001226:	b672      	cpsid	i
}
 8001228:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800122a:	bf00      	nop
 800122c:	e7fd      	b.n	800122a <Error_Handler+0x8>
	...

08001230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001236:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <HAL_MspInit+0x44>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123a:	4a0e      	ldr	r2, [pc, #56]	@ (8001274 <HAL_MspInit+0x44>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6613      	str	r3, [r2, #96]	@ 0x60
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <HAL_MspInit+0x44>)
 8001244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	4b09      	ldr	r3, [pc, #36]	@ (8001274 <HAL_MspInit+0x44>)
 8001250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001252:	4a08      	ldr	r2, [pc, #32]	@ (8001274 <HAL_MspInit+0x44>)
 8001254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001258:	6593      	str	r3, [r2, #88]	@ 0x58
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_MspInit+0x44>)
 800125c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <NMI_Handler+0x4>

08001280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <MemManage_Handler+0x4>

08001290 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <UsageFault_Handler+0x4>

080012a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ce:	f000 fb99 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80012dc:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <DMA1_Channel1_IRQHandler+0x10>)
 80012de:	f002 fa9f 	bl	8003820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000190 	.word	0x20000190

080012ec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 80012f0:	4802      	ldr	r0, [pc, #8]	@ (80012fc <DMA1_Channel2_IRQHandler+0x10>)
 80012f2:	f002 fa95 	bl	8003820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001f0 	.word	0x200001f0

08001300 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001304:	4802      	ldr	r0, [pc, #8]	@ (8001310 <ADC1_IRQHandler+0x10>)
 8001306:	f000 ff9f 	bl	8002248 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000128 	.word	0x20000128

08001314 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001318:	4802      	ldr	r0, [pc, #8]	@ (8001324 <TIM3_IRQHandler+0x10>)
 800131a:	f005 fda1 	bl	8006e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000336c 	.word	0x2000336c

08001328 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800132c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001330:	f002 fdd2 	bl	8003ed8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <TIM6_DAC_IRQHandler+0x10>)
 800133e:	f005 fd8f 	bl	8006e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20003404 	.word	0x20003404

0800134c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001350:	4802      	ldr	r0, [pc, #8]	@ (800135c <OTG_FS_IRQHandler+0x10>)
 8001352:	f002 ff2c 	bl	80041ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20004a5c 	.word	0x20004a5c

08001360 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001364:	4802      	ldr	r0, [pc, #8]	@ (8001370 <LPUART1_IRQHandler+0x10>)
 8001366:	f006 fa73 	bl	8007850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20003450 	.word	0x20003450

08001374 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001378:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <SystemInit+0x20>)
 800137a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800137e:	4a05      	ldr	r2, [pc, #20]	@ (8001394 <SystemInit+0x20>)
 8001380:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001384:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000ed00 	.word	0xe000ed00

08001398 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <MX_TIM3_Init+0x94>)
 80013b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001430 <MX_TIM3_Init+0x98>)
 80013ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <MX_TIM3_Init+0x94>)
 80013be:	22c7      	movs	r2, #199	@ 0xc7
 80013c0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <MX_TIM3_Init+0x94>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80013c8:	4b18      	ldr	r3, [pc, #96]	@ (800142c <MX_TIM3_Init+0x94>)
 80013ca:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80013ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <MX_TIM3_Init+0x94>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <MX_TIM3_Init+0x94>)
 80013d8:	2280      	movs	r2, #128	@ 0x80
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013dc:	4813      	ldr	r0, [pc, #76]	@ (800142c <MX_TIM3_Init+0x94>)
 80013de:	f005 fc0f 	bl	8006c00 <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013e8:	f7ff ff1b 	bl	8001222 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013f2:	f107 0310 	add.w	r3, r7, #16
 80013f6:	4619      	mov	r1, r3
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <MX_TIM3_Init+0x94>)
 80013fa:	f005 fe33 	bl	8007064 <HAL_TIM_ConfigClockSource>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001404:	f7ff ff0d 	bl	8001222 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001408:	2320      	movs	r3, #32
 800140a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	@ (800142c <MX_TIM3_Init+0x94>)
 8001416:	f006 f84b 	bl	80074b0 <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001420:	f7ff feff 	bl	8001222 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000336c 	.word	0x2000336c
 8001430:	40000400 	.word	0x40000400

08001434 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001452:	4b1d      	ldr	r3, [pc, #116]	@ (80014c8 <MX_TIM5_Init+0x94>)
 8001454:	4a1d      	ldr	r2, [pc, #116]	@ (80014cc <MX_TIM5_Init+0x98>)
 8001456:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <MX_TIM5_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <MX_TIM5_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001464:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <MX_TIM5_Init+0x94>)
 8001466:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800146a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <MX_TIM5_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <MX_TIM5_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001478:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <MX_TIM5_Init+0x94>)
 800147a:	f005 fbc1 	bl	8006c00 <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001484:	f7ff fecd 	bl	8001222 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001488:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800148c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <MX_TIM5_Init+0x94>)
 8001496:	f005 fde5 	bl	8007064 <HAL_TIM_ConfigClockSource>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80014a0:	f7ff febf 	bl	8001222 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <MX_TIM5_Init+0x94>)
 80014b2:	f005 fffd 	bl	80074b0 <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80014bc:	f7ff feb1 	bl	8001222 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200033b8 	.word	0x200033b8
 80014cc:	40000c00 	.word	0x40000c00

080014d0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014e0:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <MX_TIM6_Init+0x68>)
 80014e2:	4a16      	ldr	r2, [pc, #88]	@ (800153c <MX_TIM6_Init+0x6c>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80014e6:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <MX_TIM6_Init+0x68>)
 80014e8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80014ec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b12      	ldr	r3, [pc, #72]	@ (8001538 <MX_TIM6_Init+0x68>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 80014f4:	4b10      	ldr	r3, [pc, #64]	@ (8001538 <MX_TIM6_Init+0x68>)
 80014f6:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80014fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <MX_TIM6_Init+0x68>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001502:	480d      	ldr	r0, [pc, #52]	@ (8001538 <MX_TIM6_Init+0x68>)
 8001504:	f005 fb7c 	bl	8006c00 <HAL_TIM_Base_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800150e:	f7ff fe88 	bl	8001222 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4806      	ldr	r0, [pc, #24]	@ (8001538 <MX_TIM6_Init+0x68>)
 8001520:	f005 ffc6 	bl	80074b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800152a:	f7ff fe7a 	bl	8001222 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20003404 	.word	0x20003404
 800153c:	40001000 	.word	0x40001000

08001540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a23      	ldr	r2, [pc, #140]	@ (80015dc <HAL_TIM_Base_MspInit+0x9c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d114      	bne.n	800157c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001552:	4b23      	ldr	r3, [pc, #140]	@ (80015e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001556:	4a22      	ldr	r2, [pc, #136]	@ (80015e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6593      	str	r3, [r2, #88]	@ 0x58
 800155e:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	201d      	movs	r0, #29
 8001570:	f001 ff41 	bl	80033f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001574:	201d      	movs	r0, #29
 8001576:	f001 ff5a 	bl	800342e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800157a:	e02a      	b.n	80015d2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a18      	ldr	r2, [pc, #96]	@ (80015e4 <HAL_TIM_Base_MspInit+0xa4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10c      	bne.n	80015a0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158a:	4a15      	ldr	r2, [pc, #84]	@ (80015e0 <HAL_TIM_Base_MspInit+0xa0>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	6593      	str	r3, [r2, #88]	@ 0x58
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <HAL_TIM_Base_MspInit+0xa0>)
 8001594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]
}
 800159e:	e018      	b.n	80015d2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a10      	ldr	r2, [pc, #64]	@ (80015e8 <HAL_TIM_Base_MspInit+0xa8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d113      	bne.n	80015d2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <HAL_TIM_Base_MspInit+0xa0>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ae:	4a0c      	ldr	r2, [pc, #48]	@ (80015e0 <HAL_TIM_Base_MspInit+0xa0>)
 80015b0:	f043 0310 	orr.w	r3, r3, #16
 80015b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <HAL_TIM_Base_MspInit+0xa0>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	2036      	movs	r0, #54	@ 0x36
 80015c8:	f001 ff15 	bl	80033f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015cc:	2036      	movs	r0, #54	@ 0x36
 80015ce:	f001 ff2e 	bl	800342e <HAL_NVIC_EnableIRQ>
}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40000400 	.word	0x40000400
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40000c00 	.word	0x40000c00
 80015e8:	40001000 	.word	0x40001000

080015ec <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80015f0:	4b23      	ldr	r3, [pc, #140]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 80015f2:	4a24      	ldr	r2, [pc, #144]	@ (8001684 <MX_LPUART1_UART_Init+0x98>)
 80015f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80015f6:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800160a:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001616:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 8001618:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800161c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001624:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 800162c:	2200      	movs	r2, #0
 800162e:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001630:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 8001632:	2200      	movs	r2, #0
 8001634:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001636:	4812      	ldr	r0, [pc, #72]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 8001638:	f005 ffe0 	bl	80075fc <HAL_UART_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001642:	f7ff fdee 	bl	8001222 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001646:	2100      	movs	r1, #0
 8001648:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 800164a:	f008 f83a 	bl	80096c2 <HAL_UARTEx_SetTxFifoThreshold>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001654:	f7ff fde5 	bl	8001222 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001658:	2100      	movs	r1, #0
 800165a:	4809      	ldr	r0, [pc, #36]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 800165c:	f008 f86f 	bl	800973e <HAL_UARTEx_SetRxFifoThreshold>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001666:	f7ff fddc 	bl	8001222 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_LPUART1_UART_Init+0x94>)
 800166c:	f007 fff0 	bl	8009650 <HAL_UARTEx_DisableFifoMode>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001676:	f7ff fdd4 	bl	8001222 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20003450 	.word	0x20003450
 8001684:	40008000 	.word	0x40008000

08001688 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800168c:	4b22      	ldr	r3, [pc, #136]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 800168e:	4a23      	ldr	r2, [pc, #140]	@ (800171c <MX_USART3_UART_Init+0x94>)
 8001690:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001692:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b1f      	ldr	r3, [pc, #124]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016be:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ca:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016d0:	4811      	ldr	r0, [pc, #68]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016d2:	f005 ff93 	bl	80075fc <HAL_UART_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016dc:	f7ff fda1 	bl	8001222 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	480d      	ldr	r0, [pc, #52]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016e4:	f007 ffed 	bl	80096c2 <HAL_UARTEx_SetTxFifoThreshold>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016ee:	f7ff fd98 	bl	8001222 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f2:	2100      	movs	r1, #0
 80016f4:	4808      	ldr	r0, [pc, #32]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016f6:	f008 f822 	bl	800973e <HAL_UARTEx_SetRxFifoThreshold>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001700:	f7ff fd8f 	bl	8001222 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 8001706:	f007 ffa3 	bl	8009650 <HAL_UARTEx_DisableFifoMode>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001710:	f7ff fd87 	bl	8001222 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200034e4 	.word	0x200034e4
 800171c:	40004800 	.word	0x40004800

08001720 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0b2      	sub	sp, #200	@ 0xc8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	2294      	movs	r2, #148	@ 0x94
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f00c f8d9 	bl	800d8f8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a69      	ldr	r2, [pc, #420]	@ (80018f0 <HAL_UART_MspInit+0x1d0>)
 800174c:	4293      	cmp	r3, r2
 800174e:	f040 808a 	bne.w	8001866 <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001752:	2320      	movs	r3, #32
 8001754:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001756:	2300      	movs	r3, #0
 8001758:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175a:	f107 0320 	add.w	r3, r7, #32
 800175e:	4618      	mov	r0, r3
 8001760:	f004 fd36 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800176a:	f7ff fd5a 	bl	8001222 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800176e:	4b61      	ldr	r3, [pc, #388]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 8001770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001772:	4a60      	ldr	r2, [pc, #384]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800177a:	4b5e      	ldr	r3, [pc, #376]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 800177c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	4b5b      	ldr	r3, [pc, #364]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178a:	4a5a      	ldr	r2, [pc, #360]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001792:	4b58      	ldr	r3, [pc, #352]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 8001794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179e:	4b55      	ldr	r3, [pc, #340]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a2:	4a54      	ldr	r2, [pc, #336]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017aa:	4b52      	ldr	r3, [pc, #328]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b6:	4b4f      	ldr	r3, [pc, #316]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ba:	4a4e      	ldr	r2, [pc, #312]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 80017bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c2:	4b4c      	ldr	r3, [pc, #304]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80017ce:	f003 fe17 	bl	8005400 <HAL_PWREx_EnableVddIO2>
    PA6     ------> LPUART1_CTS
    PB1     ------> LPUART1_RTS
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d2:	2340      	movs	r3, #64	@ 0x40
 80017d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80017ea:	2308      	movs	r3, #8
 80017ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80017f4:	4619      	mov	r1, r3
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fa:	f002 f9a9 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017fe:	2302      	movs	r3, #2
 8001800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001810:	2303      	movs	r3, #3
 8001812:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001816:	2308      	movs	r3, #8
 8001818:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001820:	4619      	mov	r1, r3
 8001822:	4835      	ldr	r0, [pc, #212]	@ (80018f8 <HAL_UART_MspInit+0x1d8>)
 8001824:	f002 f994 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001828:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800182c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001842:	2308      	movs	r3, #8
 8001844:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001848:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800184c:	4619      	mov	r1, r3
 800184e:	482b      	ldr	r0, [pc, #172]	@ (80018fc <HAL_UART_MspInit+0x1dc>)
 8001850:	f002 f97e 	bl	8003b50 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	2046      	movs	r0, #70	@ 0x46
 800185a:	f001 fdcc 	bl	80033f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800185e:	2046      	movs	r0, #70	@ 0x46
 8001860:	f001 fde5 	bl	800342e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001864:	e040      	b.n	80018e8 <HAL_UART_MspInit+0x1c8>
  else if(uartHandle->Instance==USART3)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a25      	ldr	r2, [pc, #148]	@ (8001900 <HAL_UART_MspInit+0x1e0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d13b      	bne.n	80018e8 <HAL_UART_MspInit+0x1c8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001870:	2304      	movs	r3, #4
 8001872:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001874:	2300      	movs	r3, #0
 8001876:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001878:	f107 0320 	add.w	r3, r7, #32
 800187c:	4618      	mov	r0, r3
 800187e:	f004 fca7 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_UART_MspInit+0x16c>
      Error_Handler();
 8001888:	f7ff fccb 	bl	8001222 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001890:	4a18      	ldr	r2, [pc, #96]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 8001892:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001896:	6593      	str	r3, [r2, #88]	@ 0x58
 8001898:	4b16      	ldr	r3, [pc, #88]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a4:	4b13      	ldr	r3, [pc, #76]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a8:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 80018aa:	f043 0308 	orr.w	r3, r3, #8
 80018ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b0:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <HAL_UART_MspInit+0x1d4>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018d6:	2307      	movs	r3, #7
 80018d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018dc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4808      	ldr	r0, [pc, #32]	@ (8001904 <HAL_UART_MspInit+0x1e4>)
 80018e4:	f002 f934 	bl	8003b50 <HAL_GPIO_Init>
}
 80018e8:	bf00      	nop
 80018ea:	37c8      	adds	r7, #200	@ 0xc8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40008000 	.word	0x40008000
 80018f4:	40021000 	.word	0x40021000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	48001800 	.word	0x48001800
 8001900:	40004800 	.word	0x40004800
 8001904:	48000c00 	.word	0x48000c00

08001908 <Reset_Handler>:
 8001908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001940 <LoopForever+0x2>
 800190c:	f7ff fd32 	bl	8001374 <SystemInit>
 8001910:	480c      	ldr	r0, [pc, #48]	@ (8001944 <LoopForever+0x6>)
 8001912:	490d      	ldr	r1, [pc, #52]	@ (8001948 <LoopForever+0xa>)
 8001914:	4a0d      	ldr	r2, [pc, #52]	@ (800194c <LoopForever+0xe>)
 8001916:	2300      	movs	r3, #0
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:
 800191a:	58d4      	ldr	r4, [r2, r3]
 800191c:	50c4      	str	r4, [r0, r3]
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:
 8001920:	18c4      	adds	r4, r0, r3
 8001922:	428c      	cmp	r4, r1
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <LoopForever+0x12>)
 8001928:	4c0a      	ldr	r4, [pc, #40]	@ (8001954 <LoopForever+0x16>)
 800192a:	2300      	movs	r3, #0
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:
 8001932:	42a2      	cmp	r2, r4
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>
 8001936:	f00b ffe7 	bl	800d908 <__libc_init_array>
 800193a:	f7ff fb93 	bl	8001064 <main>

0800193e <LoopForever>:
 800193e:	e7fe      	b.n	800193e <LoopForever>
 8001940:	200a0000 	.word	0x200a0000
 8001944:	20000000 	.word	0x20000000
 8001948:	2000010c 	.word	0x2000010c
 800194c:	0800da4c 	.word	0x0800da4c
 8001950:	2000010c 	.word	0x2000010c
 8001954:	20005188 	.word	0x20005188

08001958 <CAN1_RX0_IRQHandler>:
 8001958:	e7fe      	b.n	8001958 <CAN1_RX0_IRQHandler>

0800195a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f001 fd3b 	bl	80033e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800196a:	2000      	movs	r0, #0
 800196c:	f000 f80e 	bl	800198c <HAL_InitTick>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	e001      	b.n	8001980 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800197c:	f7ff fc58 	bl	8001230 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001980:	79fb      	ldrb	r3, [r7, #7]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001998:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <HAL_InitTick+0x6c>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d023      	beq.n	80019e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019a0:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <HAL_InitTick+0x70>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <HAL_InitTick+0x6c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4619      	mov	r1, r3
 80019aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 fd47 	bl	800344a <HAL_SYSTICK_Config>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10f      	bne.n	80019e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b0f      	cmp	r3, #15
 80019c6:	d809      	bhi.n	80019dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c8:	2200      	movs	r2, #0
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019d0:	f001 fd11 	bl	80033f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <HAL_InitTick+0x74>)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e007      	b.n	80019ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e004      	b.n	80019ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	e001      	b.n	80019ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000008 	.word	0x20000008
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	@ (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20003578 	.word	0x20003578

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20003578 	.word	0x20003578

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008

08001a8c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	609a      	str	r2, [r3, #8]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3360      	adds	r3, #96	@ 0x60
 8001b06:	461a      	mov	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <LL_ADC_SetOffset+0x44>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	4313      	orrs	r3, r2
 8001b24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b2c:	bf00      	nop
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	03fff000 	.word	0x03fff000

08001b3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3360      	adds	r3, #96	@ 0x60
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3360      	adds	r3, #96	@ 0x60
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b92:	bf00      	nop
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	615a      	str	r2, [r3, #20]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b087      	sub	sp, #28
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3330      	adds	r3, #48	@ 0x30
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	4413      	add	r3, r2
 8001c08:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	211f      	movs	r1, #31
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	401a      	ands	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	f003 011f 	and.w	r1, r3, #31
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	431a      	orrs	r2, r3
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c36:	bf00      	nop
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	3314      	adds	r3, #20
 8001c78:	461a      	mov	r2, r3
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	0e5b      	lsrs	r3, r3, #25
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	4413      	add	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	0d1b      	lsrs	r3, r3, #20
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	2107      	movs	r1, #7
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	0d1b      	lsrs	r3, r3, #20
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	431a      	orrs	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cb2:	bf00      	nop
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f003 0318 	and.w	r3, r3, #24
 8001ce2:	4908      	ldr	r1, [pc, #32]	@ (8001d04 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ce4:	40d9      	lsrs	r1, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	400b      	ands	r3, r1
 8001cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	0007ffff 	.word	0x0007ffff

08001d08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6093      	str	r3, [r2, #8]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d40:	d101      	bne.n	8001d46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d68:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d90:	d101      	bne.n	8001d96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001db4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ddc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001de0:	f043 0202 	orr.w	r2, r3, #2
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <LL_ADC_IsEnabled+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_ADC_IsEnabled+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d101      	bne.n	8001e32 <LL_ADC_IsDisableOngoing+0x18>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <LL_ADC_IsDisableOngoing+0x1a>
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e54:	f043 0204 	orr.w	r2, r3, #4
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d101      	bne.n	8001e80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	d101      	bne.n	8001ea6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e129      	b.n	8002122 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7fe fb7b 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff19 	bl	8001d2c <LL_ADC_IsDeepPowerDownEnabled>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d004      	beq.n	8001f0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff feff 	bl	8001d08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff ff34 	bl	8001d7c <LL_ADC_IsInternalRegulatorEnabled>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d115      	bne.n	8001f46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff18 	bl	8001d54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f24:	4b81      	ldr	r3, [pc, #516]	@ (800212c <HAL_ADC_Init+0x278>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	099b      	lsrs	r3, r3, #6
 8001f2a:	4a81      	ldr	r2, [pc, #516]	@ (8002130 <HAL_ADC_Init+0x27c>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	099b      	lsrs	r3, r3, #6
 8001f32:	3301      	adds	r3, #1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff16 	bl	8001d7c <LL_ADC_IsInternalRegulatorEnabled>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10d      	bne.n	8001f72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5a:	f043 0210 	orr.w	r2, r3, #16
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f66:	f043 0201 	orr.w	r2, r3, #1
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff76 	bl	8001e68 <LL_ADC_REG_IsConversionOngoing>
 8001f7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 80c2 	bne.w	8002110 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 80be 	bne.w	8002110 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f98:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f9c:	f043 0202 	orr.w	r2, r3, #2
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff23 	bl	8001df4 <LL_ADC_IsEnabled>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10b      	bne.n	8001fcc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fb4:	485f      	ldr	r0, [pc, #380]	@ (8002134 <HAL_ADC_Init+0x280>)
 8001fb6:	f7ff ff1d 	bl	8001df4 <LL_ADC_IsEnabled>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	485c      	ldr	r0, [pc, #368]	@ (8002138 <HAL_ADC_Init+0x284>)
 8001fc8:	f7ff fd60 	bl	8001a8c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	7e5b      	ldrb	r3, [r3, #25]
 8001fd0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fd6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001fdc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001fe2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d106      	bne.n	8002008 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	3b01      	subs	r3, #1
 8002000:	045b      	lsls	r3, r3, #17
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002014:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	4b44      	ldr	r3, [pc, #272]	@ (800213c <HAL_ADC_Init+0x288>)
 800202c:	4013      	ands	r3, r2
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	6812      	ldr	r2, [r2, #0]
 8002032:	69b9      	ldr	r1, [r7, #24]
 8002034:	430b      	orrs	r3, r1
 8002036:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ff26 	bl	8001e8e <LL_ADC_INJ_IsConversionOngoing>
 8002042:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d140      	bne.n	80020cc <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d13d      	bne.n	80020cc <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7e1b      	ldrb	r3, [r3, #24]
 8002058:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800205a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002062:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002072:	f023 0306 	bic.w	r3, r3, #6
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	430b      	orrs	r3, r1
 800207e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002086:	2b01      	cmp	r3, #1
 8002088:	d118      	bne.n	80020bc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020a0:	4311      	orrs	r1, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020ac:	430a      	orrs	r2, r1
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	611a      	str	r2, [r3, #16]
 80020ba:	e007      	b.n	80020cc <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d10c      	bne.n	80020ee <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020da:	f023 010f 	bic.w	r1, r3, #15
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	1e5a      	subs	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80020ec:	e007      	b.n	80020fe <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 020f 	bic.w	r2, r2, #15
 80020fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002102:	f023 0303 	bic.w	r3, r3, #3
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	659a      	str	r2, [r3, #88]	@ 0x58
 800210e:	e007      	b.n	8002120 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	f043 0210 	orr.w	r2, r3, #16
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002120:	7ffb      	ldrb	r3, [r7, #31]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3720      	adds	r7, #32
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000000 	.word	0x20000000
 8002130:	053e2d63 	.word	0x053e2d63
 8002134:	50040000 	.word	0x50040000
 8002138:	50040300 	.word	0x50040300
 800213c:	fff0c007 	.word	0xfff0c007

08002140 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fe89 	bl	8001e68 <LL_ADC_REG_IsConversionOngoing>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d167      	bne.n	800222c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_ADC_Start_DMA+0x2a>
 8002166:	2302      	movs	r3, #2
 8002168:	e063      	b.n	8002232 <HAL_ADC_Start_DMA+0xf2>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fe2c 	bl	8002dd0 <ADC_Enable>
 8002178:	4603      	mov	r3, r0
 800217a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800217c:	7dfb      	ldrb	r3, [r7, #23]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d14f      	bne.n	8002222 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002186:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a6:	f023 0206 	bic.w	r2, r3, #6
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021ae:	e002      	b.n	80021b6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ba:	4a20      	ldr	r2, [pc, #128]	@ (800223c <HAL_ADC_Start_DMA+0xfc>)
 80021bc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002240 <HAL_ADC_Start_DMA+0x100>)
 80021c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002244 <HAL_ADC_Start_DMA+0x104>)
 80021cc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	221c      	movs	r2, #28
 80021d4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0210 	orr.w	r2, r2, #16
 80021ec:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f042 0201 	orr.w	r2, r2, #1
 80021fc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3340      	adds	r3, #64	@ 0x40
 8002208:	4619      	mov	r1, r3
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f001 f9d1 	bl	80035b4 <HAL_DMA_Start_IT>
 8002212:	4603      	mov	r3, r0
 8002214:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fe10 	bl	8001e40 <LL_ADC_REG_StartConversion>
 8002220:	e006      	b.n	8002230 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800222a:	e001      	b.n	8002230 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800222c:	2302      	movs	r3, #2
 800222e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002230:	7dfb      	ldrb	r3, [r7, #23]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	08002f9b 	.word	0x08002f9b
 8002240:	08003073 	.word	0x08003073
 8002244:	0800308f 	.word	0x0800308f

08002248 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002250:	2300      	movs	r3, #0
 8002252:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d017      	beq.n	800229e <HAL_ADC_IRQHandler+0x56>
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d012      	beq.n	800229e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002288:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 ffcb 	bl	800322c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2202      	movs	r2, #2
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_ADC_IRQHandler+0x6a>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d05e      	beq.n	800237a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d059      	beq.n	800237a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fc6e 	bl	8001bc4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d03e      	beq.n	800236c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d135      	bne.n	800236c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b08      	cmp	r3, #8
 800230c:	d12e      	bne.n	800236c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff fda8 	bl	8001e68 <LL_ADC_REG_IsConversionOngoing>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d11a      	bne.n	8002354 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 020c 	bic.w	r2, r2, #12
 800232c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002332:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d112      	bne.n	800236c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	659a      	str	r2, [r3, #88]	@ 0x58
 8002352:	e00b      	b.n	800236c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002358:	f043 0210 	orr.w	r2, r3, #16
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002364:	f043 0201 	orr.w	r2, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7fe fd9d 	bl	8000eac <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	220c      	movs	r2, #12
 8002378:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_ADC_IRQHandler+0x146>
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002394:	2b00      	cmp	r3, #0
 8002396:	d072      	beq.n	800247e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d06d      	beq.n	800247e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fc3f 	bl	8001c42 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80023c4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fbfa 	bl	8001bc4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023d0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d047      	beq.n	8002470 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <HAL_ADC_IRQHandler+0x1b2>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03f      	beq.n	8002470 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d13a      	bne.n	8002470 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002404:	2b40      	cmp	r3, #64	@ 0x40
 8002406:	d133      	bne.n	8002470 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d12e      	bne.n	8002470 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fd39 	bl	8001e8e <LL_ADC_INJ_IsConversionOngoing>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d11a      	bne.n	8002458 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002430:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002436:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d112      	bne.n	8002470 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	659a      	str	r2, [r3, #88]	@ 0x58
 8002456:	e00b      	b.n	8002470 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245c:	f043 0210 	orr.w	r2, r3, #16
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002468:	f043 0201 	orr.w	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 feb3 	bl	80031dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2260      	movs	r2, #96	@ 0x60
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002484:	2b00      	cmp	r3, #0
 8002486:	d011      	beq.n	80024ac <HAL_ADC_IRQHandler+0x264>
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002496:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f886 	bl	80025b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2280      	movs	r2, #128	@ 0x80
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d012      	beq.n	80024dc <HAL_ADC_IRQHandler+0x294>
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fe99 	bl	8003204 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d012      	beq.n	800250c <HAL_ADC_IRQHandler+0x2c4>
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00d      	beq.n	800250c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fe8b 	bl	8003218 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	d02a      	beq.n	800256c <HAL_ADC_IRQHandler+0x324>
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	d025      	beq.n	800256c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002524:	2b00      	cmp	r3, #0
 8002526:	d102      	bne.n	800252e <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002528:	2301      	movs	r3, #1
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	e008      	b.n	8002540 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800253c:	2301      	movs	r3, #1
 800253e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d10e      	bne.n	8002564 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002556:	f043 0202 	orr.w	r2, r3, #2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f830 	bl	80025c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2210      	movs	r2, #16
 800256a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002572:	2b00      	cmp	r3, #0
 8002574:	d018      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x360>
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002584:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002590:	f043 0208 	orr.w	r2, r3, #8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80025a0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 fe24 	bl	80031f0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80025a8:	bf00      	nop
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b0b6      	sub	sp, #216	@ 0xd8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_ADC_ConfigChannel+0x22>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e3d5      	b.n	8002da6 <HAL_ADC_ConfigChannel+0x7ce>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fc2e 	bl	8001e68 <LL_ADC_REG_IsConversionOngoing>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 83ba 	bne.w	8002d88 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b05      	cmp	r3, #5
 8002622:	d824      	bhi.n	800266e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	3b02      	subs	r3, #2
 800262a:	2b03      	cmp	r3, #3
 800262c:	d81b      	bhi.n	8002666 <HAL_ADC_ConfigChannel+0x8e>
 800262e:	a201      	add	r2, pc, #4	@ (adr r2, 8002634 <HAL_ADC_ConfigChannel+0x5c>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	08002645 	.word	0x08002645
 8002638:	0800264d 	.word	0x0800264d
 800263c:	08002655 	.word	0x08002655
 8002640:	0800265d 	.word	0x0800265d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002644:	230c      	movs	r3, #12
 8002646:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800264a:	e010      	b.n	800266e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800264c:	2312      	movs	r3, #18
 800264e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002652:	e00c      	b.n	800266e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002654:	2318      	movs	r3, #24
 8002656:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800265a:	e008      	b.n	800266e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800265c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002664:	e003      	b.n	800266e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002666:	2306      	movs	r3, #6
 8002668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800266c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800267c:	f7ff fab5 	bl	8001bea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fbef 	bl	8001e68 <LL_ADC_REG_IsConversionOngoing>
 800268a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fbfb 	bl	8001e8e <LL_ADC_INJ_IsConversionOngoing>
 8002698:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800269c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f040 81bf 	bne.w	8002a24 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 81ba 	bne.w	8002a24 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026b8:	d10f      	bne.n	80026da <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2200      	movs	r2, #0
 80026c4:	4619      	mov	r1, r3
 80026c6:	f7ff facf 	bl	8001c68 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fa63 	bl	8001b9e <LL_ADC_SetSamplingTimeCommonConfig>
 80026d8:	e00e      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6819      	ldr	r1, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	461a      	mov	r2, r3
 80026e8:	f7ff fabe 	bl	8001c68 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fa53 	bl	8001b9e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	695a      	ldr	r2, [r3, #20]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d00a      	beq.n	8002730 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	6919      	ldr	r1, [r3, #16]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800272a:	f7ff f9e3 	bl	8001af4 <LL_ADC_SetOffset>
 800272e:	e179      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fa00 	bl	8001b3c <LL_ADC_GetOffsetChannel>
 800273c:	4603      	mov	r3, r0
 800273e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <HAL_ADC_ConfigChannel+0x184>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff f9f5 	bl	8001b3c <LL_ADC_GetOffsetChannel>
 8002752:	4603      	mov	r3, r0
 8002754:	0e9b      	lsrs	r3, r3, #26
 8002756:	f003 021f 	and.w	r2, r3, #31
 800275a:	e01e      	b.n	800279a <HAL_ADC_ConfigChannel+0x1c2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff f9ea 	bl	8001b3c <LL_ADC_GetOffsetChannel>
 8002768:	4603      	mov	r3, r0
 800276a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800277a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800277e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002782:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800278a:	2320      	movs	r3, #32
 800278c:	e004      	b.n	8002798 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800278e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x1da>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	0e9b      	lsrs	r3, r3, #26
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	e018      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x20c>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80027c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80027ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80027d6:	2320      	movs	r3, #32
 80027d8:	e004      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80027da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d106      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2200      	movs	r2, #0
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff f9b9 	bl	8001b68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2101      	movs	r1, #1
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff f99d 	bl	8001b3c <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x24a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff f992 	bl	8001b3c <LL_ADC_GetOffsetChannel>
 8002818:	4603      	mov	r3, r0
 800281a:	0e9b      	lsrs	r3, r3, #26
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	e01e      	b.n	8002860 <HAL_ADC_ConfigChannel+0x288>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2101      	movs	r1, #1
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff f987 	bl	8001b3c <LL_ADC_GetOffsetChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002844:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002848:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e004      	b.n	800285e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002854:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x2a0>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0e9b      	lsrs	r3, r3, #26
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	e018      	b.n	80028aa <HAL_ADC_ConfigChannel+0x2d2>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800288c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002890:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e004      	b.n	80028aa <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80028a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d106      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2200      	movs	r2, #0
 80028b4:	2101      	movs	r1, #1
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff f956 	bl	8001b68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2102      	movs	r1, #2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff f93a 	bl	8001b3c <LL_ADC_GetOffsetChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x310>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2102      	movs	r1, #2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f92f 	bl	8001b3c <LL_ADC_GetOffsetChannel>
 80028de:	4603      	mov	r3, r0
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	f003 021f 	and.w	r2, r3, #31
 80028e6:	e01e      	b.n	8002926 <HAL_ADC_ConfigChannel+0x34e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2102      	movs	r1, #2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff f924 	bl	8001b3c <LL_ADC_GetOffsetChannel>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028fe:	fa93 f3a3 	rbit	r3, r3
 8002902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002906:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800290a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800290e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e004      	b.n	8002924 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800291a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292e:	2b00      	cmp	r3, #0
 8002930:	d105      	bne.n	800293e <HAL_ADC_ConfigChannel+0x366>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	0e9b      	lsrs	r3, r3, #26
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	e014      	b.n	8002968 <HAL_ADC_ConfigChannel+0x390>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800294c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800294e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002952:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800295a:	2320      	movs	r3, #32
 800295c:	e004      	b.n	8002968 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800295e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002962:	fab3 f383 	clz	r3, r3
 8002966:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002968:	429a      	cmp	r2, r3
 800296a:	d106      	bne.n	800297a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2200      	movs	r2, #0
 8002972:	2102      	movs	r1, #2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff f8f7 	bl	8001b68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2103      	movs	r1, #3
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f8db 	bl	8001b3c <LL_ADC_GetOffsetChannel>
 8002986:	4603      	mov	r3, r0
 8002988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x3ce>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2103      	movs	r1, #3
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f8d0 	bl	8001b3c <LL_ADC_GetOffsetChannel>
 800299c:	4603      	mov	r3, r0
 800299e:	0e9b      	lsrs	r3, r3, #26
 80029a0:	f003 021f 	and.w	r2, r3, #31
 80029a4:	e017      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x3fe>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2103      	movs	r1, #3
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff f8c5 	bl	8001b3c <LL_ADC_GetOffsetChannel>
 80029b2:	4603      	mov	r3, r0
 80029b4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80029be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029c0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80029c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e003      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80029cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d105      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x416>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0e9b      	lsrs	r3, r3, #26
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	e011      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x43a>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80029fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029fe:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002a06:	2320      	movs	r3, #32
 8002a08:	e003      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002a0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d106      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff f8a2 	bl	8001b68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff f9e3 	bl	8001df4 <LL_ADC_IsEnabled>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f040 813f 	bne.w	8002cb4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f7ff f93c 	bl	8001cc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a8e      	ldr	r2, [pc, #568]	@ (8002c88 <HAL_ADC_ConfigChannel+0x6b0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	f040 8130 	bne.w	8002cb4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x4a4>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0e9b      	lsrs	r3, r3, #26
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	2b09      	cmp	r3, #9
 8002a72:	bf94      	ite	ls
 8002a74:	2301      	movls	r3, #1
 8002a76:	2300      	movhi	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e019      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x4d8>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a84:	fa93 f3a3 	rbit	r3, r3
 8002a88:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002a94:	2320      	movs	r3, #32
 8002a96:	e003      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002a98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a9a:	fab3 f383 	clz	r3, r3
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2b09      	cmp	r3, #9
 8002aa8:	bf94      	ite	ls
 8002aaa:	2301      	movls	r3, #1
 8002aac:	2300      	movhi	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d079      	beq.n	8002ba8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d107      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x4f8>
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	0e9b      	lsrs	r3, r3, #26
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	069b      	lsls	r3, r3, #26
 8002aca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ace:	e015      	b.n	8002afc <HAL_ADC_ConfigChannel+0x524>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ae0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e003      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	069b      	lsls	r3, r3, #26
 8002af8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d109      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x544>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2101      	movs	r1, #1
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	e017      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x574>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b2c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e003      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	3301      	adds	r3, #1
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	2101      	movs	r1, #1
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	ea42 0103 	orr.w	r1, r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10a      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x59a>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0e9b      	lsrs	r3, r3, #26
 8002b62:	3301      	adds	r3, #1
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	051b      	lsls	r3, r3, #20
 8002b70:	e018      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x5cc>
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002b8a:	2320      	movs	r3, #32
 8002b8c:	e003      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f003 021f 	and.w	r2, r3, #31
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	e080      	b.n	8002caa <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d107      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x5ec>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	3301      	adds	r3, #1
 8002bbc:	069b      	lsls	r3, r3, #26
 8002bbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bc2:	e015      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x618>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	e003      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	3301      	adds	r3, #1
 8002bea:	069b      	lsls	r3, r3, #26
 8002bec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x638>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	0e9b      	lsrs	r3, r3, #26
 8002c02:	3301      	adds	r3, #1
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2101      	movs	r1, #1
 8002c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0e:	e017      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x668>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	61bb      	str	r3, [r7, #24]
  return result;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	e003      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	ea42 0103 	orr.w	r1, r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10d      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x694>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0e9b      	lsrs	r3, r3, #26
 8002c56:	3301      	adds	r3, #1
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	3b1e      	subs	r3, #30
 8002c64:	051b      	lsls	r3, r3, #20
 8002c66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c6a:	e01d      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x6d0>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	60fb      	str	r3, [r7, #12]
  return result;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002c84:	2320      	movs	r3, #32
 8002c86:	e005      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x6bc>
 8002c88:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f003 021f 	and.w	r2, r3, #31
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3b1e      	subs	r3, #30
 8002ca2:	051b      	lsls	r3, r3, #20
 8002ca4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ca8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f7fe ffda 	bl	8001c68 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b3d      	ldr	r3, [pc, #244]	@ (8002db0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d06c      	beq.n	8002d9a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cc0:	483c      	ldr	r0, [pc, #240]	@ (8002db4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cc2:	f7fe ff09 	bl	8001ad8 <LL_ADC_GetCommonPathInternalCh>
 8002cc6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a3a      	ldr	r2, [pc, #232]	@ (8002db8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d127      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002cd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d121      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a35      	ldr	r2, [pc, #212]	@ (8002dbc <HAL_ADC_ConfigChannel+0x7e4>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d157      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	482f      	ldr	r0, [pc, #188]	@ (8002db4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002cf6:	f7fe fedc 	bl	8001ab2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cfa:	4b31      	ldr	r3, [pc, #196]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x7e8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	099b      	lsrs	r3, r3, #6
 8002d00:	4a30      	ldr	r2, [pc, #192]	@ (8002dc4 <HAL_ADC_ConfigChannel+0x7ec>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d14:	e002      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f9      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d22:	e03a      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a27      	ldr	r2, [pc, #156]	@ (8002dc8 <HAL_ADC_ConfigChannel+0x7f0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d113      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10d      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dbc <HAL_ADC_ConfigChannel+0x7e4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d12a      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d48:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4819      	ldr	r0, [pc, #100]	@ (8002db4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d50:	f7fe feaf 	bl	8001ab2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d54:	e021      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dcc <HAL_ADC_ConfigChannel+0x7f4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d11c      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d116      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a12      	ldr	r2, [pc, #72]	@ (8002dbc <HAL_ADC_ConfigChannel+0x7e4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d111      	bne.n	8002d9a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d7e:	4619      	mov	r1, r3
 8002d80:	480c      	ldr	r0, [pc, #48]	@ (8002db4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002d82:	f7fe fe96 	bl	8001ab2 <LL_ADC_SetCommonPathInternalCh>
 8002d86:	e008      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	f043 0220 	orr.w	r2, r3, #32
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002da2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	37d8      	adds	r7, #216	@ 0xd8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	80080000 	.word	0x80080000
 8002db4:	50040300 	.word	0x50040300
 8002db8:	c7520000 	.word	0xc7520000
 8002dbc:	50040000 	.word	0x50040000
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	053e2d63 	.word	0x053e2d63
 8002dc8:	cb840000 	.word	0xcb840000
 8002dcc:	80000001 	.word	0x80000001

08002dd0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff f807 	bl	8001df4 <LL_ADC_IsEnabled>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d169      	bne.n	8002ec0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	4b36      	ldr	r3, [pc, #216]	@ (8002ecc <ADC_Enable+0xfc>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00d      	beq.n	8002e16 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfe:	f043 0210 	orr.w	r2, r3, #16
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	f043 0201 	orr.w	r2, r3, #1
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e055      	b.n	8002ec2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe ffc2 	bl	8001da4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e20:	482b      	ldr	r0, [pc, #172]	@ (8002ed0 <ADC_Enable+0x100>)
 8002e22:	f7fe fe59 	bl	8001ad8 <LL_ADC_GetCommonPathInternalCh>
 8002e26:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e30:	4b28      	ldr	r3, [pc, #160]	@ (8002ed4 <ADC_Enable+0x104>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	099b      	lsrs	r3, r3, #6
 8002e36:	4a28      	ldr	r2, [pc, #160]	@ (8002ed8 <ADC_Enable+0x108>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	099b      	lsrs	r3, r3, #6
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e4a:	e002      	b.n	8002e52 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1f9      	bne.n	8002e4c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e58:	f7fe fde8 	bl	8001a2c <HAL_GetTick>
 8002e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e5e:	e028      	b.n	8002eb2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe ffc5 	bl	8001df4 <LL_ADC_IsEnabled>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe ff95 	bl	8001da4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e7a:	f7fe fdd7 	bl	8001a2c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d914      	bls.n	8002eb2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d00d      	beq.n	8002eb2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9a:	f043 0210 	orr.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e007      	b.n	8002ec2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d1cf      	bne.n	8002e60 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	8000003f 	.word	0x8000003f
 8002ed0:	50040300 	.word	0x50040300
 8002ed4:	20000000 	.word	0x20000000
 8002ed8:	053e2d63 	.word	0x053e2d63

08002edc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe ff96 	bl	8001e1a <LL_ADC_IsDisableOngoing>
 8002eee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe ff7d 	bl	8001df4 <LL_ADC_IsEnabled>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d047      	beq.n	8002f90 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d144      	bne.n	8002f90 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 030d 	and.w	r3, r3, #13
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10c      	bne.n	8002f2e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe ff57 	bl	8001dcc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2203      	movs	r2, #3
 8002f24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f26:	f7fe fd81 	bl	8001a2c <HAL_GetTick>
 8002f2a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f2c:	e029      	b.n	8002f82 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f32:	f043 0210 	orr.w	r2, r3, #16
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e023      	b.n	8002f92 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f4a:	f7fe fd6f 	bl	8001a2c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d914      	bls.n	8002f82 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e007      	b.n	8002f92 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1dc      	bne.n	8002f4a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b084      	sub	sp, #16
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d14b      	bne.n	800304c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d021      	beq.n	8003012 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fdf6 	bl	8001bc4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d032      	beq.n	8003044 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d12b      	bne.n	8003044 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d11f      	bne.n	8003044 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003010:	e018      	b.n	8003044 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d111      	bne.n	8003044 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003024:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003030:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d105      	bne.n	8003044 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303c:	f043 0201 	orr.w	r2, r3, #1
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7fd ff31 	bl	8000eac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800304a:	e00e      	b.n	800306a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f7ff fab3 	bl	80025c4 <HAL_ADC_ErrorCallback>
}
 800305e:	e004      	b.n	800306a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	4798      	blx	r3
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b084      	sub	sp, #16
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7fd ffe5 	bl	8001050 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	f043 0204 	orr.w	r2, r3, #4
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff fa85 	bl	80025c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030ba:	bf00      	nop
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <LL_ADC_StartCalibration>:
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80030d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030de:	4313      	orrs	r3, r2
 80030e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	609a      	str	r2, [r3, #8]
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_ADC_IsCalibrationOnGoing>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003104:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003108:	d101      	bne.n	800310e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_ADCEx_Calibration_Start+0x1c>
 8003134:	2302      	movs	r3, #2
 8003136:	e04d      	b.n	80031d4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7ff fecb 	bl	8002edc <ADC_Disable>
 8003146:	4603      	mov	r3, r0
 8003148:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d136      	bne.n	80031be <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003154:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003158:	f023 0302 	bic.w	r3, r3, #2
 800315c:	f043 0202 	orr.w	r2, r3, #2
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6839      	ldr	r1, [r7, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ffa9 	bl	80030c2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003170:	e014      	b.n	800319c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3301      	adds	r3, #1
 8003176:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800317e:	d30d      	bcc.n	800319c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003184:	f023 0312 	bic.w	r3, r3, #18
 8003188:	f043 0210 	orr.w	r2, r3, #16
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e01b      	b.n	80031d4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ffa7 	bl	80030f4 <LL_ADC_IsCalibrationOnGoing>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e2      	bne.n	8003172 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b0:	f023 0303 	bic.w	r3, r3, #3
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80031bc:	e005      	b.n	80031ca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c2:	f043 0210 	orr.w	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003250:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <__NVIC_SetPriorityGrouping+0x44>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800325c:	4013      	ands	r3, r2
 800325e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003268:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800326c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003272:	4a04      	ldr	r2, [pc, #16]	@ (8003284 <__NVIC_SetPriorityGrouping+0x44>)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	60d3      	str	r3, [r2, #12]
}
 8003278:	bf00      	nop
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800328c:	4b04      	ldr	r3, [pc, #16]	@ (80032a0 <__NVIC_GetPriorityGrouping+0x18>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	0a1b      	lsrs	r3, r3, #8
 8003292:	f003 0307 	and.w	r3, r3, #7
}
 8003296:	4618      	mov	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	db0b      	blt.n	80032ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032b6:	79fb      	ldrb	r3, [r7, #7]
 80032b8:	f003 021f 	and.w	r2, r3, #31
 80032bc:	4907      	ldr	r1, [pc, #28]	@ (80032dc <__NVIC_EnableIRQ+0x38>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	2001      	movs	r0, #1
 80032c6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	e000e100 	.word	0xe000e100

080032e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	6039      	str	r1, [r7, #0]
 80032ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	db0a      	blt.n	800330a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	490c      	ldr	r1, [pc, #48]	@ (800332c <__NVIC_SetPriority+0x4c>)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	0112      	lsls	r2, r2, #4
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	440b      	add	r3, r1
 8003304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003308:	e00a      	b.n	8003320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	4908      	ldr	r1, [pc, #32]	@ (8003330 <__NVIC_SetPriority+0x50>)
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	3b04      	subs	r3, #4
 8003318:	0112      	lsls	r2, r2, #4
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	440b      	add	r3, r1
 800331e:	761a      	strb	r2, [r3, #24]
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000e100 	.word	0xe000e100
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	@ 0x24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f1c3 0307 	rsb	r3, r3, #7
 800334e:	2b04      	cmp	r3, #4
 8003350:	bf28      	it	cs
 8003352:	2304      	movcs	r3, #4
 8003354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	3304      	adds	r3, #4
 800335a:	2b06      	cmp	r3, #6
 800335c:	d902      	bls.n	8003364 <NVIC_EncodePriority+0x30>
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3b03      	subs	r3, #3
 8003362:	e000      	b.n	8003366 <NVIC_EncodePriority+0x32>
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43da      	mvns	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	401a      	ands	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800337c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	43d9      	mvns	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800338c:	4313      	orrs	r3, r2
         );
}
 800338e:	4618      	mov	r0, r3
 8003390:	3724      	adds	r7, #36	@ 0x24
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033ac:	d301      	bcc.n	80033b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ae:	2301      	movs	r3, #1
 80033b0:	e00f      	b.n	80033d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033b2:	4a0a      	ldr	r2, [pc, #40]	@ (80033dc <SysTick_Config+0x40>)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ba:	210f      	movs	r1, #15
 80033bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033c0:	f7ff ff8e 	bl	80032e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c4:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <SysTick_Config+0x40>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ca:	4b04      	ldr	r3, [pc, #16]	@ (80033dc <SysTick_Config+0x40>)
 80033cc:	2207      	movs	r2, #7
 80033ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	e000e010 	.word	0xe000e010

080033e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff ff29 	bl	8003240 <__NVIC_SetPriorityGrouping>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4603      	mov	r3, r0
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
 8003402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003408:	f7ff ff3e 	bl	8003288 <__NVIC_GetPriorityGrouping>
 800340c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	6978      	ldr	r0, [r7, #20]
 8003414:	f7ff ff8e 	bl	8003334 <NVIC_EncodePriority>
 8003418:	4602      	mov	r2, r0
 800341a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff5d 	bl	80032e0 <__NVIC_SetPriority>
}
 8003426:	bf00      	nop
 8003428:	3718      	adds	r7, #24
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff31 	bl	80032a4 <__NVIC_EnableIRQ>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ffa2 	bl	800339c <SysTick_Config>
 8003458:	4603      	mov	r3, r0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e08d      	b.n	8003592 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	4b47      	ldr	r3, [pc, #284]	@ (800359c <HAL_DMA_Init+0x138>)
 800347e:	429a      	cmp	r2, r3
 8003480:	d80f      	bhi.n	80034a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	4b45      	ldr	r3, [pc, #276]	@ (80035a0 <HAL_DMA_Init+0x13c>)
 800348a:	4413      	add	r3, r2
 800348c:	4a45      	ldr	r2, [pc, #276]	@ (80035a4 <HAL_DMA_Init+0x140>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	009a      	lsls	r2, r3, #2
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a42      	ldr	r2, [pc, #264]	@ (80035a8 <HAL_DMA_Init+0x144>)
 800349e:	641a      	str	r2, [r3, #64]	@ 0x40
 80034a0:	e00e      	b.n	80034c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	4b40      	ldr	r3, [pc, #256]	@ (80035ac <HAL_DMA_Init+0x148>)
 80034aa:	4413      	add	r3, r2
 80034ac:	4a3d      	ldr	r2, [pc, #244]	@ (80035a4 <HAL_DMA_Init+0x140>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	009a      	lsls	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a3c      	ldr	r2, [pc, #240]	@ (80035b0 <HAL_DMA_Init+0x14c>)
 80034be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80034d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 faba 	bl	8003a8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003520:	d102      	bne.n	8003528 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003530:	b2d2      	uxtb	r2, r2
 8003532:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800353c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d010      	beq.n	8003568 <HAL_DMA_Init+0x104>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b04      	cmp	r3, #4
 800354c:	d80c      	bhi.n	8003568 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fada 	bl	8003b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	e008      	b.n	800357a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40020407 	.word	0x40020407
 80035a0:	bffdfff8 	.word	0xbffdfff8
 80035a4:	cccccccd 	.word	0xcccccccd
 80035a8:	40020000 	.word	0x40020000
 80035ac:	bffdfbf8 	.word	0xbffdfbf8
 80035b0:	40020400 	.word	0x40020400

080035b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_DMA_Start_IT+0x20>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e066      	b.n	80036a2 <HAL_DMA_Start_IT+0xee>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d155      	bne.n	8003694 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f9ff 	bl	8003a10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 020e 	orr.w	r2, r2, #14
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e00f      	b.n	800364c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0204 	bic.w	r2, r2, #4
 800363a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 020a 	orr.w	r2, r2, #10
 800364a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003664:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003668:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003680:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e005      	b.n	80036a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800369c:	2302      	movs	r3, #2
 800369e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d008      	beq.n	80036d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2204      	movs	r2, #4
 80036c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e040      	b.n	8003756 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 020e 	bic.w	r2, r2, #14
 80036e2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036f2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003708:	f003 021c 	and.w	r2, r3, #28
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003710:	2101      	movs	r1, #1
 8003712:	fa01 f202 	lsl.w	r2, r1, r2
 8003716:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003720:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00c      	beq.n	8003744 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003738:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003742:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b084      	sub	sp, #16
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d005      	beq.n	8003786 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2204      	movs	r2, #4
 800377e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e047      	b.n	8003816 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 020e 	bic.w	r2, r2, #14
 8003794:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	f003 021c 	and.w	r2, r3, #28
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	2101      	movs	r1, #1
 80037c4:	fa01 f202 	lsl.w	r2, r1, r2
 80037c8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037d2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00c      	beq.n	80037f6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037f4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4798      	blx	r3
    }
  }
  return status;
 8003816:	7bfb      	ldrb	r3, [r7, #15]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383c:	f003 031c 	and.w	r3, r3, #28
 8003840:	2204      	movs	r2, #4
 8003842:	409a      	lsls	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4013      	ands	r3, r2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d026      	beq.n	800389a <HAL_DMA_IRQHandler+0x7a>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d021      	beq.n	800389a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0204 	bic.w	r2, r2, #4
 8003872:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003878:	f003 021c 	and.w	r2, r3, #28
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	2104      	movs	r1, #4
 8003882:	fa01 f202 	lsl.w	r2, r1, r2
 8003886:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	2b00      	cmp	r3, #0
 800388e:	d071      	beq.n	8003974 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003898:	e06c      	b.n	8003974 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389e:	f003 031c 	and.w	r3, r3, #28
 80038a2:	2202      	movs	r2, #2
 80038a4:	409a      	lsls	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d02e      	beq.n	800390c <HAL_DMA_IRQHandler+0xec>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d029      	beq.n	800390c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10b      	bne.n	80038de <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 020a 	bic.w	r2, r2, #10
 80038d4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	f003 021c 	and.w	r2, r3, #28
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	2102      	movs	r1, #2
 80038ec:	fa01 f202 	lsl.w	r2, r1, r2
 80038f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d038      	beq.n	8003974 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800390a:	e033      	b.n	8003974 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003910:	f003 031c 	and.w	r3, r3, #28
 8003914:	2208      	movs	r2, #8
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d02a      	beq.n	8003976 <HAL_DMA_IRQHandler+0x156>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b00      	cmp	r3, #0
 8003928:	d025      	beq.n	8003976 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 020e 	bic.w	r2, r2, #14
 8003938:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393e:	f003 021c 	and.w	r2, r3, #28
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	2101      	movs	r1, #1
 8003948:	fa01 f202 	lsl.w	r2, r1, r2
 800394c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003968:	2b00      	cmp	r3, #0
 800396a:	d004      	beq.n	8003976 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003974:	bf00      	nop
 8003976:	bf00      	nop
}
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	460b      	mov	r3, r1
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_DMA_RegisterCallback+0x20>
 800399c:	2302      	movs	r3, #2
 800399e:	e031      	b.n	8003a04 <HAL_DMA_RegisterCallback+0x84>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d120      	bne.n	80039f6 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 80039b4:	7afb      	ldrb	r3, [r7, #11]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d81a      	bhi.n	80039f0 <HAL_DMA_RegisterCallback+0x70>
 80039ba:	a201      	add	r2, pc, #4	@ (adr r2, 80039c0 <HAL_DMA_RegisterCallback+0x40>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039d9 	.word	0x080039d9
 80039c8:	080039e1 	.word	0x080039e1
 80039cc:	080039e9 	.word	0x080039e9
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 80039d6:	e010      	b.n	80039fa <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 80039de:	e00c      	b.n	80039fa <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80039e6:	e008      	b.n	80039fa <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80039ee:	e004      	b.n	80039fa <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	75fb      	strb	r3, [r7, #23]
        break;
 80039f4:	e001      	b.n	80039fa <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a26:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d004      	beq.n	8003a3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a38:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3e:	f003 021c 	and.w	r2, r3, #28
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	2101      	movs	r1, #1
 8003a48:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b10      	cmp	r3, #16
 8003a5c:	d108      	bne.n	8003a70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a6e:	e007      	b.n	8003a80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	60da      	str	r2, [r3, #12]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b17      	ldr	r3, [pc, #92]	@ (8003af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d80a      	bhi.n	8003ab6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aac:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6493      	str	r3, [r2, #72]	@ 0x48
 8003ab4:	e007      	b.n	8003ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	009a      	lsls	r2, r3, #2
 8003abe:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ac0:	4413      	add	r3, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	3b08      	subs	r3, #8
 8003ace:	4a0c      	ldr	r2, [pc, #48]	@ (8003b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a0a      	ldr	r2, [pc, #40]	@ (8003b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003adc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	40020407 	.word	0x40020407
 8003afc:	4002081c 	.word	0x4002081c
 8003b00:	cccccccd 	.word	0xcccccccd
 8003b04:	40020880 	.word	0x40020880

08003b08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	461a      	mov	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a08      	ldr	r2, [pc, #32]	@ (8003b4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b2a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	2201      	movs	r2, #1
 8003b36:	409a      	lsls	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	1000823f 	.word	0x1000823f
 8003b4c:	40020940 	.word	0x40020940

08003b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b5e:	e166      	b.n	8003e2e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8158 	beq.w	8003e28 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d005      	beq.n	8003b90 <HAL_GPIO_Init+0x40>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d130      	bne.n	8003bf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 0201 	and.w	r2, r3, #1
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d017      	beq.n	8003c2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	2203      	movs	r2, #3
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d123      	bne.n	8003c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	08da      	lsrs	r2, r3, #3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3208      	adds	r2, #8
 8003c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	220f      	movs	r2, #15
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	08da      	lsrs	r2, r3, #3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3208      	adds	r2, #8
 8003c7c:	6939      	ldr	r1, [r7, #16]
 8003c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43db      	mvns	r3, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 0203 	and.w	r2, r3, #3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 80b2 	beq.w	8003e28 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc4:	4b61      	ldr	r3, [pc, #388]	@ (8003e4c <HAL_GPIO_Init+0x2fc>)
 8003cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cc8:	4a60      	ldr	r2, [pc, #384]	@ (8003e4c <HAL_GPIO_Init+0x2fc>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cd0:	4b5e      	ldr	r3, [pc, #376]	@ (8003e4c <HAL_GPIO_Init+0x2fc>)
 8003cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cdc:	4a5c      	ldr	r2, [pc, #368]	@ (8003e50 <HAL_GPIO_Init+0x300>)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	089b      	lsrs	r3, r3, #2
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	220f      	movs	r2, #15
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d06:	d02b      	beq.n	8003d60 <HAL_GPIO_Init+0x210>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a52      	ldr	r2, [pc, #328]	@ (8003e54 <HAL_GPIO_Init+0x304>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d025      	beq.n	8003d5c <HAL_GPIO_Init+0x20c>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a51      	ldr	r2, [pc, #324]	@ (8003e58 <HAL_GPIO_Init+0x308>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d01f      	beq.n	8003d58 <HAL_GPIO_Init+0x208>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a50      	ldr	r2, [pc, #320]	@ (8003e5c <HAL_GPIO_Init+0x30c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d019      	beq.n	8003d54 <HAL_GPIO_Init+0x204>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a4f      	ldr	r2, [pc, #316]	@ (8003e60 <HAL_GPIO_Init+0x310>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d013      	beq.n	8003d50 <HAL_GPIO_Init+0x200>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a4e      	ldr	r2, [pc, #312]	@ (8003e64 <HAL_GPIO_Init+0x314>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00d      	beq.n	8003d4c <HAL_GPIO_Init+0x1fc>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a4d      	ldr	r2, [pc, #308]	@ (8003e68 <HAL_GPIO_Init+0x318>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d007      	beq.n	8003d48 <HAL_GPIO_Init+0x1f8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a4c      	ldr	r2, [pc, #304]	@ (8003e6c <HAL_GPIO_Init+0x31c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d101      	bne.n	8003d44 <HAL_GPIO_Init+0x1f4>
 8003d40:	2307      	movs	r3, #7
 8003d42:	e00e      	b.n	8003d62 <HAL_GPIO_Init+0x212>
 8003d44:	2308      	movs	r3, #8
 8003d46:	e00c      	b.n	8003d62 <HAL_GPIO_Init+0x212>
 8003d48:	2306      	movs	r3, #6
 8003d4a:	e00a      	b.n	8003d62 <HAL_GPIO_Init+0x212>
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	e008      	b.n	8003d62 <HAL_GPIO_Init+0x212>
 8003d50:	2304      	movs	r3, #4
 8003d52:	e006      	b.n	8003d62 <HAL_GPIO_Init+0x212>
 8003d54:	2303      	movs	r3, #3
 8003d56:	e004      	b.n	8003d62 <HAL_GPIO_Init+0x212>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e002      	b.n	8003d62 <HAL_GPIO_Init+0x212>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <HAL_GPIO_Init+0x212>
 8003d60:	2300      	movs	r3, #0
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	f002 0203 	and.w	r2, r2, #3
 8003d68:	0092      	lsls	r2, r2, #2
 8003d6a:	4093      	lsls	r3, r2
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d72:	4937      	ldr	r1, [pc, #220]	@ (8003e50 <HAL_GPIO_Init+0x300>)
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	089b      	lsrs	r3, r3, #2
 8003d78:	3302      	adds	r3, #2
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d80:	4b3b      	ldr	r3, [pc, #236]	@ (8003e70 <HAL_GPIO_Init+0x320>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003da4:	4a32      	ldr	r2, [pc, #200]	@ (8003e70 <HAL_GPIO_Init+0x320>)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003daa:	4b31      	ldr	r3, [pc, #196]	@ (8003e70 <HAL_GPIO_Init+0x320>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dce:	4a28      	ldr	r2, [pc, #160]	@ (8003e70 <HAL_GPIO_Init+0x320>)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dd4:	4b26      	ldr	r3, [pc, #152]	@ (8003e70 <HAL_GPIO_Init+0x320>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003df8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e70 <HAL_GPIO_Init+0x320>)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8003e70 <HAL_GPIO_Init+0x320>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	43db      	mvns	r3, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e22:	4a13      	ldr	r2, [pc, #76]	@ (8003e70 <HAL_GPIO_Init+0x320>)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	fa22 f303 	lsr.w	r3, r2, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f47f ae91 	bne.w	8003b60 <HAL_GPIO_Init+0x10>
  }
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40010000 	.word	0x40010000
 8003e54:	48000400 	.word	0x48000400
 8003e58:	48000800 	.word	0x48000800
 8003e5c:	48000c00 	.word	0x48000c00
 8003e60:	48001000 	.word	0x48001000
 8003e64:	48001400 	.word	0x48001400
 8003e68:	48001800 	.word	0x48001800
 8003e6c:	48001c00 	.word	0x48001c00
 8003e70:	40010400 	.word	0x40010400

08003e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
 8003e80:	4613      	mov	r3, r2
 8003e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e84:	787b      	ldrb	r3, [r7, #1]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e8a:	887a      	ldrh	r2, [r7, #2]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e90:	e002      	b.n	8003e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e92:	887a      	ldrh	r2, [r7, #2]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	041a      	lsls	r2, r3, #16
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	43d9      	mvns	r1, r3
 8003ec2:	887b      	ldrh	r3, [r7, #2]
 8003ec4:	400b      	ands	r3, r1
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	619a      	str	r2, [r3, #24]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ee2:	4b08      	ldr	r3, [pc, #32]	@ (8003f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d006      	beq.n	8003efc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eee:	4a05      	ldr	r2, [pc, #20]	@ (8003f04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef0:	88fb      	ldrh	r3, [r7, #6]
 8003ef2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fc fd28 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40010400 	.word	0x40010400

08003f08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f0a:	b08f      	sub	sp, #60	@ 0x3c
 8003f0c:	af0a      	add	r7, sp, #40	@ 0x28
 8003f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e116      	b.n	8004148 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d106      	bne.n	8003f3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f009 f899 	bl	800d06c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2203      	movs	r2, #3
 8003f3e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f005 fd56 	bl	8009a0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	687e      	ldr	r6, [r7, #4]
 8003f66:	466d      	mov	r5, sp
 8003f68:	f106 0410 	add.w	r4, r6, #16
 8003f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f78:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f7c:	1d33      	adds	r3, r6, #4
 8003f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f80:	6838      	ldr	r0, [r7, #0]
 8003f82:	f005 fc69 	bl	8009858 <USB_CoreInit>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0d7      	b.n	8004148 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f005 fd44 	bl	8009a2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	73fb      	strb	r3, [r7, #15]
 8003fa8:	e04a      	b.n	8004040 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003faa:	7bfa      	ldrb	r2, [r7, #15]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	333d      	adds	r3, #61	@ 0x3d
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fbe:	7bfa      	ldrb	r2, [r7, #15]
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	333c      	adds	r3, #60	@ 0x3c
 8003fce:	7bfa      	ldrb	r2, [r7, #15]
 8003fd0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fd2:	7bfa      	ldrb	r2, [r7, #15]
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	b298      	uxth	r0, r3
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	3356      	adds	r3, #86	@ 0x56
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	3340      	adds	r3, #64	@ 0x40
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	440b      	add	r3, r1
 800400c:	3344      	adds	r3, #68	@ 0x44
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004012:	7bfa      	ldrb	r2, [r7, #15]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	3348      	adds	r3, #72	@ 0x48
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004026:	7bfa      	ldrb	r2, [r7, #15]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	334c      	adds	r3, #76	@ 0x4c
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	3301      	adds	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	7bfa      	ldrb	r2, [r7, #15]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	429a      	cmp	r2, r3
 8004048:	d3af      	bcc.n	8003faa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
 800404e:	e044      	b.n	80040da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800407c:	7bfa      	ldrb	r2, [r7, #15]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004092:	7bfa      	ldrb	r2, [r7, #15]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4413      	add	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040a8:	7bfa      	ldrb	r2, [r7, #15]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040be:	7bfa      	ldrb	r2, [r7, #15]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	3301      	adds	r3, #1
 80040d8:	73fb      	strb	r3, [r7, #15]
 80040da:	7bfa      	ldrb	r2, [r7, #15]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d3b5      	bcc.n	8004050 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	687e      	ldr	r6, [r7, #4]
 80040ec:	466d      	mov	r5, sp
 80040ee:	f106 0410 	add.w	r4, r6, #16
 80040f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004102:	1d33      	adds	r3, r6, #4
 8004104:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004106:	6838      	ldr	r0, [r7, #0]
 8004108:	f005 fcdc 	bl	8009ac4 <USB_DevInit>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d005      	beq.n	800411e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2202      	movs	r2, #2
 8004116:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e014      	b.n	8004148 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	2b01      	cmp	r3, #1
 8004134:	d102      	bne.n	800413c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f001 f86a 	bl	8005210 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f006 fc8a 	bl	800aa5a <USB_DevDisconnect>

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004150 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_PCD_Start+0x1c>
 8004168:	2302      	movs	r3, #2
 800416a:	e01c      	b.n	80041a6 <HAL_PCD_Start+0x56>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004178:	2b01      	cmp	r3, #1
 800417a:	d105      	bne.n	8004188 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004180:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f005 fc2b 	bl	80099e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f006 fc3e 	bl	800aa18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041ae:	b590      	push	{r4, r7, lr}
 80041b0:	b08d      	sub	sp, #52	@ 0x34
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f006 fcfc 	bl	800abc2 <USB_GetMode>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f040 847e 	bne.w	8004ace <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f006 fc60 	bl	800aa9c <USB_ReadInterrupts>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8474 	beq.w	8004acc <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	0a1b      	lsrs	r3, r3, #8
 80041ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f006 fc4d 	bl	800aa9c <USB_ReadInterrupts>
 8004202:	4603      	mov	r3, r0
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b02      	cmp	r3, #2
 800420a:	d107      	bne.n	800421c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f002 0202 	and.w	r2, r2, #2
 800421a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4618      	mov	r0, r3
 8004222:	f006 fc3b 	bl	800aa9c <USB_ReadInterrupts>
 8004226:	4603      	mov	r3, r0
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b10      	cmp	r3, #16
 800422e:	d161      	bne.n	80042f4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0210 	bic.w	r2, r2, #16
 800423e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	f003 020f 	and.w	r2, r3, #15
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4413      	add	r3, r2
 800425c:	3304      	adds	r3, #4
 800425e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	0c5b      	lsrs	r3, r3, #17
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	2b02      	cmp	r3, #2
 800426a:	d124      	bne.n	80042b6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d035      	beq.n	80042e4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	091b      	lsrs	r3, r3, #4
 8004280:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004286:	b29b      	uxth	r3, r3
 8004288:	461a      	mov	r2, r3
 800428a:	6a38      	ldr	r0, [r7, #32]
 800428c:	f006 fa72 	bl	800a774 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800429c:	441a      	add	r2, r3
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042ae:	441a      	add	r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	615a      	str	r2, [r3, #20]
 80042b4:	e016      	b.n	80042e4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	0c5b      	lsrs	r3, r3, #17
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	2b06      	cmp	r3, #6
 80042c0:	d110      	bne.n	80042e4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80042c8:	2208      	movs	r2, #8
 80042ca:	4619      	mov	r1, r3
 80042cc:	6a38      	ldr	r0, [r7, #32]
 80042ce:	f006 fa51 	bl	800a774 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042de:	441a      	add	r2, r3
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0210 	orr.w	r2, r2, #16
 80042f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f006 fbcf 	bl	800aa9c <USB_ReadInterrupts>
 80042fe:	4603      	mov	r3, r0
 8004300:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004304:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004308:	f040 80a7 	bne.w	800445a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f006 fbd4 	bl	800aac2 <USB_ReadDevAllOutEpInterrupt>
 800431a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800431c:	e099      	b.n	8004452 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800431e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 808e 	beq.w	8004446 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f006 fbf8 	bl	800ab2a <USB_ReadDevOutEPInterrupt>
 800433a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00c      	beq.n	8004360 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004352:	461a      	mov	r2, r3
 8004354:	2301      	movs	r3, #1
 8004356:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004358:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fe7e 	bl	800505c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00c      	beq.n	8004384 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004376:	461a      	mov	r2, r3
 8004378:	2308      	movs	r3, #8
 800437a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800437c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 feba 	bl	80050f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800439a:	461a      	mov	r2, r3
 800439c:	2310      	movs	r3, #16
 800439e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d030      	beq.n	800440c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b2:	2b80      	cmp	r3, #128	@ 0x80
 80043b4:	d109      	bne.n	80043ca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043c8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80043ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043cc:	4613      	mov	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	4413      	add	r3, r2
 80043dc:	3304      	adds	r3, #4
 80043de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	78db      	ldrb	r3, [r3, #3]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d108      	bne.n	80043fa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	2200      	movs	r2, #0
 80043ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f008 ff8f 	bl	800d318 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004406:	461a      	mov	r2, r3
 8004408:	2302      	movs	r3, #2
 800440a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004422:	461a      	mov	r2, r3
 8004424:	2320      	movs	r3, #32
 8004426:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800443e:	461a      	mov	r2, r3
 8004440:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004444:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	3301      	adds	r3, #1
 800444a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800444c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004454:	2b00      	cmp	r3, #0
 8004456:	f47f af62 	bne.w	800431e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f006 fb1c 	bl	800aa9c <USB_ReadInterrupts>
 8004464:	4603      	mov	r3, r0
 8004466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800446a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800446e:	f040 80a4 	bne.w	80045ba <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f006 fb3d 	bl	800aaf6 <USB_ReadDevAllInEpInterrupt>
 800447c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800447e:	2300      	movs	r3, #0
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004482:	e096      	b.n	80045b2 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 808b 	beq.w	80045a6 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	4611      	mov	r1, r2
 800449a:	4618      	mov	r0, r3
 800449c:	f006 fb63 	bl	800ab66 <USB_ReadDevInEPInterrupt>
 80044a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	2201      	movs	r2, #1
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69f9      	ldr	r1, [r7, #28]
 80044c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044cc:	4013      	ands	r3, r2
 80044ce:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044dc:	461a      	mov	r2, r3
 80044de:	2301      	movs	r3, #1
 80044e0:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	4619      	mov	r1, r3
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f008 fe80 	bl	800d1ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004504:	461a      	mov	r2, r3
 8004506:	2308      	movs	r3, #8
 8004508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004520:	461a      	mov	r2, r3
 8004522:	2310      	movs	r3, #16
 8004524:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800453c:	461a      	mov	r2, r3
 800453e:	2340      	movs	r3, #64	@ 0x40
 8004540:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d023      	beq.n	8004594 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800454c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800454e:	6a38      	ldr	r0, [r7, #32]
 8004550:	f005 fbfa 	bl	8009d48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004556:	4613      	mov	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	3338      	adds	r3, #56	@ 0x38
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	3304      	adds	r3, #4
 8004566:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	78db      	ldrb	r3, [r3, #3]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d108      	bne.n	8004582 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2200      	movs	r2, #0
 8004574:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	b2db      	uxtb	r3, r3
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f008 fedd 	bl	800d33c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800458e:	461a      	mov	r2, r3
 8004590:	2302      	movs	r3, #2
 8004592:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800459e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fcd2 	bl	8004f4a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a8:	3301      	adds	r3, #1
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	085b      	lsrs	r3, r3, #1
 80045b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80045b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f47f af65 	bne.w	8004484 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f006 fa6c 	bl	800aa9c <USB_ReadInterrupts>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045ce:	d122      	bne.n	8004616 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045de:	f023 0301 	bic.w	r3, r3, #1
 80045e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d108      	bne.n	8004600 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045f6:	2100      	movs	r1, #0
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f009 f911 	bl	800d820 <HAL_PCDEx_LPM_Callback>
 80045fe:	e002      	b.n	8004606 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f008 fe61 	bl	800d2c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f006 fa3e 	bl	800aa9c <USB_ReadInterrupts>
 8004620:	4603      	mov	r3, r0
 8004622:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004626:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800462a:	d112      	bne.n	8004652 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d102      	bne.n	8004642 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f008 fe1d 	bl	800d27c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004650:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f006 fa20 	bl	800aa9c <USB_ReadInterrupts>
 800465c:	4603      	mov	r3, r0
 800465e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004662:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004666:	d121      	bne.n	80046ac <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004676:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d111      	bne.n	80046a6 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	f003 020f 	and.w	r2, r3, #15
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800469c:	2101      	movs	r1, #1
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f009 f8be 	bl	800d820 <HAL_PCDEx_LPM_Callback>
 80046a4:	e002      	b.n	80046ac <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f008 fde8 	bl	800d27c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f006 f9f3 	bl	800aa9c <USB_ReadInterrupts>
 80046b6:	4603      	mov	r3, r0
 80046b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046c0:	f040 80b5 	bne.w	800482e <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2110      	movs	r1, #16
 80046de:	4618      	mov	r0, r3
 80046e0:	f005 fb32 	bl	8009d48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046e4:	2300      	movs	r3, #0
 80046e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046e8:	e046      	b.n	8004778 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80046ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f6:	461a      	mov	r2, r3
 80046f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80046fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800470e:	0151      	lsls	r1, r2, #5
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	440a      	add	r2, r1
 8004714:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004718:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800471c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800472a:	461a      	mov	r2, r3
 800472c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004730:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800474c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004750:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004762:	0151      	lsls	r1, r2, #5
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	440a      	add	r2, r1
 8004768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800476c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004770:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004774:	3301      	adds	r3, #1
 8004776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800477e:	429a      	cmp	r2, r3
 8004780:	d3b3      	bcc.n	80046ea <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	69fa      	ldr	r2, [r7, #28]
 800478c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004790:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004794:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479a:	2b00      	cmp	r3, #0
 800479c:	d016      	beq.n	80047cc <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047ae:	f043 030b 	orr.w	r3, r3, #11
 80047b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047c4:	f043 030b 	orr.w	r3, r3, #11
 80047c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80047ca:	e015      	b.n	80047f8 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80047de:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80047e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047f2:	f043 030b 	orr.w	r3, r3, #11
 80047f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004806:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800480a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f006 fa03 	bl	800ac24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800482c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f006 f932 	bl	800aa9c <USB_ReadInterrupts>
 8004838:	4603      	mov	r3, r0
 800483a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800483e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004842:	d124      	bne.n	800488e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f006 f9c8 	bl	800abde <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f005 faf5 	bl	8009e42 <USB_GetDevSpeed>
 8004858:	4603      	mov	r3, r0
 800485a:	461a      	mov	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681c      	ldr	r4, [r3, #0]
 8004864:	f001 fbbc 	bl	8005fe0 <HAL_RCC_GetHCLKFreq>
 8004868:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	4620      	mov	r0, r4
 8004874:	f005 f81c 	bl	80098b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f008 fce0 	bl	800d23e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800488c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f006 f902 	bl	800aa9c <USB_ReadInterrupts>
 8004898:	4603      	mov	r3, r0
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d10a      	bne.n	80048b8 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f008 fcbd 	bl	800d222 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695a      	ldr	r2, [r3, #20]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f002 0208 	and.w	r2, r2, #8
 80048b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f006 f8ed 	bl	800aa9c <USB_ReadInterrupts>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c8:	2b80      	cmp	r3, #128	@ 0x80
 80048ca:	d122      	bne.n	8004912 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048d8:	2301      	movs	r3, #1
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24
 80048dc:	e014      	b.n	8004908 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d105      	bne.n	8004902 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	4619      	mov	r1, r3
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 faf3 	bl	8004ee8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	3301      	adds	r3, #1
 8004906:	627b      	str	r3, [r7, #36]	@ 0x24
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490e:	429a      	cmp	r2, r3
 8004910:	d3e5      	bcc.n	80048de <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f006 f8c0 	bl	800aa9c <USB_ReadInterrupts>
 800491c:	4603      	mov	r3, r0
 800491e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004926:	d13b      	bne.n	80049a0 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004928:	2301      	movs	r3, #1
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
 800492c:	e02b      	b.n	8004986 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004942:	4613      	mov	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	3340      	adds	r3, #64	@ 0x40
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d115      	bne.n	8004980 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004954:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004956:	2b00      	cmp	r3, #0
 8004958:	da12      	bge.n	8004980 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495e:	4613      	mov	r3, r2
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	440b      	add	r3, r1
 8004968:	333f      	adds	r3, #63	@ 0x3f
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	b2db      	uxtb	r3, r3
 8004972:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004976:	b2db      	uxtb	r3, r3
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fab4 	bl	8004ee8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	3301      	adds	r3, #1
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498c:	429a      	cmp	r2, r3
 800498e:	d3ce      	bcc.n	800492e <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695a      	ldr	r2, [r3, #20]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800499e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f006 f879 	bl	800aa9c <USB_ReadInterrupts>
 80049aa:	4603      	mov	r3, r0
 80049ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049b4:	d155      	bne.n	8004a62 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049b6:	2301      	movs	r3, #1
 80049b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80049ba:	e045      	b.n	8004a48 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80049bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d12e      	bne.n	8004a42 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	da2b      	bge.n	8004a42 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 80049f6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d121      	bne.n	8004a42 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049fe:	6879      	ldr	r1, [r7, #4]
 8004a00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a02:	4613      	mov	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004a10:	2201      	movs	r2, #1
 8004a12:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a3e:	6053      	str	r3, [r2, #4]
            break;
 8004a40:	e007      	b.n	8004a52 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	3301      	adds	r3, #1
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d3b4      	bcc.n	80049bc <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695a      	ldr	r2, [r3, #20]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004a60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f006 f818 	bl	800aa9c <USB_ReadInterrupts>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a76:	d10a      	bne.n	8004a8e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f008 fc71 	bl	800d360 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695a      	ldr	r2, [r3, #20]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f006 f802 	bl	800aa9c <USB_ReadInterrupts>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d115      	bne.n	8004ace <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f008 fc61 	bl	800d37c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6859      	ldr	r1, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	e000      	b.n	8004ace <HAL_PCD_IRQHandler+0x920>
      return;
 8004acc:	bf00      	nop
    }
  }
}
 8004ace:	3734      	adds	r7, #52	@ 0x34
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd90      	pop	{r4, r7, pc}

08004ad4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_PCD_SetAddress+0x1a>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e013      	b.n	8004b16 <HAL_PCD_SetAddress+0x42>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	78fa      	ldrb	r2, [r7, #3]
 8004afa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	78fa      	ldrb	r2, [r7, #3]
 8004b04:	4611      	mov	r1, r2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f005 ff60 	bl	800a9cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	4608      	mov	r0, r1
 8004b28:	4611      	mov	r1, r2
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	70fb      	strb	r3, [r7, #3]
 8004b30:	460b      	mov	r3, r1
 8004b32:	803b      	strh	r3, [r7, #0]
 8004b34:	4613      	mov	r3, r2
 8004b36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	da0f      	bge.n	8004b64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	f003 020f 	and.w	r2, r3, #15
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	3338      	adds	r3, #56	@ 0x38
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	4413      	add	r3, r2
 8004b58:	3304      	adds	r3, #4
 8004b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	705a      	strb	r2, [r3, #1]
 8004b62:	e00f      	b.n	8004b84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	f003 020f 	and.w	r2, r3, #15
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4413      	add	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b90:	883a      	ldrh	r2, [r7, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	78ba      	ldrb	r2, [r7, #2]
 8004b9a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	785b      	ldrb	r3, [r3, #1]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d004      	beq.n	8004bae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bae:	78bb      	ldrb	r3, [r7, #2]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d102      	bne.n	8004bba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_PCD_EP_Open+0xaa>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e00e      	b.n	8004be6 <HAL_PCD_EP_Open+0xc8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68f9      	ldr	r1, [r7, #12]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f005 f952 	bl	8009e80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004be4:	7afb      	ldrb	r3, [r7, #11]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da0f      	bge.n	8004c22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	f003 020f 	and.w	r2, r3, #15
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	3338      	adds	r3, #56	@ 0x38
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	3304      	adds	r3, #4
 8004c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	705a      	strb	r2, [r3, #1]
 8004c20:	e00f      	b.n	8004c42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	4613      	mov	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4413      	add	r3, r2
 8004c38:	3304      	adds	r3, #4
 8004c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_PCD_EP_Close+0x6e>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e00e      	b.n	8004c7a <HAL_PCD_EP_Close+0x8c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68f9      	ldr	r1, [r7, #12]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f005 f990 	bl	8009f90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b086      	sub	sp, #24
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	60f8      	str	r0, [r7, #12]
 8004c8a:	607a      	str	r2, [r7, #4]
 8004c8c:	603b      	str	r3, [r7, #0]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c92:	7afb      	ldrb	r3, [r7, #11]
 8004c94:	f003 020f 	and.w	r2, r3, #15
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3304      	adds	r3, #4
 8004caa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cc4:	7afb      	ldrb	r3, [r7, #11]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6979      	ldr	r1, [r7, #20]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f005 fa36 	bl	800a148 <USB_EPStartXfer>

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	f003 020f 	and.w	r2, r3, #15
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004d08:	681b      	ldr	r3, [r3, #0]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b086      	sub	sp, #24
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	460b      	mov	r3, r1
 8004d24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d26:	7afb      	ldrb	r3, [r7, #11]
 8004d28:	f003 020f 	and.w	r2, r3, #15
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	3338      	adds	r3, #56	@ 0x38
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4413      	add	r3, r2
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2201      	movs	r2, #1
 8004d54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d56:	7afb      	ldrb	r3, [r7, #11]
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6979      	ldr	r1, [r7, #20]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f005 f9ed 	bl	800a148 <USB_EPStartXfer>

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	460b      	mov	r3, r1
 8004d82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	f003 020f 	and.w	r2, r3, #15
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d901      	bls.n	8004d96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e04e      	b.n	8004e34 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	da0f      	bge.n	8004dbe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	f003 020f 	and.w	r2, r3, #15
 8004da4:	4613      	mov	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	3338      	adds	r3, #56	@ 0x38
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	4413      	add	r3, r2
 8004db2:	3304      	adds	r3, #4
 8004db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	705a      	strb	r2, [r3, #1]
 8004dbc:	e00d      	b.n	8004dda <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004dbe:	78fa      	ldrb	r2, [r7, #3]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	4413      	add	r3, r2
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d101      	bne.n	8004dfa <HAL_PCD_EP_SetStall+0x82>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e01c      	b.n	8004e34 <HAL_PCD_EP_SetStall+0xbc>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68f9      	ldr	r1, [r7, #12]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f005 fd0b 	bl	800a824 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d108      	bne.n	8004e2a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004e22:	4619      	mov	r1, r3
 8004e24:	4610      	mov	r0, r2
 8004e26:	f005 fefd 	bl	800ac24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	f003 020f 	and.w	r2, r3, #15
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d901      	bls.n	8004e5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e042      	b.n	8004ee0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	da0f      	bge.n	8004e82 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	f003 020f 	and.w	r2, r3, #15
 8004e68:	4613      	mov	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	3338      	adds	r3, #56	@ 0x38
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	3304      	adds	r3, #4
 8004e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	705a      	strb	r2, [r3, #1]
 8004e80:	e00f      	b.n	8004ea2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	f003 020f 	and.w	r2, r3, #15
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	3304      	adds	r3, #4
 8004e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_PCD_EP_ClrStall+0x86>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e00e      	b.n	8004ee0 <HAL_PCD_EP_ClrStall+0xa4>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68f9      	ldr	r1, [r7, #12]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f005 fd15 	bl	800a900 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	da0c      	bge.n	8004f16 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	f003 020f 	and.w	r2, r3, #15
 8004f02:	4613      	mov	r3, r2
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	4413      	add	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	3338      	adds	r3, #56	@ 0x38
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	4413      	add	r3, r2
 8004f10:	3304      	adds	r3, #4
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e00c      	b.n	8004f30 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f16:	78fb      	ldrb	r3, [r7, #3]
 8004f18:	f003 020f 	and.w	r2, r3, #15
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68f9      	ldr	r1, [r7, #12]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f005 fb38 	bl	800a5ac <USB_EPStopXfer>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f40:	7afb      	ldrb	r3, [r7, #11]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b088      	sub	sp, #32
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	4613      	mov	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	3338      	adds	r3, #56	@ 0x38
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3304      	adds	r3, #4
 8004f70:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d901      	bls.n	8004f82 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e067      	b.n	8005052 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d902      	bls.n	8004f9e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	3303      	adds	r3, #3
 8004fa2:	089b      	lsrs	r3, r3, #2
 8004fa4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fa6:	e026      	b.n	8004ff6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d902      	bls.n	8004fc4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	3303      	adds	r3, #3
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	68d9      	ldr	r1, [r3, #12]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	6978      	ldr	r0, [r7, #20]
 8004fda:	f005 fb91 	bl	800a700 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	441a      	add	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	695a      	ldr	r2, [r3, #20]
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	441a      	add	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	429a      	cmp	r2, r3
 800500a:	d809      	bhi.n	8005020 <PCD_WriteEmptyTxFifo+0xd6>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	695a      	ldr	r2, [r3, #20]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005014:	429a      	cmp	r2, r3
 8005016:	d203      	bcs.n	8005020 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1c3      	bne.n	8004fa8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	429a      	cmp	r2, r3
 800502a:	d811      	bhi.n	8005050 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	2201      	movs	r2, #1
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	43db      	mvns	r3, r3
 8005046:	6939      	ldr	r1, [r7, #16]
 8005048:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800504c:	4013      	ands	r3, r2
 800504e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	333c      	adds	r3, #60	@ 0x3c
 8005074:	3304      	adds	r3, #4
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4a19      	ldr	r2, [pc, #100]	@ (80050f4 <PCD_EP_OutXfrComplete_int+0x98>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d124      	bne.n	80050dc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a8:	461a      	mov	r2, r3
 80050aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ae:	6093      	str	r3, [r2, #8]
 80050b0:	e01a      	b.n	80050e8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f003 0320 	and.w	r3, r3, #32
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c8:	461a      	mov	r2, r3
 80050ca:	2320      	movs	r3, #32
 80050cc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	4619      	mov	r1, r3
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f008 f86f 	bl	800d1b8 <HAL_PCD_DataOutStageCallback>
 80050da:	e005      	b.n	80050e8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	4619      	mov	r1, r3
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f008 f868 	bl	800d1b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	4f54310a 	.word	0x4f54310a

080050f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	333c      	adds	r3, #60	@ 0x3c
 8005110:	3304      	adds	r3, #4
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4a0c      	ldr	r2, [pc, #48]	@ (800515c <PCD_EP_OutSetupPacket_int+0x64>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d90e      	bls.n	800514c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005134:	2b00      	cmp	r3, #0
 8005136:	d009      	beq.n	800514c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005144:	461a      	mov	r2, r3
 8005146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800514a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f008 f821 	bl	800d194 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	4f54300a 	.word	0x4f54300a

08005160 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	70fb      	strb	r3, [r7, #3]
 800516c:	4613      	mov	r3, r2
 800516e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005176:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005178:	78fb      	ldrb	r3, [r7, #3]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d107      	bne.n	800518e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800517e:	883b      	ldrh	r3, [r7, #0]
 8005180:	0419      	lsls	r1, r3, #16
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	430a      	orrs	r2, r1
 800518a:	629a      	str	r2, [r3, #40]	@ 0x28
 800518c:	e028      	b.n	80051e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	4413      	add	r3, r2
 800519a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800519c:	2300      	movs	r3, #0
 800519e:	73fb      	strb	r3, [r7, #15]
 80051a0:	e00d      	b.n	80051be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	3340      	adds	r3, #64	@ 0x40
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	0c1b      	lsrs	r3, r3, #16
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	4413      	add	r3, r2
 80051b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	3301      	adds	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
 80051be:	7bfa      	ldrb	r2, [r7, #15]
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d3ec      	bcc.n	80051a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80051c8:	883b      	ldrh	r3, [r7, #0]
 80051ca:	0418      	lsls	r0, r3, #16
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	4302      	orrs	r2, r0
 80051d8:	3340      	adds	r3, #64	@ 0x40
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	460b      	mov	r3, r1
 80051f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	887a      	ldrh	r2, [r7, #2]
 8005200:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005242:	f043 0303 	orr.w	r3, r3, #3
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800525c:	4b0d      	ldr	r3, [pc, #52]	@ (8005294 <HAL_PWREx_GetVoltageRange+0x3c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005268:	d102      	bne.n	8005270 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800526a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800526e:	e00b      	b.n	8005288 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005270:	4b08      	ldr	r3, [pc, #32]	@ (8005294 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800527e:	d102      	bne.n	8005286 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005280:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005284:	e000      	b.n	8005288 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005286:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005288:	4618      	mov	r0, r3
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40007000 	.word	0x40007000

08005298 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d141      	bne.n	800532a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052a6:	4b4b      	ldr	r3, [pc, #300]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80052ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052b2:	d131      	bne.n	8005318 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052b4:	4b47      	ldr	r3, [pc, #284]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ba:	4a46      	ldr	r2, [pc, #280]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052c4:	4b43      	ldr	r3, [pc, #268]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80052cc:	4a41      	ldr	r2, [pc, #260]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80052d4:	4b40      	ldr	r3, [pc, #256]	@ (80053d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2232      	movs	r2, #50	@ 0x32
 80052da:	fb02 f303 	mul.w	r3, r2, r3
 80052de:	4a3f      	ldr	r2, [pc, #252]	@ (80053dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	0c9b      	lsrs	r3, r3, #18
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052ea:	e002      	b.n	80052f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052f2:	4b38      	ldr	r3, [pc, #224]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052fe:	d102      	bne.n	8005306 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f2      	bne.n	80052ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005306:	4b33      	ldr	r3, [pc, #204]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800530e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005312:	d158      	bne.n	80053c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e057      	b.n	80053c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005318:	4b2e      	ldr	r3, [pc, #184]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800531e:	4a2d      	ldr	r2, [pc, #180]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005324:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005328:	e04d      	b.n	80053c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005330:	d141      	bne.n	80053b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005332:	4b28      	ldr	r3, [pc, #160]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800533a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800533e:	d131      	bne.n	80053a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005340:	4b24      	ldr	r3, [pc, #144]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005346:	4a23      	ldr	r2, [pc, #140]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800534c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005350:	4b20      	ldr	r3, [pc, #128]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005358:	4a1e      	ldr	r2, [pc, #120]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800535a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800535e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005360:	4b1d      	ldr	r3, [pc, #116]	@ (80053d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2232      	movs	r2, #50	@ 0x32
 8005366:	fb02 f303 	mul.w	r3, r2, r3
 800536a:	4a1c      	ldr	r2, [pc, #112]	@ (80053dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800536c:	fba2 2303 	umull	r2, r3, r2, r3
 8005370:	0c9b      	lsrs	r3, r3, #18
 8005372:	3301      	adds	r3, #1
 8005374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005376:	e002      	b.n	800537e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3b01      	subs	r3, #1
 800537c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800537e:	4b15      	ldr	r3, [pc, #84]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800538a:	d102      	bne.n	8005392 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1f2      	bne.n	8005378 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005392:	4b10      	ldr	r3, [pc, #64]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800539a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800539e:	d112      	bne.n	80053c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e011      	b.n	80053c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053a4:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053aa:	4a0a      	ldr	r2, [pc, #40]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80053b4:	e007      	b.n	80053c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053b6:	4b07      	ldr	r3, [pc, #28]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80053be:	4a05      	ldr	r2, [pc, #20]	@ (80053d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	40007000 	.word	0x40007000
 80053d8:	20000000 	.word	0x20000000
 80053dc:	431bde83 	.word	0x431bde83

080053e0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80053e4:	4b05      	ldr	r3, [pc, #20]	@ (80053fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	4a04      	ldr	r2, [pc, #16]	@ (80053fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80053ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80053ee:	6053      	str	r3, [r2, #4]
}
 80053f0:	bf00      	nop
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40007000 	.word	0x40007000

08005400 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005404:	4b05      	ldr	r3, [pc, #20]	@ (800541c <HAL_PWREx_EnableVddIO2+0x1c>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	4a04      	ldr	r2, [pc, #16]	@ (800541c <HAL_PWREx_EnableVddIO2+0x1c>)
 800540a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800540e:	6053      	str	r3, [r2, #4]
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40007000 	.word	0x40007000

08005420 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d102      	bne.n	8005434 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	f000 bc08 	b.w	8005c44 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005434:	4b96      	ldr	r3, [pc, #600]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 030c 	and.w	r3, r3, #12
 800543c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800543e:	4b94      	ldr	r3, [pc, #592]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80e4 	beq.w	800561e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <HAL_RCC_OscConfig+0x4c>
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b0c      	cmp	r3, #12
 8005460:	f040 808b 	bne.w	800557a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2b01      	cmp	r3, #1
 8005468:	f040 8087 	bne.w	800557a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800546c:	4b88      	ldr	r3, [pc, #544]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_RCC_OscConfig+0x64>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e3df      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1a      	ldr	r2, [r3, #32]
 8005488:	4b81      	ldr	r3, [pc, #516]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <HAL_RCC_OscConfig+0x7e>
 8005494:	4b7e      	ldr	r3, [pc, #504]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800549c:	e005      	b.n	80054aa <HAL_RCC_OscConfig+0x8a>
 800549e:	4b7c      	ldr	r3, [pc, #496]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80054a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054a4:	091b      	lsrs	r3, r3, #4
 80054a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d223      	bcs.n	80054f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fdcc 	bl	8006050 <RCC_SetFlashLatencyFromMSIRange>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e3c0      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054c2:	4b73      	ldr	r3, [pc, #460]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a72      	ldr	r2, [pc, #456]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80054c8:	f043 0308 	orr.w	r3, r3, #8
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	4b70      	ldr	r3, [pc, #448]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	496d      	ldr	r1, [pc, #436]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054e0:	4b6b      	ldr	r3, [pc, #428]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	4968      	ldr	r1, [pc, #416]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	604b      	str	r3, [r1, #4]
 80054f4:	e025      	b.n	8005542 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054f6:	4b66      	ldr	r3, [pc, #408]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a65      	ldr	r2, [pc, #404]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80054fc:	f043 0308 	orr.w	r3, r3, #8
 8005500:	6013      	str	r3, [r2, #0]
 8005502:	4b63      	ldr	r3, [pc, #396]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	4960      	ldr	r1, [pc, #384]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005510:	4313      	orrs	r3, r2
 8005512:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005514:	4b5e      	ldr	r3, [pc, #376]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	69db      	ldr	r3, [r3, #28]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	495b      	ldr	r1, [pc, #364]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005524:	4313      	orrs	r3, r2
 8005526:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d109      	bne.n	8005542 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 fd8c 	bl	8006050 <RCC_SetFlashLatencyFromMSIRange>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e380      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005542:	f000 fcc1 	bl	8005ec8 <HAL_RCC_GetSysClockFreq>
 8005546:	4602      	mov	r2, r0
 8005548:	4b51      	ldr	r3, [pc, #324]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	4950      	ldr	r1, [pc, #320]	@ (8005694 <HAL_RCC_OscConfig+0x274>)
 8005554:	5ccb      	ldrb	r3, [r1, r3]
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	fa22 f303 	lsr.w	r3, r2, r3
 800555e:	4a4e      	ldr	r2, [pc, #312]	@ (8005698 <HAL_RCC_OscConfig+0x278>)
 8005560:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005562:	4b4e      	ldr	r3, [pc, #312]	@ (800569c <HAL_RCC_OscConfig+0x27c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7fc fa10 	bl	800198c <HAL_InitTick>
 800556c:	4603      	mov	r3, r0
 800556e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d052      	beq.n	800561c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005576:	7bfb      	ldrb	r3, [r7, #15]
 8005578:	e364      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d032      	beq.n	80055e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005582:	4b43      	ldr	r3, [pc, #268]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a42      	ldr	r2, [pc, #264]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800558e:	f7fc fa4d 	bl	8001a2c <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005594:	e008      	b.n	80055a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005596:	f7fc fa49 	bl	8001a2c <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e34d      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055a8:	4b39      	ldr	r3, [pc, #228]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055b4:	4b36      	ldr	r3, [pc, #216]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a35      	ldr	r2, [pc, #212]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80055ba:	f043 0308 	orr.w	r3, r3, #8
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	4b33      	ldr	r3, [pc, #204]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	4930      	ldr	r1, [pc, #192]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	492b      	ldr	r1, [pc, #172]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	604b      	str	r3, [r1, #4]
 80055e6:	e01a      	b.n	800561e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80055e8:	4b29      	ldr	r3, [pc, #164]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a28      	ldr	r2, [pc, #160]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055f4:	f7fc fa1a 	bl	8001a2c <HAL_GetTick>
 80055f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80055fa:	e008      	b.n	800560e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055fc:	f7fc fa16 	bl	8001a2c <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d901      	bls.n	800560e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e31a      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800560e:	4b20      	ldr	r3, [pc, #128]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1f0      	bne.n	80055fc <HAL_RCC_OscConfig+0x1dc>
 800561a:	e000      	b.n	800561e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800561c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d073      	beq.n	8005712 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d005      	beq.n	800563c <HAL_RCC_OscConfig+0x21c>
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b0c      	cmp	r3, #12
 8005634:	d10e      	bne.n	8005654 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2b03      	cmp	r3, #3
 800563a:	d10b      	bne.n	8005654 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800563c:	4b14      	ldr	r3, [pc, #80]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d063      	beq.n	8005710 <HAL_RCC_OscConfig+0x2f0>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d15f      	bne.n	8005710 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e2f7      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800565c:	d106      	bne.n	800566c <HAL_RCC_OscConfig+0x24c>
 800565e:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a0b      	ldr	r2, [pc, #44]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	e025      	b.n	80056b8 <HAL_RCC_OscConfig+0x298>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005674:	d114      	bne.n	80056a0 <HAL_RCC_OscConfig+0x280>
 8005676:	4b06      	ldr	r3, [pc, #24]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a05      	ldr	r2, [pc, #20]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 800567c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	4b03      	ldr	r3, [pc, #12]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a02      	ldr	r2, [pc, #8]	@ (8005690 <HAL_RCC_OscConfig+0x270>)
 8005688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	e013      	b.n	80056b8 <HAL_RCC_OscConfig+0x298>
 8005690:	40021000 	.word	0x40021000
 8005694:	0800d9cc 	.word	0x0800d9cc
 8005698:	20000000 	.word	0x20000000
 800569c:	20000004 	.word	0x20000004
 80056a0:	4ba0      	ldr	r3, [pc, #640]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a9f      	ldr	r2, [pc, #636]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80056a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	4b9d      	ldr	r3, [pc, #628]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a9c      	ldr	r2, [pc, #624]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80056b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c0:	f7fc f9b4 	bl	8001a2c <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056c6:	e008      	b.n	80056da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c8:	f7fc f9b0 	bl	8001a2c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b64      	cmp	r3, #100	@ 0x64
 80056d4:	d901      	bls.n	80056da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e2b4      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056da:	4b92      	ldr	r3, [pc, #584]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f0      	beq.n	80056c8 <HAL_RCC_OscConfig+0x2a8>
 80056e6:	e014      	b.n	8005712 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fc f9a0 	bl	8001a2c <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056f0:	f7fc f99c 	bl	8001a2c <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b64      	cmp	r3, #100	@ 0x64
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e2a0      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005702:	4b88      	ldr	r3, [pc, #544]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x2d0>
 800570e:	e000      	b.n	8005712 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d060      	beq.n	80057e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	2b04      	cmp	r3, #4
 8005722:	d005      	beq.n	8005730 <HAL_RCC_OscConfig+0x310>
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	2b0c      	cmp	r3, #12
 8005728:	d119      	bne.n	800575e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d116      	bne.n	800575e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005730:	4b7c      	ldr	r3, [pc, #496]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005738:	2b00      	cmp	r3, #0
 800573a:	d005      	beq.n	8005748 <HAL_RCC_OscConfig+0x328>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e27d      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005748:	4b76      	ldr	r3, [pc, #472]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	061b      	lsls	r3, r3, #24
 8005756:	4973      	ldr	r1, [pc, #460]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005758:	4313      	orrs	r3, r2
 800575a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800575c:	e040      	b.n	80057e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d023      	beq.n	80057ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005766:	4b6f      	ldr	r3, [pc, #444]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a6e      	ldr	r2, [pc, #440]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 800576c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005772:	f7fc f95b 	bl	8001a2c <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800577a:	f7fc f957 	bl	8001a2c <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e25b      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800578c:	4b65      	ldr	r3, [pc, #404]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005798:	4b62      	ldr	r3, [pc, #392]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	061b      	lsls	r3, r3, #24
 80057a6:	495f      	ldr	r1, [pc, #380]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	604b      	str	r3, [r1, #4]
 80057ac:	e018      	b.n	80057e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057ae:	4b5d      	ldr	r3, [pc, #372]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a5c      	ldr	r2, [pc, #368]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80057b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ba:	f7fc f937 	bl	8001a2c <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057c2:	f7fc f933 	bl	8001a2c <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e237      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80057d4:	4b53      	ldr	r3, [pc, #332]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1f0      	bne.n	80057c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d03c      	beq.n	8005866 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01c      	beq.n	800582e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80057f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057fa:	4a4a      	ldr	r2, [pc, #296]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80057fc:	f043 0301 	orr.w	r3, r3, #1
 8005800:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005804:	f7fc f912 	bl	8001a2c <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800580c:	f7fc f90e 	bl	8001a2c <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e212      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800581e:	4b41      	ldr	r3, [pc, #260]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0ef      	beq.n	800580c <HAL_RCC_OscConfig+0x3ec>
 800582c:	e01b      	b.n	8005866 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800582e:	4b3d      	ldr	r3, [pc, #244]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005830:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005834:	4a3b      	ldr	r2, [pc, #236]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005836:	f023 0301 	bic.w	r3, r3, #1
 800583a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583e:	f7fc f8f5 	bl	8001a2c <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005846:	f7fc f8f1 	bl	8001a2c <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e1f5      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005858:	4b32      	ldr	r3, [pc, #200]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 800585a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1ef      	bne.n	8005846 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 80a6 	beq.w	80059c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005874:	2300      	movs	r3, #0
 8005876:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005878:	4b2a      	ldr	r3, [pc, #168]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 800587a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10d      	bne.n	80058a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005884:	4b27      	ldr	r3, [pc, #156]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005888:	4a26      	ldr	r2, [pc, #152]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 800588a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800588e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005890:	4b24      	ldr	r3, [pc, #144]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800589c:	2301      	movs	r3, #1
 800589e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058a0:	4b21      	ldr	r3, [pc, #132]	@ (8005928 <HAL_RCC_OscConfig+0x508>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d118      	bne.n	80058de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058ac:	4b1e      	ldr	r3, [pc, #120]	@ (8005928 <HAL_RCC_OscConfig+0x508>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005928 <HAL_RCC_OscConfig+0x508>)
 80058b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b8:	f7fc f8b8 	bl	8001a2c <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c0:	f7fc f8b4 	bl	8001a2c <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e1b8      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058d2:	4b15      	ldr	r3, [pc, #84]	@ (8005928 <HAL_RCC_OscConfig+0x508>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d108      	bne.n	80058f8 <HAL_RCC_OscConfig+0x4d8>
 80058e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80058e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058ec:	4a0d      	ldr	r2, [pc, #52]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 80058ee:	f043 0301 	orr.w	r3, r3, #1
 80058f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058f6:	e029      	b.n	800594c <HAL_RCC_OscConfig+0x52c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	2b05      	cmp	r3, #5
 80058fe:	d115      	bne.n	800592c <HAL_RCC_OscConfig+0x50c>
 8005900:	4b08      	ldr	r3, [pc, #32]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005906:	4a07      	ldr	r2, [pc, #28]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005908:	f043 0304 	orr.w	r3, r3, #4
 800590c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005910:	4b04      	ldr	r3, [pc, #16]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005916:	4a03      	ldr	r2, [pc, #12]	@ (8005924 <HAL_RCC_OscConfig+0x504>)
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005920:	e014      	b.n	800594c <HAL_RCC_OscConfig+0x52c>
 8005922:	bf00      	nop
 8005924:	40021000 	.word	0x40021000
 8005928:	40007000 	.word	0x40007000
 800592c:	4b9d      	ldr	r3, [pc, #628]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 800592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005932:	4a9c      	ldr	r2, [pc, #624]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005934:	f023 0301 	bic.w	r3, r3, #1
 8005938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800593c:	4b99      	ldr	r3, [pc, #612]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005942:	4a98      	ldr	r2, [pc, #608]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005944:	f023 0304 	bic.w	r3, r3, #4
 8005948:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d016      	beq.n	8005982 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005954:	f7fc f86a 	bl	8001a2c <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800595a:	e00a      	b.n	8005972 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595c:	f7fc f866 	bl	8001a2c <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e168      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005972:	4b8c      	ldr	r3, [pc, #560]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0ed      	beq.n	800595c <HAL_RCC_OscConfig+0x53c>
 8005980:	e015      	b.n	80059ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005982:	f7fc f853 	bl	8001a2c <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005988:	e00a      	b.n	80059a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800598a:	f7fc f84f 	bl	8001a2c <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005998:	4293      	cmp	r3, r2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e151      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059a0:	4b80      	ldr	r3, [pc, #512]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1ed      	bne.n	800598a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059ae:	7ffb      	ldrb	r3, [r7, #31]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d105      	bne.n	80059c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059b4:	4b7b      	ldr	r3, [pc, #492]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 80059b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059b8:	4a7a      	ldr	r2, [pc, #488]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 80059ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d03c      	beq.n	8005a46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01c      	beq.n	8005a0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059d4:	4b73      	ldr	r3, [pc, #460]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 80059d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059da:	4a72      	ldr	r2, [pc, #456]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fc f822 	bl	8001a2c <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ec:	f7fc f81e 	bl	8001a2c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e122      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059fe:	4b69      	ldr	r3, [pc, #420]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005a00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0ef      	beq.n	80059ec <HAL_RCC_OscConfig+0x5cc>
 8005a0c:	e01b      	b.n	8005a46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a0e:	4b65      	ldr	r3, [pc, #404]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a14:	4a63      	ldr	r2, [pc, #396]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1e:	f7fc f805 	bl	8001a2c <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a26:	f7fc f801 	bl	8001a2c <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e105      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a38:	4b5a      	ldr	r3, [pc, #360]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1ef      	bne.n	8005a26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80f9 	beq.w	8005c42 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	f040 80cf 	bne.w	8005bf8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a5a:	4b52      	ldr	r3, [pc, #328]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f003 0203 	and.w	r2, r3, #3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d12c      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d123      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d11b      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d113      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	3b01      	subs	r3, #1
 8005aae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d109      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abe:	085b      	lsrs	r3, r3, #1
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d071      	beq.n	8005bac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	2b0c      	cmp	r3, #12
 8005acc:	d068      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005ace:	4b35      	ldr	r3, [pc, #212]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d105      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005ada:	4b32      	ldr	r3, [pc, #200]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e0ac      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005aea:	4b2e      	ldr	r3, [pc, #184]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a2d      	ldr	r2, [pc, #180]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005af0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005af4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005af6:	f7fb ff99 	bl	8001a2c <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005afc:	e008      	b.n	8005b10 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005afe:	f7fb ff95 	bl	8001a2c <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d901      	bls.n	8005b10 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e099      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b10:	4b24      	ldr	r3, [pc, #144]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f0      	bne.n	8005afe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b1c:	4b21      	ldr	r3, [pc, #132]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	4b21      	ldr	r3, [pc, #132]	@ (8005ba8 <HAL_RCC_OscConfig+0x788>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005b2c:	3a01      	subs	r2, #1
 8005b2e:	0112      	lsls	r2, r2, #4
 8005b30:	4311      	orrs	r1, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b36:	0212      	lsls	r2, r2, #8
 8005b38:	4311      	orrs	r1, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b3e:	0852      	lsrs	r2, r2, #1
 8005b40:	3a01      	subs	r2, #1
 8005b42:	0552      	lsls	r2, r2, #21
 8005b44:	4311      	orrs	r1, r2
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005b4a:	0852      	lsrs	r2, r2, #1
 8005b4c:	3a01      	subs	r2, #1
 8005b4e:	0652      	lsls	r2, r2, #25
 8005b50:	4311      	orrs	r1, r2
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b56:	06d2      	lsls	r2, r2, #27
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	4912      	ldr	r1, [pc, #72]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b60:	4b10      	ldr	r3, [pc, #64]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a0f      	ldr	r2, [pc, #60]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005b66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4a0c      	ldr	r2, [pc, #48]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005b72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b78:	f7fb ff58 	bl	8001a2c <HAL_GetTick>
 8005b7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b80:	f7fb ff54 	bl	8001a2c <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d901      	bls.n	8005b92 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e058      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b92:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <HAL_RCC_OscConfig+0x784>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0f0      	beq.n	8005b80 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b9e:	e050      	b.n	8005c42 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e04f      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bac:	4b27      	ldr	r3, [pc, #156]	@ (8005c4c <HAL_RCC_OscConfig+0x82c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d144      	bne.n	8005c42 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005bb8:	4b24      	ldr	r3, [pc, #144]	@ (8005c4c <HAL_RCC_OscConfig+0x82c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a23      	ldr	r2, [pc, #140]	@ (8005c4c <HAL_RCC_OscConfig+0x82c>)
 8005bbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bc4:	4b21      	ldr	r3, [pc, #132]	@ (8005c4c <HAL_RCC_OscConfig+0x82c>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	4a20      	ldr	r2, [pc, #128]	@ (8005c4c <HAL_RCC_OscConfig+0x82c>)
 8005bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bd0:	f7fb ff2c 	bl	8001a2c <HAL_GetTick>
 8005bd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd8:	f7fb ff28 	bl	8001a2c <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e02c      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bea:	4b18      	ldr	r3, [pc, #96]	@ (8005c4c <HAL_RCC_OscConfig+0x82c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f0      	beq.n	8005bd8 <HAL_RCC_OscConfig+0x7b8>
 8005bf6:	e024      	b.n	8005c42 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b0c      	cmp	r3, #12
 8005bfc:	d01f      	beq.n	8005c3e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfe:	4b13      	ldr	r3, [pc, #76]	@ (8005c4c <HAL_RCC_OscConfig+0x82c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a12      	ldr	r2, [pc, #72]	@ (8005c4c <HAL_RCC_OscConfig+0x82c>)
 8005c04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0a:	f7fb ff0f 	bl	8001a2c <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c12:	f7fb ff0b 	bl	8001a2c <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e00f      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c24:	4b09      	ldr	r3, [pc, #36]	@ (8005c4c <HAL_RCC_OscConfig+0x82c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f0      	bne.n	8005c12 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c30:	4b06      	ldr	r3, [pc, #24]	@ (8005c4c <HAL_RCC_OscConfig+0x82c>)
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	4905      	ldr	r1, [pc, #20]	@ (8005c4c <HAL_RCC_OscConfig+0x82c>)
 8005c36:	4b06      	ldr	r3, [pc, #24]	@ (8005c50 <HAL_RCC_OscConfig+0x830>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	60cb      	str	r3, [r1, #12]
 8005c3c:	e001      	b.n	8005c42 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3720      	adds	r7, #32
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	feeefffc 	.word	0xfeeefffc

08005c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e11d      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c6c:	4b90      	ldr	r3, [pc, #576]	@ (8005eb0 <HAL_RCC_ClockConfig+0x25c>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d910      	bls.n	8005c9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c7a:	4b8d      	ldr	r3, [pc, #564]	@ (8005eb0 <HAL_RCC_ClockConfig+0x25c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f023 020f 	bic.w	r2, r3, #15
 8005c82:	498b      	ldr	r1, [pc, #556]	@ (8005eb0 <HAL_RCC_ClockConfig+0x25c>)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c8a:	4b89      	ldr	r3, [pc, #548]	@ (8005eb0 <HAL_RCC_ClockConfig+0x25c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d001      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e105      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d010      	beq.n	8005cca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	4b81      	ldr	r3, [pc, #516]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d908      	bls.n	8005cca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb8:	4b7e      	ldr	r3, [pc, #504]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	497b      	ldr	r1, [pc, #492]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d079      	beq.n	8005dca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b03      	cmp	r3, #3
 8005cdc:	d11e      	bne.n	8005d1c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cde:	4b75      	ldr	r3, [pc, #468]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e0dc      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005cee:	f000 fa09 	bl	8006104 <RCC_GetSysClockFreqFromPLLSource>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4a70      	ldr	r2, [pc, #448]	@ (8005eb8 <HAL_RCC_ClockConfig+0x264>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d946      	bls.n	8005d88 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005cfa:	4b6e      	ldr	r3, [pc, #440]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d140      	bne.n	8005d88 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d06:	4b6b      	ldr	r3, [pc, #428]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d0e:	4a69      	ldr	r2, [pc, #420]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005d10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d16:	2380      	movs	r3, #128	@ 0x80
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	e035      	b.n	8005d88 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d107      	bne.n	8005d34 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d24:	4b63      	ldr	r3, [pc, #396]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d115      	bne.n	8005d5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0b9      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d107      	bne.n	8005d4c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d3c:	4b5d      	ldr	r3, [pc, #372]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d109      	bne.n	8005d5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0ad      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d4c:	4b59      	ldr	r3, [pc, #356]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0a5      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005d5c:	f000 f8b4 	bl	8005ec8 <HAL_RCC_GetSysClockFreq>
 8005d60:	4603      	mov	r3, r0
 8005d62:	4a55      	ldr	r2, [pc, #340]	@ (8005eb8 <HAL_RCC_ClockConfig+0x264>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d90f      	bls.n	8005d88 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005d68:	4b52      	ldr	r3, [pc, #328]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005d74:	4b4f      	ldr	r3, [pc, #316]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d7c:	4a4d      	ldr	r2, [pc, #308]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d82:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005d84:	2380      	movs	r3, #128	@ 0x80
 8005d86:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d88:	4b4a      	ldr	r3, [pc, #296]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	f023 0203 	bic.w	r2, r3, #3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4947      	ldr	r1, [pc, #284]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d9a:	f7fb fe47 	bl	8001a2c <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005da0:	e00a      	b.n	8005db8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da2:	f7fb fe43 	bl	8001a2c <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e077      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db8:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 020c 	and.w	r2, r3, #12
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d1eb      	bne.n	8005da2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	2b80      	cmp	r3, #128	@ 0x80
 8005dce:	d105      	bne.n	8005ddc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005dd0:	4b38      	ldr	r3, [pc, #224]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	4a37      	ldr	r2, [pc, #220]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005dd6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dda:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d010      	beq.n	8005e0a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689a      	ldr	r2, [r3, #8]
 8005dec:	4b31      	ldr	r3, [pc, #196]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d208      	bcs.n	8005e0a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005df8:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	492b      	ldr	r1, [pc, #172]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e0a:	4b29      	ldr	r3, [pc, #164]	@ (8005eb0 <HAL_RCC_ClockConfig+0x25c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d210      	bcs.n	8005e3a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e18:	4b25      	ldr	r3, [pc, #148]	@ (8005eb0 <HAL_RCC_ClockConfig+0x25c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f023 020f 	bic.w	r2, r3, #15
 8005e20:	4923      	ldr	r1, [pc, #140]	@ (8005eb0 <HAL_RCC_ClockConfig+0x25c>)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e28:	4b21      	ldr	r3, [pc, #132]	@ (8005eb0 <HAL_RCC_ClockConfig+0x25c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d001      	beq.n	8005e3a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e036      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d008      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e46:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	4918      	ldr	r1, [pc, #96]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d009      	beq.n	8005e78 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e64:	4b13      	ldr	r3, [pc, #76]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	00db      	lsls	r3, r3, #3
 8005e72:	4910      	ldr	r1, [pc, #64]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e78:	f000 f826 	bl	8005ec8 <HAL_RCC_GetSysClockFreq>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb4 <HAL_RCC_ClockConfig+0x260>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	f003 030f 	and.w	r3, r3, #15
 8005e88:	490c      	ldr	r1, [pc, #48]	@ (8005ebc <HAL_RCC_ClockConfig+0x268>)
 8005e8a:	5ccb      	ldrb	r3, [r1, r3]
 8005e8c:	f003 031f 	and.w	r3, r3, #31
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
 8005e94:	4a0a      	ldr	r2, [pc, #40]	@ (8005ec0 <HAL_RCC_ClockConfig+0x26c>)
 8005e96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e98:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec4 <HAL_RCC_ClockConfig+0x270>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fb fd75 	bl	800198c <HAL_InitTick>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	73fb      	strb	r3, [r7, #15]

  return status;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40022000 	.word	0x40022000
 8005eb4:	40021000 	.word	0x40021000
 8005eb8:	04c4b400 	.word	0x04c4b400
 8005ebc:	0800d9cc 	.word	0x0800d9cc
 8005ec0:	20000000 	.word	0x20000000
 8005ec4:	20000004 	.word	0x20000004

08005ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b089      	sub	sp, #36	@ 0x24
 8005ecc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	61fb      	str	r3, [r7, #28]
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8005fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 030c 	and.w	r3, r3, #12
 8005ede:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8005fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d005      	beq.n	8005efc <HAL_RCC_GetSysClockFreq+0x34>
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b0c      	cmp	r3, #12
 8005ef4:	d121      	bne.n	8005f3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d11e      	bne.n	8005f3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005efc:	4b34      	ldr	r3, [pc, #208]	@ (8005fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0308 	and.w	r3, r3, #8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d107      	bne.n	8005f18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f08:	4b31      	ldr	r3, [pc, #196]	@ (8005fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	f003 030f 	and.w	r3, r3, #15
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	e005      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f18:	4b2d      	ldr	r3, [pc, #180]	@ (8005fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	091b      	lsrs	r3, r3, #4
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f24:	4a2b      	ldr	r2, [pc, #172]	@ (8005fd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10d      	bne.n	8005f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f38:	e00a      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d102      	bne.n	8005f46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f40:	4b25      	ldr	r3, [pc, #148]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f42:	61bb      	str	r3, [r7, #24]
 8005f44:	e004      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d101      	bne.n	8005f50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f4c:	4b23      	ldr	r3, [pc, #140]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8005f4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	2b0c      	cmp	r3, #12
 8005f54:	d134      	bne.n	8005fc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f56:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d003      	beq.n	8005f6e <HAL_RCC_GetSysClockFreq+0xa6>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d003      	beq.n	8005f74 <HAL_RCC_GetSysClockFreq+0xac>
 8005f6c:	e005      	b.n	8005f7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f70:	617b      	str	r3, [r7, #20]
      break;
 8005f72:	e005      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f74:	4b19      	ldr	r3, [pc, #100]	@ (8005fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8005f76:	617b      	str	r3, [r7, #20]
      break;
 8005f78:	e002      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	617b      	str	r3, [r7, #20]
      break;
 8005f7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f80:	4b13      	ldr	r3, [pc, #76]	@ (8005fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	091b      	lsrs	r3, r3, #4
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f8e:	4b10      	ldr	r3, [pc, #64]	@ (8005fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	0a1b      	lsrs	r3, r3, #8
 8005f94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	fb03 f202 	mul.w	r2, r3, r2
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	0e5b      	lsrs	r3, r3, #25
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005fc0:	69bb      	ldr	r3, [r7, #24]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3724      	adds	r7, #36	@ 0x24
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40021000 	.word	0x40021000
 8005fd4:	0800d9e4 	.word	0x0800d9e4
 8005fd8:	00f42400 	.word	0x00f42400
 8005fdc:	007a1200 	.word	0x007a1200

08005fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fe4:	4b03      	ldr	r3, [pc, #12]	@ (8005ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20000000 	.word	0x20000000

08005ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ffc:	f7ff fff0 	bl	8005fe0 <HAL_RCC_GetHCLKFreq>
 8006000:	4602      	mov	r2, r0
 8006002:	4b06      	ldr	r3, [pc, #24]	@ (800601c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	0a1b      	lsrs	r3, r3, #8
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	4904      	ldr	r1, [pc, #16]	@ (8006020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800600e:	5ccb      	ldrb	r3, [r1, r3]
 8006010:	f003 031f 	and.w	r3, r3, #31
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006018:	4618      	mov	r0, r3
 800601a:	bd80      	pop	{r7, pc}
 800601c:	40021000 	.word	0x40021000
 8006020:	0800d9dc 	.word	0x0800d9dc

08006024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006028:	f7ff ffda 	bl	8005fe0 <HAL_RCC_GetHCLKFreq>
 800602c:	4602      	mov	r2, r0
 800602e:	4b06      	ldr	r3, [pc, #24]	@ (8006048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	0adb      	lsrs	r3, r3, #11
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	4904      	ldr	r1, [pc, #16]	@ (800604c <HAL_RCC_GetPCLK2Freq+0x28>)
 800603a:	5ccb      	ldrb	r3, [r1, r3]
 800603c:	f003 031f 	and.w	r3, r3, #31
 8006040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006044:	4618      	mov	r0, r3
 8006046:	bd80      	pop	{r7, pc}
 8006048:	40021000 	.word	0x40021000
 800604c:	0800d9dc 	.word	0x0800d9dc

08006050 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800605c:	4b27      	ldr	r3, [pc, #156]	@ (80060fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800605e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006068:	f7ff f8f6 	bl	8005258 <HAL_PWREx_GetVoltageRange>
 800606c:	6178      	str	r0, [r7, #20]
 800606e:	e014      	b.n	800609a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006070:	4b22      	ldr	r3, [pc, #136]	@ (80060fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006074:	4a21      	ldr	r2, [pc, #132]	@ (80060fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800607a:	6593      	str	r3, [r2, #88]	@ 0x58
 800607c:	4b1f      	ldr	r3, [pc, #124]	@ (80060fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800607e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006088:	f7ff f8e6 	bl	8005258 <HAL_PWREx_GetVoltageRange>
 800608c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800608e:	4b1b      	ldr	r3, [pc, #108]	@ (80060fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006092:	4a1a      	ldr	r2, [pc, #104]	@ (80060fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006094:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006098:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060a0:	d10b      	bne.n	80060ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b80      	cmp	r3, #128	@ 0x80
 80060a6:	d913      	bls.n	80060d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80060ac:	d902      	bls.n	80060b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060ae:	2302      	movs	r3, #2
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	e00d      	b.n	80060d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060b4:	2301      	movs	r3, #1
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	e00a      	b.n	80060d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80060be:	d902      	bls.n	80060c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80060c0:	2302      	movs	r3, #2
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	e004      	b.n	80060d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b70      	cmp	r3, #112	@ 0x70
 80060ca:	d101      	bne.n	80060d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060cc:	2301      	movs	r3, #1
 80060ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f023 020f 	bic.w	r2, r3, #15
 80060d8:	4909      	ldr	r1, [pc, #36]	@ (8006100 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060e0:	4b07      	ldr	r3, [pc, #28]	@ (8006100 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d001      	beq.n	80060f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e000      	b.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	40021000 	.word	0x40021000
 8006100:	40022000 	.word	0x40022000

08006104 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800610a:	4b2d      	ldr	r3, [pc, #180]	@ (80061c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2b03      	cmp	r3, #3
 8006118:	d00b      	beq.n	8006132 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2b03      	cmp	r3, #3
 800611e:	d825      	bhi.n	800616c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d008      	beq.n	8006138 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d11f      	bne.n	800616c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800612c:	4b25      	ldr	r3, [pc, #148]	@ (80061c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800612e:	613b      	str	r3, [r7, #16]
    break;
 8006130:	e01f      	b.n	8006172 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006132:	4b25      	ldr	r3, [pc, #148]	@ (80061c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006134:	613b      	str	r3, [r7, #16]
    break;
 8006136:	e01c      	b.n	8006172 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006138:	4b21      	ldr	r3, [pc, #132]	@ (80061c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0308 	and.w	r3, r3, #8
 8006140:	2b00      	cmp	r3, #0
 8006142:	d107      	bne.n	8006154 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006144:	4b1e      	ldr	r3, [pc, #120]	@ (80061c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800614a:	0a1b      	lsrs	r3, r3, #8
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	617b      	str	r3, [r7, #20]
 8006152:	e005      	b.n	8006160 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006154:	4b1a      	ldr	r3, [pc, #104]	@ (80061c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006160:	4a1a      	ldr	r2, [pc, #104]	@ (80061cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006168:	613b      	str	r3, [r7, #16]
    break;
 800616a:	e002      	b.n	8006172 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	613b      	str	r3, [r7, #16]
    break;
 8006170:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006172:	4b13      	ldr	r3, [pc, #76]	@ (80061c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	091b      	lsrs	r3, r3, #4
 8006178:	f003 030f 	and.w	r3, r3, #15
 800617c:	3301      	adds	r3, #1
 800617e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006180:	4b0f      	ldr	r3, [pc, #60]	@ (80061c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	0a1b      	lsrs	r3, r3, #8
 8006186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	fb03 f202 	mul.w	r2, r3, r2
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	fbb2 f3f3 	udiv	r3, r2, r3
 8006196:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006198:	4b09      	ldr	r3, [pc, #36]	@ (80061c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	0e5b      	lsrs	r3, r3, #25
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	3301      	adds	r3, #1
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80061b2:	683b      	ldr	r3, [r7, #0]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	40021000 	.word	0x40021000
 80061c4:	00f42400 	.word	0x00f42400
 80061c8:	007a1200 	.word	0x007a1200
 80061cc:	0800d9e4 	.word	0x0800d9e4

080061d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061d8:	2300      	movs	r3, #0
 80061da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061dc:	2300      	movs	r3, #0
 80061de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d040      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061f0:	2b80      	cmp	r3, #128	@ 0x80
 80061f2:	d02a      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80061f4:	2b80      	cmp	r3, #128	@ 0x80
 80061f6:	d825      	bhi.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80061f8:	2b60      	cmp	r3, #96	@ 0x60
 80061fa:	d026      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80061fc:	2b60      	cmp	r3, #96	@ 0x60
 80061fe:	d821      	bhi.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006200:	2b40      	cmp	r3, #64	@ 0x40
 8006202:	d006      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006204:	2b40      	cmp	r3, #64	@ 0x40
 8006206:	d81d      	bhi.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d009      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800620c:	2b20      	cmp	r3, #32
 800620e:	d010      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006210:	e018      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006212:	4b89      	ldr	r3, [pc, #548]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	4a88      	ldr	r2, [pc, #544]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800621c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800621e:	e015      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3304      	adds	r3, #4
 8006224:	2100      	movs	r1, #0
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fb02 	bl	8006830 <RCCEx_PLLSAI1_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006230:	e00c      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3320      	adds	r3, #32
 8006236:	2100      	movs	r1, #0
 8006238:	4618      	mov	r0, r3
 800623a:	f000 fbed 	bl	8006a18 <RCCEx_PLLSAI2_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006242:	e003      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	74fb      	strb	r3, [r7, #19]
      break;
 8006248:	e000      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800624a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800624c:	7cfb      	ldrb	r3, [r7, #19]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006252:	4b79      	ldr	r3, [pc, #484]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006254:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006258:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006260:	4975      	ldr	r1, [pc, #468]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006268:	e001      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626a:	7cfb      	ldrb	r3, [r7, #19]
 800626c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d047      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006282:	d030      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006288:	d82a      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800628a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800628e:	d02a      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006290:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006294:	d824      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800629a:	d008      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 800629c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062a0:	d81e      	bhi.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00a      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80062a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062aa:	d010      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80062ac:	e018      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062ae:	4b62      	ldr	r3, [pc, #392]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	4a61      	ldr	r2, [pc, #388]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062b8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062ba:	e015      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3304      	adds	r3, #4
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fab4 	bl	8006830 <RCCEx_PLLSAI1_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062cc:	e00c      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3320      	adds	r3, #32
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fb9f 	bl	8006a18 <RCCEx_PLLSAI2_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062de:	e003      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	74fb      	strb	r3, [r7, #19]
      break;
 80062e4:	e000      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80062e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062e8:	7cfb      	ldrb	r3, [r7, #19]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10b      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062ee:	4b52      	ldr	r3, [pc, #328]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062fc:	494e      	ldr	r1, [pc, #312]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006304:	e001      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006306:	7cfb      	ldrb	r3, [r7, #19]
 8006308:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 809f 	beq.w	8006456 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006318:	2300      	movs	r3, #0
 800631a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800631c:	4b46      	ldr	r3, [pc, #280]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800631e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800632c:	2300      	movs	r3, #0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00d      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006332:	4b41      	ldr	r3, [pc, #260]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006336:	4a40      	ldr	r2, [pc, #256]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800633c:	6593      	str	r3, [r2, #88]	@ 0x58
 800633e:	4b3e      	ldr	r3, [pc, #248]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006346:	60bb      	str	r3, [r7, #8]
 8006348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800634a:	2301      	movs	r3, #1
 800634c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800634e:	4b3b      	ldr	r3, [pc, #236]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a3a      	ldr	r2, [pc, #232]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800635a:	f7fb fb67 	bl	8001a2c <HAL_GetTick>
 800635e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006360:	e009      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006362:	f7fb fb63 	bl	8001a2c <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d902      	bls.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	74fb      	strb	r3, [r7, #19]
        break;
 8006374:	e005      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006376:	4b31      	ldr	r3, [pc, #196]	@ (800643c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0ef      	beq.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006382:	7cfb      	ldrb	r3, [r7, #19]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d15b      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006388:	4b2b      	ldr	r3, [pc, #172]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800638e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006392:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d01f      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d019      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063a6:	4b24      	ldr	r3, [pc, #144]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063b2:	4b21      	ldr	r3, [pc, #132]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063d2:	4a19      	ldr	r2, [pc, #100]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d016      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e4:	f7fb fb22 	bl	8001a2c <HAL_GetTick>
 80063e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063ea:	e00b      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ec:	f7fb fb1e 	bl	8001a2c <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d902      	bls.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	74fb      	strb	r3, [r7, #19]
            break;
 8006402:	e006      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006404:	4b0c      	ldr	r3, [pc, #48]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0ec      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006412:	7cfb      	ldrb	r3, [r7, #19]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10c      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006418:	4b07      	ldr	r3, [pc, #28]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800641e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006428:	4903      	ldr	r1, [pc, #12]	@ (8006438 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006430:	e008      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006432:	7cfb      	ldrb	r3, [r7, #19]
 8006434:	74bb      	strb	r3, [r7, #18]
 8006436:	e005      	b.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006438:	40021000 	.word	0x40021000
 800643c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006440:	7cfb      	ldrb	r3, [r7, #19]
 8006442:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006444:	7c7b      	ldrb	r3, [r7, #17]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d105      	bne.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800644a:	4ba0      	ldr	r3, [pc, #640]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800644c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800644e:	4a9f      	ldr	r2, [pc, #636]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006454:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006462:	4b9a      	ldr	r3, [pc, #616]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006468:	f023 0203 	bic.w	r2, r3, #3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006470:	4996      	ldr	r1, [pc, #600]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006484:	4b91      	ldr	r3, [pc, #580]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648a:	f023 020c 	bic.w	r2, r3, #12
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	498e      	ldr	r1, [pc, #568]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064a6:	4b89      	ldr	r3, [pc, #548]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b4:	4985      	ldr	r1, [pc, #532]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064c8:	4b80      	ldr	r3, [pc, #512]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064d6:	497d      	ldr	r1, [pc, #500]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064ea:	4b78      	ldr	r3, [pc, #480]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064f8:	4974      	ldr	r1, [pc, #464]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800650c:	4b6f      	ldr	r3, [pc, #444]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800650e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006512:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800651a:	496c      	ldr	r1, [pc, #432]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800651c:	4313      	orrs	r3, r2
 800651e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800652e:	4b67      	ldr	r3, [pc, #412]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006534:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800653c:	4963      	ldr	r1, [pc, #396]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006550:	4b5e      	ldr	r3, [pc, #376]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006556:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800655e:	495b      	ldr	r1, [pc, #364]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006560:	4313      	orrs	r3, r2
 8006562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006572:	4b56      	ldr	r3, [pc, #344]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006578:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006580:	4952      	ldr	r1, [pc, #328]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00a      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006594:	4b4d      	ldr	r3, [pc, #308]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a2:	494a      	ldr	r1, [pc, #296]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065b6:	4b45      	ldr	r3, [pc, #276]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065c4:	4941      	ldr	r1, [pc, #260]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065d8:	4b3c      	ldr	r3, [pc, #240]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065de:	f023 0203 	bic.w	r2, r3, #3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065e6:	4939      	ldr	r1, [pc, #228]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d028      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065fa:	4b34      	ldr	r3, [pc, #208]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80065fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006600:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006608:	4930      	ldr	r1, [pc, #192]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006614:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006618:	d106      	bne.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800661a:	4b2c      	ldr	r3, [pc, #176]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	4a2b      	ldr	r2, [pc, #172]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006620:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006624:	60d3      	str	r3, [r2, #12]
 8006626:	e011      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006630:	d10c      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3304      	adds	r3, #4
 8006636:	2101      	movs	r1, #1
 8006638:	4618      	mov	r0, r3
 800663a:	f000 f8f9 	bl	8006830 <RCCEx_PLLSAI1_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006642:	7cfb      	ldrb	r3, [r7, #19]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006648:	7cfb      	ldrb	r3, [r7, #19]
 800664a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d04d      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800665c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006660:	d108      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006662:	4b1a      	ldr	r3, [pc, #104]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006664:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006668:	4a18      	ldr	r2, [pc, #96]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800666a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800666e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006672:	e012      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006674:	4b15      	ldr	r3, [pc, #84]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800667a:	4a14      	ldr	r2, [pc, #80]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800667c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006680:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006684:	4b11      	ldr	r3, [pc, #68]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006692:	490e      	ldr	r1, [pc, #56]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800669e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066a2:	d106      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066a4:	4b09      	ldr	r3, [pc, #36]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	4a08      	ldr	r2, [pc, #32]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066ae:	60d3      	str	r3, [r2, #12]
 80066b0:	e020      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ba:	d109      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80066bc:	4b03      	ldr	r3, [pc, #12]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	4a02      	ldr	r2, [pc, #8]	@ (80066cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066c6:	60d3      	str	r3, [r2, #12]
 80066c8:	e014      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80066ca:	bf00      	nop
 80066cc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80066d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80066d8:	d10c      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3304      	adds	r3, #4
 80066de:	2101      	movs	r1, #1
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 f8a5 	bl	8006830 <RCCEx_PLLSAI1_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066ea:	7cfb      	ldrb	r3, [r7, #19]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80066f0:	7cfb      	ldrb	r3, [r7, #19]
 80066f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d028      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006700:	4b4a      	ldr	r3, [pc, #296]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006706:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800670e:	4947      	ldr	r1, [pc, #284]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800671a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800671e:	d106      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006720:	4b42      	ldr	r3, [pc, #264]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	4a41      	ldr	r2, [pc, #260]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006726:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800672a:	60d3      	str	r3, [r2, #12]
 800672c:	e011      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006732:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006736:	d10c      	bne.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3304      	adds	r3, #4
 800673c:	2101      	movs	r1, #1
 800673e:	4618      	mov	r0, r3
 8006740:	f000 f876 	bl	8006830 <RCCEx_PLLSAI1_Config>
 8006744:	4603      	mov	r3, r0
 8006746:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006748:	7cfb      	ldrb	r3, [r7, #19]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800674e:	7cfb      	ldrb	r3, [r7, #19]
 8006750:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d01e      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800675e:	4b33      	ldr	r3, [pc, #204]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006764:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800676e:	492f      	ldr	r1, [pc, #188]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006770:	4313      	orrs	r3, r2
 8006772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800677c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006780:	d10c      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3304      	adds	r3, #4
 8006786:	2102      	movs	r1, #2
 8006788:	4618      	mov	r0, r3
 800678a:	f000 f851 	bl	8006830 <RCCEx_PLLSAI1_Config>
 800678e:	4603      	mov	r3, r0
 8006790:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006792:	7cfb      	ldrb	r3, [r7, #19]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006798:	7cfb      	ldrb	r3, [r7, #19]
 800679a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00b      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067a8:	4b20      	ldr	r3, [pc, #128]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067ae:	f023 0204 	bic.w	r2, r3, #4
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067b8:	491c      	ldr	r1, [pc, #112]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00b      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80067cc:	4b17      	ldr	r3, [pc, #92]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067d2:	f023 0218 	bic.w	r2, r3, #24
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067dc:	4913      	ldr	r1, [pc, #76]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d017      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80067f0:	4b0e      	ldr	r3, [pc, #56]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80067f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006800:	490a      	ldr	r1, [pc, #40]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800680e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006812:	d105      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006814:	4b05      	ldr	r3, [pc, #20]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	4a04      	ldr	r2, [pc, #16]	@ (800682c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800681a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800681e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006820:	7cbb      	ldrb	r3, [r7, #18]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40021000 	.word	0x40021000

08006830 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800683e:	4b72      	ldr	r3, [pc, #456]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00e      	beq.n	8006868 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800684a:	4b6f      	ldr	r3, [pc, #444]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 0203 	and.w	r2, r3, #3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d103      	bne.n	8006862 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
       ||
 800685e:	2b00      	cmp	r3, #0
 8006860:	d142      	bne.n	80068e8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	73fb      	strb	r3, [r7, #15]
 8006866:	e03f      	b.n	80068e8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d018      	beq.n	80068a2 <RCCEx_PLLSAI1_Config+0x72>
 8006870:	2b03      	cmp	r3, #3
 8006872:	d825      	bhi.n	80068c0 <RCCEx_PLLSAI1_Config+0x90>
 8006874:	2b01      	cmp	r3, #1
 8006876:	d002      	beq.n	800687e <RCCEx_PLLSAI1_Config+0x4e>
 8006878:	2b02      	cmp	r3, #2
 800687a:	d009      	beq.n	8006890 <RCCEx_PLLSAI1_Config+0x60>
 800687c:	e020      	b.n	80068c0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800687e:	4b62      	ldr	r3, [pc, #392]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d11d      	bne.n	80068c6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800688e:	e01a      	b.n	80068c6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006890:	4b5d      	ldr	r3, [pc, #372]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006898:	2b00      	cmp	r3, #0
 800689a:	d116      	bne.n	80068ca <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068a0:	e013      	b.n	80068ca <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80068a2:	4b59      	ldr	r3, [pc, #356]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10f      	bne.n	80068ce <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80068ae:	4b56      	ldr	r3, [pc, #344]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068be:	e006      	b.n	80068ce <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	73fb      	strb	r3, [r7, #15]
      break;
 80068c4:	e004      	b.n	80068d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80068c6:	bf00      	nop
 80068c8:	e002      	b.n	80068d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80068ca:	bf00      	nop
 80068cc:	e000      	b.n	80068d0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80068ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d108      	bne.n	80068e8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80068d6:	4b4c      	ldr	r3, [pc, #304]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f023 0203 	bic.w	r2, r3, #3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4949      	ldr	r1, [pc, #292]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f040 8086 	bne.w	80069fc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80068f0:	4b45      	ldr	r3, [pc, #276]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a44      	ldr	r2, [pc, #272]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80068f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80068fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068fc:	f7fb f896 	bl	8001a2c <HAL_GetTick>
 8006900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006902:	e009      	b.n	8006918 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006904:	f7fb f892 	bl	8001a2c <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d902      	bls.n	8006918 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	73fb      	strb	r3, [r7, #15]
        break;
 8006916:	e005      	b.n	8006924 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006918:	4b3b      	ldr	r3, [pc, #236]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1ef      	bne.n	8006904 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006924:	7bfb      	ldrb	r3, [r7, #15]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d168      	bne.n	80069fc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d113      	bne.n	8006958 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006930:	4b35      	ldr	r3, [pc, #212]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	4b35      	ldr	r3, [pc, #212]	@ (8006a0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006936:	4013      	ands	r3, r2
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6892      	ldr	r2, [r2, #8]
 800693c:	0211      	lsls	r1, r2, #8
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68d2      	ldr	r2, [r2, #12]
 8006942:	06d2      	lsls	r2, r2, #27
 8006944:	4311      	orrs	r1, r2
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6852      	ldr	r2, [r2, #4]
 800694a:	3a01      	subs	r2, #1
 800694c:	0112      	lsls	r2, r2, #4
 800694e:	430a      	orrs	r2, r1
 8006950:	492d      	ldr	r1, [pc, #180]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006952:	4313      	orrs	r3, r2
 8006954:	610b      	str	r3, [r1, #16]
 8006956:	e02d      	b.n	80069b4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d115      	bne.n	800698a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800695e:	4b2a      	ldr	r3, [pc, #168]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006960:	691a      	ldr	r2, [r3, #16]
 8006962:	4b2b      	ldr	r3, [pc, #172]	@ (8006a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006964:	4013      	ands	r3, r2
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6892      	ldr	r2, [r2, #8]
 800696a:	0211      	lsls	r1, r2, #8
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6912      	ldr	r2, [r2, #16]
 8006970:	0852      	lsrs	r2, r2, #1
 8006972:	3a01      	subs	r2, #1
 8006974:	0552      	lsls	r2, r2, #21
 8006976:	4311      	orrs	r1, r2
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6852      	ldr	r2, [r2, #4]
 800697c:	3a01      	subs	r2, #1
 800697e:	0112      	lsls	r2, r2, #4
 8006980:	430a      	orrs	r2, r1
 8006982:	4921      	ldr	r1, [pc, #132]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006984:	4313      	orrs	r3, r2
 8006986:	610b      	str	r3, [r1, #16]
 8006988:	e014      	b.n	80069b4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800698a:	4b1f      	ldr	r3, [pc, #124]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 800698c:	691a      	ldr	r2, [r3, #16]
 800698e:	4b21      	ldr	r3, [pc, #132]	@ (8006a14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006990:	4013      	ands	r3, r2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6892      	ldr	r2, [r2, #8]
 8006996:	0211      	lsls	r1, r2, #8
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	6952      	ldr	r2, [r2, #20]
 800699c:	0852      	lsrs	r2, r2, #1
 800699e:	3a01      	subs	r2, #1
 80069a0:	0652      	lsls	r2, r2, #25
 80069a2:	4311      	orrs	r1, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6852      	ldr	r2, [r2, #4]
 80069a8:	3a01      	subs	r2, #1
 80069aa:	0112      	lsls	r2, r2, #4
 80069ac:	430a      	orrs	r2, r1
 80069ae:	4916      	ldr	r1, [pc, #88]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80069b4:	4b14      	ldr	r3, [pc, #80]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a13      	ldr	r2, [pc, #76]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80069be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c0:	f7fb f834 	bl	8001a2c <HAL_GetTick>
 80069c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069c6:	e009      	b.n	80069dc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069c8:	f7fb f830 	bl	8001a2c <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d902      	bls.n	80069dc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	73fb      	strb	r3, [r7, #15]
          break;
 80069da:	e005      	b.n	80069e8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80069dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0ef      	beq.n	80069c8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80069ee:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069f0:	691a      	ldr	r2, [r3, #16]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	4904      	ldr	r1, [pc, #16]	@ (8006a08 <RCCEx_PLLSAI1_Config+0x1d8>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	07ff800f 	.word	0x07ff800f
 8006a10:	ff9f800f 	.word	0xff9f800f
 8006a14:	f9ff800f 	.word	0xf9ff800f

08006a18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a26:	4b72      	ldr	r3, [pc, #456]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00e      	beq.n	8006a50 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006a32:	4b6f      	ldr	r3, [pc, #444]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f003 0203 	and.w	r2, r3, #3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d103      	bne.n	8006a4a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
       ||
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d142      	bne.n	8006ad0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	73fb      	strb	r3, [r7, #15]
 8006a4e:	e03f      	b.n	8006ad0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d018      	beq.n	8006a8a <RCCEx_PLLSAI2_Config+0x72>
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d825      	bhi.n	8006aa8 <RCCEx_PLLSAI2_Config+0x90>
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d002      	beq.n	8006a66 <RCCEx_PLLSAI2_Config+0x4e>
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d009      	beq.n	8006a78 <RCCEx_PLLSAI2_Config+0x60>
 8006a64:	e020      	b.n	8006aa8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a66:	4b62      	ldr	r3, [pc, #392]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d11d      	bne.n	8006aae <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a76:	e01a      	b.n	8006aae <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a78:	4b5d      	ldr	r3, [pc, #372]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d116      	bne.n	8006ab2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a88:	e013      	b.n	8006ab2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a8a:	4b59      	ldr	r3, [pc, #356]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10f      	bne.n	8006ab6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a96:	4b56      	ldr	r3, [pc, #344]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d109      	bne.n	8006ab6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006aa6:	e006      	b.n	8006ab6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8006aac:	e004      	b.n	8006ab8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006aae:	bf00      	nop
 8006ab0:	e002      	b.n	8006ab8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ab2:	bf00      	nop
 8006ab4:	e000      	b.n	8006ab8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d108      	bne.n	8006ad0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006abe:	4b4c      	ldr	r3, [pc, #304]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f023 0203 	bic.w	r2, r3, #3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4949      	ldr	r1, [pc, #292]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 8086 	bne.w	8006be4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006ad8:	4b45      	ldr	r3, [pc, #276]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a44      	ldr	r2, [pc, #272]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae4:	f7fa ffa2 	bl	8001a2c <HAL_GetTick>
 8006ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006aea:	e009      	b.n	8006b00 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006aec:	f7fa ff9e 	bl	8001a2c <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d902      	bls.n	8006b00 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	73fb      	strb	r3, [r7, #15]
        break;
 8006afe:	e005      	b.n	8006b0c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006b00:	4b3b      	ldr	r3, [pc, #236]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1ef      	bne.n	8006aec <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d168      	bne.n	8006be4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d113      	bne.n	8006b40 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b18:	4b35      	ldr	r3, [pc, #212]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b1a:	695a      	ldr	r2, [r3, #20]
 8006b1c:	4b35      	ldr	r3, [pc, #212]	@ (8006bf4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006b1e:	4013      	ands	r3, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6892      	ldr	r2, [r2, #8]
 8006b24:	0211      	lsls	r1, r2, #8
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	68d2      	ldr	r2, [r2, #12]
 8006b2a:	06d2      	lsls	r2, r2, #27
 8006b2c:	4311      	orrs	r1, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6852      	ldr	r2, [r2, #4]
 8006b32:	3a01      	subs	r2, #1
 8006b34:	0112      	lsls	r2, r2, #4
 8006b36:	430a      	orrs	r2, r1
 8006b38:	492d      	ldr	r1, [pc, #180]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	614b      	str	r3, [r1, #20]
 8006b3e:	e02d      	b.n	8006b9c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d115      	bne.n	8006b72 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b46:	4b2a      	ldr	r3, [pc, #168]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b48:	695a      	ldr	r2, [r3, #20]
 8006b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8006bf8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6892      	ldr	r2, [r2, #8]
 8006b52:	0211      	lsls	r1, r2, #8
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6912      	ldr	r2, [r2, #16]
 8006b58:	0852      	lsrs	r2, r2, #1
 8006b5a:	3a01      	subs	r2, #1
 8006b5c:	0552      	lsls	r2, r2, #21
 8006b5e:	4311      	orrs	r1, r2
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6852      	ldr	r2, [r2, #4]
 8006b64:	3a01      	subs	r2, #1
 8006b66:	0112      	lsls	r2, r2, #4
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	4921      	ldr	r1, [pc, #132]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	614b      	str	r3, [r1, #20]
 8006b70:	e014      	b.n	8006b9c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006b72:	4b1f      	ldr	r3, [pc, #124]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b74:	695a      	ldr	r2, [r3, #20]
 8006b76:	4b21      	ldr	r3, [pc, #132]	@ (8006bfc <RCCEx_PLLSAI2_Config+0x1e4>)
 8006b78:	4013      	ands	r3, r2
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6892      	ldr	r2, [r2, #8]
 8006b7e:	0211      	lsls	r1, r2, #8
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	6952      	ldr	r2, [r2, #20]
 8006b84:	0852      	lsrs	r2, r2, #1
 8006b86:	3a01      	subs	r2, #1
 8006b88:	0652      	lsls	r2, r2, #25
 8006b8a:	4311      	orrs	r1, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6852      	ldr	r2, [r2, #4]
 8006b90:	3a01      	subs	r2, #1
 8006b92:	0112      	lsls	r2, r2, #4
 8006b94:	430a      	orrs	r2, r1
 8006b96:	4916      	ldr	r1, [pc, #88]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006b9c:	4b14      	ldr	r3, [pc, #80]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a13      	ldr	r2, [pc, #76]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ba6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba8:	f7fa ff40 	bl	8001a2c <HAL_GetTick>
 8006bac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006bae:	e009      	b.n	8006bc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bb0:	f7fa ff3c 	bl	8001a2c <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d902      	bls.n	8006bc4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	73fb      	strb	r3, [r7, #15]
          break;
 8006bc2:	e005      	b.n	8006bd0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0ef      	beq.n	8006bb0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d106      	bne.n	8006be4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006bd6:	4b06      	ldr	r3, [pc, #24]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006bd8:	695a      	ldr	r2, [r3, #20]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	4904      	ldr	r1, [pc, #16]	@ (8006bf0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006be0:	4313      	orrs	r3, r2
 8006be2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40021000 	.word	0x40021000
 8006bf4:	07ff800f 	.word	0x07ff800f
 8006bf8:	ff9f800f 	.word	0xff9f800f
 8006bfc:	f9ff800f 	.word	0xf9ff800f

08006c00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e049      	b.n	8006ca6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f7fa fc8a 	bl	8001540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4610      	mov	r0, r2
 8006c40:	f000 fb02 	bl	8007248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
	...

08006cb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d001      	beq.n	8006cc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e047      	b.n	8006d58 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a23      	ldr	r2, [pc, #140]	@ (8006d64 <HAL_TIM_Base_Start+0xb4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01d      	beq.n	8006d16 <HAL_TIM_Base_Start+0x66>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce2:	d018      	beq.n	8006d16 <HAL_TIM_Base_Start+0x66>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d68 <HAL_TIM_Base_Start+0xb8>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <HAL_TIM_Base_Start+0x66>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d6c <HAL_TIM_Base_Start+0xbc>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00e      	beq.n	8006d16 <HAL_TIM_Base_Start+0x66>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8006d70 <HAL_TIM_Base_Start+0xc0>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d009      	beq.n	8006d16 <HAL_TIM_Base_Start+0x66>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a1b      	ldr	r2, [pc, #108]	@ (8006d74 <HAL_TIM_Base_Start+0xc4>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d004      	beq.n	8006d16 <HAL_TIM_Base_Start+0x66>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a19      	ldr	r2, [pc, #100]	@ (8006d78 <HAL_TIM_Base_Start+0xc8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d115      	bne.n	8006d42 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	4b17      	ldr	r3, [pc, #92]	@ (8006d7c <HAL_TIM_Base_Start+0xcc>)
 8006d1e:	4013      	ands	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b06      	cmp	r3, #6
 8006d26:	d015      	beq.n	8006d54 <HAL_TIM_Base_Start+0xa4>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d2e:	d011      	beq.n	8006d54 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d40:	e008      	b.n	8006d54 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f042 0201 	orr.w	r2, r2, #1
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	e000      	b.n	8006d56 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	40012c00 	.word	0x40012c00
 8006d68:	40000400 	.word	0x40000400
 8006d6c:	40000800 	.word	0x40000800
 8006d70:	40000c00 	.word	0x40000c00
 8006d74:	40013400 	.word	0x40013400
 8006d78:	40014000 	.word	0x40014000
 8006d7c:	00010007 	.word	0x00010007

08006d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d001      	beq.n	8006d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e04f      	b.n	8006e38 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f042 0201 	orr.w	r2, r2, #1
 8006dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a23      	ldr	r2, [pc, #140]	@ (8006e44 <HAL_TIM_Base_Start_IT+0xc4>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d01d      	beq.n	8006df6 <HAL_TIM_Base_Start_IT+0x76>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dc2:	d018      	beq.n	8006df6 <HAL_TIM_Base_Start_IT+0x76>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a1f      	ldr	r2, [pc, #124]	@ (8006e48 <HAL_TIM_Base_Start_IT+0xc8>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d013      	beq.n	8006df6 <HAL_TIM_Base_Start_IT+0x76>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8006e4c <HAL_TIM_Base_Start_IT+0xcc>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d00e      	beq.n	8006df6 <HAL_TIM_Base_Start_IT+0x76>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1c      	ldr	r2, [pc, #112]	@ (8006e50 <HAL_TIM_Base_Start_IT+0xd0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d009      	beq.n	8006df6 <HAL_TIM_Base_Start_IT+0x76>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e54 <HAL_TIM_Base_Start_IT+0xd4>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d004      	beq.n	8006df6 <HAL_TIM_Base_Start_IT+0x76>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a19      	ldr	r2, [pc, #100]	@ (8006e58 <HAL_TIM_Base_Start_IT+0xd8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d115      	bne.n	8006e22 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	4b17      	ldr	r3, [pc, #92]	@ (8006e5c <HAL_TIM_Base_Start_IT+0xdc>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b06      	cmp	r3, #6
 8006e06:	d015      	beq.n	8006e34 <HAL_TIM_Base_Start_IT+0xb4>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e0e:	d011      	beq.n	8006e34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f042 0201 	orr.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e20:	e008      	b.n	8006e34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f042 0201 	orr.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	e000      	b.n	8006e36 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e34:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	40012c00 	.word	0x40012c00
 8006e48:	40000400 	.word	0x40000400
 8006e4c:	40000800 	.word	0x40000800
 8006e50:	40000c00 	.word	0x40000c00
 8006e54:	40013400 	.word	0x40013400
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	00010007 	.word	0x00010007

08006e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d020      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01b      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0202 	mvn.w	r2, #2
 8006e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f9ad 	bl	800720a <HAL_TIM_IC_CaptureCallback>
 8006eb0:	e005      	b.n	8006ebe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f99f 	bl	80071f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f9b0 	bl	800721e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d020      	beq.n	8006f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f003 0304 	and.w	r3, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01b      	beq.n	8006f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0204 	mvn.w	r2, #4
 8006ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f987 	bl	800720a <HAL_TIM_IC_CaptureCallback>
 8006efc:	e005      	b.n	8006f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f979 	bl	80071f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f98a 	bl	800721e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0308 	and.w	r3, r3, #8
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d020      	beq.n	8006f5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01b      	beq.n	8006f5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0208 	mvn.w	r2, #8
 8006f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2204      	movs	r2, #4
 8006f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f961 	bl	800720a <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f953 	bl	80071f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f964 	bl	800721e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 0310 	and.w	r3, r3, #16
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d020      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f003 0310 	and.w	r3, r3, #16
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01b      	beq.n	8006fa8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0210 	mvn.w	r2, #16
 8006f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f93b 	bl	800720a <HAL_TIM_IC_CaptureCallback>
 8006f94:	e005      	b.n	8006fa2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f92d 	bl	80071f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f93e 	bl	800721e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00c      	beq.n	8006fcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d007      	beq.n	8006fcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0201 	mvn.w	r2, #1
 8006fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7f9 ff36 	bl	8000e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00c      	beq.n	8006ff0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d007      	beq.n	8006ff0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 faf2 	bl	80075d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00c      	beq.n	8007014 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800700c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 faea 	bl	80075e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00c      	beq.n	8007038 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007024:	2b00      	cmp	r3, #0
 8007026:	d007      	beq.n	8007038 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f8fd 	bl	8007232 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00c      	beq.n	800705c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f003 0320 	and.w	r3, r3, #32
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f06f 0220 	mvn.w	r2, #32
 8007054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fab2 	bl	80075c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800705c:	bf00      	nop
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007078:	2b01      	cmp	r3, #1
 800707a:	d101      	bne.n	8007080 <HAL_TIM_ConfigClockSource+0x1c>
 800707c:	2302      	movs	r3, #2
 800707e:	e0b6      	b.n	80071ee <HAL_TIM_ConfigClockSource+0x18a>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800709e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070bc:	d03e      	beq.n	800713c <HAL_TIM_ConfigClockSource+0xd8>
 80070be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070c2:	f200 8087 	bhi.w	80071d4 <HAL_TIM_ConfigClockSource+0x170>
 80070c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ca:	f000 8086 	beq.w	80071da <HAL_TIM_ConfigClockSource+0x176>
 80070ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070d2:	d87f      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x170>
 80070d4:	2b70      	cmp	r3, #112	@ 0x70
 80070d6:	d01a      	beq.n	800710e <HAL_TIM_ConfigClockSource+0xaa>
 80070d8:	2b70      	cmp	r3, #112	@ 0x70
 80070da:	d87b      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x170>
 80070dc:	2b60      	cmp	r3, #96	@ 0x60
 80070de:	d050      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0x11e>
 80070e0:	2b60      	cmp	r3, #96	@ 0x60
 80070e2:	d877      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x170>
 80070e4:	2b50      	cmp	r3, #80	@ 0x50
 80070e6:	d03c      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0xfe>
 80070e8:	2b50      	cmp	r3, #80	@ 0x50
 80070ea:	d873      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x170>
 80070ec:	2b40      	cmp	r3, #64	@ 0x40
 80070ee:	d058      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0x13e>
 80070f0:	2b40      	cmp	r3, #64	@ 0x40
 80070f2:	d86f      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x170>
 80070f4:	2b30      	cmp	r3, #48	@ 0x30
 80070f6:	d064      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x15e>
 80070f8:	2b30      	cmp	r3, #48	@ 0x30
 80070fa:	d86b      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x170>
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d060      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x15e>
 8007100:	2b20      	cmp	r3, #32
 8007102:	d867      	bhi.n	80071d4 <HAL_TIM_ConfigClockSource+0x170>
 8007104:	2b00      	cmp	r3, #0
 8007106:	d05c      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x15e>
 8007108:	2b10      	cmp	r3, #16
 800710a:	d05a      	beq.n	80071c2 <HAL_TIM_ConfigClockSource+0x15e>
 800710c:	e062      	b.n	80071d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800711e:	f000 f9a7 	bl	8007470 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007130:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	609a      	str	r2, [r3, #8]
      break;
 800713a:	e04f      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800714c:	f000 f990 	bl	8007470 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800715e:	609a      	str	r2, [r3, #8]
      break;
 8007160:	e03c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800716e:	461a      	mov	r2, r3
 8007170:	f000 f904 	bl	800737c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2150      	movs	r1, #80	@ 0x50
 800717a:	4618      	mov	r0, r3
 800717c:	f000 f95d 	bl	800743a <TIM_ITRx_SetConfig>
      break;
 8007180:	e02c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800718e:	461a      	mov	r2, r3
 8007190:	f000 f923 	bl	80073da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2160      	movs	r1, #96	@ 0x60
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f94d 	bl	800743a <TIM_ITRx_SetConfig>
      break;
 80071a0:	e01c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ae:	461a      	mov	r2, r3
 80071b0:	f000 f8e4 	bl	800737c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2140      	movs	r1, #64	@ 0x40
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 f93d 	bl	800743a <TIM_ITRx_SetConfig>
      break;
 80071c0:	e00c      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f000 f934 	bl	800743a <TIM_ITRx_SetConfig>
      break;
 80071d2:	e003      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	73fb      	strb	r3, [r7, #15]
      break;
 80071d8:	e000      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80071da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b083      	sub	sp, #12
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007226:	bf00      	nop
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800723a:	bf00      	nop
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
	...

08007248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a40      	ldr	r2, [pc, #256]	@ (800735c <TIM_Base_SetConfig+0x114>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d013      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007266:	d00f      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a3d      	ldr	r2, [pc, #244]	@ (8007360 <TIM_Base_SetConfig+0x118>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00b      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a3c      	ldr	r2, [pc, #240]	@ (8007364 <TIM_Base_SetConfig+0x11c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d007      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a3b      	ldr	r2, [pc, #236]	@ (8007368 <TIM_Base_SetConfig+0x120>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a3a      	ldr	r2, [pc, #232]	@ (800736c <TIM_Base_SetConfig+0x124>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d108      	bne.n	800729a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a2f      	ldr	r2, [pc, #188]	@ (800735c <TIM_Base_SetConfig+0x114>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d01f      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072a8:	d01b      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007360 <TIM_Base_SetConfig+0x118>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d017      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a2b      	ldr	r2, [pc, #172]	@ (8007364 <TIM_Base_SetConfig+0x11c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d013      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a2a      	ldr	r2, [pc, #168]	@ (8007368 <TIM_Base_SetConfig+0x120>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00f      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a29      	ldr	r2, [pc, #164]	@ (800736c <TIM_Base_SetConfig+0x124>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00b      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a28      	ldr	r2, [pc, #160]	@ (8007370 <TIM_Base_SetConfig+0x128>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d007      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a27      	ldr	r2, [pc, #156]	@ (8007374 <TIM_Base_SetConfig+0x12c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d003      	beq.n	80072e2 <TIM_Base_SetConfig+0x9a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a26      	ldr	r2, [pc, #152]	@ (8007378 <TIM_Base_SetConfig+0x130>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d108      	bne.n	80072f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a10      	ldr	r2, [pc, #64]	@ (800735c <TIM_Base_SetConfig+0x114>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00f      	beq.n	8007340 <TIM_Base_SetConfig+0xf8>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a12      	ldr	r2, [pc, #72]	@ (800736c <TIM_Base_SetConfig+0x124>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00b      	beq.n	8007340 <TIM_Base_SetConfig+0xf8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a11      	ldr	r2, [pc, #68]	@ (8007370 <TIM_Base_SetConfig+0x128>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d007      	beq.n	8007340 <TIM_Base_SetConfig+0xf8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a10      	ldr	r2, [pc, #64]	@ (8007374 <TIM_Base_SetConfig+0x12c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <TIM_Base_SetConfig+0xf8>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a0f      	ldr	r2, [pc, #60]	@ (8007378 <TIM_Base_SetConfig+0x130>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d103      	bne.n	8007348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	691a      	ldr	r2, [r3, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	615a      	str	r2, [r3, #20]
}
 800734e:	bf00      	nop
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40012c00 	.word	0x40012c00
 8007360:	40000400 	.word	0x40000400
 8007364:	40000800 	.word	0x40000800
 8007368:	40000c00 	.word	0x40000c00
 800736c:	40013400 	.word	0x40013400
 8007370:	40014000 	.word	0x40014000
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800

0800737c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 0201 	bic.w	r2, r3, #1
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f023 030a 	bic.w	r3, r3, #10
 80073b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	621a      	str	r2, [r3, #32]
}
 80073ce:	bf00      	nop
 80073d0:	371c      	adds	r7, #28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073da:	b480      	push	{r7}
 80073dc:	b087      	sub	sp, #28
 80073de:	af00      	add	r7, sp, #0
 80073e0:	60f8      	str	r0, [r7, #12]
 80073e2:	60b9      	str	r1, [r7, #8]
 80073e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f023 0210 	bic.w	r2, r3, #16
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	031b      	lsls	r3, r3, #12
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	4313      	orrs	r3, r2
 800740e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007416:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	621a      	str	r2, [r3, #32]
}
 800742e:	bf00      	nop
 8007430:	371c      	adds	r7, #28
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800743a:	b480      	push	{r7}
 800743c:	b085      	sub	sp, #20
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	f043 0307 	orr.w	r3, r3, #7
 800745c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	609a      	str	r2, [r3, #8]
}
 8007464:	bf00      	nop
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800748a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	021a      	lsls	r2, r3, #8
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	431a      	orrs	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4313      	orrs	r3, r2
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	4313      	orrs	r3, r2
 800749c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	609a      	str	r2, [r3, #8]
}
 80074a4:	bf00      	nop
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e068      	b.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a2e      	ldr	r2, [pc, #184]	@ (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d004      	beq.n	80074fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a2d      	ldr	r2, [pc, #180]	@ (80075ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d108      	bne.n	800750e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007502:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	4313      	orrs	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007514:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1e      	ldr	r2, [pc, #120]	@ (80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d01d      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753a:	d018      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1b      	ldr	r2, [pc, #108]	@ (80075b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d013      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1a      	ldr	r2, [pc, #104]	@ (80075b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00e      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a18      	ldr	r2, [pc, #96]	@ (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d009      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a13      	ldr	r2, [pc, #76]	@ (80075ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d004      	beq.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a14      	ldr	r2, [pc, #80]	@ (80075bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d10c      	bne.n	8007588 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	4313      	orrs	r3, r2
 800757e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	40012c00 	.word	0x40012c00
 80075ac:	40013400 	.word	0x40013400
 80075b0:	40000400 	.word	0x40000400
 80075b4:	40000800 	.word	0x40000800
 80075b8:	40000c00 	.word	0x40000c00
 80075bc:	40014000 	.word	0x40014000

080075c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e042      	b.n	8007694 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007614:	2b00      	cmp	r3, #0
 8007616:	d106      	bne.n	8007626 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7fa f87d 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2224      	movs	r2, #36	@ 0x24
 800762a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0201 	bic.w	r2, r2, #1
 800763c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 ff42 	bl	80084d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 fc43 	bl	8007ed8 <UART_SetConfig>
 8007652:	4603      	mov	r3, r0
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e01b      	b.n	8007694 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800766a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800767a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 ffc1 	bl	8008614 <UART_CheckIdleState>
 8007692:	4603      	mov	r3, r0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08a      	sub	sp, #40	@ 0x28
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	603b      	str	r3, [r7, #0]
 80076a8:	4613      	mov	r3, r2
 80076aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b2:	2b20      	cmp	r3, #32
 80076b4:	d17b      	bne.n	80077ae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <HAL_UART_Transmit+0x26>
 80076bc:	88fb      	ldrh	r3, [r7, #6]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d101      	bne.n	80076c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e074      	b.n	80077b0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2221      	movs	r2, #33	@ 0x21
 80076d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076d6:	f7fa f9a9 	bl	8001a2c <HAL_GetTick>
 80076da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	88fa      	ldrh	r2, [r7, #6]
 80076e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f4:	d108      	bne.n	8007708 <HAL_UART_Transmit+0x6c>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	e003      	b.n	8007710 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800770c:	2300      	movs	r3, #0
 800770e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007710:	e030      	b.n	8007774 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2200      	movs	r2, #0
 800771a:	2180      	movs	r1, #128	@ 0x80
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f001 f823 	bl	8008768 <UART_WaitOnFlagUntilTimeout>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2220      	movs	r2, #32
 800772c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e03d      	b.n	80077b0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10b      	bne.n	8007752 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	881a      	ldrh	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007746:	b292      	uxth	r2, r2
 8007748:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	3302      	adds	r3, #2
 800774e:	61bb      	str	r3, [r7, #24]
 8007750:	e007      	b.n	8007762 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	781a      	ldrb	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	3301      	adds	r3, #1
 8007760:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007768:	b29b      	uxth	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1c8      	bne.n	8007712 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2200      	movs	r2, #0
 8007788:	2140      	movs	r1, #64	@ 0x40
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 ffec 	bl	8008768 <UART_WaitOnFlagUntilTimeout>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d005      	beq.n	80077a2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2220      	movs	r2, #32
 800779a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e006      	b.n	80077b0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2220      	movs	r2, #32
 80077a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e000      	b.n	80077b0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80077ae:	2302      	movs	r3, #2
  }
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3720      	adds	r7, #32
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	@ 0x28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	4613      	mov	r3, r2
 80077c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d137      	bne.n	8007840 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <HAL_UART_Receive_IT+0x24>
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e030      	b.n	8007842 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a18      	ldr	r2, [pc, #96]	@ (800784c <HAL_UART_Receive_IT+0x94>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d01f      	beq.n	8007830 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d018      	beq.n	8007830 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	613b      	str	r3, [r7, #16]
   return(result);
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007812:	627b      	str	r3, [r7, #36]	@ 0x24
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781c:	623b      	str	r3, [r7, #32]
 800781e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	69f9      	ldr	r1, [r7, #28]
 8007822:	6a3a      	ldr	r2, [r7, #32]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	61bb      	str	r3, [r7, #24]
   return(result);
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e6      	bne.n	80077fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007830:	88fb      	ldrh	r3, [r7, #6]
 8007832:	461a      	mov	r2, r3
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 fffe 	bl	8008838 <UART_Start_Receive_IT>
 800783c:	4603      	mov	r3, r0
 800783e:	e000      	b.n	8007842 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007840:	2302      	movs	r3, #2
  }
}
 8007842:	4618      	mov	r0, r3
 8007844:	3728      	adds	r7, #40	@ 0x28
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	40008000 	.word	0x40008000

08007850 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b0ba      	sub	sp, #232	@ 0xe8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007876:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800787a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800787e:	4013      	ands	r3, r2
 8007880:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007888:	2b00      	cmp	r3, #0
 800788a:	d11b      	bne.n	80078c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800788c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007890:	f003 0320 	and.w	r3, r3, #32
 8007894:	2b00      	cmp	r3, #0
 8007896:	d015      	beq.n	80078c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800789c:	f003 0320 	and.w	r3, r3, #32
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d009      	beq.n	80078c4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 82e3 	beq.w	8007e80 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	4798      	blx	r3
      }
      return;
 80078c2:	e2dd      	b.n	8007e80 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80078c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 8123 	beq.w	8007b14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80078ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80078d2:	4b8d      	ldr	r3, [pc, #564]	@ (8007b08 <HAL_UART_IRQHandler+0x2b8>)
 80078d4:	4013      	ands	r3, r2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80078de:	4b8b      	ldr	r3, [pc, #556]	@ (8007b0c <HAL_UART_IRQHandler+0x2bc>)
 80078e0:	4013      	ands	r3, r2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8116 	beq.w	8007b14 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d011      	beq.n	8007918 <HAL_UART_IRQHandler+0xc8>
 80078f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00b      	beq.n	8007918 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2201      	movs	r2, #1
 8007906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800790e:	f043 0201 	orr.w	r2, r3, #1
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d011      	beq.n	8007948 <HAL_UART_IRQHandler+0xf8>
 8007924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00b      	beq.n	8007948 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2202      	movs	r2, #2
 8007936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800793e:	f043 0204 	orr.w	r2, r3, #4
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794c:	f003 0304 	and.w	r3, r3, #4
 8007950:	2b00      	cmp	r3, #0
 8007952:	d011      	beq.n	8007978 <HAL_UART_IRQHandler+0x128>
 8007954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007958:	f003 0301 	and.w	r3, r3, #1
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2204      	movs	r2, #4
 8007966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800796e:	f043 0202 	orr.w	r2, r3, #2
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	2b00      	cmp	r3, #0
 8007982:	d017      	beq.n	80079b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d105      	bne.n	800799c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007990:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007994:	4b5c      	ldr	r3, [pc, #368]	@ (8007b08 <HAL_UART_IRQHandler+0x2b8>)
 8007996:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00b      	beq.n	80079b4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2208      	movs	r2, #8
 80079a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079aa:	f043 0208 	orr.w	r2, r3, #8
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d012      	beq.n	80079e6 <HAL_UART_IRQHandler+0x196>
 80079c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00c      	beq.n	80079e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079dc:	f043 0220 	orr.w	r2, r3, #32
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 8249 	beq.w	8007e84 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d013      	beq.n	8007a26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80079fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d105      	bne.n	8007a16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a3a:	2b40      	cmp	r3, #64	@ 0x40
 8007a3c:	d005      	beq.n	8007a4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d054      	beq.n	8007af4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f001 f816 	bl	8008a7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a5a:	2b40      	cmp	r3, #64	@ 0x40
 8007a5c:	d146      	bne.n	8007aec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3308      	adds	r3, #8
 8007a64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3308      	adds	r3, #8
 8007a86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1d9      	bne.n	8007a5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d017      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aba:	4a15      	ldr	r2, [pc, #84]	@ (8007b10 <HAL_UART_IRQHandler+0x2c0>)
 8007abc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fb fe4c 	bl	8003762 <HAL_DMA_Abort_IT>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d019      	beq.n	8007b04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007ade:	4610      	mov	r0, r2
 8007ae0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ae2:	e00f      	b.n	8007b04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f9e1 	bl	8007eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aea:	e00b      	b.n	8007b04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f9dd 	bl	8007eac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af2:	e007      	b.n	8007b04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 f9d9 	bl	8007eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007b02:	e1bf      	b.n	8007e84 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b04:	bf00      	nop
    return;
 8007b06:	e1bd      	b.n	8007e84 <HAL_UART_IRQHandler+0x634>
 8007b08:	10000001 	.word	0x10000001
 8007b0c:	04000120 	.word	0x04000120
 8007b10:	08008b49 	.word	0x08008b49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	f040 8153 	bne.w	8007dc4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b22:	f003 0310 	and.w	r3, r3, #16
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 814c 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f000 8145 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2210      	movs	r2, #16
 8007b40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4c:	2b40      	cmp	r3, #64	@ 0x40
 8007b4e:	f040 80bb 	bne.w	8007cc8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 818f 	beq.w	8007e88 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b74:	429a      	cmp	r2, r3
 8007b76:	f080 8187 	bcs.w	8007e88 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f040 8087 	bne.w	8007ca6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007bc6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007bce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1da      	bne.n	8007b98 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3308      	adds	r3, #8
 8007be8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007bf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bf4:	f023 0301 	bic.w	r3, r3, #1
 8007bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3308      	adds	r3, #8
 8007c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007c06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007c0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e1      	bne.n	8007be2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3308      	adds	r3, #8
 8007c24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007c42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e3      	bne.n	8007c1e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c74:	f023 0310 	bic.w	r3, r3, #16
 8007c78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e4      	bne.n	8007c64 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fb fd02 	bl	80036aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2202      	movs	r2, #2
 8007caa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f000 f8fd 	bl	8007ec0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cc6:	e0df      	b.n	8007e88 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 80d1 	beq.w	8007e8c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007cea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f000 80cc 	beq.w	8007e8c <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d16:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d18:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1e4      	bne.n	8007cf4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3308      	adds	r3, #8
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	623b      	str	r3, [r7, #32]
   return(result);
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d40:	f023 0301 	bic.w	r3, r3, #1
 8007d44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d52:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e1      	bne.n	8007d2a <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 0310 	bic.w	r3, r3, #16
 8007d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d9c:	61fb      	str	r3, [r7, #28]
 8007d9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	69b9      	ldr	r1, [r7, #24]
 8007da2:	69fa      	ldr	r2, [r7, #28]
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	617b      	str	r3, [r7, #20]
   return(result);
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e4      	bne.n	8007d7a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007db6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f87f 	bl	8007ec0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dc2:	e063      	b.n	8007e8c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00e      	beq.n	8007dee <HAL_UART_IRQHandler+0x59e>
 8007dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d008      	beq.n	8007dee <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007de4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 fc14 	bl	8009614 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dec:	e051      	b.n	8007e92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d014      	beq.n	8007e24 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d105      	bne.n	8007e12 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d008      	beq.n	8007e24 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d03a      	beq.n	8007e90 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	4798      	blx	r3
    }
    return;
 8007e22:	e035      	b.n	8007e90 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d009      	beq.n	8007e44 <HAL_UART_IRQHandler+0x5f4>
 8007e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 fe99 	bl	8008b74 <UART_EndTransmit_IT>
    return;
 8007e42:	e026      	b.n	8007e92 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d009      	beq.n	8007e64 <HAL_UART_IRQHandler+0x614>
 8007e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 fbed 	bl	800963c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e62:	e016      	b.n	8007e92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d010      	beq.n	8007e92 <HAL_UART_IRQHandler+0x642>
 8007e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	da0c      	bge.n	8007e92 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fbd5 	bl	8009628 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e7e:	e008      	b.n	8007e92 <HAL_UART_IRQHandler+0x642>
      return;
 8007e80:	bf00      	nop
 8007e82:	e006      	b.n	8007e92 <HAL_UART_IRQHandler+0x642>
    return;
 8007e84:	bf00      	nop
 8007e86:	e004      	b.n	8007e92 <HAL_UART_IRQHandler+0x642>
      return;
 8007e88:	bf00      	nop
 8007e8a:	e002      	b.n	8007e92 <HAL_UART_IRQHandler+0x642>
      return;
 8007e8c:	bf00      	nop
 8007e8e:	e000      	b.n	8007e92 <HAL_UART_IRQHandler+0x642>
    return;
 8007e90:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007e92:	37e8      	adds	r7, #232	@ 0xe8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007edc:	b08c      	sub	sp, #48	@ 0x30
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	4baa      	ldr	r3, [pc, #680]	@ (80081b0 <UART_SetConfig+0x2d8>)
 8007f08:	4013      	ands	r3, r2
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	6812      	ldr	r2, [r2, #0]
 8007f0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f10:	430b      	orrs	r3, r1
 8007f12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	430a      	orrs	r2, r1
 8007f28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a9f      	ldr	r2, [pc, #636]	@ (80081b4 <UART_SetConfig+0x2dc>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d004      	beq.n	8007f44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f40:	4313      	orrs	r3, r2
 8007f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007f52:	697a      	ldr	r2, [r7, #20]
 8007f54:	6812      	ldr	r2, [r2, #0]
 8007f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f58:	430b      	orrs	r3, r1
 8007f5a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f62:	f023 010f 	bic.w	r1, r3, #15
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a90      	ldr	r2, [pc, #576]	@ (80081b8 <UART_SetConfig+0x2e0>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d125      	bne.n	8007fc8 <UART_SetConfig+0xf0>
 8007f7c:	4b8f      	ldr	r3, [pc, #572]	@ (80081bc <UART_SetConfig+0x2e4>)
 8007f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d81a      	bhi.n	8007fc0 <UART_SetConfig+0xe8>
 8007f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f90 <UART_SetConfig+0xb8>)
 8007f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f90:	08007fa1 	.word	0x08007fa1
 8007f94:	08007fb1 	.word	0x08007fb1
 8007f98:	08007fa9 	.word	0x08007fa9
 8007f9c:	08007fb9 	.word	0x08007fb9
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa6:	e116      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fae:	e112      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8007fb0:	2304      	movs	r3, #4
 8007fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fb6:	e10e      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8007fb8:	2308      	movs	r3, #8
 8007fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fbe:	e10a      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8007fc0:	2310      	movs	r3, #16
 8007fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc6:	e106      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a7c      	ldr	r2, [pc, #496]	@ (80081c0 <UART_SetConfig+0x2e8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d138      	bne.n	8008044 <UART_SetConfig+0x16c>
 8007fd2:	4b7a      	ldr	r3, [pc, #488]	@ (80081bc <UART_SetConfig+0x2e4>)
 8007fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fd8:	f003 030c 	and.w	r3, r3, #12
 8007fdc:	2b0c      	cmp	r3, #12
 8007fde:	d82d      	bhi.n	800803c <UART_SetConfig+0x164>
 8007fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe8 <UART_SetConfig+0x110>)
 8007fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe6:	bf00      	nop
 8007fe8:	0800801d 	.word	0x0800801d
 8007fec:	0800803d 	.word	0x0800803d
 8007ff0:	0800803d 	.word	0x0800803d
 8007ff4:	0800803d 	.word	0x0800803d
 8007ff8:	0800802d 	.word	0x0800802d
 8007ffc:	0800803d 	.word	0x0800803d
 8008000:	0800803d 	.word	0x0800803d
 8008004:	0800803d 	.word	0x0800803d
 8008008:	08008025 	.word	0x08008025
 800800c:	0800803d 	.word	0x0800803d
 8008010:	0800803d 	.word	0x0800803d
 8008014:	0800803d 	.word	0x0800803d
 8008018:	08008035 	.word	0x08008035
 800801c:	2300      	movs	r3, #0
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008022:	e0d8      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8008024:	2302      	movs	r3, #2
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800802a:	e0d4      	b.n	80081d6 <UART_SetConfig+0x2fe>
 800802c:	2304      	movs	r3, #4
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008032:	e0d0      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8008034:	2308      	movs	r3, #8
 8008036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800803a:	e0cc      	b.n	80081d6 <UART_SetConfig+0x2fe>
 800803c:	2310      	movs	r3, #16
 800803e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008042:	e0c8      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a5e      	ldr	r2, [pc, #376]	@ (80081c4 <UART_SetConfig+0x2ec>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d125      	bne.n	800809a <UART_SetConfig+0x1c2>
 800804e:	4b5b      	ldr	r3, [pc, #364]	@ (80081bc <UART_SetConfig+0x2e4>)
 8008050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008054:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008058:	2b30      	cmp	r3, #48	@ 0x30
 800805a:	d016      	beq.n	800808a <UART_SetConfig+0x1b2>
 800805c:	2b30      	cmp	r3, #48	@ 0x30
 800805e:	d818      	bhi.n	8008092 <UART_SetConfig+0x1ba>
 8008060:	2b20      	cmp	r3, #32
 8008062:	d00a      	beq.n	800807a <UART_SetConfig+0x1a2>
 8008064:	2b20      	cmp	r3, #32
 8008066:	d814      	bhi.n	8008092 <UART_SetConfig+0x1ba>
 8008068:	2b00      	cmp	r3, #0
 800806a:	d002      	beq.n	8008072 <UART_SetConfig+0x19a>
 800806c:	2b10      	cmp	r3, #16
 800806e:	d008      	beq.n	8008082 <UART_SetConfig+0x1aa>
 8008070:	e00f      	b.n	8008092 <UART_SetConfig+0x1ba>
 8008072:	2300      	movs	r3, #0
 8008074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008078:	e0ad      	b.n	80081d6 <UART_SetConfig+0x2fe>
 800807a:	2302      	movs	r3, #2
 800807c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008080:	e0a9      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8008082:	2304      	movs	r3, #4
 8008084:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008088:	e0a5      	b.n	80081d6 <UART_SetConfig+0x2fe>
 800808a:	2308      	movs	r3, #8
 800808c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008090:	e0a1      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8008092:	2310      	movs	r3, #16
 8008094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008098:	e09d      	b.n	80081d6 <UART_SetConfig+0x2fe>
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a4a      	ldr	r2, [pc, #296]	@ (80081c8 <UART_SetConfig+0x2f0>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d125      	bne.n	80080f0 <UART_SetConfig+0x218>
 80080a4:	4b45      	ldr	r3, [pc, #276]	@ (80081bc <UART_SetConfig+0x2e4>)
 80080a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80080ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80080b0:	d016      	beq.n	80080e0 <UART_SetConfig+0x208>
 80080b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80080b4:	d818      	bhi.n	80080e8 <UART_SetConfig+0x210>
 80080b6:	2b80      	cmp	r3, #128	@ 0x80
 80080b8:	d00a      	beq.n	80080d0 <UART_SetConfig+0x1f8>
 80080ba:	2b80      	cmp	r3, #128	@ 0x80
 80080bc:	d814      	bhi.n	80080e8 <UART_SetConfig+0x210>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <UART_SetConfig+0x1f0>
 80080c2:	2b40      	cmp	r3, #64	@ 0x40
 80080c4:	d008      	beq.n	80080d8 <UART_SetConfig+0x200>
 80080c6:	e00f      	b.n	80080e8 <UART_SetConfig+0x210>
 80080c8:	2300      	movs	r3, #0
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ce:	e082      	b.n	80081d6 <UART_SetConfig+0x2fe>
 80080d0:	2302      	movs	r3, #2
 80080d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d6:	e07e      	b.n	80081d6 <UART_SetConfig+0x2fe>
 80080d8:	2304      	movs	r3, #4
 80080da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080de:	e07a      	b.n	80081d6 <UART_SetConfig+0x2fe>
 80080e0:	2308      	movs	r3, #8
 80080e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080e6:	e076      	b.n	80081d6 <UART_SetConfig+0x2fe>
 80080e8:	2310      	movs	r3, #16
 80080ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ee:	e072      	b.n	80081d6 <UART_SetConfig+0x2fe>
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a35      	ldr	r2, [pc, #212]	@ (80081cc <UART_SetConfig+0x2f4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d12a      	bne.n	8008150 <UART_SetConfig+0x278>
 80080fa:	4b30      	ldr	r3, [pc, #192]	@ (80081bc <UART_SetConfig+0x2e4>)
 80080fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008104:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008108:	d01a      	beq.n	8008140 <UART_SetConfig+0x268>
 800810a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800810e:	d81b      	bhi.n	8008148 <UART_SetConfig+0x270>
 8008110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008114:	d00c      	beq.n	8008130 <UART_SetConfig+0x258>
 8008116:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800811a:	d815      	bhi.n	8008148 <UART_SetConfig+0x270>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <UART_SetConfig+0x250>
 8008120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008124:	d008      	beq.n	8008138 <UART_SetConfig+0x260>
 8008126:	e00f      	b.n	8008148 <UART_SetConfig+0x270>
 8008128:	2300      	movs	r3, #0
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812e:	e052      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8008130:	2302      	movs	r3, #2
 8008132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008136:	e04e      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8008138:	2304      	movs	r3, #4
 800813a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800813e:	e04a      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8008140:	2308      	movs	r3, #8
 8008142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008146:	e046      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8008148:	2310      	movs	r3, #16
 800814a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800814e:	e042      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a17      	ldr	r2, [pc, #92]	@ (80081b4 <UART_SetConfig+0x2dc>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d13a      	bne.n	80081d0 <UART_SetConfig+0x2f8>
 800815a:	4b18      	ldr	r3, [pc, #96]	@ (80081bc <UART_SetConfig+0x2e4>)
 800815c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008160:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008164:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008168:	d01a      	beq.n	80081a0 <UART_SetConfig+0x2c8>
 800816a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800816e:	d81b      	bhi.n	80081a8 <UART_SetConfig+0x2d0>
 8008170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008174:	d00c      	beq.n	8008190 <UART_SetConfig+0x2b8>
 8008176:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800817a:	d815      	bhi.n	80081a8 <UART_SetConfig+0x2d0>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <UART_SetConfig+0x2b0>
 8008180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008184:	d008      	beq.n	8008198 <UART_SetConfig+0x2c0>
 8008186:	e00f      	b.n	80081a8 <UART_SetConfig+0x2d0>
 8008188:	2300      	movs	r3, #0
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800818e:	e022      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8008190:	2302      	movs	r3, #2
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008196:	e01e      	b.n	80081d6 <UART_SetConfig+0x2fe>
 8008198:	2304      	movs	r3, #4
 800819a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800819e:	e01a      	b.n	80081d6 <UART_SetConfig+0x2fe>
 80081a0:	2308      	movs	r3, #8
 80081a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081a6:	e016      	b.n	80081d6 <UART_SetConfig+0x2fe>
 80081a8:	2310      	movs	r3, #16
 80081aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ae:	e012      	b.n	80081d6 <UART_SetConfig+0x2fe>
 80081b0:	cfff69f3 	.word	0xcfff69f3
 80081b4:	40008000 	.word	0x40008000
 80081b8:	40013800 	.word	0x40013800
 80081bc:	40021000 	.word	0x40021000
 80081c0:	40004400 	.word	0x40004400
 80081c4:	40004800 	.word	0x40004800
 80081c8:	40004c00 	.word	0x40004c00
 80081cc:	40005000 	.word	0x40005000
 80081d0:	2310      	movs	r3, #16
 80081d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4aae      	ldr	r2, [pc, #696]	@ (8008494 <UART_SetConfig+0x5bc>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	f040 8097 	bne.w	8008310 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081e6:	2b08      	cmp	r3, #8
 80081e8:	d823      	bhi.n	8008232 <UART_SetConfig+0x35a>
 80081ea:	a201      	add	r2, pc, #4	@ (adr r2, 80081f0 <UART_SetConfig+0x318>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	08008215 	.word	0x08008215
 80081f4:	08008233 	.word	0x08008233
 80081f8:	0800821d 	.word	0x0800821d
 80081fc:	08008233 	.word	0x08008233
 8008200:	08008223 	.word	0x08008223
 8008204:	08008233 	.word	0x08008233
 8008208:	08008233 	.word	0x08008233
 800820c:	08008233 	.word	0x08008233
 8008210:	0800822b 	.word	0x0800822b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008214:	f7fd fef0 	bl	8005ff8 <HAL_RCC_GetPCLK1Freq>
 8008218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800821a:	e010      	b.n	800823e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800821c:	4b9e      	ldr	r3, [pc, #632]	@ (8008498 <UART_SetConfig+0x5c0>)
 800821e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008220:	e00d      	b.n	800823e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008222:	f7fd fe51 	bl	8005ec8 <HAL_RCC_GetSysClockFreq>
 8008226:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008228:	e009      	b.n	800823e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800822a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800822e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008230:	e005      	b.n	800823e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800823c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800823e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 8130 	beq.w	80084a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824a:	4a94      	ldr	r2, [pc, #592]	@ (800849c <UART_SetConfig+0x5c4>)
 800824c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008250:	461a      	mov	r2, r3
 8008252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008254:	fbb3 f3f2 	udiv	r3, r3, r2
 8008258:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	4613      	mov	r3, r2
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	4413      	add	r3, r2
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	429a      	cmp	r2, r3
 8008268:	d305      	bcc.n	8008276 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	429a      	cmp	r2, r3
 8008274:	d903      	bls.n	800827e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800827c:	e113      	b.n	80084a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	2200      	movs	r2, #0
 8008282:	60bb      	str	r3, [r7, #8]
 8008284:	60fa      	str	r2, [r7, #12]
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800828a:	4a84      	ldr	r2, [pc, #528]	@ (800849c <UART_SetConfig+0x5c4>)
 800828c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008290:	b29b      	uxth	r3, r3
 8008292:	2200      	movs	r2, #0
 8008294:	603b      	str	r3, [r7, #0]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800829c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80082a0:	f7f7 ffac 	bl	80001fc <__aeabi_uldivmod>
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	4610      	mov	r0, r2
 80082aa:	4619      	mov	r1, r3
 80082ac:	f04f 0200 	mov.w	r2, #0
 80082b0:	f04f 0300 	mov.w	r3, #0
 80082b4:	020b      	lsls	r3, r1, #8
 80082b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082ba:	0202      	lsls	r2, r0, #8
 80082bc:	6979      	ldr	r1, [r7, #20]
 80082be:	6849      	ldr	r1, [r1, #4]
 80082c0:	0849      	lsrs	r1, r1, #1
 80082c2:	2000      	movs	r0, #0
 80082c4:	460c      	mov	r4, r1
 80082c6:	4605      	mov	r5, r0
 80082c8:	eb12 0804 	adds.w	r8, r2, r4
 80082cc:	eb43 0905 	adc.w	r9, r3, r5
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	469a      	mov	sl, r3
 80082d8:	4693      	mov	fp, r2
 80082da:	4652      	mov	r2, sl
 80082dc:	465b      	mov	r3, fp
 80082de:	4640      	mov	r0, r8
 80082e0:	4649      	mov	r1, r9
 80082e2:	f7f7 ff8b 	bl	80001fc <__aeabi_uldivmod>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	4613      	mov	r3, r2
 80082ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082f4:	d308      	bcc.n	8008308 <UART_SetConfig+0x430>
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082fc:	d204      	bcs.n	8008308 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6a3a      	ldr	r2, [r7, #32]
 8008304:	60da      	str	r2, [r3, #12]
 8008306:	e0ce      	b.n	80084a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800830e:	e0ca      	b.n	80084a6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008318:	d166      	bne.n	80083e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800831a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800831e:	2b08      	cmp	r3, #8
 8008320:	d827      	bhi.n	8008372 <UART_SetConfig+0x49a>
 8008322:	a201      	add	r2, pc, #4	@ (adr r2, 8008328 <UART_SetConfig+0x450>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	0800834d 	.word	0x0800834d
 800832c:	08008355 	.word	0x08008355
 8008330:	0800835d 	.word	0x0800835d
 8008334:	08008373 	.word	0x08008373
 8008338:	08008363 	.word	0x08008363
 800833c:	08008373 	.word	0x08008373
 8008340:	08008373 	.word	0x08008373
 8008344:	08008373 	.word	0x08008373
 8008348:	0800836b 	.word	0x0800836b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800834c:	f7fd fe54 	bl	8005ff8 <HAL_RCC_GetPCLK1Freq>
 8008350:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008352:	e014      	b.n	800837e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008354:	f7fd fe66 	bl	8006024 <HAL_RCC_GetPCLK2Freq>
 8008358:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800835a:	e010      	b.n	800837e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800835c:	4b4e      	ldr	r3, [pc, #312]	@ (8008498 <UART_SetConfig+0x5c0>)
 800835e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008360:	e00d      	b.n	800837e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008362:	f7fd fdb1 	bl	8005ec8 <HAL_RCC_GetSysClockFreq>
 8008366:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008368:	e009      	b.n	800837e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800836a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800836e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008370:	e005      	b.n	800837e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800837c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800837e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008380:	2b00      	cmp	r3, #0
 8008382:	f000 8090 	beq.w	80084a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800838a:	4a44      	ldr	r2, [pc, #272]	@ (800849c <UART_SetConfig+0x5c4>)
 800838c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008390:	461a      	mov	r2, r3
 8008392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008394:	fbb3 f3f2 	udiv	r3, r3, r2
 8008398:	005a      	lsls	r2, r3, #1
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	085b      	lsrs	r3, r3, #1
 80083a0:	441a      	add	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	2b0f      	cmp	r3, #15
 80083b0:	d916      	bls.n	80083e0 <UART_SetConfig+0x508>
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083b8:	d212      	bcs.n	80083e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	f023 030f 	bic.w	r3, r3, #15
 80083c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	085b      	lsrs	r3, r3, #1
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	8bfb      	ldrh	r3, [r7, #30]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	8bfa      	ldrh	r2, [r7, #30]
 80083dc:	60da      	str	r2, [r3, #12]
 80083de:	e062      	b.n	80084a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083e6:	e05e      	b.n	80084a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d828      	bhi.n	8008442 <UART_SetConfig+0x56a>
 80083f0:	a201      	add	r2, pc, #4	@ (adr r2, 80083f8 <UART_SetConfig+0x520>)
 80083f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f6:	bf00      	nop
 80083f8:	0800841d 	.word	0x0800841d
 80083fc:	08008425 	.word	0x08008425
 8008400:	0800842d 	.word	0x0800842d
 8008404:	08008443 	.word	0x08008443
 8008408:	08008433 	.word	0x08008433
 800840c:	08008443 	.word	0x08008443
 8008410:	08008443 	.word	0x08008443
 8008414:	08008443 	.word	0x08008443
 8008418:	0800843b 	.word	0x0800843b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800841c:	f7fd fdec 	bl	8005ff8 <HAL_RCC_GetPCLK1Freq>
 8008420:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008422:	e014      	b.n	800844e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008424:	f7fd fdfe 	bl	8006024 <HAL_RCC_GetPCLK2Freq>
 8008428:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800842a:	e010      	b.n	800844e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800842c:	4b1a      	ldr	r3, [pc, #104]	@ (8008498 <UART_SetConfig+0x5c0>)
 800842e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008430:	e00d      	b.n	800844e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008432:	f7fd fd49 	bl	8005ec8 <HAL_RCC_GetSysClockFreq>
 8008436:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008438:	e009      	b.n	800844e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800843a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800843e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008440:	e005      	b.n	800844e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800844c:	bf00      	nop
    }

    if (pclk != 0U)
 800844e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008450:	2b00      	cmp	r3, #0
 8008452:	d028      	beq.n	80084a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008458:	4a10      	ldr	r2, [pc, #64]	@ (800849c <UART_SetConfig+0x5c4>)
 800845a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800845e:	461a      	mov	r2, r3
 8008460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008462:	fbb3 f2f2 	udiv	r2, r3, r2
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	085b      	lsrs	r3, r3, #1
 800846c:	441a      	add	r2, r3
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	fbb2 f3f3 	udiv	r3, r2, r3
 8008476:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008478:	6a3b      	ldr	r3, [r7, #32]
 800847a:	2b0f      	cmp	r3, #15
 800847c:	d910      	bls.n	80084a0 <UART_SetConfig+0x5c8>
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008484:	d20c      	bcs.n	80084a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	b29a      	uxth	r2, r3
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	60da      	str	r2, [r3, #12]
 8008490:	e009      	b.n	80084a6 <UART_SetConfig+0x5ce>
 8008492:	bf00      	nop
 8008494:	40008000 	.word	0x40008000
 8008498:	00f42400 	.word	0x00f42400
 800849c:	0800da14 	.word	0x0800da14
      }
      else
      {
        ret = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2201      	movs	r2, #1
 80084aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2200      	movs	r2, #0
 80084ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	2200      	movs	r2, #0
 80084c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80084c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3730      	adds	r7, #48	@ 0x30
 80084ca:	46bd      	mov	sp, r7
 80084cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080084d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084dc:	f003 0308 	and.w	r3, r3, #8
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00a      	beq.n	800853e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	430a      	orrs	r2, r1
 800853c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008542:	f003 0304 	and.w	r3, r3, #4
 8008546:	2b00      	cmp	r3, #0
 8008548:	d00a      	beq.n	8008560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008564:	f003 0310 	and.w	r3, r3, #16
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00a      	beq.n	8008582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	430a      	orrs	r2, r1
 80085a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d01a      	beq.n	80085e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085ce:	d10a      	bne.n	80085e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	430a      	orrs	r2, r1
 8008606:	605a      	str	r2, [r3, #4]
  }
}
 8008608:	bf00      	nop
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b098      	sub	sp, #96	@ 0x60
 8008618:	af02      	add	r7, sp, #8
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008624:	f7f9 fa02 	bl	8001a2c <HAL_GetTick>
 8008628:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0308 	and.w	r3, r3, #8
 8008634:	2b08      	cmp	r3, #8
 8008636:	d12f      	bne.n	8008698 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008638:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008640:	2200      	movs	r2, #0
 8008642:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f88e 	bl	8008768 <UART_WaitOnFlagUntilTimeout>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d022      	beq.n	8008698 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865a:	e853 3f00 	ldrex	r3, [r3]
 800865e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008666:	653b      	str	r3, [r7, #80]	@ 0x50
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	461a      	mov	r2, r3
 800866e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008670:	647b      	str	r3, [r7, #68]	@ 0x44
 8008672:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008674:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008678:	e841 2300 	strex	r3, r2, [r1]
 800867c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800867e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1e6      	bne.n	8008652 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2220      	movs	r2, #32
 8008688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e063      	b.n	8008760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d149      	bne.n	800873a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086aa:	9300      	str	r3, [sp, #0]
 80086ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086ae:	2200      	movs	r2, #0
 80086b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 f857 	bl	8008768 <UART_WaitOnFlagUntilTimeout>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d03c      	beq.n	800873a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	623b      	str	r3, [r7, #32]
   return(result);
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086de:	633b      	str	r3, [r7, #48]	@ 0x30
 80086e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086e6:	e841 2300 	strex	r3, r2, [r1]
 80086ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d1e6      	bne.n	80086c0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3308      	adds	r3, #8
 80086f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	60fb      	str	r3, [r7, #12]
   return(result);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f023 0301 	bic.w	r3, r3, #1
 8008708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3308      	adds	r3, #8
 8008710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008712:	61fa      	str	r2, [r7, #28]
 8008714:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	69b9      	ldr	r1, [r7, #24]
 8008718:	69fa      	ldr	r2, [r7, #28]
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	617b      	str	r3, [r7, #20]
   return(result);
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e5      	bne.n	80086f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2220      	movs	r2, #32
 800872a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e012      	b.n	8008760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2220      	movs	r2, #32
 800873e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2220      	movs	r2, #32
 8008746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3758      	adds	r7, #88	@ 0x58
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	4613      	mov	r3, r2
 8008776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008778:	e049      	b.n	800880e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008780:	d045      	beq.n	800880e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008782:	f7f9 f953 	bl	8001a2c <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	429a      	cmp	r2, r3
 8008790:	d302      	bcc.n	8008798 <UART_WaitOnFlagUntilTimeout+0x30>
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e048      	b.n	800882e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0304 	and.w	r3, r3, #4
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d031      	beq.n	800880e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	f003 0308 	and.w	r3, r3, #8
 80087b4:	2b08      	cmp	r3, #8
 80087b6:	d110      	bne.n	80087da <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2208      	movs	r2, #8
 80087be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f000 f95b 	bl	8008a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2208      	movs	r2, #8
 80087ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e029      	b.n	800882e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087e8:	d111      	bne.n	800880e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 f941 	bl	8008a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2220      	movs	r2, #32
 80087fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e00f      	b.n	800882e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69da      	ldr	r2, [r3, #28]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	4013      	ands	r3, r2
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	429a      	cmp	r2, r3
 800881c:	bf0c      	ite	eq
 800881e:	2301      	moveq	r3, #1
 8008820:	2300      	movne	r3, #0
 8008822:	b2db      	uxtb	r3, r3
 8008824:	461a      	mov	r2, r3
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	429a      	cmp	r2, r3
 800882a:	d0a6      	beq.n	800877a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
	...

08008838 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008838:	b480      	push	{r7}
 800883a:	b0a3      	sub	sp, #140	@ 0x8c
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	88fa      	ldrh	r2, [r7, #6]
 8008850:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	88fa      	ldrh	r2, [r7, #6]
 8008858:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800886a:	d10e      	bne.n	800888a <UART_Start_Receive_IT+0x52>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d105      	bne.n	8008880 <UART_Start_Receive_IT+0x48>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800887a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800887e:	e02d      	b.n	80088dc <UART_Start_Receive_IT+0xa4>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	22ff      	movs	r2, #255	@ 0xff
 8008884:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008888:	e028      	b.n	80088dc <UART_Start_Receive_IT+0xa4>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10d      	bne.n	80088ae <UART_Start_Receive_IT+0x76>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d104      	bne.n	80088a4 <UART_Start_Receive_IT+0x6c>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	22ff      	movs	r2, #255	@ 0xff
 800889e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088a2:	e01b      	b.n	80088dc <UART_Start_Receive_IT+0xa4>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	227f      	movs	r2, #127	@ 0x7f
 80088a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088ac:	e016      	b.n	80088dc <UART_Start_Receive_IT+0xa4>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088b6:	d10d      	bne.n	80088d4 <UART_Start_Receive_IT+0x9c>
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d104      	bne.n	80088ca <UART_Start_Receive_IT+0x92>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	227f      	movs	r2, #127	@ 0x7f
 80088c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088c8:	e008      	b.n	80088dc <UART_Start_Receive_IT+0xa4>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	223f      	movs	r2, #63	@ 0x3f
 80088ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088d2:	e003      	b.n	80088dc <UART_Start_Receive_IT+0xa4>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2200      	movs	r2, #0
 80088e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2222      	movs	r2, #34	@ 0x22
 80088e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3308      	adds	r3, #8
 80088f2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80088fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088fe:	f043 0301 	orr.w	r3, r3, #1
 8008902:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3308      	adds	r3, #8
 800890c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008910:	673a      	str	r2, [r7, #112]	@ 0x70
 8008912:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008916:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800891e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e3      	bne.n	80088ec <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800892c:	d14f      	bne.n	80089ce <UART_Start_Receive_IT+0x196>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008934:	88fa      	ldrh	r2, [r7, #6]
 8008936:	429a      	cmp	r2, r3
 8008938:	d349      	bcc.n	80089ce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008942:	d107      	bne.n	8008954 <UART_Start_Receive_IT+0x11c>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d103      	bne.n	8008954 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4a47      	ldr	r2, [pc, #284]	@ (8008a6c <UART_Start_Receive_IT+0x234>)
 8008950:	675a      	str	r2, [r3, #116]	@ 0x74
 8008952:	e002      	b.n	800895a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4a46      	ldr	r2, [pc, #280]	@ (8008a70 <UART_Start_Receive_IT+0x238>)
 8008958:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d01a      	beq.n	8008998 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008970:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008976:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008984:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008986:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800898a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e4      	bne.n	8008962 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3308      	adds	r3, #8
 800899e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3308      	adds	r3, #8
 80089b6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80089b8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80089ba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089c0:	e841 2300 	strex	r3, r2, [r1]
 80089c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80089c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e5      	bne.n	8008998 <UART_Start_Receive_IT+0x160>
 80089cc:	e046      	b.n	8008a5c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089d6:	d107      	bne.n	80089e8 <UART_Start_Receive_IT+0x1b0>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d103      	bne.n	80089e8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4a24      	ldr	r2, [pc, #144]	@ (8008a74 <UART_Start_Receive_IT+0x23c>)
 80089e4:	675a      	str	r2, [r3, #116]	@ 0x74
 80089e6:	e002      	b.n	80089ee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4a23      	ldr	r2, [pc, #140]	@ (8008a78 <UART_Start_Receive_IT+0x240>)
 80089ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d019      	beq.n	8008a2a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fe:	e853 3f00 	ldrex	r3, [r3]
 8008a02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a06:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a16:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a1c:	e841 2300 	strex	r3, r2, [r1]
 8008a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1e6      	bne.n	80089f6 <UART_Start_Receive_IT+0x1be>
 8008a28:	e018      	b.n	8008a5c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	613b      	str	r3, [r7, #16]
   return(result);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f043 0320 	orr.w	r3, r3, #32
 8008a3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	461a      	mov	r2, r3
 8008a46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a48:	623b      	str	r3, [r7, #32]
 8008a4a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	69f9      	ldr	r1, [r7, #28]
 8008a4e:	6a3a      	ldr	r2, [r7, #32]
 8008a50:	e841 2300 	strex	r3, r2, [r1]
 8008a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1e6      	bne.n	8008a2a <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	378c      	adds	r7, #140	@ 0x8c
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	080092a9 	.word	0x080092a9
 8008a70:	08008f45 	.word	0x08008f45
 8008a74:	08008d89 	.word	0x08008d89
 8008a78:	08008bcd 	.word	0x08008bcd

08008a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b095      	sub	sp, #84	@ 0x54
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aa2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008aa4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008aa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008aaa:	e841 2300 	strex	r3, r2, [r1]
 8008aae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1e6      	bne.n	8008a84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3308      	adds	r3, #8
 8008abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008acc:	f023 0301 	bic.w	r3, r3, #1
 8008ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3308      	adds	r3, #8
 8008ad8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ada:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008adc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e3      	bne.n	8008ab6 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d118      	bne.n	8008b28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	f023 0310 	bic.w	r3, r3, #16
 8008b0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	461a      	mov	r2, r3
 8008b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b14:	61bb      	str	r3, [r7, #24]
 8008b16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	6979      	ldr	r1, [r7, #20]
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	e841 2300 	strex	r3, r2, [r1]
 8008b20:	613b      	str	r3, [r7, #16]
   return(result);
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e6      	bne.n	8008af6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b3c:	bf00      	nop
 8008b3e:	3754      	adds	r7, #84	@ 0x54
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f7ff f9a0 	bl	8007eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b6c:	bf00      	nop
 8008b6e:	3710      	adds	r7, #16
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b088      	sub	sp, #32
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b90:	61fb      	str	r3, [r7, #28]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	61bb      	str	r3, [r7, #24]
 8008b9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6979      	ldr	r1, [r7, #20]
 8008ba0:	69ba      	ldr	r2, [r7, #24]
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e6      	bne.n	8008b7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff f96b 	bl	8007e98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bc2:	bf00      	nop
 8008bc4:	3720      	adds	r7, #32
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b09c      	sub	sp, #112	@ 0x70
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008bda:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008be4:	2b22      	cmp	r3, #34	@ 0x22
 8008be6:	f040 80be 	bne.w	8008d66 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008bf0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bf4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bf8:	b2d9      	uxtb	r1, r3
 8008bfa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c04:	400a      	ands	r2, r1
 8008c06:	b2d2      	uxtb	r2, r2
 8008c08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c0e:	1c5a      	adds	r2, r3, #1
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f040 80a3 	bne.w	8008d7a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c54:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c5a:	e841 2300 	strex	r3, r2, [r1]
 8008c5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1e6      	bne.n	8008c34 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c70:	e853 3f00 	ldrex	r3, [r3]
 8008c74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c78:	f023 0301 	bic.w	r3, r3, #1
 8008c7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3308      	adds	r3, #8
 8008c84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008c86:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c8e:	e841 2300 	strex	r3, r2, [r1]
 8008c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1e5      	bne.n	8008c66 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2220      	movs	r2, #32
 8008c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a34      	ldr	r2, [pc, #208]	@ (8008d84 <UART_RxISR_8BIT+0x1b8>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d01f      	beq.n	8008cf8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d018      	beq.n	8008cf8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cce:	e853 3f00 	ldrex	r3, [r3]
 8008cd2:	623b      	str	r3, [r7, #32]
   return(result);
 8008cd4:	6a3b      	ldr	r3, [r7, #32]
 8008cd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008cda:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ce4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cec:	e841 2300 	strex	r3, r2, [r1]
 8008cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e6      	bne.n	8008cc6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d12e      	bne.n	8008d5e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	e853 3f00 	ldrex	r3, [r3]
 8008d12:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f023 0310 	bic.w	r3, r3, #16
 8008d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	461a      	mov	r2, r3
 8008d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d24:	61fb      	str	r3, [r7, #28]
 8008d26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d28:	69b9      	ldr	r1, [r7, #24]
 8008d2a:	69fa      	ldr	r2, [r7, #28]
 8008d2c:	e841 2300 	strex	r3, r2, [r1]
 8008d30:	617b      	str	r3, [r7, #20]
   return(result);
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e6      	bne.n	8008d06 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	f003 0310 	and.w	r3, r3, #16
 8008d42:	2b10      	cmp	r3, #16
 8008d44:	d103      	bne.n	8008d4e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2210      	movs	r2, #16
 8008d4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d54:	4619      	mov	r1, r3
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff f8b2 	bl	8007ec0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d5c:	e00d      	b.n	8008d7a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7f8 f858 	bl	8000e14 <HAL_UART_RxCpltCallback>
}
 8008d64:	e009      	b.n	8008d7a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	8b1b      	ldrh	r3, [r3, #24]
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f042 0208 	orr.w	r2, r2, #8
 8008d76:	b292      	uxth	r2, r2
 8008d78:	831a      	strh	r2, [r3, #24]
}
 8008d7a:	bf00      	nop
 8008d7c:	3770      	adds	r7, #112	@ 0x70
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	40008000 	.word	0x40008000

08008d88 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b09c      	sub	sp, #112	@ 0x70
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008da0:	2b22      	cmp	r3, #34	@ 0x22
 8008da2:	f040 80be 	bne.w	8008f22 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008dac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008db6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008dba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008dc4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dca:	1c9a      	adds	r2, r3, #2
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f040 80a3 	bne.w	8008f36 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e04:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e10:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e12:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e16:	e841 2300 	strex	r3, r2, [r1]
 8008e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1e6      	bne.n	8008df0 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3308      	adds	r3, #8
 8008e28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e2c:	e853 3f00 	ldrex	r3, [r3]
 8008e30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e34:	f023 0301 	bic.w	r3, r3, #1
 8008e38:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3308      	adds	r3, #8
 8008e40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e42:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e4a:	e841 2300 	strex	r3, r2, [r1]
 8008e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1e5      	bne.n	8008e22 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a34      	ldr	r2, [pc, #208]	@ (8008f40 <UART_RxISR_16BIT+0x1b8>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d01f      	beq.n	8008eb4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d018      	beq.n	8008eb4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	e853 3f00 	ldrex	r3, [r3]
 8008e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ea2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ea8:	e841 2300 	strex	r3, r2, [r1]
 8008eac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e6      	bne.n	8008e82 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d12e      	bne.n	8008f1a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	e853 3f00 	ldrex	r3, [r3]
 8008ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f023 0310 	bic.w	r3, r3, #16
 8008ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	461a      	mov	r2, r3
 8008ede:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008ee0:	61bb      	str	r3, [r7, #24]
 8008ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee4:	6979      	ldr	r1, [r7, #20]
 8008ee6:	69ba      	ldr	r2, [r7, #24]
 8008ee8:	e841 2300 	strex	r3, r2, [r1]
 8008eec:	613b      	str	r3, [r7, #16]
   return(result);
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1e6      	bne.n	8008ec2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	f003 0310 	and.w	r3, r3, #16
 8008efe:	2b10      	cmp	r3, #16
 8008f00:	d103      	bne.n	8008f0a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2210      	movs	r2, #16
 8008f08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7fe ffd4 	bl	8007ec0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f18:	e00d      	b.n	8008f36 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7f7 ff7a 	bl	8000e14 <HAL_UART_RxCpltCallback>
}
 8008f20:	e009      	b.n	8008f36 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	8b1b      	ldrh	r3, [r3, #24]
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0208 	orr.w	r2, r2, #8
 8008f32:	b292      	uxth	r2, r2
 8008f34:	831a      	strh	r2, [r3, #24]
}
 8008f36:	bf00      	nop
 8008f38:	3770      	adds	r7, #112	@ 0x70
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	40008000 	.word	0x40008000

08008f44 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b0ac      	sub	sp, #176	@ 0xb0
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f52:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	69db      	ldr	r3, [r3, #28]
 8008f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f7a:	2b22      	cmp	r3, #34	@ 0x22
 8008f7c:	f040 8182 	bne.w	8009284 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008f86:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f8a:	e125      	b.n	80091d8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008f92:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f96:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008f9a:	b2d9      	uxtb	r1, r3
 8008f9c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008fa0:	b2da      	uxtb	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa6:	400a      	ands	r2, r1
 8008fa8:	b2d2      	uxtb	r2, r2
 8008faa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	69db      	ldr	r3, [r3, #28]
 8008fce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d053      	beq.n	8009086 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d011      	beq.n	800900e <UART_RxISR_8BIT_FIFOEN+0xca>
 8008fea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00b      	beq.n	800900e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009004:	f043 0201 	orr.w	r2, r3, #1
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800900e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d011      	beq.n	800903e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800901a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2202      	movs	r2, #2
 800902c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009034:	f043 0204 	orr.w	r2, r3, #4
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800903e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b00      	cmp	r3, #0
 8009048:	d011      	beq.n	800906e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800904a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00b      	beq.n	800906e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2204      	movs	r2, #4
 800905c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009064:	f043 0202 	orr.w	r2, r3, #2
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009074:	2b00      	cmp	r3, #0
 8009076:	d006      	beq.n	8009086 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7fe ff17 	bl	8007eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800908c:	b29b      	uxth	r3, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	f040 80a2 	bne.w	80091d8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80090a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	461a      	mov	r2, r3
 80090b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80090b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80090b8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80090bc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80090c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e4      	bne.n	8009094 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3308      	adds	r3, #8
 80090d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80090da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090e0:	f023 0301 	bic.w	r3, r3, #1
 80090e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3308      	adds	r3, #8
 80090ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090f2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80090f4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80090f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009100:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e1      	bne.n	80090ca <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2220      	movs	r2, #32
 800910a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a60      	ldr	r2, [pc, #384]	@ (80092a0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d021      	beq.n	8009168 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d01a      	beq.n	8009168 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800913a:	e853 3f00 	ldrex	r3, [r3]
 800913e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009142:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009154:	657b      	str	r3, [r7, #84]	@ 0x54
 8009156:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800915a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e4      	bne.n	8009132 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800916c:	2b01      	cmp	r3, #1
 800916e:	d130      	bne.n	80091d2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800917c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800917e:	e853 3f00 	ldrex	r3, [r3]
 8009182:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	f023 0310 	bic.w	r3, r3, #16
 800918a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	461a      	mov	r2, r3
 8009194:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009198:	643b      	str	r3, [r7, #64]	@ 0x40
 800919a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800919e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091a0:	e841 2300 	strex	r3, r2, [r1]
 80091a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1e4      	bne.n	8009176 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	69db      	ldr	r3, [r3, #28]
 80091b2:	f003 0310 	and.w	r3, r3, #16
 80091b6:	2b10      	cmp	r3, #16
 80091b8:	d103      	bne.n	80091c2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2210      	movs	r2, #16
 80091c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7fe fe78 	bl	8007ec0 <HAL_UARTEx_RxEventCallback>
 80091d0:	e002      	b.n	80091d8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7f7 fe1e 	bl	8000e14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091d8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d006      	beq.n	80091ee <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80091e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f47f aecf 	bne.w	8008f8c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d04b      	beq.n	8009298 <UART_RxISR_8BIT_FIFOEN+0x354>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009206:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800920a:	429a      	cmp	r2, r3
 800920c:	d244      	bcs.n	8009298 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3308      	adds	r3, #8
 8009214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	e853 3f00 	ldrex	r3, [r3]
 800921c:	61fb      	str	r3, [r7, #28]
   return(result);
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3308      	adds	r3, #8
 800922e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009232:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009234:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009236:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009238:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1e3      	bne.n	800920e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a16      	ldr	r2, [pc, #88]	@ (80092a4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800924a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	60bb      	str	r3, [r7, #8]
   return(result);
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	f043 0320 	orr.w	r3, r3, #32
 8009260:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	461a      	mov	r2, r3
 800926a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800926e:	61bb      	str	r3, [r7, #24]
 8009270:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6979      	ldr	r1, [r7, #20]
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	613b      	str	r3, [r7, #16]
   return(result);
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e4      	bne.n	800924c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009282:	e009      	b.n	8009298 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	8b1b      	ldrh	r3, [r3, #24]
 800928a:	b29a      	uxth	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f042 0208 	orr.w	r2, r2, #8
 8009294:	b292      	uxth	r2, r2
 8009296:	831a      	strh	r2, [r3, #24]
}
 8009298:	bf00      	nop
 800929a:	37b0      	adds	r7, #176	@ 0xb0
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	40008000 	.word	0x40008000
 80092a4:	08008bcd 	.word	0x08008bcd

080092a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b0ae      	sub	sp, #184	@ 0xb8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092de:	2b22      	cmp	r3, #34	@ 0x22
 80092e0:	f040 8186 	bne.w	80095f0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092ea:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092ee:	e129      	b.n	8009544 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80092f6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009302:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009306:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800930a:	4013      	ands	r3, r2
 800930c:	b29a      	uxth	r2, r3
 800930e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009312:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009318:	1c9a      	adds	r2, r3, #2
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009324:	b29b      	uxth	r3, r3
 8009326:	3b01      	subs	r3, #1
 8009328:	b29a      	uxth	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800933a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800933e:	f003 0307 	and.w	r3, r3, #7
 8009342:	2b00      	cmp	r3, #0
 8009344:	d053      	beq.n	80093ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	2b00      	cmp	r3, #0
 8009350:	d011      	beq.n	8009376 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00b      	beq.n	8009376 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2201      	movs	r2, #1
 8009364:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800936c:	f043 0201 	orr.w	r2, r3, #1
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009376:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d011      	beq.n	80093a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2202      	movs	r2, #2
 8009394:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800939c:	f043 0204 	orr.w	r2, r3, #4
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093aa:	f003 0304 	and.w	r3, r3, #4
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d011      	beq.n	80093d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80093b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00b      	beq.n	80093d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2204      	movs	r2, #4
 80093c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093cc:	f043 0202 	orr.w	r2, r3, #2
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d006      	beq.n	80093ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7fe fd63 	bl	8007eac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f040 80a4 	bne.w	8009544 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009402:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800940a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800940c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009410:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	461a      	mov	r2, r3
 800941a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800941e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009422:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009424:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009426:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800942a:	e841 2300 	strex	r3, r2, [r1]
 800942e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009430:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1e2      	bne.n	80093fc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3308      	adds	r3, #8
 800943c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009440:	e853 3f00 	ldrex	r3, [r3]
 8009444:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009448:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800944c:	f023 0301 	bic.w	r3, r3, #1
 8009450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3308      	adds	r3, #8
 800945a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800945e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009460:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009462:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009464:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009466:	e841 2300 	strex	r3, r2, [r1]
 800946a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800946c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1e1      	bne.n	8009436 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2220      	movs	r2, #32
 8009476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a60      	ldr	r2, [pc, #384]	@ (800960c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d021      	beq.n	80094d4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d01a      	beq.n	80094d4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094a6:	e853 3f00 	ldrex	r3, [r3]
 80094aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80094ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80094b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80094c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094c2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094c8:	e841 2300 	strex	r3, r2, [r1]
 80094cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80094ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e4      	bne.n	800949e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d130      	bne.n	800953e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ea:	e853 3f00 	ldrex	r3, [r3]
 80094ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f2:	f023 0310 	bic.w	r3, r3, #16
 80094f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009504:	647b      	str	r3, [r7, #68]	@ 0x44
 8009506:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009508:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800950a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800950c:	e841 2300 	strex	r3, r2, [r1]
 8009510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009514:	2b00      	cmp	r3, #0
 8009516:	d1e4      	bne.n	80094e2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	69db      	ldr	r3, [r3, #28]
 800951e:	f003 0310 	and.w	r3, r3, #16
 8009522:	2b10      	cmp	r3, #16
 8009524:	d103      	bne.n	800952e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2210      	movs	r2, #16
 800952c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009534:	4619      	mov	r1, r3
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7fe fcc2 	bl	8007ec0 <HAL_UARTEx_RxEventCallback>
 800953c:	e002      	b.n	8009544 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f7f7 fc68 	bl	8000e14 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009544:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009548:	2b00      	cmp	r3, #0
 800954a:	d006      	beq.n	800955a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800954c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009550:	f003 0320 	and.w	r3, r3, #32
 8009554:	2b00      	cmp	r3, #0
 8009556:	f47f aecb 	bne.w	80092f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009560:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009564:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009568:	2b00      	cmp	r3, #0
 800956a:	d04b      	beq.n	8009604 <UART_RxISR_16BIT_FIFOEN+0x35c>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009572:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009576:	429a      	cmp	r2, r3
 8009578:	d244      	bcs.n	8009604 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3308      	adds	r3, #8
 8009580:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	623b      	str	r3, [r7, #32]
   return(result);
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3308      	adds	r3, #8
 800959a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800959e:	633a      	str	r2, [r7, #48]	@ 0x30
 80095a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095a6:	e841 2300 	strex	r3, r2, [r1]
 80095aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1e3      	bne.n	800957a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a16      	ldr	r2, [pc, #88]	@ (8009610 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80095b6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	e853 3f00 	ldrex	r3, [r3]
 80095c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f043 0320 	orr.w	r3, r3, #32
 80095cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80095da:	61fb      	str	r3, [r7, #28]
 80095dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	69b9      	ldr	r1, [r7, #24]
 80095e0:	69fa      	ldr	r2, [r7, #28]
 80095e2:	e841 2300 	strex	r3, r2, [r1]
 80095e6:	617b      	str	r3, [r7, #20]
   return(result);
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d1e4      	bne.n	80095b8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095ee:	e009      	b.n	8009604 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	8b1b      	ldrh	r3, [r3, #24]
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f042 0208 	orr.w	r2, r2, #8
 8009600:	b292      	uxth	r2, r2
 8009602:	831a      	strh	r2, [r3, #24]
}
 8009604:	bf00      	nop
 8009606:	37b8      	adds	r7, #184	@ 0xb8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	40008000 	.word	0x40008000
 8009610:	08008d89 	.word	0x08008d89

08009614 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800965e:	2b01      	cmp	r3, #1
 8009660:	d101      	bne.n	8009666 <HAL_UARTEx_DisableFifoMode+0x16>
 8009662:	2302      	movs	r3, #2
 8009664:	e027      	b.n	80096b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2201      	movs	r2, #1
 800966a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2224      	movs	r2, #36	@ 0x24
 8009672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f022 0201 	bic.w	r2, r2, #1
 800968c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009694:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2220      	movs	r2, #32
 80096a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d101      	bne.n	80096da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096d6:	2302      	movs	r3, #2
 80096d8:	e02d      	b.n	8009736 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2224      	movs	r2, #36	@ 0x24
 80096e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0201 	bic.w	r2, r2, #1
 8009700:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f850 	bl	80097bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2220      	movs	r2, #32
 8009728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b084      	sub	sp, #16
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800974e:	2b01      	cmp	r3, #1
 8009750:	d101      	bne.n	8009756 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009752:	2302      	movs	r3, #2
 8009754:	e02d      	b.n	80097b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2201      	movs	r2, #1
 800975a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2224      	movs	r2, #36	@ 0x24
 8009762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f022 0201 	bic.w	r2, r2, #1
 800977c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	430a      	orrs	r2, r1
 8009790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f812 	bl	80097bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2220      	movs	r2, #32
 80097a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d108      	bne.n	80097de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097dc:	e031      	b.n	8009842 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097de:	2308      	movs	r3, #8
 80097e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097e2:	2308      	movs	r3, #8
 80097e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	0e5b      	lsrs	r3, r3, #25
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	f003 0307 	and.w	r3, r3, #7
 80097f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	689b      	ldr	r3, [r3, #8]
 80097fc:	0f5b      	lsrs	r3, r3, #29
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	f003 0307 	and.w	r3, r3, #7
 8009804:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	7b3a      	ldrb	r2, [r7, #12]
 800980a:	4911      	ldr	r1, [pc, #68]	@ (8009850 <UARTEx_SetNbDataToProcess+0x94>)
 800980c:	5c8a      	ldrb	r2, [r1, r2]
 800980e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009812:	7b3a      	ldrb	r2, [r7, #12]
 8009814:	490f      	ldr	r1, [pc, #60]	@ (8009854 <UARTEx_SetNbDataToProcess+0x98>)
 8009816:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009818:	fb93 f3f2 	sdiv	r3, r3, r2
 800981c:	b29a      	uxth	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009824:	7bfb      	ldrb	r3, [r7, #15]
 8009826:	7b7a      	ldrb	r2, [r7, #13]
 8009828:	4909      	ldr	r1, [pc, #36]	@ (8009850 <UARTEx_SetNbDataToProcess+0x94>)
 800982a:	5c8a      	ldrb	r2, [r1, r2]
 800982c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009830:	7b7a      	ldrb	r2, [r7, #13]
 8009832:	4908      	ldr	r1, [pc, #32]	@ (8009854 <UARTEx_SetNbDataToProcess+0x98>)
 8009834:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009836:	fb93 f3f2 	sdiv	r3, r3, r2
 800983a:	b29a      	uxth	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009842:	bf00      	nop
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	0800da2c 	.word	0x0800da2c
 8009854:	0800da34 	.word	0x0800da34

08009858 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009858:	b084      	sub	sp, #16
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
 8009862:	f107 001c 	add.w	r0, r7, #28
 8009866:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f001 fa1c 	bl	800acb4 <USB_CoreReset>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800988a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	639a      	str	r2, [r3, #56]	@ 0x38
 8009892:	e005      	b.n	80098a0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009898:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80098a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098ac:	b004      	add	sp, #16
 80098ae:	4770      	bx	lr

080098b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	4613      	mov	r3, r2
 80098bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80098be:	79fb      	ldrb	r3, [r7, #7]
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d165      	bne.n	8009990 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	4a3e      	ldr	r2, [pc, #248]	@ (80099c0 <USB_SetTurnaroundTime+0x110>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d906      	bls.n	80098da <USB_SetTurnaroundTime+0x2a>
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	4a3d      	ldr	r2, [pc, #244]	@ (80099c4 <USB_SetTurnaroundTime+0x114>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d202      	bcs.n	80098da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80098d4:	230f      	movs	r3, #15
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	e05c      	b.n	8009994 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	4a39      	ldr	r2, [pc, #228]	@ (80099c4 <USB_SetTurnaroundTime+0x114>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d306      	bcc.n	80098f0 <USB_SetTurnaroundTime+0x40>
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	4a38      	ldr	r2, [pc, #224]	@ (80099c8 <USB_SetTurnaroundTime+0x118>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d202      	bcs.n	80098f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80098ea:	230e      	movs	r3, #14
 80098ec:	617b      	str	r3, [r7, #20]
 80098ee:	e051      	b.n	8009994 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	4a35      	ldr	r2, [pc, #212]	@ (80099c8 <USB_SetTurnaroundTime+0x118>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d306      	bcc.n	8009906 <USB_SetTurnaroundTime+0x56>
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	4a34      	ldr	r2, [pc, #208]	@ (80099cc <USB_SetTurnaroundTime+0x11c>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d202      	bcs.n	8009906 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009900:	230d      	movs	r3, #13
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	e046      	b.n	8009994 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	4a30      	ldr	r2, [pc, #192]	@ (80099cc <USB_SetTurnaroundTime+0x11c>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d306      	bcc.n	800991c <USB_SetTurnaroundTime+0x6c>
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	4a2f      	ldr	r2, [pc, #188]	@ (80099d0 <USB_SetTurnaroundTime+0x120>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d802      	bhi.n	800991c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009916:	230c      	movs	r3, #12
 8009918:	617b      	str	r3, [r7, #20]
 800991a:	e03b      	b.n	8009994 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	4a2c      	ldr	r2, [pc, #176]	@ (80099d0 <USB_SetTurnaroundTime+0x120>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d906      	bls.n	8009932 <USB_SetTurnaroundTime+0x82>
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	4a2b      	ldr	r2, [pc, #172]	@ (80099d4 <USB_SetTurnaroundTime+0x124>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d802      	bhi.n	8009932 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800992c:	230b      	movs	r3, #11
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	e030      	b.n	8009994 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	4a27      	ldr	r2, [pc, #156]	@ (80099d4 <USB_SetTurnaroundTime+0x124>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d906      	bls.n	8009948 <USB_SetTurnaroundTime+0x98>
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	4a26      	ldr	r2, [pc, #152]	@ (80099d8 <USB_SetTurnaroundTime+0x128>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d802      	bhi.n	8009948 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009942:	230a      	movs	r3, #10
 8009944:	617b      	str	r3, [r7, #20]
 8009946:	e025      	b.n	8009994 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	4a23      	ldr	r2, [pc, #140]	@ (80099d8 <USB_SetTurnaroundTime+0x128>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d906      	bls.n	800995e <USB_SetTurnaroundTime+0xae>
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	4a22      	ldr	r2, [pc, #136]	@ (80099dc <USB_SetTurnaroundTime+0x12c>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d202      	bcs.n	800995e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009958:	2309      	movs	r3, #9
 800995a:	617b      	str	r3, [r7, #20]
 800995c:	e01a      	b.n	8009994 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	4a1e      	ldr	r2, [pc, #120]	@ (80099dc <USB_SetTurnaroundTime+0x12c>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d306      	bcc.n	8009974 <USB_SetTurnaroundTime+0xc4>
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	4a1d      	ldr	r2, [pc, #116]	@ (80099e0 <USB_SetTurnaroundTime+0x130>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d802      	bhi.n	8009974 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800996e:	2308      	movs	r3, #8
 8009970:	617b      	str	r3, [r7, #20]
 8009972:	e00f      	b.n	8009994 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	4a1a      	ldr	r2, [pc, #104]	@ (80099e0 <USB_SetTurnaroundTime+0x130>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d906      	bls.n	800998a <USB_SetTurnaroundTime+0xda>
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	4a19      	ldr	r2, [pc, #100]	@ (80099e4 <USB_SetTurnaroundTime+0x134>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d202      	bcs.n	800998a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009984:	2307      	movs	r3, #7
 8009986:	617b      	str	r3, [r7, #20]
 8009988:	e004      	b.n	8009994 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800998a:	2306      	movs	r3, #6
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	e001      	b.n	8009994 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009990:	2309      	movs	r3, #9
 8009992:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	68da      	ldr	r2, [r3, #12]
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	029b      	lsls	r3, r3, #10
 80099a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80099ac:	431a      	orrs	r2, r3
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	371c      	adds	r7, #28
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr
 80099c0:	00d8acbf 	.word	0x00d8acbf
 80099c4:	00e4e1c0 	.word	0x00e4e1c0
 80099c8:	00f42400 	.word	0x00f42400
 80099cc:	01067380 	.word	0x01067380
 80099d0:	011a499f 	.word	0x011a499f
 80099d4:	01312cff 	.word	0x01312cff
 80099d8:	014ca43f 	.word	0x014ca43f
 80099dc:	016e3600 	.word	0x016e3600
 80099e0:	01a6ab1f 	.word	0x01a6ab1f
 80099e4:	01e84800 	.word	0x01e84800

080099e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	f043 0201 	orr.w	r2, r3, #1
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b083      	sub	sp, #12
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f023 0201 	bic.w	r2, r3, #1
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	460b      	mov	r3, r1
 8009a36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d115      	bne.n	8009a7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	f7f7 fff2 	bl	8001a44 <HAL_Delay>
      ms++;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	3301      	adds	r3, #1
 8009a64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 f8ab 	bl	800abc2 <USB_GetMode>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d01e      	beq.n	8009ab0 <USB_SetCurrentMode+0x84>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2b31      	cmp	r3, #49	@ 0x31
 8009a76:	d9f0      	bls.n	8009a5a <USB_SetCurrentMode+0x2e>
 8009a78:	e01a      	b.n	8009ab0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d115      	bne.n	8009aac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a8c:	2001      	movs	r0, #1
 8009a8e:	f7f7 ffd9 	bl	8001a44 <HAL_Delay>
      ms++;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3301      	adds	r3, #1
 8009a96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 f892 	bl	800abc2 <USB_GetMode>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d005      	beq.n	8009ab0 <USB_SetCurrentMode+0x84>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2b31      	cmp	r3, #49	@ 0x31
 8009aa8:	d9f0      	bls.n	8009a8c <USB_SetCurrentMode+0x60>
 8009aaa:	e001      	b.n	8009ab0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009aac:	2301      	movs	r3, #1
 8009aae:	e005      	b.n	8009abc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2b32      	cmp	r3, #50	@ 0x32
 8009ab4:	d101      	bne.n	8009aba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e000      	b.n	8009abc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b086      	sub	sp, #24
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009ade:	2300      	movs	r3, #0
 8009ae0:	613b      	str	r3, [r7, #16]
 8009ae2:	e009      	b.n	8009af8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	3340      	adds	r3, #64	@ 0x40
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	2200      	movs	r2, #0
 8009af0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	3301      	adds	r3, #1
 8009af6:	613b      	str	r3, [r7, #16]
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	2b0e      	cmp	r3, #14
 8009afc:	d9f2      	bls.n	8009ae4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009afe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d11c      	bne.n	8009b3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b12:	f043 0302 	orr.w	r3, r3, #2
 8009b16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b1c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	e005      	b.n	8009b4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b42:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009b50:	461a      	mov	r2, r3
 8009b52:	2300      	movs	r3, #0
 8009b54:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b56:	2103      	movs	r1, #3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f959 	bl	8009e10 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b5e:	2110      	movs	r1, #16
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f8f1 	bl	8009d48 <USB_FlushTxFifo>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d001      	beq.n	8009b70 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f91d 	bl	8009db0 <USB_FlushRxFifo>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d001      	beq.n	8009b80 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b86:	461a      	mov	r2, r3
 8009b88:	2300      	movs	r3, #0
 8009b8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b92:	461a      	mov	r2, r3
 8009b94:	2300      	movs	r3, #0
 8009b96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	613b      	str	r3, [r7, #16]
 8009ba8:	e043      	b.n	8009c32 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bc0:	d118      	bne.n	8009bf4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d10a      	bne.n	8009bde <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	015a      	lsls	r2, r3, #5
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	4413      	add	r3, r2
 8009bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009bda:	6013      	str	r3, [r2, #0]
 8009bdc:	e013      	b.n	8009c06 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bea:	461a      	mov	r2, r3
 8009bec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009bf0:	6013      	str	r3, [r2, #0]
 8009bf2:	e008      	b.n	8009c06 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	015a      	lsls	r2, r3, #5
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c00:	461a      	mov	r2, r3
 8009c02:	2300      	movs	r3, #0
 8009c04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c12:	461a      	mov	r2, r3
 8009c14:	2300      	movs	r3, #0
 8009c16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c24:	461a      	mov	r2, r3
 8009c26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009c2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	613b      	str	r3, [r7, #16]
 8009c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d3b7      	bcc.n	8009baa <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	613b      	str	r3, [r7, #16]
 8009c3e:	e043      	b.n	8009cc8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c56:	d118      	bne.n	8009c8a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d10a      	bne.n	8009c74 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	e013      	b.n	8009c9c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	015a      	lsls	r2, r3, #5
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c80:	461a      	mov	r2, r3
 8009c82:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c86:	6013      	str	r3, [r2, #0]
 8009c88:	e008      	b.n	8009c9c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	015a      	lsls	r2, r3, #5
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c96:	461a      	mov	r2, r3
 8009c98:	2300      	movs	r3, #0
 8009c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	015a      	lsls	r2, r3, #5
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca8:	461a      	mov	r2, r3
 8009caa:	2300      	movs	r3, #0
 8009cac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cba:	461a      	mov	r2, r3
 8009cbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009cc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	613b      	str	r3, [r7, #16]
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d3b7      	bcc.n	8009c40 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009cde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ce2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009cf0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	f043 0210 	orr.w	r2, r3, #16
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	699a      	ldr	r2, [r3, #24]
 8009d02:	4b10      	ldr	r3, [pc, #64]	@ (8009d44 <USB_DevInit+0x280>)
 8009d04:	4313      	orrs	r3, r2
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d005      	beq.n	8009d1c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	f043 0208 	orr.w	r2, r3, #8
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d107      	bne.n	8009d32 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d2a:	f043 0304 	orr.w	r3, r3, #4
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d3e:	b004      	add	sp, #16
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	803c3800 	.word	0x803c3800

08009d48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	4a13      	ldr	r2, [pc, #76]	@ (8009dac <USB_FlushTxFifo+0x64>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d901      	bls.n	8009d68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e01b      	b.n	8009da0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	daf2      	bge.n	8009d56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009d70:	2300      	movs	r3, #0
 8009d72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	019b      	lsls	r3, r3, #6
 8009d78:	f043 0220 	orr.w	r2, r3, #32
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	3301      	adds	r3, #1
 8009d84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	4a08      	ldr	r2, [pc, #32]	@ (8009dac <USB_FlushTxFifo+0x64>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d901      	bls.n	8009d92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e006      	b.n	8009da0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	f003 0320 	and.w	r3, r3, #32
 8009d9a:	2b20      	cmp	r3, #32
 8009d9c:	d0f0      	beq.n	8009d80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3714      	adds	r7, #20
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr
 8009dac:	00030d40 	.word	0x00030d40

08009db0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009db8:	2300      	movs	r3, #0
 8009dba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	4a11      	ldr	r2, [pc, #68]	@ (8009e0c <USB_FlushRxFifo+0x5c>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d901      	bls.n	8009dce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e018      	b.n	8009e00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	daf2      	bge.n	8009dbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2210      	movs	r2, #16
 8009dde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	3301      	adds	r3, #1
 8009de4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	4a08      	ldr	r2, [pc, #32]	@ (8009e0c <USB_FlushRxFifo+0x5c>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d901      	bls.n	8009df2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e006      	b.n	8009e00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	691b      	ldr	r3, [r3, #16]
 8009df6:	f003 0310 	and.w	r3, r3, #16
 8009dfa:	2b10      	cmp	r3, #16
 8009dfc:	d0f0      	beq.n	8009de0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	00030d40 	.word	0x00030d40

08009e10 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b085      	sub	sp, #20
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	78fb      	ldrb	r3, [r7, #3]
 8009e2a:	68f9      	ldr	r1, [r7, #12]
 8009e2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e30:	4313      	orrs	r3, r2
 8009e32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b087      	sub	sp, #28
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	f003 0306 	and.w	r3, r3, #6
 8009e5a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d002      	beq.n	8009e68 <USB_GetDevSpeed+0x26>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b06      	cmp	r3, #6
 8009e66:	d102      	bne.n	8009e6e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e68:	2302      	movs	r3, #2
 8009e6a:	75fb      	strb	r3, [r7, #23]
 8009e6c:	e001      	b.n	8009e72 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8009e6e:	230f      	movs	r3, #15
 8009e70:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	371c      	adds	r7, #28
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d13a      	bne.n	8009f12 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ea2:	69da      	ldr	r2, [r3, #28]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 030f 	and.w	r3, r3, #15
 8009eac:	2101      	movs	r1, #1
 8009eae:	fa01 f303 	lsl.w	r3, r1, r3
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	68f9      	ldr	r1, [r7, #12]
 8009eb6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	015a      	lsls	r2, r3, #5
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d155      	bne.n	8009f80 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	791b      	ldrb	r3, [r3, #4]
 8009eee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ef0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	059b      	lsls	r3, r3, #22
 8009ef6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	68ba      	ldr	r2, [r7, #8]
 8009efc:	0151      	lsls	r1, r2, #5
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	440a      	add	r2, r1
 8009f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f0e:	6013      	str	r3, [r2, #0]
 8009f10:	e036      	b.n	8009f80 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f18:	69da      	ldr	r2, [r3, #28]
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	f003 030f 	and.w	r3, r3, #15
 8009f22:	2101      	movs	r1, #1
 8009f24:	fa01 f303 	lsl.w	r3, r1, r3
 8009f28:	041b      	lsls	r3, r3, #16
 8009f2a:	68f9      	ldr	r1, [r7, #12]
 8009f2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f30:	4313      	orrs	r3, r2
 8009f32:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d11a      	bne.n	8009f80 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	015a      	lsls	r2, r3, #5
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	4413      	add	r3, r2
 8009f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	791b      	ldrb	r3, [r3, #4]
 8009f64:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f66:	430b      	orrs	r3, r1
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	0151      	lsls	r1, r2, #5
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	440a      	add	r2, r1
 8009f72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009f76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f7e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
	...

08009f90 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	785b      	ldrb	r3, [r3, #1]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d161      	bne.n	800a070 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fc2:	d11f      	bne.n	800a004 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	0151      	lsls	r1, r2, #5
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	440a      	add	r2, r1
 8009fda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009fe2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	0151      	lsls	r1, r2, #5
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	440a      	add	r2, r1
 8009ffa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ffe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a002:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a00a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	f003 030f 	and.w	r3, r3, #15
 800a014:	2101      	movs	r1, #1
 800a016:	fa01 f303 	lsl.w	r3, r1, r3
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	43db      	mvns	r3, r3
 800a01e:	68f9      	ldr	r1, [r7, #12]
 800a020:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a024:	4013      	ands	r3, r2
 800a026:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a02e:	69da      	ldr	r2, [r3, #28]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	2101      	movs	r1, #1
 800a03a:	fa01 f303 	lsl.w	r3, r1, r3
 800a03e:	b29b      	uxth	r3, r3
 800a040:	43db      	mvns	r3, r3
 800a042:	68f9      	ldr	r1, [r7, #12]
 800a044:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a048:	4013      	ands	r3, r2
 800a04a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	015a      	lsls	r2, r3, #5
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4413      	add	r3, r2
 800a054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	0159      	lsls	r1, r3, #5
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	440b      	add	r3, r1
 800a062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a066:	4619      	mov	r1, r3
 800a068:	4b35      	ldr	r3, [pc, #212]	@ (800a140 <USB_DeactivateEndpoint+0x1b0>)
 800a06a:	4013      	ands	r3, r2
 800a06c:	600b      	str	r3, [r1, #0]
 800a06e:	e060      	b.n	800a132 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	015a      	lsls	r2, r3, #5
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	4413      	add	r3, r2
 800a078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a082:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a086:	d11f      	bne.n	800a0c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	015a      	lsls	r2, r3, #5
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	4413      	add	r3, r2
 800a090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	0151      	lsls	r1, r2, #5
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	440a      	add	r2, r1
 800a09e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a0a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	015a      	lsls	r2, r3, #5
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	4413      	add	r3, r2
 800a0b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	0151      	lsls	r1, r2, #5
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	440a      	add	r2, r1
 800a0be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a0c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	f003 030f 	and.w	r3, r3, #15
 800a0d8:	2101      	movs	r1, #1
 800a0da:	fa01 f303 	lsl.w	r3, r1, r3
 800a0de:	041b      	lsls	r3, r3, #16
 800a0e0:	43db      	mvns	r3, r3
 800a0e2:	68f9      	ldr	r1, [r7, #12]
 800a0e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0f2:	69da      	ldr	r2, [r3, #28]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	f003 030f 	and.w	r3, r3, #15
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a102:	041b      	lsls	r3, r3, #16
 800a104:	43db      	mvns	r3, r3
 800a106:	68f9      	ldr	r1, [r7, #12]
 800a108:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a10c:	4013      	ands	r3, r2
 800a10e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	4413      	add	r3, r2
 800a118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	0159      	lsls	r1, r3, #5
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	440b      	add	r3, r1
 800a126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a12a:	4619      	mov	r1, r3
 800a12c:	4b05      	ldr	r3, [pc, #20]	@ (800a144 <USB_DeactivateEndpoint+0x1b4>)
 800a12e:	4013      	ands	r3, r2
 800a130:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3714      	adds	r7, #20
 800a138:	46bd      	mov	sp, r7
 800a13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13e:	4770      	bx	lr
 800a140:	ec337800 	.word	0xec337800
 800a144:	eff37800 	.word	0xeff37800

0800a148 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	785b      	ldrb	r3, [r3, #1]
 800a160:	2b01      	cmp	r3, #1
 800a162:	f040 8128 	bne.w	800a3b6 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d132      	bne.n	800a1d4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	015a      	lsls	r2, r3, #5
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	4413      	add	r3, r2
 800a176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	693a      	ldr	r2, [r7, #16]
 800a17e:	0151      	lsls	r1, r2, #5
 800a180:	697a      	ldr	r2, [r7, #20]
 800a182:	440a      	add	r2, r1
 800a184:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a188:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a18c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	0151      	lsls	r1, r2, #5
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	440a      	add	r2, r1
 800a1a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	015a      	lsls	r2, r3, #5
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	0151      	lsls	r1, r2, #5
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	440a      	add	r2, r1
 800a1c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1cc:	0cdb      	lsrs	r3, r3, #19
 800a1ce:	04db      	lsls	r3, r3, #19
 800a1d0:	6113      	str	r3, [r2, #16]
 800a1d2:	e092      	b.n	800a2fa <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	0151      	lsls	r1, r2, #5
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	440a      	add	r2, r1
 800a1ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ee:	0cdb      	lsrs	r3, r3, #19
 800a1f0:	04db      	lsls	r3, r3, #19
 800a1f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	0151      	lsls	r1, r2, #5
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	440a      	add	r2, r1
 800a20a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a20e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a212:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a216:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d11a      	bne.n	800a254 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	691a      	ldr	r2, [r3, #16]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	429a      	cmp	r2, r3
 800a228:	d903      	bls.n	800a232 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	689a      	ldr	r2, [r3, #8]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	015a      	lsls	r2, r3, #5
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	4413      	add	r3, r2
 800a23a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	693a      	ldr	r2, [r7, #16]
 800a242:	0151      	lsls	r1, r2, #5
 800a244:	697a      	ldr	r2, [r7, #20]
 800a246:	440a      	add	r2, r1
 800a248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a24c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a250:	6113      	str	r3, [r2, #16]
 800a252:	e01b      	b.n	800a28c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a260:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	6919      	ldr	r1, [r3, #16]
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	440b      	add	r3, r1
 800a26c:	1e59      	subs	r1, r3, #1
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	fbb1 f3f3 	udiv	r3, r1, r3
 800a276:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a278:	4b8d      	ldr	r3, [pc, #564]	@ (800a4b0 <USB_EPStartXfer+0x368>)
 800a27a:	400b      	ands	r3, r1
 800a27c:	6939      	ldr	r1, [r7, #16]
 800a27e:	0148      	lsls	r0, r1, #5
 800a280:	6979      	ldr	r1, [r7, #20]
 800a282:	4401      	add	r1, r0
 800a284:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a288:	4313      	orrs	r3, r2
 800a28a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a298:	691a      	ldr	r2, [r3, #16]
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2a2:	6939      	ldr	r1, [r7, #16]
 800a2a4:	0148      	lsls	r0, r1, #5
 800a2a6:	6979      	ldr	r1, [r7, #20]
 800a2a8:	4401      	add	r1, r0
 800a2aa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	791b      	ldrb	r3, [r3, #4]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d11f      	bne.n	800a2fa <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	015a      	lsls	r2, r3, #5
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	4413      	add	r3, r2
 800a2c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	693a      	ldr	r2, [r7, #16]
 800a2ca:	0151      	lsls	r1, r2, #5
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	440a      	add	r2, r1
 800a2d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2d4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a2d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	0151      	lsls	r1, r2, #5
 800a2ec:	697a      	ldr	r2, [r7, #20]
 800a2ee:	440a      	add	r2, r1
 800a2f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a2f8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	015a      	lsls	r2, r3, #5
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	4413      	add	r3, r2
 800a302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	0151      	lsls	r1, r2, #5
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	440a      	add	r2, r1
 800a310:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a314:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a318:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	791b      	ldrb	r3, [r3, #4]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d015      	beq.n	800a34e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 8139 	beq.w	800a59e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	f003 030f 	and.w	r3, r3, #15
 800a33c:	2101      	movs	r1, #1
 800a33e:	fa01 f303 	lsl.w	r3, r1, r3
 800a342:	6979      	ldr	r1, [r7, #20]
 800a344:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a348:	4313      	orrs	r3, r2
 800a34a:	634b      	str	r3, [r1, #52]	@ 0x34
 800a34c:	e127      	b.n	800a59e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a354:	689b      	ldr	r3, [r3, #8]
 800a356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d110      	bne.n	800a380 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	015a      	lsls	r2, r3, #5
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	4413      	add	r3, r2
 800a366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	0151      	lsls	r1, r2, #5
 800a370:	697a      	ldr	r2, [r7, #20]
 800a372:	440a      	add	r2, r1
 800a374:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a378:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a37c:	6013      	str	r3, [r2, #0]
 800a37e:	e00f      	b.n	800a3a0 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	0151      	lsls	r1, r2, #5
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	440a      	add	r2, r1
 800a396:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a39a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a39e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	68d9      	ldr	r1, [r3, #12]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	781a      	ldrb	r2, [r3, #0]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f9a6 	bl	800a700 <USB_WritePacket>
 800a3b4:	e0f3      	b.n	800a59e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	015a      	lsls	r2, r3, #5
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	4413      	add	r3, r2
 800a3be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	0151      	lsls	r1, r2, #5
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	440a      	add	r2, r1
 800a3cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3d0:	0cdb      	lsrs	r3, r3, #19
 800a3d2:	04db      	lsls	r3, r3, #19
 800a3d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	015a      	lsls	r2, r3, #5
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	4413      	add	r3, r2
 800a3de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	0151      	lsls	r1, r2, #5
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	440a      	add	r2, r1
 800a3ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a3f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a3f8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d12f      	bne.n	800a460 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d003      	beq.n	800a410 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	689a      	ldr	r2, [r3, #8]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	689a      	ldr	r2, [r3, #8]
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	015a      	lsls	r2, r3, #5
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	4413      	add	r3, r2
 800a420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a424:	691a      	ldr	r2, [r3, #16]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a42e:	6939      	ldr	r1, [r7, #16]
 800a430:	0148      	lsls	r0, r1, #5
 800a432:	6979      	ldr	r1, [r7, #20]
 800a434:	4401      	add	r1, r0
 800a436:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a43a:	4313      	orrs	r3, r2
 800a43c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	015a      	lsls	r2, r3, #5
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	4413      	add	r3, r2
 800a446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	693a      	ldr	r2, [r7, #16]
 800a44e:	0151      	lsls	r1, r2, #5
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	440a      	add	r2, r1
 800a454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a458:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a45c:	6113      	str	r3, [r2, #16]
 800a45e:	e061      	b.n	800a524 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d125      	bne.n	800a4b4 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a474:	691a      	ldr	r2, [r3, #16]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a47e:	6939      	ldr	r1, [r7, #16]
 800a480:	0148      	lsls	r0, r1, #5
 800a482:	6979      	ldr	r1, [r7, #20]
 800a484:	4401      	add	r1, r0
 800a486:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a48a:	4313      	orrs	r3, r2
 800a48c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	0151      	lsls	r1, r2, #5
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	440a      	add	r2, r1
 800a4a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4ac:	6113      	str	r3, [r2, #16]
 800a4ae:	e039      	b.n	800a524 <USB_EPStartXfer+0x3dc>
 800a4b0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	691a      	ldr	r2, [r3, #16]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	4413      	add	r3, r2
 800a4be:	1e5a      	subs	r2, r3, #1
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c8:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	89fa      	ldrh	r2, [r7, #14]
 800a4d0:	fb03 f202 	mul.w	r2, r3, r2
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	015a      	lsls	r2, r3, #5
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	4413      	add	r3, r2
 800a4e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4e4:	691a      	ldr	r2, [r3, #16]
 800a4e6:	89fb      	ldrh	r3, [r7, #14]
 800a4e8:	04d9      	lsls	r1, r3, #19
 800a4ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a5a8 <USB_EPStartXfer+0x460>)
 800a4ec:	400b      	ands	r3, r1
 800a4ee:	6939      	ldr	r1, [r7, #16]
 800a4f0:	0148      	lsls	r0, r1, #5
 800a4f2:	6979      	ldr	r1, [r7, #20]
 800a4f4:	4401      	add	r1, r0
 800a4f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	015a      	lsls	r2, r3, #5
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	4413      	add	r3, r2
 800a506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a50a:	691a      	ldr	r2, [r3, #16]
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	6a1b      	ldr	r3, [r3, #32]
 800a510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a514:	6939      	ldr	r1, [r7, #16]
 800a516:	0148      	lsls	r0, r1, #5
 800a518:	6979      	ldr	r1, [r7, #20]
 800a51a:	4401      	add	r1, r0
 800a51c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a520:	4313      	orrs	r3, r2
 800a522:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	791b      	ldrb	r3, [r3, #4]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d128      	bne.n	800a57e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d110      	bne.n	800a55e <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	693a      	ldr	r2, [r7, #16]
 800a54c:	0151      	lsls	r1, r2, #5
 800a54e:	697a      	ldr	r2, [r7, #20]
 800a550:	440a      	add	r2, r1
 800a552:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a556:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	e00f      	b.n	800a57e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	015a      	lsls	r2, r3, #5
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	4413      	add	r3, r2
 800a566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	0151      	lsls	r1, r2, #5
 800a570:	697a      	ldr	r2, [r7, #20]
 800a572:	440a      	add	r2, r1
 800a574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a57c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	015a      	lsls	r2, r3, #5
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	4413      	add	r3, r2
 800a586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	693a      	ldr	r2, [r7, #16]
 800a58e:	0151      	lsls	r1, r2, #5
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	440a      	add	r2, r1
 800a594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a598:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a59c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	1ff80000 	.word	0x1ff80000

0800a5ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	785b      	ldrb	r3, [r3, #1]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d14a      	bne.n	800a660 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	015a      	lsls	r2, r3, #5
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5e2:	f040 8086 	bne.w	800a6f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	7812      	ldrb	r2, [r2, #0]
 800a5fa:	0151      	lsls	r1, r2, #5
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	440a      	add	r2, r1
 800a600:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a604:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a608:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	7812      	ldrb	r2, [r2, #0]
 800a61e:	0151      	lsls	r1, r2, #5
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	440a      	add	r2, r1
 800a624:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a628:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a62c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3301      	adds	r3, #1
 800a632:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d902      	bls.n	800a644 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	75fb      	strb	r3, [r7, #23]
          break;
 800a642:	e056      	b.n	800a6f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	015a      	lsls	r2, r3, #5
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	4413      	add	r3, r2
 800a64e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a658:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a65c:	d0e7      	beq.n	800a62e <USB_EPStopXfer+0x82>
 800a65e:	e048      	b.n	800a6f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	4413      	add	r3, r2
 800a66a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a674:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a678:	d13b      	bne.n	800a6f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	015a      	lsls	r2, r3, #5
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	4413      	add	r3, r2
 800a684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	7812      	ldrb	r2, [r2, #0]
 800a68e:	0151      	lsls	r1, r2, #5
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	440a      	add	r2, r1
 800a694:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a698:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a69c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	7812      	ldrb	r2, [r2, #0]
 800a6b2:	0151      	lsls	r1, r2, #5
 800a6b4:	693a      	ldr	r2, [r7, #16]
 800a6b6:	440a      	add	r2, r1
 800a6b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d902      	bls.n	800a6d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	75fb      	strb	r3, [r7, #23]
          break;
 800a6d6:	e00c      	b.n	800a6f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	015a      	lsls	r2, r3, #5
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6f0:	d0e7      	beq.n	800a6c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	371c      	adds	r7, #28
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a700:	b480      	push	{r7}
 800a702:	b089      	sub	sp, #36	@ 0x24
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	4611      	mov	r1, r2
 800a70c:	461a      	mov	r2, r3
 800a70e:	460b      	mov	r3, r1
 800a710:	71fb      	strb	r3, [r7, #7]
 800a712:	4613      	mov	r3, r2
 800a714:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a71e:	88bb      	ldrh	r3, [r7, #4]
 800a720:	3303      	adds	r3, #3
 800a722:	089b      	lsrs	r3, r3, #2
 800a724:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a726:	2300      	movs	r3, #0
 800a728:	61bb      	str	r3, [r7, #24]
 800a72a:	e018      	b.n	800a75e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a72c:	79fb      	ldrb	r3, [r7, #7]
 800a72e:	031a      	lsls	r2, r3, #12
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	4413      	add	r3, r2
 800a734:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a738:	461a      	mov	r2, r3
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	3301      	adds	r3, #1
 800a744:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	3301      	adds	r3, #1
 800a74a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	3301      	adds	r3, #1
 800a750:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	3301      	adds	r3, #1
 800a756:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	3301      	adds	r3, #1
 800a75c:	61bb      	str	r3, [r7, #24]
 800a75e:	69ba      	ldr	r2, [r7, #24]
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	429a      	cmp	r2, r3
 800a764:	d3e2      	bcc.n	800a72c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3724      	adds	r7, #36	@ 0x24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a774:	b480      	push	{r7}
 800a776:	b08b      	sub	sp, #44	@ 0x2c
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	4613      	mov	r3, r2
 800a780:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a78a:	88fb      	ldrh	r3, [r7, #6]
 800a78c:	089b      	lsrs	r3, r3, #2
 800a78e:	b29b      	uxth	r3, r3
 800a790:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a792:	88fb      	ldrh	r3, [r7, #6]
 800a794:	f003 0303 	and.w	r3, r3, #3
 800a798:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a79a:	2300      	movs	r3, #0
 800a79c:	623b      	str	r3, [r7, #32]
 800a79e:	e014      	b.n	800a7ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7aa:	601a      	str	r2, [r3, #0]
    pDest++;
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	623b      	str	r3, [r7, #32]
 800a7ca:	6a3a      	ldr	r2, [r7, #32]
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d3e6      	bcc.n	800a7a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a7d2:	8bfb      	ldrh	r3, [r7, #30]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d01e      	beq.n	800a816 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f107 0310 	add.w	r3, r7, #16
 800a7e8:	6812      	ldr	r2, [r2, #0]
 800a7ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	00db      	lsls	r3, r3, #3
 800a7f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fc:	701a      	strb	r2, [r3, #0]
      i++;
 800a7fe:	6a3b      	ldr	r3, [r7, #32]
 800a800:	3301      	adds	r3, #1
 800a802:	623b      	str	r3, [r7, #32]
      pDest++;
 800a804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a806:	3301      	adds	r3, #1
 800a808:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a80a:	8bfb      	ldrh	r3, [r7, #30]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a810:	8bfb      	ldrh	r3, [r7, #30]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1ea      	bne.n	800a7ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a818:	4618      	mov	r0, r3
 800a81a:	372c      	adds	r7, #44	@ 0x2c
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	785b      	ldrb	r3, [r3, #1]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d12c      	bne.n	800a89a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	015a      	lsls	r2, r3, #5
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4413      	add	r3, r2
 800a848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	db12      	blt.n	800a878 <USB_EPSetStall+0x54>
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00f      	beq.n	800a878 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	0151      	lsls	r1, r2, #5
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	440a      	add	r2, r1
 800a86e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a872:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a876:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	0151      	lsls	r1, r2, #5
 800a88a:	68fa      	ldr	r2, [r7, #12]
 800a88c:	440a      	add	r2, r1
 800a88e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a892:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	e02b      	b.n	800a8f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	db12      	blt.n	800a8d2 <USB_EPSetStall+0xae>
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d00f      	beq.n	800a8d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	015a      	lsls	r2, r3, #5
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	0151      	lsls	r1, r2, #5
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	440a      	add	r2, r1
 800a8c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a8d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	015a      	lsls	r2, r3, #5
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	4413      	add	r3, r2
 800a8da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	0151      	lsls	r1, r2, #5
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	440a      	add	r2, r1
 800a8e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a8f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	785b      	ldrb	r3, [r3, #1]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d128      	bne.n	800a96e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	0151      	lsls	r1, r2, #5
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	440a      	add	r2, r1
 800a932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a936:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a93a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	791b      	ldrb	r3, [r3, #4]
 800a940:	2b03      	cmp	r3, #3
 800a942:	d003      	beq.n	800a94c <USB_EPClearStall+0x4c>
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	791b      	ldrb	r3, [r3, #4]
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d138      	bne.n	800a9be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	015a      	lsls	r2, r3, #5
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	4413      	add	r3, r2
 800a954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	0151      	lsls	r1, r2, #5
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	440a      	add	r2, r1
 800a962:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a966:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	e027      	b.n	800a9be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4413      	add	r3, r2
 800a976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	0151      	lsls	r1, r2, #5
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	440a      	add	r2, r1
 800a984:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a988:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a98c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	791b      	ldrb	r3, [r3, #4]
 800a992:	2b03      	cmp	r3, #3
 800a994:	d003      	beq.n	800a99e <USB_EPClearStall+0x9e>
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	791b      	ldrb	r3, [r3, #4]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d10f      	bne.n	800a9be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	015a      	lsls	r2, r3, #5
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	0151      	lsls	r1, r2, #5
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	440a      	add	r2, r1
 800a9b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a9bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68fa      	ldr	r2, [r7, #12]
 800a9e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9ea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a9ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	78fb      	ldrb	r3, [r7, #3]
 800a9fa:	011b      	lsls	r3, r3, #4
 800a9fc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800aa00:	68f9      	ldr	r1, [r7, #12]
 800aa02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa06:	4313      	orrs	r3, r2
 800aa08:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3714      	adds	r7, #20
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa32:	f023 0303 	bic.w	r3, r3, #3
 800aa36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa46:	f023 0302 	bic.w	r3, r3, #2
 800aa4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800aa74:	f023 0303 	bic.w	r3, r3, #3
 800aa78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa88:	f043 0302 	orr.w	r3, r3, #2
 800aa8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa8e:	2300      	movs	r3, #0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	4013      	ands	r3, r2
 800aab2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aab4:	68fb      	ldr	r3, [r7, #12]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b085      	sub	sp, #20
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aade:	69db      	ldr	r3, [r3, #28]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	4013      	ands	r3, r2
 800aae4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	0c1b      	lsrs	r3, r3, #16
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3714      	adds	r7, #20
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab12:	69db      	ldr	r3, [r3, #28]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	4013      	ands	r3, r2
 800ab18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	b29b      	uxth	r3, r3
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr

0800ab2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b085      	sub	sp, #20
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	460b      	mov	r3, r1
 800ab34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ab3a:	78fb      	ldrb	r3, [r7, #3]
 800ab3c:	015a      	lsls	r2, r3, #5
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	4413      	add	r3, r2
 800ab42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	4013      	ands	r3, r2
 800ab56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab58:	68bb      	ldr	r3, [r7, #8]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ab66:	b480      	push	{r7}
 800ab68:	b087      	sub	sp, #28
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ab8a:	78fb      	ldrb	r3, [r7, #3]
 800ab8c:	f003 030f 	and.w	r3, r3, #15
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	fa22 f303 	lsr.w	r3, r2, r3
 800ab96:	01db      	lsls	r3, r3, #7
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	693a      	ldr	r2, [r7, #16]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aba0:	78fb      	ldrb	r3, [r7, #3]
 800aba2:	015a      	lsls	r2, r3, #5
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	4013      	ands	r3, r2
 800abb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800abb4:	68bb      	ldr	r3, [r7, #8]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	371c      	adds	r7, #28
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	695b      	ldr	r3, [r3, #20]
 800abce:	f003 0301 	and.w	r3, r3, #1
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800abde:	b480      	push	{r7}
 800abe0:	b085      	sub	sp, #20
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abf8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800abfc:	f023 0307 	bic.w	r3, r3, #7
 800ac00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ac14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	333c      	adds	r3, #60	@ 0x3c
 800ac36:	3304      	adds	r3, #4
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	4a1c      	ldr	r2, [pc, #112]	@ (800acb0 <USB_EP0_OutStart+0x8c>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d90a      	bls.n	800ac5a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac54:	d101      	bne.n	800ac5a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	e024      	b.n	800aca4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac60:	461a      	mov	r2, r3
 800ac62:	2300      	movs	r3, #0
 800ac64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ac78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac80:	691b      	ldr	r3, [r3, #16]
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac88:	f043 0318 	orr.w	r3, r3, #24
 800ac8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac94:	691b      	ldr	r3, [r3, #16]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac9c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aca0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3714      	adds	r7, #20
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr
 800acb0:	4f54300a 	.word	0x4f54300a

0800acb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b085      	sub	sp, #20
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800acbc:	2300      	movs	r3, #0
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	3301      	adds	r3, #1
 800acc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	4a13      	ldr	r2, [pc, #76]	@ (800ad18 <USB_CoreReset+0x64>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d901      	bls.n	800acd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800acce:	2303      	movs	r3, #3
 800acd0:	e01b      	b.n	800ad0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	daf2      	bge.n	800acc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800acda:	2300      	movs	r3, #0
 800acdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	f043 0201 	orr.w	r2, r3, #1
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	3301      	adds	r3, #1
 800acee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	4a09      	ldr	r2, [pc, #36]	@ (800ad18 <USB_CoreReset+0x64>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d901      	bls.n	800acfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800acf8:	2303      	movs	r3, #3
 800acfa:	e006      	b.n	800ad0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d0f0      	beq.n	800acea <USB_CoreReset+0x36>

  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3714      	adds	r7, #20
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	00030d40 	.word	0x00030d40

0800ad1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	460b      	mov	r3, r1
 800ad26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad28:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ad2c:	f002 fdc6 	bl	800d8bc <USBD_static_malloc>
 800ad30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d109      	bne.n	800ad4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	32b0      	adds	r2, #176	@ 0xb0
 800ad42:	2100      	movs	r1, #0
 800ad44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ad48:	2302      	movs	r3, #2
 800ad4a:	e0d4      	b.n	800aef6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ad4c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ad50:	2100      	movs	r1, #0
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f002 fdd0 	bl	800d8f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	32b0      	adds	r2, #176	@ 0xb0
 800ad62:	68f9      	ldr	r1, [r7, #12]
 800ad64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	32b0      	adds	r2, #176	@ 0xb0
 800ad72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	7c1b      	ldrb	r3, [r3, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d138      	bne.n	800adf6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad84:	4b5e      	ldr	r3, [pc, #376]	@ (800af00 <USBD_CDC_Init+0x1e4>)
 800ad86:	7819      	ldrb	r1, [r3, #0]
 800ad88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f002 fb80 	bl	800d494 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad94:	4b5a      	ldr	r3, [pc, #360]	@ (800af00 <USBD_CDC_Init+0x1e4>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	f003 020f 	and.w	r2, r3, #15
 800ad9c:	6879      	ldr	r1, [r7, #4]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	4413      	add	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	440b      	add	r3, r1
 800ada8:	3324      	adds	r3, #36	@ 0x24
 800adaa:	2201      	movs	r2, #1
 800adac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800adae:	4b55      	ldr	r3, [pc, #340]	@ (800af04 <USBD_CDC_Init+0x1e8>)
 800adb0:	7819      	ldrb	r1, [r3, #0]
 800adb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adb6:	2202      	movs	r2, #2
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f002 fb6b 	bl	800d494 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800adbe:	4b51      	ldr	r3, [pc, #324]	@ (800af04 <USBD_CDC_Init+0x1e8>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	f003 020f 	and.w	r2, r3, #15
 800adc6:	6879      	ldr	r1, [r7, #4]
 800adc8:	4613      	mov	r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	4413      	add	r3, r2
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	440b      	add	r3, r1
 800add2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800add6:	2201      	movs	r2, #1
 800add8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800adda:	4b4b      	ldr	r3, [pc, #300]	@ (800af08 <USBD_CDC_Init+0x1ec>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	f003 020f 	and.w	r2, r3, #15
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	4613      	mov	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	440b      	add	r3, r1
 800adee:	3326      	adds	r3, #38	@ 0x26
 800adf0:	2210      	movs	r2, #16
 800adf2:	801a      	strh	r2, [r3, #0]
 800adf4:	e035      	b.n	800ae62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800adf6:	4b42      	ldr	r3, [pc, #264]	@ (800af00 <USBD_CDC_Init+0x1e4>)
 800adf8:	7819      	ldrb	r1, [r3, #0]
 800adfa:	2340      	movs	r3, #64	@ 0x40
 800adfc:	2202      	movs	r2, #2
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f002 fb48 	bl	800d494 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ae04:	4b3e      	ldr	r3, [pc, #248]	@ (800af00 <USBD_CDC_Init+0x1e4>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	f003 020f 	and.w	r2, r3, #15
 800ae0c:	6879      	ldr	r1, [r7, #4]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	4413      	add	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	440b      	add	r3, r1
 800ae18:	3324      	adds	r3, #36	@ 0x24
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ae1e:	4b39      	ldr	r3, [pc, #228]	@ (800af04 <USBD_CDC_Init+0x1e8>)
 800ae20:	7819      	ldrb	r1, [r3, #0]
 800ae22:	2340      	movs	r3, #64	@ 0x40
 800ae24:	2202      	movs	r2, #2
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f002 fb34 	bl	800d494 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ae2c:	4b35      	ldr	r3, [pc, #212]	@ (800af04 <USBD_CDC_Init+0x1e8>)
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	f003 020f 	and.w	r2, r3, #15
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	4613      	mov	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	440b      	add	r3, r1
 800ae40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae44:	2201      	movs	r2, #1
 800ae46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ae48:	4b2f      	ldr	r3, [pc, #188]	@ (800af08 <USBD_CDC_Init+0x1ec>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	f003 020f 	and.w	r2, r3, #15
 800ae50:	6879      	ldr	r1, [r7, #4]
 800ae52:	4613      	mov	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	440b      	add	r3, r1
 800ae5c:	3326      	adds	r3, #38	@ 0x26
 800ae5e:	2210      	movs	r2, #16
 800ae60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae62:	4b29      	ldr	r3, [pc, #164]	@ (800af08 <USBD_CDC_Init+0x1ec>)
 800ae64:	7819      	ldrb	r1, [r3, #0]
 800ae66:	2308      	movs	r3, #8
 800ae68:	2203      	movs	r2, #3
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f002 fb12 	bl	800d494 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ae70:	4b25      	ldr	r3, [pc, #148]	@ (800af08 <USBD_CDC_Init+0x1ec>)
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	f003 020f 	and.w	r2, r3, #15
 800ae78:	6879      	ldr	r1, [r7, #4]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	4413      	add	r3, r2
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	440b      	add	r3, r1
 800ae84:	3324      	adds	r3, #36	@ 0x24
 800ae86:	2201      	movs	r2, #1
 800ae88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	33b0      	adds	r3, #176	@ 0xb0
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800aec0:	2302      	movs	r3, #2
 800aec2:	e018      	b.n	800aef6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	7c1b      	ldrb	r3, [r3, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10a      	bne.n	800aee2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aecc:	4b0d      	ldr	r3, [pc, #52]	@ (800af04 <USBD_CDC_Init+0x1e8>)
 800aece:	7819      	ldrb	r1, [r3, #0]
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aed6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f002 fc54 	bl	800d788 <USBD_LL_PrepareReceive>
 800aee0:	e008      	b.n	800aef4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aee2:	4b08      	ldr	r3, [pc, #32]	@ (800af04 <USBD_CDC_Init+0x1e8>)
 800aee4:	7819      	ldrb	r1, [r3, #0]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aeec:	2340      	movs	r3, #64	@ 0x40
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f002 fc4a 	bl	800d788 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	20000093 	.word	0x20000093
 800af04:	20000094 	.word	0x20000094
 800af08:	20000095 	.word	0x20000095

0800af0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800af18:	4b3a      	ldr	r3, [pc, #232]	@ (800b004 <USBD_CDC_DeInit+0xf8>)
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	4619      	mov	r1, r3
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f002 faf6 	bl	800d510 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800af24:	4b37      	ldr	r3, [pc, #220]	@ (800b004 <USBD_CDC_DeInit+0xf8>)
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	f003 020f 	and.w	r2, r3, #15
 800af2c:	6879      	ldr	r1, [r7, #4]
 800af2e:	4613      	mov	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	440b      	add	r3, r1
 800af38:	3324      	adds	r3, #36	@ 0x24
 800af3a:	2200      	movs	r2, #0
 800af3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800af3e:	4b32      	ldr	r3, [pc, #200]	@ (800b008 <USBD_CDC_DeInit+0xfc>)
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f002 fae3 	bl	800d510 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800af4a:	4b2f      	ldr	r3, [pc, #188]	@ (800b008 <USBD_CDC_DeInit+0xfc>)
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	f003 020f 	and.w	r2, r3, #15
 800af52:	6879      	ldr	r1, [r7, #4]
 800af54:	4613      	mov	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4413      	add	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	440b      	add	r3, r1
 800af5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800af62:	2200      	movs	r2, #0
 800af64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800af66:	4b29      	ldr	r3, [pc, #164]	@ (800b00c <USBD_CDC_DeInit+0x100>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f002 facf 	bl	800d510 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800af72:	4b26      	ldr	r3, [pc, #152]	@ (800b00c <USBD_CDC_DeInit+0x100>)
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	f003 020f 	and.w	r2, r3, #15
 800af7a:	6879      	ldr	r1, [r7, #4]
 800af7c:	4613      	mov	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4413      	add	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	440b      	add	r3, r1
 800af86:	3324      	adds	r3, #36	@ 0x24
 800af88:	2200      	movs	r2, #0
 800af8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800af8c:	4b1f      	ldr	r3, [pc, #124]	@ (800b00c <USBD_CDC_DeInit+0x100>)
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	f003 020f 	and.w	r2, r3, #15
 800af94:	6879      	ldr	r1, [r7, #4]
 800af96:	4613      	mov	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	4413      	add	r3, r2
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	440b      	add	r3, r1
 800afa0:	3326      	adds	r3, #38	@ 0x26
 800afa2:	2200      	movs	r2, #0
 800afa4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	32b0      	adds	r2, #176	@ 0xb0
 800afb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d01f      	beq.n	800aff8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	33b0      	adds	r3, #176	@ 0xb0
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	4413      	add	r3, r2
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	32b0      	adds	r2, #176	@ 0xb0
 800afd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afda:	4618      	mov	r0, r3
 800afdc:	f002 fc7c 	bl	800d8d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	32b0      	adds	r2, #176	@ 0xb0
 800afea:	2100      	movs	r1, #0
 800afec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	20000093 	.word	0x20000093
 800b008:	20000094 	.word	0x20000094
 800b00c:	20000095 	.word	0x20000095

0800b010 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	32b0      	adds	r2, #176	@ 0xb0
 800b024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b028:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b02a:	2300      	movs	r3, #0
 800b02c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b02e:	2300      	movs	r3, #0
 800b030:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d101      	bne.n	800b040 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b03c:	2303      	movs	r3, #3
 800b03e:	e0bf      	b.n	800b1c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d050      	beq.n	800b0ee <USBD_CDC_Setup+0xde>
 800b04c:	2b20      	cmp	r3, #32
 800b04e:	f040 80af 	bne.w	800b1b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	88db      	ldrh	r3, [r3, #6]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d03a      	beq.n	800b0d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	b25b      	sxtb	r3, r3
 800b060:	2b00      	cmp	r3, #0
 800b062:	da1b      	bge.n	800b09c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	33b0      	adds	r3, #176	@ 0xb0
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	683a      	ldr	r2, [r7, #0]
 800b078:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b07a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b07c:	683a      	ldr	r2, [r7, #0]
 800b07e:	88d2      	ldrh	r2, [r2, #6]
 800b080:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	88db      	ldrh	r3, [r3, #6]
 800b086:	2b07      	cmp	r3, #7
 800b088:	bf28      	it	cs
 800b08a:	2307      	movcs	r3, #7
 800b08c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	89fa      	ldrh	r2, [r7, #14]
 800b092:	4619      	mov	r1, r3
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f001 fd71 	bl	800cb7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b09a:	e090      	b.n	800b1be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	785a      	ldrb	r2, [r3, #1]
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	88db      	ldrh	r3, [r3, #6]
 800b0aa:	2b3f      	cmp	r3, #63	@ 0x3f
 800b0ac:	d803      	bhi.n	800b0b6 <USBD_CDC_Setup+0xa6>
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	88db      	ldrh	r3, [r3, #6]
 800b0b2:	b2da      	uxtb	r2, r3
 800b0b4:	e000      	b.n	800b0b8 <USBD_CDC_Setup+0xa8>
 800b0b6:	2240      	movs	r2, #64	@ 0x40
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b0be:	6939      	ldr	r1, [r7, #16]
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f001 fd83 	bl	800cbd4 <USBD_CtlPrepareRx>
      break;
 800b0ce:	e076      	b.n	800b1be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	33b0      	adds	r3, #176	@ 0xb0
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	683a      	ldr	r2, [r7, #0]
 800b0e4:	7850      	ldrb	r0, [r2, #1]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	4798      	blx	r3
      break;
 800b0ec:	e067      	b.n	800b1be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	785b      	ldrb	r3, [r3, #1]
 800b0f2:	2b0b      	cmp	r3, #11
 800b0f4:	d851      	bhi.n	800b19a <USBD_CDC_Setup+0x18a>
 800b0f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0fc <USBD_CDC_Setup+0xec>)
 800b0f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fc:	0800b12d 	.word	0x0800b12d
 800b100:	0800b1a9 	.word	0x0800b1a9
 800b104:	0800b19b 	.word	0x0800b19b
 800b108:	0800b19b 	.word	0x0800b19b
 800b10c:	0800b19b 	.word	0x0800b19b
 800b110:	0800b19b 	.word	0x0800b19b
 800b114:	0800b19b 	.word	0x0800b19b
 800b118:	0800b19b 	.word	0x0800b19b
 800b11c:	0800b19b 	.word	0x0800b19b
 800b120:	0800b19b 	.word	0x0800b19b
 800b124:	0800b157 	.word	0x0800b157
 800b128:	0800b181 	.word	0x0800b181
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b03      	cmp	r3, #3
 800b136:	d107      	bne.n	800b148 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b138:	f107 030a 	add.w	r3, r7, #10
 800b13c:	2202      	movs	r2, #2
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f001 fd1b 	bl	800cb7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b146:	e032      	b.n	800b1ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b148:	6839      	ldr	r1, [r7, #0]
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f001 fca5 	bl	800ca9a <USBD_CtlError>
            ret = USBD_FAIL;
 800b150:	2303      	movs	r3, #3
 800b152:	75fb      	strb	r3, [r7, #23]
          break;
 800b154:	e02b      	b.n	800b1ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	2b03      	cmp	r3, #3
 800b160:	d107      	bne.n	800b172 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b162:	f107 030d 	add.w	r3, r7, #13
 800b166:	2201      	movs	r2, #1
 800b168:	4619      	mov	r1, r3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f001 fd06 	bl	800cb7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b170:	e01d      	b.n	800b1ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f001 fc90 	bl	800ca9a <USBD_CtlError>
            ret = USBD_FAIL;
 800b17a:	2303      	movs	r3, #3
 800b17c:	75fb      	strb	r3, [r7, #23]
          break;
 800b17e:	e016      	b.n	800b1ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b186:	b2db      	uxtb	r3, r3
 800b188:	2b03      	cmp	r3, #3
 800b18a:	d00f      	beq.n	800b1ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b18c:	6839      	ldr	r1, [r7, #0]
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f001 fc83 	bl	800ca9a <USBD_CtlError>
            ret = USBD_FAIL;
 800b194:	2303      	movs	r3, #3
 800b196:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b198:	e008      	b.n	800b1ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f001 fc7c 	bl	800ca9a <USBD_CtlError>
          ret = USBD_FAIL;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	75fb      	strb	r3, [r7, #23]
          break;
 800b1a6:	e002      	b.n	800b1ae <USBD_CDC_Setup+0x19e>
          break;
 800b1a8:	bf00      	nop
 800b1aa:	e008      	b.n	800b1be <USBD_CDC_Setup+0x1ae>
          break;
 800b1ac:	bf00      	nop
      }
      break;
 800b1ae:	e006      	b.n	800b1be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b1b0:	6839      	ldr	r1, [r7, #0]
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f001 fc71 	bl	800ca9a <USBD_CtlError>
      ret = USBD_FAIL;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b1bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3718      	adds	r7, #24
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	32b0      	adds	r2, #176	@ 0xb0
 800b1e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b1ee:	2303      	movs	r3, #3
 800b1f0:	e065      	b.n	800b2be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	32b0      	adds	r2, #176	@ 0xb0
 800b1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b200:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b202:	78fb      	ldrb	r3, [r7, #3]
 800b204:	f003 020f 	and.w	r2, r3, #15
 800b208:	6879      	ldr	r1, [r7, #4]
 800b20a:	4613      	mov	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	4413      	add	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	440b      	add	r3, r1
 800b214:	3318      	adds	r3, #24
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d02f      	beq.n	800b27c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b21c:	78fb      	ldrb	r3, [r7, #3]
 800b21e:	f003 020f 	and.w	r2, r3, #15
 800b222:	6879      	ldr	r1, [r7, #4]
 800b224:	4613      	mov	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	440b      	add	r3, r1
 800b22e:	3318      	adds	r3, #24
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	78fb      	ldrb	r3, [r7, #3]
 800b234:	f003 010f 	and.w	r1, r3, #15
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	460b      	mov	r3, r1
 800b23c:	00db      	lsls	r3, r3, #3
 800b23e:	440b      	add	r3, r1
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4403      	add	r3, r0
 800b244:	3344      	adds	r3, #68	@ 0x44
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	fbb2 f1f3 	udiv	r1, r2, r3
 800b24c:	fb01 f303 	mul.w	r3, r1, r3
 800b250:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b252:	2b00      	cmp	r3, #0
 800b254:	d112      	bne.n	800b27c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b256:	78fb      	ldrb	r3, [r7, #3]
 800b258:	f003 020f 	and.w	r2, r3, #15
 800b25c:	6879      	ldr	r1, [r7, #4]
 800b25e:	4613      	mov	r3, r2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	4413      	add	r3, r2
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	440b      	add	r3, r1
 800b268:	3318      	adds	r3, #24
 800b26a:	2200      	movs	r2, #0
 800b26c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b26e:	78f9      	ldrb	r1, [r7, #3]
 800b270:	2300      	movs	r3, #0
 800b272:	2200      	movs	r2, #0
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f002 fa4f 	bl	800d718 <USBD_LL_Transmit>
 800b27a:	e01f      	b.n	800b2bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	2200      	movs	r2, #0
 800b280:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	33b0      	adds	r3, #176	@ 0xb0
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d010      	beq.n	800b2bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	33b0      	adds	r3, #176	@ 0xb0
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b2b8:	78fa      	ldrb	r2, [r7, #3]
 800b2ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3710      	adds	r7, #16
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	460b      	mov	r3, r1
 800b2d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	32b0      	adds	r2, #176	@ 0xb0
 800b2dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	32b0      	adds	r2, #176	@ 0xb0
 800b2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d101      	bne.n	800b2f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b2f4:	2303      	movs	r3, #3
 800b2f6:	e01a      	b.n	800b32e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b2f8:	78fb      	ldrb	r3, [r7, #3]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f002 fa7b 	bl	800d7f8 <USBD_LL_GetRxDataSize>
 800b302:	4602      	mov	r2, r0
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b310:	687a      	ldr	r2, [r7, #4]
 800b312:	33b0      	adds	r3, #176	@ 0xb0
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b328:	4611      	mov	r1, r2
 800b32a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b084      	sub	sp, #16
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	32b0      	adds	r2, #176	@ 0xb0
 800b348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b34c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b354:	2303      	movs	r3, #3
 800b356:	e024      	b.n	800b3a2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	33b0      	adds	r3, #176	@ 0xb0
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	4413      	add	r3, r2
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d019      	beq.n	800b3a0 <USBD_CDC_EP0_RxReady+0x6a>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b372:	2bff      	cmp	r3, #255	@ 0xff
 800b374:	d014      	beq.n	800b3a0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	33b0      	adds	r3, #176	@ 0xb0
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	4413      	add	r3, r2
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b38e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b396:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	22ff      	movs	r2, #255	@ 0xff
 800b39c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
	...

0800b3ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3b4:	2182      	movs	r1, #130	@ 0x82
 800b3b6:	4818      	ldr	r0, [pc, #96]	@ (800b418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b3b8:	f000 fd0f 	bl	800bdda <USBD_GetEpDesc>
 800b3bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3be:	2101      	movs	r1, #1
 800b3c0:	4815      	ldr	r0, [pc, #84]	@ (800b418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b3c2:	f000 fd0a 	bl	800bdda <USBD_GetEpDesc>
 800b3c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3c8:	2181      	movs	r1, #129	@ 0x81
 800b3ca:	4813      	ldr	r0, [pc, #76]	@ (800b418 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b3cc:	f000 fd05 	bl	800bdda <USBD_GetEpDesc>
 800b3d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d002      	beq.n	800b3de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	2210      	movs	r2, #16
 800b3dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d006      	beq.n	800b3f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3ec:	711a      	strb	r2, [r3, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d006      	beq.n	800b406 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b400:	711a      	strb	r2, [r3, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2243      	movs	r2, #67	@ 0x43
 800b40a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b40c:	4b02      	ldr	r3, [pc, #8]	@ (800b418 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3718      	adds	r7, #24
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
 800b416:	bf00      	nop
 800b418:	20000050 	.word	0x20000050

0800b41c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b424:	2182      	movs	r1, #130	@ 0x82
 800b426:	4818      	ldr	r0, [pc, #96]	@ (800b488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b428:	f000 fcd7 	bl	800bdda <USBD_GetEpDesc>
 800b42c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b42e:	2101      	movs	r1, #1
 800b430:	4815      	ldr	r0, [pc, #84]	@ (800b488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b432:	f000 fcd2 	bl	800bdda <USBD_GetEpDesc>
 800b436:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b438:	2181      	movs	r1, #129	@ 0x81
 800b43a:	4813      	ldr	r0, [pc, #76]	@ (800b488 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b43c:	f000 fccd 	bl	800bdda <USBD_GetEpDesc>
 800b440:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d002      	beq.n	800b44e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	2210      	movs	r2, #16
 800b44c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d006      	beq.n	800b462 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	2200      	movs	r2, #0
 800b458:	711a      	strb	r2, [r3, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f042 0202 	orr.w	r2, r2, #2
 800b460:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d006      	beq.n	800b476 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	711a      	strb	r2, [r3, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	f042 0202 	orr.w	r2, r2, #2
 800b474:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2243      	movs	r2, #67	@ 0x43
 800b47a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b47c:	4b02      	ldr	r3, [pc, #8]	@ (800b488 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3718      	adds	r7, #24
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	20000050 	.word	0x20000050

0800b48c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b086      	sub	sp, #24
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b494:	2182      	movs	r1, #130	@ 0x82
 800b496:	4818      	ldr	r0, [pc, #96]	@ (800b4f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b498:	f000 fc9f 	bl	800bdda <USBD_GetEpDesc>
 800b49c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b49e:	2101      	movs	r1, #1
 800b4a0:	4815      	ldr	r0, [pc, #84]	@ (800b4f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b4a2:	f000 fc9a 	bl	800bdda <USBD_GetEpDesc>
 800b4a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b4a8:	2181      	movs	r1, #129	@ 0x81
 800b4aa:	4813      	ldr	r0, [pc, #76]	@ (800b4f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b4ac:	f000 fc95 	bl	800bdda <USBD_GetEpDesc>
 800b4b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2210      	movs	r2, #16
 800b4bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d006      	beq.n	800b4d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4cc:	711a      	strb	r2, [r3, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d006      	beq.n	800b4e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4e0:	711a      	strb	r2, [r3, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2243      	movs	r2, #67	@ 0x43
 800b4ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b4ec:	4b02      	ldr	r3, [pc, #8]	@ (800b4f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000050 	.word	0x20000050

0800b4fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	220a      	movs	r2, #10
 800b508:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b50a:	4b03      	ldr	r3, [pc, #12]	@ (800b518 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	2000000c 	.word	0x2000000c

0800b51c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b52c:	2303      	movs	r3, #3
 800b52e:	e009      	b.n	800b544 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	33b0      	adds	r3, #176	@ 0xb0
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	4413      	add	r3, r2
 800b53e:	683a      	ldr	r2, [r7, #0]
 800b540:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b550:	b480      	push	{r7}
 800b552:	b087      	sub	sp, #28
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	32b0      	adds	r2, #176	@ 0xb0
 800b566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b56a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d101      	bne.n	800b576 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b572:	2303      	movs	r3, #3
 800b574:	e008      	b.n	800b588 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	371c      	adds	r7, #28
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	32b0      	adds	r2, #176	@ 0xb0
 800b5a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d101      	bne.n	800b5b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e004      	b.n	800b5c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3714      	adds	r7, #20
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
	...

0800b5d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	32b0      	adds	r2, #176	@ 0xb0
 800b5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	32b0      	adds	r2, #176	@ 0xb0
 800b5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d101      	bne.n	800b5fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e018      	b.n	800b630 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	7c1b      	ldrb	r3, [r3, #16]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10a      	bne.n	800b61c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b606:	4b0c      	ldr	r3, [pc, #48]	@ (800b638 <USBD_CDC_ReceivePacket+0x68>)
 800b608:	7819      	ldrb	r1, [r3, #0]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b610:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f002 f8b7 	bl	800d788 <USBD_LL_PrepareReceive>
 800b61a:	e008      	b.n	800b62e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b61c:	4b06      	ldr	r3, [pc, #24]	@ (800b638 <USBD_CDC_ReceivePacket+0x68>)
 800b61e:	7819      	ldrb	r1, [r3, #0]
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b626:	2340      	movs	r3, #64	@ 0x40
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f002 f8ad 	bl	800d788 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	20000094 	.word	0x20000094

0800b63c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	4613      	mov	r3, r2
 800b648:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b650:	2303      	movs	r3, #3
 800b652:	e01f      	b.n	800b694 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	79fa      	ldrb	r2, [r7, #7]
 800b686:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f001 fe85 	bl	800d398 <USBD_LL_Init>
 800b68e:	4603      	mov	r3, r0
 800b690:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b692:	7dfb      	ldrb	r3, [r7, #23]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3718      	adds	r7, #24
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d101      	bne.n	800b6b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	e025      	b.n	800b700 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	32ae      	adds	r2, #174	@ 0xae
 800b6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00f      	beq.n	800b6f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	32ae      	adds	r2, #174	@ 0xae
 800b6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e0:	f107 020e 	add.w	r2, r7, #14
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	4798      	blx	r3
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b6f6:	1c5a      	adds	r2, r3, #1
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f001 fe8d 	bl	800d430 <USBD_LL_Start>
 800b716:	4603      	mov	r3, r0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b728:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b084      	sub	sp, #16
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
 800b73e:	460b      	mov	r3, r1
 800b740:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b742:	2300      	movs	r3, #0
 800b744:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d009      	beq.n	800b764 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	78fa      	ldrb	r2, [r7, #3]
 800b75a:	4611      	mov	r1, r2
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	4798      	blx	r3
 800b760:	4603      	mov	r3, r0
 800b762:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b764:	7bfb      	ldrb	r3, [r7, #15]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b084      	sub	sp, #16
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
 800b776:	460b      	mov	r3, r1
 800b778:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	78fa      	ldrb	r2, [r7, #3]
 800b788:	4611      	mov	r1, r2
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	4798      	blx	r3
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b794:	2303      	movs	r3, #3
 800b796:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b798:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3710      	adds	r7, #16
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f001 f936 	bl	800ca26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7d6:	f003 031f 	and.w	r3, r3, #31
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d01a      	beq.n	800b814 <USBD_LL_SetupStage+0x72>
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d822      	bhi.n	800b828 <USBD_LL_SetupStage+0x86>
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <USBD_LL_SetupStage+0x4a>
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d00a      	beq.n	800b800 <USBD_LL_SetupStage+0x5e>
 800b7ea:	e01d      	b.n	800b828 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 fb63 	bl	800bec0 <USBD_StdDevReq>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b7fe:	e020      	b.n	800b842 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b806:	4619      	mov	r1, r3
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fbcb 	bl	800bfa4 <USBD_StdItfReq>
 800b80e:	4603      	mov	r3, r0
 800b810:	73fb      	strb	r3, [r7, #15]
      break;
 800b812:	e016      	b.n	800b842 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b81a:	4619      	mov	r1, r3
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 fc2d 	bl	800c07c <USBD_StdEPReq>
 800b822:	4603      	mov	r3, r0
 800b824:	73fb      	strb	r3, [r7, #15]
      break;
 800b826:	e00c      	b.n	800b842 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b82e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b832:	b2db      	uxtb	r3, r3
 800b834:	4619      	mov	r1, r3
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f001 fea0 	bl	800d57c <USBD_LL_StallEP>
 800b83c:	4603      	mov	r3, r0
 800b83e:	73fb      	strb	r3, [r7, #15]
      break;
 800b840:	bf00      	nop
  }

  return ret;
 800b842:	7bfb      	ldrb	r3, [r7, #15]
}
 800b844:	4618      	mov	r0, r3
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	460b      	mov	r3, r1
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b85e:	7afb      	ldrb	r3, [r7, #11]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d16e      	bne.n	800b942 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b86a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b872:	2b03      	cmp	r3, #3
 800b874:	f040 8098 	bne.w	800b9a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	689a      	ldr	r2, [r3, #8]
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	429a      	cmp	r2, r3
 800b882:	d913      	bls.n	800b8ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	689a      	ldr	r2, [r3, #8]
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	1ad2      	subs	r2, r2, r3
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	68da      	ldr	r2, [r3, #12]
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	689b      	ldr	r3, [r3, #8]
 800b89a:	4293      	cmp	r3, r2
 800b89c:	bf28      	it	cs
 800b89e:	4613      	movcs	r3, r2
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f001 f9b2 	bl	800cc0e <USBD_CtlContinueRx>
 800b8aa:	e07d      	b.n	800b9a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b8b2:	f003 031f 	and.w	r3, r3, #31
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	d014      	beq.n	800b8e4 <USBD_LL_DataOutStage+0x98>
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d81d      	bhi.n	800b8fa <USBD_LL_DataOutStage+0xae>
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d002      	beq.n	800b8c8 <USBD_LL_DataOutStage+0x7c>
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d003      	beq.n	800b8ce <USBD_LL_DataOutStage+0x82>
 800b8c6:	e018      	b.n	800b8fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	75bb      	strb	r3, [r7, #22]
            break;
 800b8cc:	e018      	b.n	800b900 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 fa64 	bl	800bda6 <USBD_CoreFindIF>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	75bb      	strb	r3, [r7, #22]
            break;
 800b8e2:	e00d      	b.n	800b900 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f000 fa66 	bl	800bdc0 <USBD_CoreFindEP>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	75bb      	strb	r3, [r7, #22]
            break;
 800b8f8:	e002      	b.n	800b900 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	75bb      	strb	r3, [r7, #22]
            break;
 800b8fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b900:	7dbb      	ldrb	r3, [r7, #22]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d119      	bne.n	800b93a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	2b03      	cmp	r3, #3
 800b910:	d113      	bne.n	800b93a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b912:	7dba      	ldrb	r2, [r7, #22]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	32ae      	adds	r2, #174	@ 0xae
 800b918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d00b      	beq.n	800b93a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b922:	7dba      	ldrb	r2, [r7, #22]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b92a:	7dba      	ldrb	r2, [r7, #22]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	32ae      	adds	r2, #174	@ 0xae
 800b930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f001 f978 	bl	800cc30 <USBD_CtlSendStatus>
 800b940:	e032      	b.n	800b9a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b942:	7afb      	ldrb	r3, [r7, #11]
 800b944:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	4619      	mov	r1, r3
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f000 fa37 	bl	800bdc0 <USBD_CoreFindEP>
 800b952:	4603      	mov	r3, r0
 800b954:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b956:	7dbb      	ldrb	r3, [r7, #22]
 800b958:	2bff      	cmp	r3, #255	@ 0xff
 800b95a:	d025      	beq.n	800b9a8 <USBD_LL_DataOutStage+0x15c>
 800b95c:	7dbb      	ldrb	r3, [r7, #22]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d122      	bne.n	800b9a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	2b03      	cmp	r3, #3
 800b96c:	d117      	bne.n	800b99e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b96e:	7dba      	ldrb	r2, [r7, #22]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	32ae      	adds	r2, #174	@ 0xae
 800b974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00f      	beq.n	800b99e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b97e:	7dba      	ldrb	r2, [r7, #22]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b986:	7dba      	ldrb	r2, [r7, #22]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	32ae      	adds	r2, #174	@ 0xae
 800b98c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	7afa      	ldrb	r2, [r7, #11]
 800b994:	4611      	mov	r1, r2
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	4798      	blx	r3
 800b99a:	4603      	mov	r3, r0
 800b99c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b99e:	7dfb      	ldrb	r3, [r7, #23]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
 800b9a6:	e000      	b.n	800b9aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b086      	sub	sp, #24
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	60f8      	str	r0, [r7, #12]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	607a      	str	r2, [r7, #4]
 800b9be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b9c0:	7afb      	ldrb	r3, [r7, #11]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d16f      	bne.n	800baa6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	3314      	adds	r3, #20
 800b9ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d15a      	bne.n	800ba8c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	689a      	ldr	r2, [r3, #8]
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d914      	bls.n	800ba0c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	689a      	ldr	r2, [r3, #8]
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	68db      	ldr	r3, [r3, #12]
 800b9ea:	1ad2      	subs	r2, r2, r3
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	6879      	ldr	r1, [r7, #4]
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f001 f8da 	bl	800cbb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9fe:	2300      	movs	r3, #0
 800ba00:	2200      	movs	r2, #0
 800ba02:	2100      	movs	r1, #0
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f001 febf 	bl	800d788 <USBD_LL_PrepareReceive>
 800ba0a:	e03f      	b.n	800ba8c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	68da      	ldr	r2, [r3, #12]
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d11c      	bne.n	800ba52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	685a      	ldr	r2, [r3, #4]
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d316      	bcc.n	800ba52 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	685a      	ldr	r2, [r3, #4]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba2e:	429a      	cmp	r2, r3
 800ba30:	d20f      	bcs.n	800ba52 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba32:	2200      	movs	r2, #0
 800ba34:	2100      	movs	r1, #0
 800ba36:	68f8      	ldr	r0, [r7, #12]
 800ba38:	f001 f8bb 	bl	800cbb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba44:	2300      	movs	r3, #0
 800ba46:	2200      	movs	r2, #0
 800ba48:	2100      	movs	r1, #0
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f001 fe9c 	bl	800d788 <USBD_LL_PrepareReceive>
 800ba50:	e01c      	b.n	800ba8c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d10f      	bne.n	800ba7e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d009      	beq.n	800ba7e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba7e:	2180      	movs	r1, #128	@ 0x80
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f001 fd7b 	bl	800d57c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f001 f8e5 	bl	800cc56 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d03a      	beq.n	800bb0c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f7ff fe42 	bl	800b720 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800baa4:	e032      	b.n	800bb0c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800baa6:	7afb      	ldrb	r3, [r7, #11]
 800baa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800baac:	b2db      	uxtb	r3, r3
 800baae:	4619      	mov	r1, r3
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f000 f985 	bl	800bdc0 <USBD_CoreFindEP>
 800bab6:	4603      	mov	r3, r0
 800bab8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baba:	7dfb      	ldrb	r3, [r7, #23]
 800babc:	2bff      	cmp	r3, #255	@ 0xff
 800babe:	d025      	beq.n	800bb0c <USBD_LL_DataInStage+0x15a>
 800bac0:	7dfb      	ldrb	r3, [r7, #23]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d122      	bne.n	800bb0c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d11c      	bne.n	800bb0c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bad2:	7dfa      	ldrb	r2, [r7, #23]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	32ae      	adds	r2, #174	@ 0xae
 800bad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d014      	beq.n	800bb0c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bae2:	7dfa      	ldrb	r2, [r7, #23]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800baea:	7dfa      	ldrb	r2, [r7, #23]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	32ae      	adds	r2, #174	@ 0xae
 800baf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	7afa      	ldrb	r2, [r7, #11]
 800baf8:	4611      	mov	r1, r2
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	4798      	blx	r3
 800bafe:	4603      	mov	r3, r0
 800bb00:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bb02:	7dbb      	ldrb	r3, [r7, #22]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d001      	beq.n	800bb0c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bb08:	7dbb      	ldrb	r3, [r7, #22]
 800bb0a:	e000      	b.n	800bb0e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bb0c:	2300      	movs	r3, #0
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3718      	adds	r7, #24
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b084      	sub	sp, #16
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d014      	beq.n	800bb7c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00e      	beq.n	800bb7c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	6852      	ldr	r2, [r2, #4]
 800bb6a:	b2d2      	uxtb	r2, r2
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	4798      	blx	r3
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb7c:	2340      	movs	r3, #64	@ 0x40
 800bb7e:	2200      	movs	r2, #0
 800bb80:	2100      	movs	r1, #0
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f001 fc86 	bl	800d494 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2240      	movs	r2, #64	@ 0x40
 800bb94:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb98:	2340      	movs	r3, #64	@ 0x40
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2180      	movs	r1, #128	@ 0x80
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f001 fc78 	bl	800d494 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2240      	movs	r2, #64	@ 0x40
 800bbae:	621a      	str	r2, [r3, #32]

  return ret;
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}

0800bbba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b083      	sub	sp, #12
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	78fa      	ldrb	r2, [r7, #3]
 800bbca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bbcc:	2300      	movs	r3, #0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b083      	sub	sp, #12
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	2b04      	cmp	r3, #4
 800bbec:	d006      	beq.n	800bbfc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbf4:	b2da      	uxtb	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2204      	movs	r2, #4
 800bc00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	370c      	adds	r7, #12
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr

0800bc12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc12:	b480      	push	{r7}
 800bc14:	b083      	sub	sp, #12
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b04      	cmp	r3, #4
 800bc24:	d106      	bne.n	800bc34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bc2c:	b2da      	uxtb	r2, r3
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr

0800bc42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b082      	sub	sp, #8
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	d110      	bne.n	800bc78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00b      	beq.n	800bc78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc66:	69db      	ldr	r3, [r3, #28]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d005      	beq.n	800bc78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc72:	69db      	ldr	r3, [r3, #28]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3708      	adds	r7, #8
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc82:	b580      	push	{r7, lr}
 800bc84:	b082      	sub	sp, #8
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	32ae      	adds	r2, #174	@ 0xae
 800bc98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d101      	bne.n	800bca4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bca0:	2303      	movs	r3, #3
 800bca2:	e01c      	b.n	800bcde <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	2b03      	cmp	r3, #3
 800bcae:	d115      	bne.n	800bcdc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	32ae      	adds	r2, #174	@ 0xae
 800bcba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcbe:	6a1b      	ldr	r3, [r3, #32]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00b      	beq.n	800bcdc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	32ae      	adds	r2, #174	@ 0xae
 800bcce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	78fa      	ldrb	r2, [r7, #3]
 800bcd6:	4611      	mov	r1, r2
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b082      	sub	sp, #8
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	32ae      	adds	r2, #174	@ 0xae
 800bcfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bd04:	2303      	movs	r3, #3
 800bd06:	e01c      	b.n	800bd42 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	2b03      	cmp	r3, #3
 800bd12:	d115      	bne.n	800bd40 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	32ae      	adds	r2, #174	@ 0xae
 800bd1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00b      	beq.n	800bd40 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	32ae      	adds	r2, #174	@ 0xae
 800bd32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd38:	78fa      	ldrb	r2, [r7, #3]
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd4a:	b480      	push	{r7}
 800bd4c:	b083      	sub	sp, #12
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2201      	movs	r2, #1
 800bd70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d00e      	beq.n	800bd9c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	6852      	ldr	r2, [r2, #4]
 800bd8a:	b2d2      	uxtb	r2, r2
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	4798      	blx	r3
 800bd92:	4603      	mov	r3, r0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d001      	beq.n	800bd9c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bd98:	2303      	movs	r3, #3
 800bd9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bda6:	b480      	push	{r7}
 800bda8:	b083      	sub	sp, #12
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
 800bdae:	460b      	mov	r3, r1
 800bdb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bdb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	370c      	adds	r7, #12
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	460b      	mov	r3, r1
 800bdca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bdcc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	370c      	adds	r7, #12
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b086      	sub	sp, #24
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	460b      	mov	r3, r1
 800bde4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	885b      	ldrh	r3, [r3, #2]
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	7812      	ldrb	r2, [r2, #0]
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d91f      	bls.n	800be40 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800be06:	e013      	b.n	800be30 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800be08:	f107 030a 	add.w	r3, r7, #10
 800be0c:	4619      	mov	r1, r3
 800be0e:	6978      	ldr	r0, [r7, #20]
 800be10:	f000 f81b 	bl	800be4a <USBD_GetNextDesc>
 800be14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	785b      	ldrb	r3, [r3, #1]
 800be1a:	2b05      	cmp	r3, #5
 800be1c:	d108      	bne.n	800be30 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	789b      	ldrb	r3, [r3, #2]
 800be26:	78fa      	ldrb	r2, [r7, #3]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d008      	beq.n	800be3e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800be2c:	2300      	movs	r3, #0
 800be2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	885b      	ldrh	r3, [r3, #2]
 800be34:	b29a      	uxth	r2, r3
 800be36:	897b      	ldrh	r3, [r7, #10]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d8e5      	bhi.n	800be08 <USBD_GetEpDesc+0x2e>
 800be3c:	e000      	b.n	800be40 <USBD_GetEpDesc+0x66>
          break;
 800be3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800be40:	693b      	ldr	r3, [r7, #16]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3718      	adds	r7, #24
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800be4a:	b480      	push	{r7}
 800be4c:	b085      	sub	sp, #20
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
 800be52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	881b      	ldrh	r3, [r3, #0]
 800be5c:	68fa      	ldr	r2, [r7, #12]
 800be5e:	7812      	ldrb	r2, [r2, #0]
 800be60:	4413      	add	r3, r2
 800be62:	b29a      	uxth	r2, r3
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	461a      	mov	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4413      	add	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800be74:	68fb      	ldr	r3, [r7, #12]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3714      	adds	r7, #20
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be82:	b480      	push	{r7}
 800be84:	b087      	sub	sp, #28
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	3301      	adds	r3, #1
 800be98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bea0:	8a3b      	ldrh	r3, [r7, #16]
 800bea2:	021b      	lsls	r3, r3, #8
 800bea4:	b21a      	sxth	r2, r3
 800bea6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800beaa:	4313      	orrs	r3, r2
 800beac:	b21b      	sxth	r3, r3
 800beae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800beb0:	89fb      	ldrh	r3, [r7, #14]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	371c      	adds	r7, #28
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr
	...

0800bec0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b084      	sub	sp, #16
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bed6:	2b40      	cmp	r3, #64	@ 0x40
 800bed8:	d005      	beq.n	800bee6 <USBD_StdDevReq+0x26>
 800beda:	2b40      	cmp	r3, #64	@ 0x40
 800bedc:	d857      	bhi.n	800bf8e <USBD_StdDevReq+0xce>
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00f      	beq.n	800bf02 <USBD_StdDevReq+0x42>
 800bee2:	2b20      	cmp	r3, #32
 800bee4:	d153      	bne.n	800bf8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	32ae      	adds	r2, #174	@ 0xae
 800bef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	6839      	ldr	r1, [r7, #0]
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	4798      	blx	r3
 800befc:	4603      	mov	r3, r0
 800befe:	73fb      	strb	r3, [r7, #15]
      break;
 800bf00:	e04a      	b.n	800bf98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	785b      	ldrb	r3, [r3, #1]
 800bf06:	2b09      	cmp	r3, #9
 800bf08:	d83b      	bhi.n	800bf82 <USBD_StdDevReq+0xc2>
 800bf0a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf10 <USBD_StdDevReq+0x50>)
 800bf0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf10:	0800bf65 	.word	0x0800bf65
 800bf14:	0800bf79 	.word	0x0800bf79
 800bf18:	0800bf83 	.word	0x0800bf83
 800bf1c:	0800bf6f 	.word	0x0800bf6f
 800bf20:	0800bf83 	.word	0x0800bf83
 800bf24:	0800bf43 	.word	0x0800bf43
 800bf28:	0800bf39 	.word	0x0800bf39
 800bf2c:	0800bf83 	.word	0x0800bf83
 800bf30:	0800bf5b 	.word	0x0800bf5b
 800bf34:	0800bf4d 	.word	0x0800bf4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 fa3c 	bl	800c3b8 <USBD_GetDescriptor>
          break;
 800bf40:	e024      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf42:	6839      	ldr	r1, [r7, #0]
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fbcb 	bl	800c6e0 <USBD_SetAddress>
          break;
 800bf4a:	e01f      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f000 fc0a 	bl	800c768 <USBD_SetConfig>
 800bf54:	4603      	mov	r3, r0
 800bf56:	73fb      	strb	r3, [r7, #15]
          break;
 800bf58:	e018      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fcad 	bl	800c8bc <USBD_GetConfig>
          break;
 800bf62:	e013      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fcde 	bl	800c928 <USBD_GetStatus>
          break;
 800bf6c:	e00e      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fd0d 	bl	800c990 <USBD_SetFeature>
          break;
 800bf76:	e009      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fd31 	bl	800c9e2 <USBD_ClrFeature>
          break;
 800bf80:	e004      	b.n	800bf8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 fd88 	bl	800ca9a <USBD_CtlError>
          break;
 800bf8a:	bf00      	nop
      }
      break;
 800bf8c:	e004      	b.n	800bf98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fd82 	bl	800ca9a <USBD_CtlError>
      break;
 800bf96:	bf00      	nop
  }

  return ret;
 800bf98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3710      	adds	r7, #16
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}
 800bfa2:	bf00      	nop

0800bfa4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bfba:	2b40      	cmp	r3, #64	@ 0x40
 800bfbc:	d005      	beq.n	800bfca <USBD_StdItfReq+0x26>
 800bfbe:	2b40      	cmp	r3, #64	@ 0x40
 800bfc0:	d852      	bhi.n	800c068 <USBD_StdItfReq+0xc4>
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d001      	beq.n	800bfca <USBD_StdItfReq+0x26>
 800bfc6:	2b20      	cmp	r3, #32
 800bfc8:	d14e      	bne.n	800c068 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d840      	bhi.n	800c05a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	889b      	ldrh	r3, [r3, #4]
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d836      	bhi.n	800c050 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	889b      	ldrh	r3, [r3, #4]
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	4619      	mov	r1, r3
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f7ff fedb 	bl	800bda6 <USBD_CoreFindIF>
 800bff0:	4603      	mov	r3, r0
 800bff2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bff4:	7bbb      	ldrb	r3, [r7, #14]
 800bff6:	2bff      	cmp	r3, #255	@ 0xff
 800bff8:	d01d      	beq.n	800c036 <USBD_StdItfReq+0x92>
 800bffa:	7bbb      	ldrb	r3, [r7, #14]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d11a      	bne.n	800c036 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c000:	7bba      	ldrb	r2, [r7, #14]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	32ae      	adds	r2, #174	@ 0xae
 800c006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00f      	beq.n	800c030 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c010:	7bba      	ldrb	r2, [r7, #14]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c018:	7bba      	ldrb	r2, [r7, #14]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	32ae      	adds	r2, #174	@ 0xae
 800c01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c022:	689b      	ldr	r3, [r3, #8]
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	4798      	blx	r3
 800c02a:	4603      	mov	r3, r0
 800c02c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c02e:	e004      	b.n	800c03a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c030:	2303      	movs	r3, #3
 800c032:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c034:	e001      	b.n	800c03a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c036:	2303      	movs	r3, #3
 800c038:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	88db      	ldrh	r3, [r3, #6]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d110      	bne.n	800c064 <USBD_StdItfReq+0xc0>
 800c042:	7bfb      	ldrb	r3, [r7, #15]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d10d      	bne.n	800c064 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fdf1 	bl	800cc30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c04e:	e009      	b.n	800c064 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c050:	6839      	ldr	r1, [r7, #0]
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fd21 	bl	800ca9a <USBD_CtlError>
          break;
 800c058:	e004      	b.n	800c064 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fd1c 	bl	800ca9a <USBD_CtlError>
          break;
 800c062:	e000      	b.n	800c066 <USBD_StdItfReq+0xc2>
          break;
 800c064:	bf00      	nop
      }
      break;
 800c066:	e004      	b.n	800c072 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fd15 	bl	800ca9a <USBD_CtlError>
      break;
 800c070:	bf00      	nop
  }

  return ret;
 800c072:	7bfb      	ldrb	r3, [r7, #15]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3710      	adds	r7, #16
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c086:	2300      	movs	r3, #0
 800c088:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	889b      	ldrh	r3, [r3, #4]
 800c08e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c098:	2b40      	cmp	r3, #64	@ 0x40
 800c09a:	d007      	beq.n	800c0ac <USBD_StdEPReq+0x30>
 800c09c:	2b40      	cmp	r3, #64	@ 0x40
 800c09e:	f200 817f 	bhi.w	800c3a0 <USBD_StdEPReq+0x324>
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d02a      	beq.n	800c0fc <USBD_StdEPReq+0x80>
 800c0a6:	2b20      	cmp	r3, #32
 800c0a8:	f040 817a 	bne.w	800c3a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
 800c0ae:	4619      	mov	r1, r3
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f7ff fe85 	bl	800bdc0 <USBD_CoreFindEP>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0ba:	7b7b      	ldrb	r3, [r7, #13]
 800c0bc:	2bff      	cmp	r3, #255	@ 0xff
 800c0be:	f000 8174 	beq.w	800c3aa <USBD_StdEPReq+0x32e>
 800c0c2:	7b7b      	ldrb	r3, [r7, #13]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f040 8170 	bne.w	800c3aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c0ca:	7b7a      	ldrb	r2, [r7, #13]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c0d2:	7b7a      	ldrb	r2, [r7, #13]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	32ae      	adds	r2, #174	@ 0xae
 800c0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f000 8163 	beq.w	800c3aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c0e4:	7b7a      	ldrb	r2, [r7, #13]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	32ae      	adds	r2, #174	@ 0xae
 800c0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	4798      	blx	r3
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c0fa:	e156      	b.n	800c3aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	785b      	ldrb	r3, [r3, #1]
 800c100:	2b03      	cmp	r3, #3
 800c102:	d008      	beq.n	800c116 <USBD_StdEPReq+0x9a>
 800c104:	2b03      	cmp	r3, #3
 800c106:	f300 8145 	bgt.w	800c394 <USBD_StdEPReq+0x318>
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f000 809b 	beq.w	800c246 <USBD_StdEPReq+0x1ca>
 800c110:	2b01      	cmp	r3, #1
 800c112:	d03c      	beq.n	800c18e <USBD_StdEPReq+0x112>
 800c114:	e13e      	b.n	800c394 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	2b02      	cmp	r3, #2
 800c120:	d002      	beq.n	800c128 <USBD_StdEPReq+0xac>
 800c122:	2b03      	cmp	r3, #3
 800c124:	d016      	beq.n	800c154 <USBD_StdEPReq+0xd8>
 800c126:	e02c      	b.n	800c182 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00d      	beq.n	800c14a <USBD_StdEPReq+0xce>
 800c12e:	7bbb      	ldrb	r3, [r7, #14]
 800c130:	2b80      	cmp	r3, #128	@ 0x80
 800c132:	d00a      	beq.n	800c14a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	4619      	mov	r1, r3
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f001 fa1f 	bl	800d57c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c13e:	2180      	movs	r1, #128	@ 0x80
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f001 fa1b 	bl	800d57c <USBD_LL_StallEP>
 800c146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c148:	e020      	b.n	800c18c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fca4 	bl	800ca9a <USBD_CtlError>
              break;
 800c152:	e01b      	b.n	800c18c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	885b      	ldrh	r3, [r3, #2]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10e      	bne.n	800c17a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c15c:	7bbb      	ldrb	r3, [r7, #14]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00b      	beq.n	800c17a <USBD_StdEPReq+0xfe>
 800c162:	7bbb      	ldrb	r3, [r7, #14]
 800c164:	2b80      	cmp	r3, #128	@ 0x80
 800c166:	d008      	beq.n	800c17a <USBD_StdEPReq+0xfe>
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	88db      	ldrh	r3, [r3, #6]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d104      	bne.n	800c17a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c170:	7bbb      	ldrb	r3, [r7, #14]
 800c172:	4619      	mov	r1, r3
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f001 fa01 	bl	800d57c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fd58 	bl	800cc30 <USBD_CtlSendStatus>

              break;
 800c180:	e004      	b.n	800c18c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 fc88 	bl	800ca9a <USBD_CtlError>
              break;
 800c18a:	bf00      	nop
          }
          break;
 800c18c:	e107      	b.n	800c39e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b02      	cmp	r3, #2
 800c198:	d002      	beq.n	800c1a0 <USBD_StdEPReq+0x124>
 800c19a:	2b03      	cmp	r3, #3
 800c19c:	d016      	beq.n	800c1cc <USBD_StdEPReq+0x150>
 800c19e:	e04b      	b.n	800c238 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1a0:	7bbb      	ldrb	r3, [r7, #14]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00d      	beq.n	800c1c2 <USBD_StdEPReq+0x146>
 800c1a6:	7bbb      	ldrb	r3, [r7, #14]
 800c1a8:	2b80      	cmp	r3, #128	@ 0x80
 800c1aa:	d00a      	beq.n	800c1c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f001 f9e3 	bl	800d57c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1b6:	2180      	movs	r1, #128	@ 0x80
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f001 f9df 	bl	800d57c <USBD_LL_StallEP>
 800c1be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1c0:	e040      	b.n	800c244 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c1c2:	6839      	ldr	r1, [r7, #0]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 fc68 	bl	800ca9a <USBD_CtlError>
              break;
 800c1ca:	e03b      	b.n	800c244 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	885b      	ldrh	r3, [r3, #2]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d136      	bne.n	800c242 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c1d4:	7bbb      	ldrb	r3, [r7, #14]
 800c1d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d004      	beq.n	800c1e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f001 fa00 	bl	800d5e8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 fd21 	bl	800cc30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c1ee:	7bbb      	ldrb	r3, [r7, #14]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7ff fde4 	bl	800bdc0 <USBD_CoreFindEP>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1fc:	7b7b      	ldrb	r3, [r7, #13]
 800c1fe:	2bff      	cmp	r3, #255	@ 0xff
 800c200:	d01f      	beq.n	800c242 <USBD_StdEPReq+0x1c6>
 800c202:	7b7b      	ldrb	r3, [r7, #13]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d11c      	bne.n	800c242 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c208:	7b7a      	ldrb	r2, [r7, #13]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c210:	7b7a      	ldrb	r2, [r7, #13]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	32ae      	adds	r2, #174	@ 0xae
 800c216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d010      	beq.n	800c242 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c220:	7b7a      	ldrb	r2, [r7, #13]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	32ae      	adds	r2, #174	@ 0xae
 800c226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	4798      	blx	r3
 800c232:	4603      	mov	r3, r0
 800c234:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c236:	e004      	b.n	800c242 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fc2d 	bl	800ca9a <USBD_CtlError>
              break;
 800c240:	e000      	b.n	800c244 <USBD_StdEPReq+0x1c8>
              break;
 800c242:	bf00      	nop
          }
          break;
 800c244:	e0ab      	b.n	800c39e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d002      	beq.n	800c258 <USBD_StdEPReq+0x1dc>
 800c252:	2b03      	cmp	r3, #3
 800c254:	d032      	beq.n	800c2bc <USBD_StdEPReq+0x240>
 800c256:	e097      	b.n	800c388 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c258:	7bbb      	ldrb	r3, [r7, #14]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d007      	beq.n	800c26e <USBD_StdEPReq+0x1f2>
 800c25e:	7bbb      	ldrb	r3, [r7, #14]
 800c260:	2b80      	cmp	r3, #128	@ 0x80
 800c262:	d004      	beq.n	800c26e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fc17 	bl	800ca9a <USBD_CtlError>
                break;
 800c26c:	e091      	b.n	800c392 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c26e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c272:	2b00      	cmp	r3, #0
 800c274:	da0b      	bge.n	800c28e <USBD_StdEPReq+0x212>
 800c276:	7bbb      	ldrb	r3, [r7, #14]
 800c278:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c27c:	4613      	mov	r3, r2
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	4413      	add	r3, r2
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	3310      	adds	r3, #16
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	4413      	add	r3, r2
 800c28a:	3304      	adds	r3, #4
 800c28c:	e00b      	b.n	800c2a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c28e:	7bbb      	ldrb	r3, [r7, #14]
 800c290:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c294:	4613      	mov	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	4413      	add	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	4413      	add	r3, r2
 800c2a4:	3304      	adds	r3, #4
 800c2a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fc61 	bl	800cb7c <USBD_CtlSendData>
              break;
 800c2ba:	e06a      	b.n	800c392 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c2bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	da11      	bge.n	800c2e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c2c4:	7bbb      	ldrb	r3, [r7, #14]
 800c2c6:	f003 020f 	and.w	r2, r3, #15
 800c2ca:	6879      	ldr	r1, [r7, #4]
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	440b      	add	r3, r1
 800c2d6:	3324      	adds	r3, #36	@ 0x24
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d117      	bne.n	800c30e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c2de:	6839      	ldr	r1, [r7, #0]
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fbda 	bl	800ca9a <USBD_CtlError>
                  break;
 800c2e6:	e054      	b.n	800c392 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c2e8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ea:	f003 020f 	and.w	r2, r3, #15
 800c2ee:	6879      	ldr	r1, [r7, #4]
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	4413      	add	r3, r2
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	440b      	add	r3, r1
 800c2fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c2fe:	881b      	ldrh	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d104      	bne.n	800c30e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fbc7 	bl	800ca9a <USBD_CtlError>
                  break;
 800c30c:	e041      	b.n	800c392 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c30e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c312:	2b00      	cmp	r3, #0
 800c314:	da0b      	bge.n	800c32e <USBD_StdEPReq+0x2b2>
 800c316:	7bbb      	ldrb	r3, [r7, #14]
 800c318:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c31c:	4613      	mov	r3, r2
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	4413      	add	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	3310      	adds	r3, #16
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	4413      	add	r3, r2
 800c32a:	3304      	adds	r3, #4
 800c32c:	e00b      	b.n	800c346 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c32e:	7bbb      	ldrb	r3, [r7, #14]
 800c330:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	4413      	add	r3, r2
 800c344:	3304      	adds	r3, #4
 800c346:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c348:	7bbb      	ldrb	r3, [r7, #14]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d002      	beq.n	800c354 <USBD_StdEPReq+0x2d8>
 800c34e:	7bbb      	ldrb	r3, [r7, #14]
 800c350:	2b80      	cmp	r3, #128	@ 0x80
 800c352:	d103      	bne.n	800c35c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	2200      	movs	r2, #0
 800c358:	601a      	str	r2, [r3, #0]
 800c35a:	e00e      	b.n	800c37a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c35c:	7bbb      	ldrb	r3, [r7, #14]
 800c35e:	4619      	mov	r1, r3
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f001 f977 	bl	800d654 <USBD_LL_IsStallEP>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d003      	beq.n	800c374 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	2201      	movs	r2, #1
 800c370:	601a      	str	r2, [r3, #0]
 800c372:	e002      	b.n	800c37a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	2200      	movs	r2, #0
 800c378:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	2202      	movs	r2, #2
 800c37e:	4619      	mov	r1, r3
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fbfb 	bl	800cb7c <USBD_CtlSendData>
              break;
 800c386:	e004      	b.n	800c392 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fb85 	bl	800ca9a <USBD_CtlError>
              break;
 800c390:	bf00      	nop
          }
          break;
 800c392:	e004      	b.n	800c39e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c394:	6839      	ldr	r1, [r7, #0]
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f000 fb7f 	bl	800ca9a <USBD_CtlError>
          break;
 800c39c:	bf00      	nop
      }
      break;
 800c39e:	e005      	b.n	800c3ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fb79 	bl	800ca9a <USBD_CtlError>
      break;
 800c3a8:	e000      	b.n	800c3ac <USBD_StdEPReq+0x330>
      break;
 800c3aa:	bf00      	nop
  }

  return ret;
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
	...

0800c3b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	885b      	ldrh	r3, [r3, #2]
 800c3d2:	0a1b      	lsrs	r3, r3, #8
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	2b0e      	cmp	r3, #14
 800c3da:	f200 8152 	bhi.w	800c682 <USBD_GetDescriptor+0x2ca>
 800c3de:	a201      	add	r2, pc, #4	@ (adr r2, 800c3e4 <USBD_GetDescriptor+0x2c>)
 800c3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e4:	0800c455 	.word	0x0800c455
 800c3e8:	0800c46d 	.word	0x0800c46d
 800c3ec:	0800c4ad 	.word	0x0800c4ad
 800c3f0:	0800c683 	.word	0x0800c683
 800c3f4:	0800c683 	.word	0x0800c683
 800c3f8:	0800c623 	.word	0x0800c623
 800c3fc:	0800c64f 	.word	0x0800c64f
 800c400:	0800c683 	.word	0x0800c683
 800c404:	0800c683 	.word	0x0800c683
 800c408:	0800c683 	.word	0x0800c683
 800c40c:	0800c683 	.word	0x0800c683
 800c410:	0800c683 	.word	0x0800c683
 800c414:	0800c683 	.word	0x0800c683
 800c418:	0800c683 	.word	0x0800c683
 800c41c:	0800c421 	.word	0x0800c421
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c426:	69db      	ldr	r3, [r3, #28]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00b      	beq.n	800c444 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c432:	69db      	ldr	r3, [r3, #28]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	7c12      	ldrb	r2, [r2, #16]
 800c438:	f107 0108 	add.w	r1, r7, #8
 800c43c:	4610      	mov	r0, r2
 800c43e:	4798      	blx	r3
 800c440:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c442:	e126      	b.n	800c692 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fb27 	bl	800ca9a <USBD_CtlError>
        err++;
 800c44c:	7afb      	ldrb	r3, [r7, #11]
 800c44e:	3301      	adds	r3, #1
 800c450:	72fb      	strb	r3, [r7, #11]
      break;
 800c452:	e11e      	b.n	800c692 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	7c12      	ldrb	r2, [r2, #16]
 800c460:	f107 0108 	add.w	r1, r7, #8
 800c464:	4610      	mov	r0, r2
 800c466:	4798      	blx	r3
 800c468:	60f8      	str	r0, [r7, #12]
      break;
 800c46a:	e112      	b.n	800c692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	7c1b      	ldrb	r3, [r3, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10d      	bne.n	800c490 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c47c:	f107 0208 	add.w	r2, r7, #8
 800c480:	4610      	mov	r0, r2
 800c482:	4798      	blx	r3
 800c484:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	3301      	adds	r3, #1
 800c48a:	2202      	movs	r2, #2
 800c48c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c48e:	e100      	b.n	800c692 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c498:	f107 0208 	add.w	r2, r7, #8
 800c49c:	4610      	mov	r0, r2
 800c49e:	4798      	blx	r3
 800c4a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	2202      	movs	r2, #2
 800c4a8:	701a      	strb	r2, [r3, #0]
      break;
 800c4aa:	e0f2      	b.n	800c692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	885b      	ldrh	r3, [r3, #2]
 800c4b0:	b2db      	uxtb	r3, r3
 800c4b2:	2b05      	cmp	r3, #5
 800c4b4:	f200 80ac 	bhi.w	800c610 <USBD_GetDescriptor+0x258>
 800c4b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c4c0 <USBD_GetDescriptor+0x108>)
 800c4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4be:	bf00      	nop
 800c4c0:	0800c4d9 	.word	0x0800c4d9
 800c4c4:	0800c50d 	.word	0x0800c50d
 800c4c8:	0800c541 	.word	0x0800c541
 800c4cc:	0800c575 	.word	0x0800c575
 800c4d0:	0800c5a9 	.word	0x0800c5a9
 800c4d4:	0800c5dd 	.word	0x0800c5dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00b      	beq.n	800c4fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	687a      	ldr	r2, [r7, #4]
 800c4ee:	7c12      	ldrb	r2, [r2, #16]
 800c4f0:	f107 0108 	add.w	r1, r7, #8
 800c4f4:	4610      	mov	r0, r2
 800c4f6:	4798      	blx	r3
 800c4f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4fa:	e091      	b.n	800c620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 facb 	bl	800ca9a <USBD_CtlError>
            err++;
 800c504:	7afb      	ldrb	r3, [r7, #11]
 800c506:	3301      	adds	r3, #1
 800c508:	72fb      	strb	r3, [r7, #11]
          break;
 800c50a:	e089      	b.n	800c620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00b      	beq.n	800c530 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	7c12      	ldrb	r2, [r2, #16]
 800c524:	f107 0108 	add.w	r1, r7, #8
 800c528:	4610      	mov	r0, r2
 800c52a:	4798      	blx	r3
 800c52c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c52e:	e077      	b.n	800c620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c530:	6839      	ldr	r1, [r7, #0]
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 fab1 	bl	800ca9a <USBD_CtlError>
            err++;
 800c538:	7afb      	ldrb	r3, [r7, #11]
 800c53a:	3301      	adds	r3, #1
 800c53c:	72fb      	strb	r3, [r7, #11]
          break;
 800c53e:	e06f      	b.n	800c620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00b      	beq.n	800c564 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	7c12      	ldrb	r2, [r2, #16]
 800c558:	f107 0108 	add.w	r1, r7, #8
 800c55c:	4610      	mov	r0, r2
 800c55e:	4798      	blx	r3
 800c560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c562:	e05d      	b.n	800c620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f000 fa97 	bl	800ca9a <USBD_CtlError>
            err++;
 800c56c:	7afb      	ldrb	r3, [r7, #11]
 800c56e:	3301      	adds	r3, #1
 800c570:	72fb      	strb	r3, [r7, #11]
          break;
 800c572:	e055      	b.n	800c620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c57a:	691b      	ldr	r3, [r3, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d00b      	beq.n	800c598 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	7c12      	ldrb	r2, [r2, #16]
 800c58c:	f107 0108 	add.w	r1, r7, #8
 800c590:	4610      	mov	r0, r2
 800c592:	4798      	blx	r3
 800c594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c596:	e043      	b.n	800c620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c598:	6839      	ldr	r1, [r7, #0]
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 fa7d 	bl	800ca9a <USBD_CtlError>
            err++;
 800c5a0:	7afb      	ldrb	r3, [r7, #11]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c5a6:	e03b      	b.n	800c620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5ae:	695b      	ldr	r3, [r3, #20]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00b      	beq.n	800c5cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5ba:	695b      	ldr	r3, [r3, #20]
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	7c12      	ldrb	r2, [r2, #16]
 800c5c0:	f107 0108 	add.w	r1, r7, #8
 800c5c4:	4610      	mov	r0, r2
 800c5c6:	4798      	blx	r3
 800c5c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5ca:	e029      	b.n	800c620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fa63 	bl	800ca9a <USBD_CtlError>
            err++;
 800c5d4:	7afb      	ldrb	r3, [r7, #11]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c5da:	e021      	b.n	800c620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00b      	beq.n	800c600 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	687a      	ldr	r2, [r7, #4]
 800c5f2:	7c12      	ldrb	r2, [r2, #16]
 800c5f4:	f107 0108 	add.w	r1, r7, #8
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	4798      	blx	r3
 800c5fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5fe:	e00f      	b.n	800c620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c600:	6839      	ldr	r1, [r7, #0]
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fa49 	bl	800ca9a <USBD_CtlError>
            err++;
 800c608:	7afb      	ldrb	r3, [r7, #11]
 800c60a:	3301      	adds	r3, #1
 800c60c:	72fb      	strb	r3, [r7, #11]
          break;
 800c60e:	e007      	b.n	800c620 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c610:	6839      	ldr	r1, [r7, #0]
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 fa41 	bl	800ca9a <USBD_CtlError>
          err++;
 800c618:	7afb      	ldrb	r3, [r7, #11]
 800c61a:	3301      	adds	r3, #1
 800c61c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c61e:	bf00      	nop
      }
      break;
 800c620:	e037      	b.n	800c692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	7c1b      	ldrb	r3, [r3, #16]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d109      	bne.n	800c63e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c632:	f107 0208 	add.w	r2, r7, #8
 800c636:	4610      	mov	r0, r2
 800c638:	4798      	blx	r3
 800c63a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c63c:	e029      	b.n	800c692 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c63e:	6839      	ldr	r1, [r7, #0]
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fa2a 	bl	800ca9a <USBD_CtlError>
        err++;
 800c646:	7afb      	ldrb	r3, [r7, #11]
 800c648:	3301      	adds	r3, #1
 800c64a:	72fb      	strb	r3, [r7, #11]
      break;
 800c64c:	e021      	b.n	800c692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	7c1b      	ldrb	r3, [r3, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10d      	bne.n	800c672 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c65c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c65e:	f107 0208 	add.w	r2, r7, #8
 800c662:	4610      	mov	r0, r2
 800c664:	4798      	blx	r3
 800c666:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	3301      	adds	r3, #1
 800c66c:	2207      	movs	r2, #7
 800c66e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c670:	e00f      	b.n	800c692 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 fa10 	bl	800ca9a <USBD_CtlError>
        err++;
 800c67a:	7afb      	ldrb	r3, [r7, #11]
 800c67c:	3301      	adds	r3, #1
 800c67e:	72fb      	strb	r3, [r7, #11]
      break;
 800c680:	e007      	b.n	800c692 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c682:	6839      	ldr	r1, [r7, #0]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 fa08 	bl	800ca9a <USBD_CtlError>
      err++;
 800c68a:	7afb      	ldrb	r3, [r7, #11]
 800c68c:	3301      	adds	r3, #1
 800c68e:	72fb      	strb	r3, [r7, #11]
      break;
 800c690:	bf00      	nop
  }

  if (err != 0U)
 800c692:	7afb      	ldrb	r3, [r7, #11]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d11e      	bne.n	800c6d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	88db      	ldrh	r3, [r3, #6]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d016      	beq.n	800c6ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c6a0:	893b      	ldrh	r3, [r7, #8]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00e      	beq.n	800c6c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	88da      	ldrh	r2, [r3, #6]
 800c6aa:	893b      	ldrh	r3, [r7, #8]
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	bf28      	it	cs
 800c6b0:	4613      	movcs	r3, r2
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c6b6:	893b      	ldrh	r3, [r7, #8]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	68f9      	ldr	r1, [r7, #12]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fa5d 	bl	800cb7c <USBD_CtlSendData>
 800c6c2:	e009      	b.n	800c6d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 f9e7 	bl	800ca9a <USBD_CtlError>
 800c6cc:	e004      	b.n	800c6d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 faae 	bl	800cc30 <USBD_CtlSendStatus>
 800c6d4:	e000      	b.n	800c6d8 <USBD_GetDescriptor+0x320>
    return;
 800c6d6:	bf00      	nop
  }
}
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop

0800c6e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	889b      	ldrh	r3, [r3, #4]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d131      	bne.n	800c756 <USBD_SetAddress+0x76>
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	88db      	ldrh	r3, [r3, #6]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d12d      	bne.n	800c756 <USBD_SetAddress+0x76>
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	885b      	ldrh	r3, [r3, #2]
 800c6fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800c700:	d829      	bhi.n	800c756 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	885b      	ldrh	r3, [r3, #2]
 800c706:	b2db      	uxtb	r3, r3
 800c708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c70c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b03      	cmp	r3, #3
 800c718:	d104      	bne.n	800c724 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c71a:	6839      	ldr	r1, [r7, #0]
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f9bc 	bl	800ca9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c722:	e01d      	b.n	800c760 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	7bfa      	ldrb	r2, [r7, #15]
 800c728:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
 800c72e:	4619      	mov	r1, r3
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 ffbb 	bl	800d6ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 fa7a 	bl	800cc30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c73c:	7bfb      	ldrb	r3, [r7, #15]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d004      	beq.n	800c74c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2202      	movs	r2, #2
 800c746:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c74a:	e009      	b.n	800c760 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c754:	e004      	b.n	800c760 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 f99e 	bl	800ca9a <USBD_CtlError>
  }
}
 800c75e:	bf00      	nop
 800c760:	bf00      	nop
 800c762:	3710      	adds	r7, #16
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	885b      	ldrh	r3, [r3, #2]
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	4b4e      	ldr	r3, [pc, #312]	@ (800c8b8 <USBD_SetConfig+0x150>)
 800c77e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c780:	4b4d      	ldr	r3, [pc, #308]	@ (800c8b8 <USBD_SetConfig+0x150>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	2b01      	cmp	r3, #1
 800c786:	d905      	bls.n	800c794 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c788:	6839      	ldr	r1, [r7, #0]
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f985 	bl	800ca9a <USBD_CtlError>
    return USBD_FAIL;
 800c790:	2303      	movs	r3, #3
 800c792:	e08c      	b.n	800c8ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d002      	beq.n	800c7a6 <USBD_SetConfig+0x3e>
 800c7a0:	2b03      	cmp	r3, #3
 800c7a2:	d029      	beq.n	800c7f8 <USBD_SetConfig+0x90>
 800c7a4:	e075      	b.n	800c892 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c7a6:	4b44      	ldr	r3, [pc, #272]	@ (800c8b8 <USBD_SetConfig+0x150>)
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d020      	beq.n	800c7f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c7ae:	4b42      	ldr	r3, [pc, #264]	@ (800c8b8 <USBD_SetConfig+0x150>)
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7b8:	4b3f      	ldr	r3, [pc, #252]	@ (800c8b8 <USBD_SetConfig+0x150>)
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	4619      	mov	r1, r3
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7fe ffb9 	bl	800b736 <USBD_SetClassConfig>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d008      	beq.n	800c7e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 f962 	bl	800ca9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2202      	movs	r2, #2
 800c7da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c7de:	e065      	b.n	800c8ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 fa25 	bl	800cc30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2203      	movs	r2, #3
 800c7ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c7ee:	e05d      	b.n	800c8ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fa1d 	bl	800cc30 <USBD_CtlSendStatus>
      break;
 800c7f6:	e059      	b.n	800c8ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c7f8:	4b2f      	ldr	r3, [pc, #188]	@ (800c8b8 <USBD_SetConfig+0x150>)
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d112      	bne.n	800c826 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2202      	movs	r2, #2
 800c804:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c808:	4b2b      	ldr	r3, [pc, #172]	@ (800c8b8 <USBD_SetConfig+0x150>)
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c812:	4b29      	ldr	r3, [pc, #164]	@ (800c8b8 <USBD_SetConfig+0x150>)
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7fe ffa8 	bl	800b76e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fa06 	bl	800cc30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c824:	e042      	b.n	800c8ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c826:	4b24      	ldr	r3, [pc, #144]	@ (800c8b8 <USBD_SetConfig+0x150>)
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	461a      	mov	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	429a      	cmp	r2, r3
 800c832:	d02a      	beq.n	800c88a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	4619      	mov	r1, r3
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f7fe ff96 	bl	800b76e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c842:	4b1d      	ldr	r3, [pc, #116]	@ (800c8b8 <USBD_SetConfig+0x150>)
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	461a      	mov	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c84c:	4b1a      	ldr	r3, [pc, #104]	@ (800c8b8 <USBD_SetConfig+0x150>)
 800c84e:	781b      	ldrb	r3, [r3, #0]
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7fe ff6f 	bl	800b736 <USBD_SetClassConfig>
 800c858:	4603      	mov	r3, r0
 800c85a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00f      	beq.n	800c882 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c862:	6839      	ldr	r1, [r7, #0]
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 f918 	bl	800ca9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	4619      	mov	r1, r3
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7fe ff7b 	bl	800b76e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2202      	movs	r2, #2
 800c87c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c880:	e014      	b.n	800c8ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f9d4 	bl	800cc30 <USBD_CtlSendStatus>
      break;
 800c888:	e010      	b.n	800c8ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 f9d0 	bl	800cc30 <USBD_CtlSendStatus>
      break;
 800c890:	e00c      	b.n	800c8ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c892:	6839      	ldr	r1, [r7, #0]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 f900 	bl	800ca9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c89a:	4b07      	ldr	r3, [pc, #28]	@ (800c8b8 <USBD_SetConfig+0x150>)
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7fe ff64 	bl	800b76e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c8aa:	bf00      	nop
  }

  return ret;
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	2000357c 	.word	0x2000357c

0800c8bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	88db      	ldrh	r3, [r3, #6]
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d004      	beq.n	800c8d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c8ce:	6839      	ldr	r1, [r7, #0]
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f000 f8e2 	bl	800ca9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c8d6:	e023      	b.n	800c920 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	dc02      	bgt.n	800c8ea <USBD_GetConfig+0x2e>
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	dc03      	bgt.n	800c8f0 <USBD_GetConfig+0x34>
 800c8e8:	e015      	b.n	800c916 <USBD_GetConfig+0x5a>
 800c8ea:	2b03      	cmp	r3, #3
 800c8ec:	d00b      	beq.n	800c906 <USBD_GetConfig+0x4a>
 800c8ee:	e012      	b.n	800c916 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	3308      	adds	r3, #8
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f93c 	bl	800cb7c <USBD_CtlSendData>
        break;
 800c904:	e00c      	b.n	800c920 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	3304      	adds	r3, #4
 800c90a:	2201      	movs	r2, #1
 800c90c:	4619      	mov	r1, r3
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 f934 	bl	800cb7c <USBD_CtlSendData>
        break;
 800c914:	e004      	b.n	800c920 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 f8be 	bl	800ca9a <USBD_CtlError>
        break;
 800c91e:	bf00      	nop
}
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	3b01      	subs	r3, #1
 800c93c:	2b02      	cmp	r3, #2
 800c93e:	d81e      	bhi.n	800c97e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	88db      	ldrh	r3, [r3, #6]
 800c944:	2b02      	cmp	r3, #2
 800c946:	d004      	beq.n	800c952 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f8a5 	bl	800ca9a <USBD_CtlError>
        break;
 800c950:	e01a      	b.n	800c988 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2201      	movs	r2, #1
 800c956:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d005      	beq.n	800c96e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	68db      	ldr	r3, [r3, #12]
 800c966:	f043 0202 	orr.w	r2, r3, #2
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	330c      	adds	r3, #12
 800c972:	2202      	movs	r2, #2
 800c974:	4619      	mov	r1, r3
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f900 	bl	800cb7c <USBD_CtlSendData>
      break;
 800c97c:	e004      	b.n	800c988 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c97e:	6839      	ldr	r1, [r7, #0]
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 f88a 	bl	800ca9a <USBD_CtlError>
      break;
 800c986:	bf00      	nop
  }
}
 800c988:	bf00      	nop
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	885b      	ldrh	r3, [r3, #2]
 800c99e:	2b01      	cmp	r3, #1
 800c9a0:	d107      	bne.n	800c9b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f940 	bl	800cc30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c9b0:	e013      	b.n	800c9da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	885b      	ldrh	r3, [r3, #2]
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d10b      	bne.n	800c9d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	889b      	ldrh	r3, [r3, #4]
 800c9be:	0a1b      	lsrs	r3, r3, #8
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 f930 	bl	800cc30 <USBD_CtlSendStatus>
}
 800c9d0:	e003      	b.n	800c9da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c9d2:	6839      	ldr	r1, [r7, #0]
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 f860 	bl	800ca9a <USBD_CtlError>
}
 800c9da:	bf00      	nop
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9e2:	b580      	push	{r7, lr}
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
 800c9ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d80b      	bhi.n	800ca12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	885b      	ldrh	r3, [r3, #2]
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d10c      	bne.n	800ca1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f910 	bl	800cc30 <USBD_CtlSendStatus>
      }
      break;
 800ca10:	e004      	b.n	800ca1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 f840 	bl	800ca9a <USBD_CtlError>
      break;
 800ca1a:	e000      	b.n	800ca1e <USBD_ClrFeature+0x3c>
      break;
 800ca1c:	bf00      	nop
  }
}
 800ca1e:	bf00      	nop
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b084      	sub	sp, #16
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
 800ca2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	781a      	ldrb	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	781a      	ldrb	r2, [r3, #0]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f7ff fa16 	bl	800be82 <SWAPBYTE>
 800ca56:	4603      	mov	r3, r0
 800ca58:	461a      	mov	r2, r3
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3301      	adds	r3, #1
 800ca62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3301      	adds	r3, #1
 800ca68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ca6a:	68f8      	ldr	r0, [r7, #12]
 800ca6c:	f7ff fa09 	bl	800be82 <SWAPBYTE>
 800ca70:	4603      	mov	r3, r0
 800ca72:	461a      	mov	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	3301      	adds	r3, #1
 800ca82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f7ff f9fc 	bl	800be82 <SWAPBYTE>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	80da      	strh	r2, [r3, #6]
}
 800ca92:	bf00      	nop
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b082      	sub	sp, #8
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
 800caa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800caa4:	2180      	movs	r1, #128	@ 0x80
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fd68 	bl	800d57c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800caac:	2100      	movs	r1, #0
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fd64 	bl	800d57c <USBD_LL_StallEP>
}
 800cab4:	bf00      	nop
 800cab6:	3708      	adds	r7, #8
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cac8:	2300      	movs	r3, #0
 800caca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d036      	beq.n	800cb40 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cad6:	6938      	ldr	r0, [r7, #16]
 800cad8:	f000 f836 	bl	800cb48 <USBD_GetLen>
 800cadc:	4603      	mov	r3, r0
 800cade:	3301      	adds	r3, #1
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	005b      	lsls	r3, r3, #1
 800cae4:	b29a      	uxth	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800caea:	7dfb      	ldrb	r3, [r7, #23]
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	4413      	add	r3, r2
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	7812      	ldrb	r2, [r2, #0]
 800caf4:	701a      	strb	r2, [r3, #0]
  idx++;
 800caf6:	7dfb      	ldrb	r3, [r7, #23]
 800caf8:	3301      	adds	r3, #1
 800cafa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cafc:	7dfb      	ldrb	r3, [r7, #23]
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	4413      	add	r3, r2
 800cb02:	2203      	movs	r2, #3
 800cb04:	701a      	strb	r2, [r3, #0]
  idx++;
 800cb06:	7dfb      	ldrb	r3, [r7, #23]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cb0c:	e013      	b.n	800cb36 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cb0e:	7dfb      	ldrb	r3, [r7, #23]
 800cb10:	68ba      	ldr	r2, [r7, #8]
 800cb12:	4413      	add	r3, r2
 800cb14:	693a      	ldr	r2, [r7, #16]
 800cb16:	7812      	ldrb	r2, [r2, #0]
 800cb18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	613b      	str	r3, [r7, #16]
    idx++;
 800cb20:	7dfb      	ldrb	r3, [r7, #23]
 800cb22:	3301      	adds	r3, #1
 800cb24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cb26:	7dfb      	ldrb	r3, [r7, #23]
 800cb28:	68ba      	ldr	r2, [r7, #8]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	701a      	strb	r2, [r3, #0]
    idx++;
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
 800cb32:	3301      	adds	r3, #1
 800cb34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1e7      	bne.n	800cb0e <USBD_GetString+0x52>
 800cb3e:	e000      	b.n	800cb42 <USBD_GetString+0x86>
    return;
 800cb40:	bf00      	nop
  }
}
 800cb42:	3718      	adds	r7, #24
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cb50:	2300      	movs	r3, #0
 800cb52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cb58:	e005      	b.n	800cb66 <USBD_GetLen+0x1e>
  {
    len++;
 800cb5a:	7bfb      	ldrb	r3, [r7, #15]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	3301      	adds	r3, #1
 800cb64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1f5      	bne.n	800cb5a <USBD_GetLen+0x12>
  }

  return len;
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3714      	adds	r7, #20
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	687a      	ldr	r2, [r7, #4]
 800cb9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	2100      	movs	r1, #0
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f000 fdb8 	bl	800d718 <USBD_LL_Transmit>

  return USBD_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3710      	adds	r7, #16
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b084      	sub	sp, #16
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	60f8      	str	r0, [r7, #12]
 800cbba:	60b9      	str	r1, [r7, #8]
 800cbbc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	68ba      	ldr	r2, [r7, #8]
 800cbc2:	2100      	movs	r1, #0
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	f000 fda7 	bl	800d718 <USBD_LL_Transmit>

  return USBD_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2203      	movs	r2, #3
 800cbe4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	f000 fdc2 	bl	800d788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc04:	2300      	movs	r3, #0
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b084      	sub	sp, #16
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	60f8      	str	r0, [r7, #12]
 800cc16:	60b9      	str	r1, [r7, #8]
 800cc18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	68ba      	ldr	r2, [r7, #8]
 800cc1e:	2100      	movs	r1, #0
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f000 fdb1 	bl	800d788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2204      	movs	r2, #4
 800cc3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc40:	2300      	movs	r3, #0
 800cc42:	2200      	movs	r2, #0
 800cc44:	2100      	movs	r1, #0
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 fd66 	bl	800d718 <USBD_LL_Transmit>

  return USBD_OK;
 800cc4c:	2300      	movs	r3, #0
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3708      	adds	r7, #8
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b082      	sub	sp, #8
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2205      	movs	r2, #5
 800cc62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc66:	2300      	movs	r3, #0
 800cc68:	2200      	movs	r2, #0
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 fd8b 	bl	800d788 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc80:	2200      	movs	r2, #0
 800cc82:	4912      	ldr	r1, [pc, #72]	@ (800cccc <MX_USB_DEVICE_Init+0x50>)
 800cc84:	4812      	ldr	r0, [pc, #72]	@ (800ccd0 <MX_USB_DEVICE_Init+0x54>)
 800cc86:	f7fe fcd9 	bl	800b63c <USBD_Init>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d001      	beq.n	800cc94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cc90:	f7f4 fac7 	bl	8001222 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cc94:	490f      	ldr	r1, [pc, #60]	@ (800ccd4 <MX_USB_DEVICE_Init+0x58>)
 800cc96:	480e      	ldr	r0, [pc, #56]	@ (800ccd0 <MX_USB_DEVICE_Init+0x54>)
 800cc98:	f7fe fd00 	bl	800b69c <USBD_RegisterClass>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d001      	beq.n	800cca6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cca2:	f7f4 fabe 	bl	8001222 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cca6:	490c      	ldr	r1, [pc, #48]	@ (800ccd8 <MX_USB_DEVICE_Init+0x5c>)
 800cca8:	4809      	ldr	r0, [pc, #36]	@ (800ccd0 <MX_USB_DEVICE_Init+0x54>)
 800ccaa:	f7fe fc37 	bl	800b51c <USBD_CDC_RegisterInterface>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d001      	beq.n	800ccb8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ccb4:	f7f4 fab5 	bl	8001222 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ccb8:	4805      	ldr	r0, [pc, #20]	@ (800ccd0 <MX_USB_DEVICE_Init+0x54>)
 800ccba:	f7fe fd25 	bl	800b708 <USBD_Start>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d001      	beq.n	800ccc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ccc4:	f7f4 faad 	bl	8001222 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ccc8:	bf00      	nop
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	200000ac 	.word	0x200000ac
 800ccd0:	20003580 	.word	0x20003580
 800ccd4:	20000018 	.word	0x20000018
 800ccd8:	20000098 	.word	0x20000098

0800ccdc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cce0:	2200      	movs	r2, #0
 800cce2:	4905      	ldr	r1, [pc, #20]	@ (800ccf8 <CDC_Init_FS+0x1c>)
 800cce4:	4805      	ldr	r0, [pc, #20]	@ (800ccfc <CDC_Init_FS+0x20>)
 800cce6:	f7fe fc33 	bl	800b550 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ccea:	4905      	ldr	r1, [pc, #20]	@ (800cd00 <CDC_Init_FS+0x24>)
 800ccec:	4803      	ldr	r0, [pc, #12]	@ (800ccfc <CDC_Init_FS+0x20>)
 800ccee:	f7fe fc51 	bl	800b594 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ccf2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	2000405c 	.word	0x2000405c
 800ccfc:	20003580 	.word	0x20003580
 800cd00:	2000385c 	.word	0x2000385c

0800cd04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cd04:	b480      	push	{r7}
 800cd06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cd08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	6039      	str	r1, [r7, #0]
 800cd1e:	71fb      	strb	r3, [r7, #7]
 800cd20:	4613      	mov	r3, r2
 800cd22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cd24:	79fb      	ldrb	r3, [r7, #7]
 800cd26:	2b23      	cmp	r3, #35	@ 0x23
 800cd28:	d84a      	bhi.n	800cdc0 <CDC_Control_FS+0xac>
 800cd2a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd30 <CDC_Control_FS+0x1c>)
 800cd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd30:	0800cdc1 	.word	0x0800cdc1
 800cd34:	0800cdc1 	.word	0x0800cdc1
 800cd38:	0800cdc1 	.word	0x0800cdc1
 800cd3c:	0800cdc1 	.word	0x0800cdc1
 800cd40:	0800cdc1 	.word	0x0800cdc1
 800cd44:	0800cdc1 	.word	0x0800cdc1
 800cd48:	0800cdc1 	.word	0x0800cdc1
 800cd4c:	0800cdc1 	.word	0x0800cdc1
 800cd50:	0800cdc1 	.word	0x0800cdc1
 800cd54:	0800cdc1 	.word	0x0800cdc1
 800cd58:	0800cdc1 	.word	0x0800cdc1
 800cd5c:	0800cdc1 	.word	0x0800cdc1
 800cd60:	0800cdc1 	.word	0x0800cdc1
 800cd64:	0800cdc1 	.word	0x0800cdc1
 800cd68:	0800cdc1 	.word	0x0800cdc1
 800cd6c:	0800cdc1 	.word	0x0800cdc1
 800cd70:	0800cdc1 	.word	0x0800cdc1
 800cd74:	0800cdc1 	.word	0x0800cdc1
 800cd78:	0800cdc1 	.word	0x0800cdc1
 800cd7c:	0800cdc1 	.word	0x0800cdc1
 800cd80:	0800cdc1 	.word	0x0800cdc1
 800cd84:	0800cdc1 	.word	0x0800cdc1
 800cd88:	0800cdc1 	.word	0x0800cdc1
 800cd8c:	0800cdc1 	.word	0x0800cdc1
 800cd90:	0800cdc1 	.word	0x0800cdc1
 800cd94:	0800cdc1 	.word	0x0800cdc1
 800cd98:	0800cdc1 	.word	0x0800cdc1
 800cd9c:	0800cdc1 	.word	0x0800cdc1
 800cda0:	0800cdc1 	.word	0x0800cdc1
 800cda4:	0800cdc1 	.word	0x0800cdc1
 800cda8:	0800cdc1 	.word	0x0800cdc1
 800cdac:	0800cdc1 	.word	0x0800cdc1
 800cdb0:	0800cdc1 	.word	0x0800cdc1
 800cdb4:	0800cdc1 	.word	0x0800cdc1
 800cdb8:	0800cdc1 	.word	0x0800cdc1
 800cdbc:	0800cdc1 	.word	0x0800cdc1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cdc0:	bf00      	nop
  }

  return (USBD_OK);
 800cdc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cdda:	6879      	ldr	r1, [r7, #4]
 800cddc:	4808      	ldr	r0, [pc, #32]	@ (800ce00 <CDC_Receive_FS+0x30>)
 800cdde:	f7fe fbd9 	bl	800b594 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cde2:	4807      	ldr	r0, [pc, #28]	@ (800ce00 <CDC_Receive_FS+0x30>)
 800cde4:	f7fe fbf4 	bl	800b5d0 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  //USB_My_Receive(Buf, *Len);
  comms_cdc_rx_callback(Buf, *Len);
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4619      	mov	r1, r3
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7f3 ff04 	bl	8000bfc <comms_cdc_rx_callback>

  return (USBD_OK);
 800cdf4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3708      	adds	r7, #8
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	20003580 	.word	0x20003580

0800ce04 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b087      	sub	sp, #28
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ce12:	2300      	movs	r3, #0
 800ce14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ce16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	371c      	adds	r7, #28
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
	...

0800ce28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	4603      	mov	r3, r0
 800ce30:	6039      	str	r1, [r7, #0]
 800ce32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	2212      	movs	r2, #18
 800ce38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce3a:	4b03      	ldr	r3, [pc, #12]	@ (800ce48 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr
 800ce48:	200000cc 	.word	0x200000cc

0800ce4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	4603      	mov	r3, r0
 800ce54:	6039      	str	r1, [r7, #0]
 800ce56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	2204      	movs	r2, #4
 800ce5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce5e:	4b03      	ldr	r3, [pc, #12]	@ (800ce6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr
 800ce6c:	200000ec 	.word	0x200000ec

0800ce70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	4603      	mov	r3, r0
 800ce78:	6039      	str	r1, [r7, #0]
 800ce7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce7c:	79fb      	ldrb	r3, [r7, #7]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d105      	bne.n	800ce8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce82:	683a      	ldr	r2, [r7, #0]
 800ce84:	4907      	ldr	r1, [pc, #28]	@ (800cea4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce86:	4808      	ldr	r0, [pc, #32]	@ (800cea8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce88:	f7ff fe18 	bl	800cabc <USBD_GetString>
 800ce8c:	e004      	b.n	800ce98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce8e:	683a      	ldr	r2, [r7, #0]
 800ce90:	4904      	ldr	r1, [pc, #16]	@ (800cea4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce92:	4805      	ldr	r0, [pc, #20]	@ (800cea8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce94:	f7ff fe12 	bl	800cabc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce98:	4b02      	ldr	r3, [pc, #8]	@ (800cea4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	2000485c 	.word	0x2000485c
 800cea8:	0800d984 	.word	0x0800d984

0800ceac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	6039      	str	r1, [r7, #0]
 800ceb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ceb8:	683a      	ldr	r2, [r7, #0]
 800ceba:	4904      	ldr	r1, [pc, #16]	@ (800cecc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cebc:	4804      	ldr	r0, [pc, #16]	@ (800ced0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cebe:	f7ff fdfd 	bl	800cabc <USBD_GetString>
  return USBD_StrDesc;
 800cec2:	4b02      	ldr	r3, [pc, #8]	@ (800cecc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3708      	adds	r7, #8
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	2000485c 	.word	0x2000485c
 800ced0:	0800d99c 	.word	0x0800d99c

0800ced4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	4603      	mov	r3, r0
 800cedc:	6039      	str	r1, [r7, #0]
 800cede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	221a      	movs	r2, #26
 800cee4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cee6:	f000 f855 	bl	800cf94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ceea:	4b02      	ldr	r3, [pc, #8]	@ (800cef4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3708      	adds	r7, #8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	200000f0 	.word	0x200000f0

0800cef8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b082      	sub	sp, #8
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	4603      	mov	r3, r0
 800cf00:	6039      	str	r1, [r7, #0]
 800cf02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cf04:	79fb      	ldrb	r3, [r7, #7]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d105      	bne.n	800cf16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf0a:	683a      	ldr	r2, [r7, #0]
 800cf0c:	4907      	ldr	r1, [pc, #28]	@ (800cf2c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf0e:	4808      	ldr	r0, [pc, #32]	@ (800cf30 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf10:	f7ff fdd4 	bl	800cabc <USBD_GetString>
 800cf14:	e004      	b.n	800cf20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf16:	683a      	ldr	r2, [r7, #0]
 800cf18:	4904      	ldr	r1, [pc, #16]	@ (800cf2c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf1a:	4805      	ldr	r0, [pc, #20]	@ (800cf30 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf1c:	f7ff fdce 	bl	800cabc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf20:	4b02      	ldr	r3, [pc, #8]	@ (800cf2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	2000485c 	.word	0x2000485c
 800cf30:	0800d9b0 	.word	0x0800d9b0

0800cf34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	6039      	str	r1, [r7, #0]
 800cf3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf40:	79fb      	ldrb	r3, [r7, #7]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d105      	bne.n	800cf52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf46:	683a      	ldr	r2, [r7, #0]
 800cf48:	4907      	ldr	r1, [pc, #28]	@ (800cf68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf4a:	4808      	ldr	r0, [pc, #32]	@ (800cf6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf4c:	f7ff fdb6 	bl	800cabc <USBD_GetString>
 800cf50:	e004      	b.n	800cf5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf52:	683a      	ldr	r2, [r7, #0]
 800cf54:	4904      	ldr	r1, [pc, #16]	@ (800cf68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf56:	4805      	ldr	r0, [pc, #20]	@ (800cf6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf58:	f7ff fdb0 	bl	800cabc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf5c:	4b02      	ldr	r3, [pc, #8]	@ (800cf68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3708      	adds	r7, #8
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	2000485c 	.word	0x2000485c
 800cf6c:	0800d9bc 	.word	0x0800d9bc

0800cf70 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	6039      	str	r1, [r7, #0]
 800cf7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	220c      	movs	r2, #12
 800cf80:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cf82:	4b03      	ldr	r3, [pc, #12]	@ (800cf90 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	200000e0 	.word	0x200000e0

0800cf94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf9a:	4b0f      	ldr	r3, [pc, #60]	@ (800cfd8 <Get_SerialNum+0x44>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cfa0:	4b0e      	ldr	r3, [pc, #56]	@ (800cfdc <Get_SerialNum+0x48>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cfa6:	4b0e      	ldr	r3, [pc, #56]	@ (800cfe0 <Get_SerialNum+0x4c>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d009      	beq.n	800cfce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cfba:	2208      	movs	r2, #8
 800cfbc:	4909      	ldr	r1, [pc, #36]	@ (800cfe4 <Get_SerialNum+0x50>)
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f000 f814 	bl	800cfec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cfc4:	2204      	movs	r2, #4
 800cfc6:	4908      	ldr	r1, [pc, #32]	@ (800cfe8 <Get_SerialNum+0x54>)
 800cfc8:	68b8      	ldr	r0, [r7, #8]
 800cfca:	f000 f80f 	bl	800cfec <IntToUnicode>
  }
}
 800cfce:	bf00      	nop
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop
 800cfd8:	1fff7590 	.word	0x1fff7590
 800cfdc:	1fff7594 	.word	0x1fff7594
 800cfe0:	1fff7598 	.word	0x1fff7598
 800cfe4:	200000f2 	.word	0x200000f2
 800cfe8:	20000102 	.word	0x20000102

0800cfec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b087      	sub	sp, #28
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	4613      	mov	r3, r2
 800cff8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cffa:	2300      	movs	r3, #0
 800cffc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cffe:	2300      	movs	r3, #0
 800d000:	75fb      	strb	r3, [r7, #23]
 800d002:	e027      	b.n	800d054 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	0f1b      	lsrs	r3, r3, #28
 800d008:	2b09      	cmp	r3, #9
 800d00a:	d80b      	bhi.n	800d024 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	0f1b      	lsrs	r3, r3, #28
 800d010:	b2da      	uxtb	r2, r3
 800d012:	7dfb      	ldrb	r3, [r7, #23]
 800d014:	005b      	lsls	r3, r3, #1
 800d016:	4619      	mov	r1, r3
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	440b      	add	r3, r1
 800d01c:	3230      	adds	r2, #48	@ 0x30
 800d01e:	b2d2      	uxtb	r2, r2
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	e00a      	b.n	800d03a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	0f1b      	lsrs	r3, r3, #28
 800d028:	b2da      	uxtb	r2, r3
 800d02a:	7dfb      	ldrb	r3, [r7, #23]
 800d02c:	005b      	lsls	r3, r3, #1
 800d02e:	4619      	mov	r1, r3
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	440b      	add	r3, r1
 800d034:	3237      	adds	r2, #55	@ 0x37
 800d036:	b2d2      	uxtb	r2, r2
 800d038:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	011b      	lsls	r3, r3, #4
 800d03e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d040:	7dfb      	ldrb	r3, [r7, #23]
 800d042:	005b      	lsls	r3, r3, #1
 800d044:	3301      	adds	r3, #1
 800d046:	68ba      	ldr	r2, [r7, #8]
 800d048:	4413      	add	r3, r2
 800d04a:	2200      	movs	r2, #0
 800d04c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d04e:	7dfb      	ldrb	r3, [r7, #23]
 800d050:	3301      	adds	r3, #1
 800d052:	75fb      	strb	r3, [r7, #23]
 800d054:	7dfa      	ldrb	r2, [r7, #23]
 800d056:	79fb      	ldrb	r3, [r7, #7]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d3d3      	bcc.n	800d004 <IntToUnicode+0x18>
  }
}
 800d05c:	bf00      	nop
 800d05e:	bf00      	nop
 800d060:	371c      	adds	r7, #28
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr
	...

0800d06c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b0b0      	sub	sp, #192	@ 0xc0
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d074:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d078:	2200      	movs	r2, #0
 800d07a:	601a      	str	r2, [r3, #0]
 800d07c:	605a      	str	r2, [r3, #4]
 800d07e:	609a      	str	r2, [r3, #8]
 800d080:	60da      	str	r2, [r3, #12]
 800d082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d084:	f107 0318 	add.w	r3, r7, #24
 800d088:	2294      	movs	r2, #148	@ 0x94
 800d08a:	2100      	movs	r1, #0
 800d08c:	4618      	mov	r0, r3
 800d08e:	f000 fc33 	bl	800d8f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d09a:	d174      	bne.n	800d186 <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d09c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d0a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d0a8:	f107 0318 	add.w	r3, r7, #24
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7f9 f88f 	bl	80061d0 <HAL_RCCEx_PeriphCLKConfig>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d001      	beq.n	800d0bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d0b8:	f7f4 f8b3 	bl	8001222 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d0bc:	4b34      	ldr	r3, [pc, #208]	@ (800d190 <HAL_PCD_MspInit+0x124>)
 800d0be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0c0:	4a33      	ldr	r2, [pc, #204]	@ (800d190 <HAL_PCD_MspInit+0x124>)
 800d0c2:	f043 0301 	orr.w	r3, r3, #1
 800d0c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d0c8:	4b31      	ldr	r3, [pc, #196]	@ (800d190 <HAL_PCD_MspInit+0x124>)
 800d0ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0cc:	f003 0301 	and.w	r3, r3, #1
 800d0d0:	617b      	str	r3, [r7, #20]
 800d0d2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d0d4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800d0d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0dc:	2302      	movs	r3, #2
 800d0de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0e8:	2303      	movs	r3, #3
 800d0ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d0ee:	230a      	movs	r3, #10
 800d0f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d0fe:	f7f6 fd27 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d102:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d10a:	2300      	movs	r3, #0
 800d10c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d110:	2300      	movs	r3, #0
 800d112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d116:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d11a:	4619      	mov	r1, r3
 800d11c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d120:	f7f6 fd16 	bl	8003b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d124:	4b1a      	ldr	r3, [pc, #104]	@ (800d190 <HAL_PCD_MspInit+0x124>)
 800d126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d128:	4a19      	ldr	r2, [pc, #100]	@ (800d190 <HAL_PCD_MspInit+0x124>)
 800d12a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d12e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d130:	4b17      	ldr	r3, [pc, #92]	@ (800d190 <HAL_PCD_MspInit+0x124>)
 800d132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d138:	613b      	str	r3, [r7, #16]
 800d13a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d13c:	4b14      	ldr	r3, [pc, #80]	@ (800d190 <HAL_PCD_MspInit+0x124>)
 800d13e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d144:	2b00      	cmp	r3, #0
 800d146:	d114      	bne.n	800d172 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d148:	4b11      	ldr	r3, [pc, #68]	@ (800d190 <HAL_PCD_MspInit+0x124>)
 800d14a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d14c:	4a10      	ldr	r2, [pc, #64]	@ (800d190 <HAL_PCD_MspInit+0x124>)
 800d14e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d152:	6593      	str	r3, [r2, #88]	@ 0x58
 800d154:	4b0e      	ldr	r3, [pc, #56]	@ (800d190 <HAL_PCD_MspInit+0x124>)
 800d156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d15c:	60fb      	str	r3, [r7, #12]
 800d15e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d160:	f7f8 f93e 	bl	80053e0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d164:	4b0a      	ldr	r3, [pc, #40]	@ (800d190 <HAL_PCD_MspInit+0x124>)
 800d166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d168:	4a09      	ldr	r2, [pc, #36]	@ (800d190 <HAL_PCD_MspInit+0x124>)
 800d16a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d16e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d170:	e001      	b.n	800d176 <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d172:	f7f8 f935 	bl	80053e0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d176:	2200      	movs	r2, #0
 800d178:	2100      	movs	r1, #0
 800d17a:	2043      	movs	r0, #67	@ 0x43
 800d17c:	f7f6 f93b 	bl	80033f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d180:	2043      	movs	r0, #67	@ 0x43
 800d182:	f7f6 f954 	bl	800342e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d186:	bf00      	nop
 800d188:	37c0      	adds	r7, #192	@ 0xc0
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	40021000 	.word	0x40021000

0800d194 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	f7fe faf9 	bl	800b7a2 <USBD_LL_SetupStage>
}
 800d1b0:	bf00      	nop
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d1ca:	78fa      	ldrb	r2, [r7, #3]
 800d1cc:	6879      	ldr	r1, [r7, #4]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	00db      	lsls	r3, r3, #3
 800d1d2:	4413      	add	r3, r2
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	440b      	add	r3, r1
 800d1d8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	78fb      	ldrb	r3, [r7, #3]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	f7fe fb33 	bl	800b84c <USBD_LL_DataOutStage>
}
 800d1e6:	bf00      	nop
 800d1e8:	3708      	adds	r7, #8
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b082      	sub	sp, #8
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
 800d1f6:	460b      	mov	r3, r1
 800d1f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d200:	78fa      	ldrb	r2, [r7, #3]
 800d202:	6879      	ldr	r1, [r7, #4]
 800d204:	4613      	mov	r3, r2
 800d206:	00db      	lsls	r3, r3, #3
 800d208:	4413      	add	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	440b      	add	r3, r1
 800d20e:	3348      	adds	r3, #72	@ 0x48
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	78fb      	ldrb	r3, [r7, #3]
 800d214:	4619      	mov	r1, r3
 800d216:	f7fe fbcc 	bl	800b9b2 <USBD_LL_DataInStage>
}
 800d21a:	bf00      	nop
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d222:	b580      	push	{r7, lr}
 800d224:	b082      	sub	sp, #8
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d230:	4618      	mov	r0, r3
 800d232:	f7fe fd06 	bl	800bc42 <USBD_LL_SOF>
}
 800d236:	bf00      	nop
 800d238:	3708      	adds	r7, #8
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}

0800d23e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d23e:	b580      	push	{r7, lr}
 800d240:	b084      	sub	sp, #16
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d246:	2301      	movs	r3, #1
 800d248:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	2b02      	cmp	r3, #2
 800d250:	d001      	beq.n	800d256 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d252:	f7f3 ffe6 	bl	8001222 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d25c:	7bfa      	ldrb	r2, [r7, #15]
 800d25e:	4611      	mov	r1, r2
 800d260:	4618      	mov	r0, r3
 800d262:	f7fe fcaa 	bl	800bbba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d26c:	4618      	mov	r0, r3
 800d26e:	f7fe fc52 	bl	800bb16 <USBD_LL_Reset>
}
 800d272:	bf00      	nop
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
	...

0800d27c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	6812      	ldr	r2, [r2, #0]
 800d292:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d296:	f043 0301 	orr.w	r3, r3, #1
 800d29a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fe fc99 	bl	800bbda <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6a1b      	ldr	r3, [r3, #32]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d005      	beq.n	800d2bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d2b0:	4b04      	ldr	r3, [pc, #16]	@ (800d2c4 <HAL_PCD_SuspendCallback+0x48>)
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	4a03      	ldr	r2, [pc, #12]	@ (800d2c4 <HAL_PCD_SuspendCallback+0x48>)
 800d2b6:	f043 0306 	orr.w	r3, r3, #6
 800d2ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d2bc:	bf00      	nop
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}
 800d2c4:	e000ed00 	.word	0xe000ed00

0800d2c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	6812      	ldr	r2, [r2, #0]
 800d2de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d2e2:	f023 0301 	bic.w	r3, r3, #1
 800d2e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a1b      	ldr	r3, [r3, #32]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d007      	beq.n	800d300 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d2f0:	4b08      	ldr	r3, [pc, #32]	@ (800d314 <HAL_PCD_ResumeCallback+0x4c>)
 800d2f2:	691b      	ldr	r3, [r3, #16]
 800d2f4:	4a07      	ldr	r2, [pc, #28]	@ (800d314 <HAL_PCD_ResumeCallback+0x4c>)
 800d2f6:	f023 0306 	bic.w	r3, r3, #6
 800d2fa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d2fc:	f000 faf6 	bl	800d8ec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d306:	4618      	mov	r0, r3
 800d308:	f7fe fc83 	bl	800bc12 <USBD_LL_Resume>
}
 800d30c:	bf00      	nop
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	e000ed00 	.word	0xe000ed00

0800d318 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	460b      	mov	r3, r1
 800d322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d32a:	78fa      	ldrb	r2, [r7, #3]
 800d32c:	4611      	mov	r1, r2
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fe fcd9 	bl	800bce6 <USBD_LL_IsoOUTIncomplete>
}
 800d334:	bf00      	nop
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	460b      	mov	r3, r1
 800d346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d34e:	78fa      	ldrb	r2, [r7, #3]
 800d350:	4611      	mov	r1, r2
 800d352:	4618      	mov	r0, r3
 800d354:	f7fe fc95 	bl	800bc82 <USBD_LL_IsoINIncomplete>
}
 800d358:	bf00      	nop
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fe fceb 	bl	800bd4a <USBD_LL_DevConnected>
}
 800d374:	bf00      	nop
 800d376:	3708      	adds	r7, #8
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7fe fce8 	bl	800bd60 <USBD_LL_DevDisconnected>
}
 800d390:	bf00      	nop
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d13c      	bne.n	800d422 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d3a8:	4a20      	ldr	r2, [pc, #128]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	4a1e      	ldr	r2, [pc, #120]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3b4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d3b8:	4b1c      	ldr	r3, [pc, #112]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d3be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d3c0:	4b1a      	ldr	r3, [pc, #104]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3c2:	2206      	movs	r2, #6
 800d3c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d3c6:	4b19      	ldr	r3, [pc, #100]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3c8:	2202      	movs	r2, #2
 800d3ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d3cc:	4b17      	ldr	r3, [pc, #92]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d3d2:	4b16      	ldr	r3, [pc, #88]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d3d8:	4b14      	ldr	r3, [pc, #80]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3da:	2200      	movs	r2, #0
 800d3dc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d3de:	4b13      	ldr	r3, [pc, #76]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d3e4:	4b11      	ldr	r3, [pc, #68]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d3ea:	4b10      	ldr	r3, [pc, #64]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d3f0:	4b0e      	ldr	r3, [pc, #56]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d3f6:	480d      	ldr	r0, [pc, #52]	@ (800d42c <USBD_LL_Init+0x94>)
 800d3f8:	f7f6 fd86 	bl	8003f08 <HAL_PCD_Init>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d001      	beq.n	800d406 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d402:	f7f3 ff0e 	bl	8001222 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d406:	2180      	movs	r1, #128	@ 0x80
 800d408:	4808      	ldr	r0, [pc, #32]	@ (800d42c <USBD_LL_Init+0x94>)
 800d40a:	f7f7 fef0 	bl	80051ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d40e:	2240      	movs	r2, #64	@ 0x40
 800d410:	2100      	movs	r1, #0
 800d412:	4806      	ldr	r0, [pc, #24]	@ (800d42c <USBD_LL_Init+0x94>)
 800d414:	f7f7 fea4 	bl	8005160 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d418:	2280      	movs	r2, #128	@ 0x80
 800d41a:	2101      	movs	r1, #1
 800d41c:	4803      	ldr	r0, [pc, #12]	@ (800d42c <USBD_LL_Init+0x94>)
 800d41e:	f7f7 fe9f 	bl	8005160 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	20004a5c 	.word	0x20004a5c

0800d430 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d438:	2300      	movs	r3, #0
 800d43a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d446:	4618      	mov	r0, r3
 800d448:	f7f6 fe82 	bl	8004150 <HAL_PCD_Start>
 800d44c:	4603      	mov	r3, r0
 800d44e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d450:	7bbb      	ldrb	r3, [r7, #14]
 800d452:	2b03      	cmp	r3, #3
 800d454:	d816      	bhi.n	800d484 <USBD_LL_Start+0x54>
 800d456:	a201      	add	r2, pc, #4	@ (adr r2, 800d45c <USBD_LL_Start+0x2c>)
 800d458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d45c:	0800d46d 	.word	0x0800d46d
 800d460:	0800d473 	.word	0x0800d473
 800d464:	0800d479 	.word	0x0800d479
 800d468:	0800d47f 	.word	0x0800d47f
    case HAL_OK :
      usb_status = USBD_OK;
 800d46c:	2300      	movs	r3, #0
 800d46e:	73fb      	strb	r3, [r7, #15]
    break;
 800d470:	e00b      	b.n	800d48a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d472:	2303      	movs	r3, #3
 800d474:	73fb      	strb	r3, [r7, #15]
    break;
 800d476:	e008      	b.n	800d48a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d478:	2301      	movs	r3, #1
 800d47a:	73fb      	strb	r3, [r7, #15]
    break;
 800d47c:	e005      	b.n	800d48a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d47e:	2303      	movs	r3, #3
 800d480:	73fb      	strb	r3, [r7, #15]
    break;
 800d482:	e002      	b.n	800d48a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d484:	2303      	movs	r3, #3
 800d486:	73fb      	strb	r3, [r7, #15]
    break;
 800d488:	bf00      	nop
  }
  return usb_status;
 800d48a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	4608      	mov	r0, r1
 800d49e:	4611      	mov	r1, r2
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	4603      	mov	r3, r0
 800d4a4:	70fb      	strb	r3, [r7, #3]
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	70bb      	strb	r3, [r7, #2]
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d4bc:	78bb      	ldrb	r3, [r7, #2]
 800d4be:	883a      	ldrh	r2, [r7, #0]
 800d4c0:	78f9      	ldrb	r1, [r7, #3]
 800d4c2:	f7f7 fb2c 	bl	8004b1e <HAL_PCD_EP_Open>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d4ca:	7bbb      	ldrb	r3, [r7, #14]
 800d4cc:	2b03      	cmp	r3, #3
 800d4ce:	d817      	bhi.n	800d500 <USBD_LL_OpenEP+0x6c>
 800d4d0:	a201      	add	r2, pc, #4	@ (adr r2, 800d4d8 <USBD_LL_OpenEP+0x44>)
 800d4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d6:	bf00      	nop
 800d4d8:	0800d4e9 	.word	0x0800d4e9
 800d4dc:	0800d4ef 	.word	0x0800d4ef
 800d4e0:	0800d4f5 	.word	0x0800d4f5
 800d4e4:	0800d4fb 	.word	0x0800d4fb
    case HAL_OK :
      usb_status = USBD_OK;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d4ec:	e00b      	b.n	800d506 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4ee:	2303      	movs	r3, #3
 800d4f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f2:	e008      	b.n	800d506 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f8:	e005      	b.n	800d506 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d4fa:	2303      	movs	r3, #3
 800d4fc:	73fb      	strb	r3, [r7, #15]
    break;
 800d4fe:	e002      	b.n	800d506 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d500:	2303      	movs	r3, #3
 800d502:	73fb      	strb	r3, [r7, #15]
    break;
 800d504:	bf00      	nop
  }
  return usb_status;
 800d506:	7bfb      	ldrb	r3, [r7, #15]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	460b      	mov	r3, r1
 800d51a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d51c:	2300      	movs	r3, #0
 800d51e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d520:	2300      	movs	r3, #0
 800d522:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d52a:	78fa      	ldrb	r2, [r7, #3]
 800d52c:	4611      	mov	r1, r2
 800d52e:	4618      	mov	r0, r3
 800d530:	f7f7 fb5d 	bl	8004bee <HAL_PCD_EP_Close>
 800d534:	4603      	mov	r3, r0
 800d536:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d538:	7bbb      	ldrb	r3, [r7, #14]
 800d53a:	2b03      	cmp	r3, #3
 800d53c:	d816      	bhi.n	800d56c <USBD_LL_CloseEP+0x5c>
 800d53e:	a201      	add	r2, pc, #4	@ (adr r2, 800d544 <USBD_LL_CloseEP+0x34>)
 800d540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d544:	0800d555 	.word	0x0800d555
 800d548:	0800d55b 	.word	0x0800d55b
 800d54c:	0800d561 	.word	0x0800d561
 800d550:	0800d567 	.word	0x0800d567
    case HAL_OK :
      usb_status = USBD_OK;
 800d554:	2300      	movs	r3, #0
 800d556:	73fb      	strb	r3, [r7, #15]
    break;
 800d558:	e00b      	b.n	800d572 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d55a:	2303      	movs	r3, #3
 800d55c:	73fb      	strb	r3, [r7, #15]
    break;
 800d55e:	e008      	b.n	800d572 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d560:	2301      	movs	r3, #1
 800d562:	73fb      	strb	r3, [r7, #15]
    break;
 800d564:	e005      	b.n	800d572 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d566:	2303      	movs	r3, #3
 800d568:	73fb      	strb	r3, [r7, #15]
    break;
 800d56a:	e002      	b.n	800d572 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d56c:	2303      	movs	r3, #3
 800d56e:	73fb      	strb	r3, [r7, #15]
    break;
 800d570:	bf00      	nop
  }
  return usb_status;
 800d572:	7bfb      	ldrb	r3, [r7, #15]
}
 800d574:	4618      	mov	r0, r3
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d588:	2300      	movs	r3, #0
 800d58a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d58c:	2300      	movs	r3, #0
 800d58e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d596:	78fa      	ldrb	r2, [r7, #3]
 800d598:	4611      	mov	r1, r2
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7f7 fbec 	bl	8004d78 <HAL_PCD_EP_SetStall>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d5a4:	7bbb      	ldrb	r3, [r7, #14]
 800d5a6:	2b03      	cmp	r3, #3
 800d5a8:	d816      	bhi.n	800d5d8 <USBD_LL_StallEP+0x5c>
 800d5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d5b0 <USBD_LL_StallEP+0x34>)
 800d5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b0:	0800d5c1 	.word	0x0800d5c1
 800d5b4:	0800d5c7 	.word	0x0800d5c7
 800d5b8:	0800d5cd 	.word	0x0800d5cd
 800d5bc:	0800d5d3 	.word	0x0800d5d3
    case HAL_OK :
      usb_status = USBD_OK;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d5c4:	e00b      	b.n	800d5de <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d5ca:	e008      	b.n	800d5de <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d5d0:	e005      	b.n	800d5de <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5d2:	2303      	movs	r3, #3
 800d5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d5d6:	e002      	b.n	800d5de <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d5d8:	2303      	movs	r3, #3
 800d5da:	73fb      	strb	r3, [r7, #15]
    break;
 800d5dc:	bf00      	nop
  }
  return usb_status;
 800d5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	460b      	mov	r3, r1
 800d5f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d602:	78fa      	ldrb	r2, [r7, #3]
 800d604:	4611      	mov	r1, r2
 800d606:	4618      	mov	r0, r3
 800d608:	f7f7 fc18 	bl	8004e3c <HAL_PCD_EP_ClrStall>
 800d60c:	4603      	mov	r3, r0
 800d60e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d610:	7bbb      	ldrb	r3, [r7, #14]
 800d612:	2b03      	cmp	r3, #3
 800d614:	d816      	bhi.n	800d644 <USBD_LL_ClearStallEP+0x5c>
 800d616:	a201      	add	r2, pc, #4	@ (adr r2, 800d61c <USBD_LL_ClearStallEP+0x34>)
 800d618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d61c:	0800d62d 	.word	0x0800d62d
 800d620:	0800d633 	.word	0x0800d633
 800d624:	0800d639 	.word	0x0800d639
 800d628:	0800d63f 	.word	0x0800d63f
    case HAL_OK :
      usb_status = USBD_OK;
 800d62c:	2300      	movs	r3, #0
 800d62e:	73fb      	strb	r3, [r7, #15]
    break;
 800d630:	e00b      	b.n	800d64a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d632:	2303      	movs	r3, #3
 800d634:	73fb      	strb	r3, [r7, #15]
    break;
 800d636:	e008      	b.n	800d64a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d638:	2301      	movs	r3, #1
 800d63a:	73fb      	strb	r3, [r7, #15]
    break;
 800d63c:	e005      	b.n	800d64a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d63e:	2303      	movs	r3, #3
 800d640:	73fb      	strb	r3, [r7, #15]
    break;
 800d642:	e002      	b.n	800d64a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d644:	2303      	movs	r3, #3
 800d646:	73fb      	strb	r3, [r7, #15]
    break;
 800d648:	bf00      	nop
  }
  return usb_status;
 800d64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3710      	adds	r7, #16
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d654:	b480      	push	{r7}
 800d656:	b085      	sub	sp, #20
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	460b      	mov	r3, r1
 800d65e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d666:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	da0b      	bge.n	800d688 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d670:	78fb      	ldrb	r3, [r7, #3]
 800d672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d676:	68f9      	ldr	r1, [r7, #12]
 800d678:	4613      	mov	r3, r2
 800d67a:	00db      	lsls	r3, r3, #3
 800d67c:	4413      	add	r3, r2
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	440b      	add	r3, r1
 800d682:	333e      	adds	r3, #62	@ 0x3e
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	e00b      	b.n	800d6a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d688:	78fb      	ldrb	r3, [r7, #3]
 800d68a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d68e:	68f9      	ldr	r1, [r7, #12]
 800d690:	4613      	mov	r3, r2
 800d692:	00db      	lsls	r3, r3, #3
 800d694:	4413      	add	r3, r2
 800d696:	009b      	lsls	r3, r3, #2
 800d698:	440b      	add	r3, r1
 800d69a:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800d69e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3714      	adds	r7, #20
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6c6:	78fa      	ldrb	r2, [r7, #3]
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7f7 fa02 	bl	8004ad4 <HAL_PCD_SetAddress>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d6d4:	7bbb      	ldrb	r3, [r7, #14]
 800d6d6:	2b03      	cmp	r3, #3
 800d6d8:	d816      	bhi.n	800d708 <USBD_LL_SetUSBAddress+0x5c>
 800d6da:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e0 <USBD_LL_SetUSBAddress+0x34>)
 800d6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e0:	0800d6f1 	.word	0x0800d6f1
 800d6e4:	0800d6f7 	.word	0x0800d6f7
 800d6e8:	0800d6fd 	.word	0x0800d6fd
 800d6ec:	0800d703 	.word	0x0800d703
    case HAL_OK :
      usb_status = USBD_OK;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d6f4:	e00b      	b.n	800d70e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d6fa:	e008      	b.n	800d70e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d700:	e005      	b.n	800d70e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d702:	2303      	movs	r3, #3
 800d704:	73fb      	strb	r3, [r7, #15]
    break;
 800d706:	e002      	b.n	800d70e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800d708:	2303      	movs	r3, #3
 800d70a:	73fb      	strb	r3, [r7, #15]
    break;
 800d70c:	bf00      	nop
  }
  return usb_status;
 800d70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d710:	4618      	mov	r0, r3
 800d712:	3710      	adds	r7, #16
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	607a      	str	r2, [r7, #4]
 800d722:	603b      	str	r3, [r7, #0]
 800d724:	460b      	mov	r3, r1
 800d726:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d728:	2300      	movs	r3, #0
 800d72a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d72c:	2300      	movs	r3, #0
 800d72e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d736:	7af9      	ldrb	r1, [r7, #11]
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	f7f7 faeb 	bl	8004d16 <HAL_PCD_EP_Transmit>
 800d740:	4603      	mov	r3, r0
 800d742:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d744:	7dbb      	ldrb	r3, [r7, #22]
 800d746:	2b03      	cmp	r3, #3
 800d748:	d816      	bhi.n	800d778 <USBD_LL_Transmit+0x60>
 800d74a:	a201      	add	r2, pc, #4	@ (adr r2, 800d750 <USBD_LL_Transmit+0x38>)
 800d74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d750:	0800d761 	.word	0x0800d761
 800d754:	0800d767 	.word	0x0800d767
 800d758:	0800d76d 	.word	0x0800d76d
 800d75c:	0800d773 	.word	0x0800d773
    case HAL_OK :
      usb_status = USBD_OK;
 800d760:	2300      	movs	r3, #0
 800d762:	75fb      	strb	r3, [r7, #23]
    break;
 800d764:	e00b      	b.n	800d77e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d766:	2303      	movs	r3, #3
 800d768:	75fb      	strb	r3, [r7, #23]
    break;
 800d76a:	e008      	b.n	800d77e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d76c:	2301      	movs	r3, #1
 800d76e:	75fb      	strb	r3, [r7, #23]
    break;
 800d770:	e005      	b.n	800d77e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d772:	2303      	movs	r3, #3
 800d774:	75fb      	strb	r3, [r7, #23]
    break;
 800d776:	e002      	b.n	800d77e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800d778:	2303      	movs	r3, #3
 800d77a:	75fb      	strb	r3, [r7, #23]
    break;
 800d77c:	bf00      	nop
  }
  return usb_status;
 800d77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3718      	adds	r7, #24
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b086      	sub	sp, #24
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	607a      	str	r2, [r7, #4]
 800d792:	603b      	str	r3, [r7, #0]
 800d794:	460b      	mov	r3, r1
 800d796:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d798:	2300      	movs	r3, #0
 800d79a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d79c:	2300      	movs	r3, #0
 800d79e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d7a6:	7af9      	ldrb	r1, [r7, #11]
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	f7f7 fa69 	bl	8004c82 <HAL_PCD_EP_Receive>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800d7b4:	7dbb      	ldrb	r3, [r7, #22]
 800d7b6:	2b03      	cmp	r3, #3
 800d7b8:	d816      	bhi.n	800d7e8 <USBD_LL_PrepareReceive+0x60>
 800d7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800d7c0 <USBD_LL_PrepareReceive+0x38>)
 800d7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c0:	0800d7d1 	.word	0x0800d7d1
 800d7c4:	0800d7d7 	.word	0x0800d7d7
 800d7c8:	0800d7dd 	.word	0x0800d7dd
 800d7cc:	0800d7e3 	.word	0x0800d7e3
    case HAL_OK :
      usb_status = USBD_OK;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	75fb      	strb	r3, [r7, #23]
    break;
 800d7d4:	e00b      	b.n	800d7ee <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7d6:	2303      	movs	r3, #3
 800d7d8:	75fb      	strb	r3, [r7, #23]
    break;
 800d7da:	e008      	b.n	800d7ee <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7dc:	2301      	movs	r3, #1
 800d7de:	75fb      	strb	r3, [r7, #23]
    break;
 800d7e0:	e005      	b.n	800d7ee <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	75fb      	strb	r3, [r7, #23]
    break;
 800d7e6:	e002      	b.n	800d7ee <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800d7e8:	2303      	movs	r3, #3
 800d7ea:	75fb      	strb	r3, [r7, #23]
    break;
 800d7ec:	bf00      	nop
  }
  return usb_status;
 800d7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3718      	adds	r7, #24
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	460b      	mov	r3, r1
 800d802:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d80a:	78fa      	ldrb	r2, [r7, #3]
 800d80c:	4611      	mov	r1, r2
 800d80e:	4618      	mov	r0, r3
 800d810:	f7f7 fa69 	bl	8004ce6 <HAL_PCD_EP_GetRxCount>
 800d814:	4603      	mov	r3, r0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
	...

0800d820 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
 800d828:	460b      	mov	r3, r1
 800d82a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d82c:	78fb      	ldrb	r3, [r7, #3]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d002      	beq.n	800d838 <HAL_PCDEx_LPM_Callback+0x18>
 800d832:	2b01      	cmp	r3, #1
 800d834:	d01f      	beq.n	800d876 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d836:	e03b      	b.n	800d8b0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6a1b      	ldr	r3, [r3, #32]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d007      	beq.n	800d850 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d840:	f000 f854 	bl	800d8ec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d844:	4b1c      	ldr	r3, [pc, #112]	@ (800d8b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	4a1b      	ldr	r2, [pc, #108]	@ (800d8b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d84a:	f023 0306 	bic.w	r3, r3, #6
 800d84e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	687a      	ldr	r2, [r7, #4]
 800d85c:	6812      	ldr	r2, [r2, #0]
 800d85e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d862:	f023 0301 	bic.w	r3, r3, #1
 800d866:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe f9cf 	bl	800bc12 <USBD_LL_Resume>
    break;
 800d874:	e01c      	b.n	800d8b0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	6812      	ldr	r2, [r2, #0]
 800d884:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d888:	f043 0301 	orr.w	r3, r3, #1
 800d88c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d894:	4618      	mov	r0, r3
 800d896:	f7fe f9a0 	bl	800bbda <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6a1b      	ldr	r3, [r3, #32]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d005      	beq.n	800d8ae <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d8a2:	4b05      	ldr	r3, [pc, #20]	@ (800d8b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d8a4:	691b      	ldr	r3, [r3, #16]
 800d8a6:	4a04      	ldr	r2, [pc, #16]	@ (800d8b8 <HAL_PCDEx_LPM_Callback+0x98>)
 800d8a8:	f043 0306 	orr.w	r3, r3, #6
 800d8ac:	6113      	str	r3, [r2, #16]
    break;
 800d8ae:	bf00      	nop
}
 800d8b0:	bf00      	nop
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	e000ed00 	.word	0xe000ed00

0800d8bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d8c4:	4b03      	ldr	r3, [pc, #12]	@ (800d8d4 <USBD_static_malloc+0x18>)
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop
 800d8d4:	20004f68 	.word	0x20004f68

0800d8d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]

}
 800d8e0:	bf00      	nop
 800d8e2:	370c      	adds	r7, #12
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d8f0:	f7f3 fc44 	bl	800117c <SystemClock_Config>
}
 800d8f4:	bf00      	nop
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <memset>:
 800d8f8:	4402      	add	r2, r0
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d100      	bne.n	800d902 <memset+0xa>
 800d900:	4770      	bx	lr
 800d902:	f803 1b01 	strb.w	r1, [r3], #1
 800d906:	e7f9      	b.n	800d8fc <memset+0x4>

0800d908 <__libc_init_array>:
 800d908:	b570      	push	{r4, r5, r6, lr}
 800d90a:	4d0d      	ldr	r5, [pc, #52]	@ (800d940 <__libc_init_array+0x38>)
 800d90c:	4c0d      	ldr	r4, [pc, #52]	@ (800d944 <__libc_init_array+0x3c>)
 800d90e:	1b64      	subs	r4, r4, r5
 800d910:	10a4      	asrs	r4, r4, #2
 800d912:	2600      	movs	r6, #0
 800d914:	42a6      	cmp	r6, r4
 800d916:	d109      	bne.n	800d92c <__libc_init_array+0x24>
 800d918:	4d0b      	ldr	r5, [pc, #44]	@ (800d948 <__libc_init_array+0x40>)
 800d91a:	4c0c      	ldr	r4, [pc, #48]	@ (800d94c <__libc_init_array+0x44>)
 800d91c:	f000 f826 	bl	800d96c <_init>
 800d920:	1b64      	subs	r4, r4, r5
 800d922:	10a4      	asrs	r4, r4, #2
 800d924:	2600      	movs	r6, #0
 800d926:	42a6      	cmp	r6, r4
 800d928:	d105      	bne.n	800d936 <__libc_init_array+0x2e>
 800d92a:	bd70      	pop	{r4, r5, r6, pc}
 800d92c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d930:	4798      	blx	r3
 800d932:	3601      	adds	r6, #1
 800d934:	e7ee      	b.n	800d914 <__libc_init_array+0xc>
 800d936:	f855 3b04 	ldr.w	r3, [r5], #4
 800d93a:	4798      	blx	r3
 800d93c:	3601      	adds	r6, #1
 800d93e:	e7f2      	b.n	800d926 <__libc_init_array+0x1e>
 800d940:	0800da44 	.word	0x0800da44
 800d944:	0800da44 	.word	0x0800da44
 800d948:	0800da44 	.word	0x0800da44
 800d94c:	0800da48 	.word	0x0800da48

0800d950 <memcpy>:
 800d950:	440a      	add	r2, r1
 800d952:	4291      	cmp	r1, r2
 800d954:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d958:	d100      	bne.n	800d95c <memcpy+0xc>
 800d95a:	4770      	bx	lr
 800d95c:	b510      	push	{r4, lr}
 800d95e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d962:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d966:	4291      	cmp	r1, r2
 800d968:	d1f9      	bne.n	800d95e <memcpy+0xe>
 800d96a:	bd10      	pop	{r4, pc}

0800d96c <_init>:
 800d96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d96e:	bf00      	nop
 800d970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d972:	bc08      	pop	{r3}
 800d974:	469e      	mov	lr, r3
 800d976:	4770      	bx	lr

0800d978 <_fini>:
 800d978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d97a:	bf00      	nop
 800d97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d97e:	bc08      	pop	{r3}
 800d980:	469e      	mov	lr, r3
 800d982:	4770      	bx	lr
