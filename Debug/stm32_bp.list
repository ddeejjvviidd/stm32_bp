
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dacc  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800dc88  0800dc88  0000ec88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd40  0800dd40  0000f10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd40  0800dd40  0000ed40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd48  0800dd48  0000f10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd48  0800dd48  0000ed48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd4c  0800dd4c  0000ed4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800dd50  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054a0  2000010c  0800de5c  0000f10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200055ac  0800de5c  0000f5ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247c1  00000000  00000000  0000f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e45  00000000  00000000  000338fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  00038748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001615  00000000  00000000  0003a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff2b  00000000  00000000  0003b9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023959  00000000  00000000  0006b8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d9bf  00000000  00000000  0008f249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001acc08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077bc  00000000  00000000  001acc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001b4408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800dc70 	.word	0x0800dc70

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800dc70 	.word	0x0800dc70

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f2:	463b      	mov	r3, r7
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000504:	4a31      	ldr	r2, [pc, #196]	@ (80005cc <MX_ADC1_Init+0xe0>)
 8000506:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000508:	4b2f      	ldr	r3, [pc, #188]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800050a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800050e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000510:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000516:	4b2c      	ldr	r3, [pc, #176]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000518:	2200      	movs	r2, #0
 800051a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800051c:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800051e:	2201      	movs	r2, #1
 8000520:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000522:	4b29      	ldr	r3, [pc, #164]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000524:	2204      	movs	r2, #4
 8000526:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000528:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800052a:	2200      	movs	r2, #0
 800052c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800052e:	4b26      	ldr	r3, [pc, #152]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000530:	2200      	movs	r2, #0
 8000532:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000534:	4b24      	ldr	r3, [pc, #144]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000536:	2202      	movs	r2, #2
 8000538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800053a:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800053c:	2200      	movs	r2, #0
 800053e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000544:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000548:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800054a:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800054c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000550:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000552:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000554:	2201      	movs	r2, #1
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000562:	2200      	movs	r2, #0
 8000564:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000568:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 800056a:	f001 fdbf 	bl	80020ec <HAL_ADC_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000574:	f000 ffb9 	bl	80014ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <MX_ADC1_Init+0xe4>)
 800057a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800057c:	2306      	movs	r3, #6
 800057e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000580:	2306      	movs	r3, #6
 8000582:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000584:	237f      	movs	r3, #127	@ 0x7f
 8000586:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000588:	2304      	movs	r3, #4
 800058a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000590:	463b      	mov	r3, r7
 8000592:	4619      	mov	r1, r3
 8000594:	480c      	ldr	r0, [pc, #48]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 8000596:	f002 f93b 	bl	8002810 <HAL_ADC_ConfigChannel>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005a0:	f000 ffa3 	bl	80014ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <MX_ADC1_Init+0xe8>)
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005a8:	230c      	movs	r3, #12
 80005aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0xdc>)
 80005b2:	f002 f92d 	bl	8002810 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005bc:	f000 ff95 	bl	80014ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000128 	.word	0x20000128
 80005cc:	50040000 	.word	0x50040000
 80005d0:	c7520000 	.word	0xc7520000
 80005d4:	04300002 	.word	0x04300002

080005d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0ae      	sub	sp, #184	@ 0xb8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2294      	movs	r2, #148	@ 0x94
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00d faff 	bl	800dbfc <memset>
  if(adcHandle->Instance==ADC1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a40      	ldr	r2, [pc, #256]	@ (8000704 <HAL_ADC_MspInit+0x12c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d179      	bne.n	80006fc <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000608:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800060c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800060e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800061e:	230c      	movs	r3, #12
 8000620:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800062e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000632:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fee5 	bl	8006408 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000644:	f000 ff51 	bl	80014ea <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a2e      	ldr	r2, [pc, #184]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b29      	ldr	r3, [pc, #164]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a28      	ldr	r2, [pc, #160]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <HAL_ADC_MspInit+0x130>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800067e:	230b      	movs	r3, #11
 8000680:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800068a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800068e:	4619      	mov	r1, r3
 8000690:	481e      	ldr	r0, [pc, #120]	@ (800070c <HAL_ADC_MspInit+0x134>)
 8000692:	f003 fb79 	bl	8003d88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 8000698:	4a1e      	ldr	r2, [pc, #120]	@ (8000714 <HAL_ADC_MspInit+0x13c>)
 800069a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800069c:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 800069e:	2205      	movs	r2, #5
 80006a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a8:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006c2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d0:	480f      	ldr	r0, [pc, #60]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006d2:	f002 ffe3 	bl	800369c <HAL_DMA_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80006dc:	f000 ff05 	bl	80014ea <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e4:	651a      	str	r2, [r3, #80]	@ 0x50
 80006e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <HAL_ADC_MspInit+0x138>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2012      	movs	r0, #18
 80006f2:	f002 ff9c 	bl	800362e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80006f6:	2012      	movs	r0, #18
 80006f8:	f002 ffb5 	bl	8003666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fc:	bf00      	nop
 80006fe:	37b8      	adds	r7, #184	@ 0xb8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	50040000 	.word	0x50040000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000800 	.word	0x48000800
 8000710:	20000190 	.word	0x20000190
 8000714:	40020008 	.word	0x40020008

08000718 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000722:	4a28      	ldr	r2, [pc, #160]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6493      	str	r3, [r2, #72]	@ 0x48
 800072a:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_DMA_Init+0xac>)
 800072c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000736:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800073a:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <MX_DMA_Init+0xac>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6493      	str	r3, [r2, #72]	@ 0x48
 8000742:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_DMA_Init+0xac>)
 8000744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <MX_DMA_Init+0xb4>)
 8000752:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000754:	4b1c      	ldr	r3, [pc, #112]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800075c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000760:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000762:	4b19      	ldr	r3, [pc, #100]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000764:	2240      	movs	r2, #64	@ 0x40
 8000766:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000768:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800076e:	4b16      	ldr	r3, [pc, #88]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000774:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000778:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800077c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000784:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_DMA_Init+0xb0>)
 8000786:	2200      	movs	r2, #0
 8000788:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 800078a:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <MX_DMA_Init+0xb0>)
 800078c:	f002 ff86 	bl	800369c <HAL_DMA_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000796:	f000 fea8 	bl	80014ea <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	200b      	movs	r0, #11
 80007a0:	f002 ff45 	bl	800362e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a4:	200b      	movs	r0, #11
 80007a6:	f002 ff5e 	bl	8003666 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	200c      	movs	r0, #12
 80007b0:	f002 ff3d 	bl	800362e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b4:	200c      	movs	r0, #12
 80007b6:	f002 ff56 	bl	8003666 <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	200001f0 	.word	0x200001f0
 80007cc:	4002001c 	.word	0x4002001c

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	@ 0x30
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b55      	ldr	r3, [pc, #340]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a54      	ldr	r2, [pc, #336]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b52      	ldr	r3, [pc, #328]	@ (800093c <MX_GPIO_Init+0x16c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b4f      	ldr	r3, [pc, #316]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a4e      	ldr	r2, [pc, #312]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b4c      	ldr	r3, [pc, #304]	@ (800093c <MX_GPIO_Init+0x16c>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b49      	ldr	r3, [pc, #292]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081a:	4a48      	ldr	r2, [pc, #288]	@ (800093c <MX_GPIO_Init+0x16c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000822:	4b46      	ldr	r3, [pc, #280]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b43      	ldr	r3, [pc, #268]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000832:	4a42      	ldr	r2, [pc, #264]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800083a:	4b40      	ldr	r3, [pc, #256]	@ (800093c <MX_GPIO_Init+0x16c>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084a:	4a3c      	ldr	r2, [pc, #240]	@ (800093c <MX_GPIO_Init+0x16c>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000852:	4b3a      	ldr	r3, [pc, #232]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800085e:	f004 feeb 	bl	8005638 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000862:	4b36      	ldr	r3, [pc, #216]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a35      	ldr	r2, [pc, #212]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <MX_GPIO_Init+0x16c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000880:	482f      	ldr	r0, [pc, #188]	@ (8000940 <MX_GPIO_Init+0x170>)
 8000882:	f003 fc13 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	482e      	ldr	r0, [pc, #184]	@ (8000944 <MX_GPIO_Init+0x174>)
 800088c:	f003 fc0e 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2180      	movs	r1, #128	@ 0x80
 8000894:	482c      	ldr	r0, [pc, #176]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000896:	f003 fc09 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4825      	ldr	r0, [pc, #148]	@ (8000948 <MX_GPIO_Init+0x178>)
 80008b2:	f003 fa69 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008b6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4619      	mov	r1, r3
 80008ce:	481c      	ldr	r0, [pc, #112]	@ (8000940 <MX_GPIO_Init+0x170>)
 80008d0:	f003 fa5a 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d4:	2320      	movs	r3, #32
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x174>)
 80008e8:	f003 fa4e 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x174>)
 8000904:	f003 fa40 	bl	8003d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	480a      	ldr	r0, [pc, #40]	@ (8000948 <MX_GPIO_Init+0x178>)
 8000920:	f003 fa32 	bl	8003d88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2028      	movs	r0, #40	@ 0x28
 800092a:	f002 fe80 	bl	800362e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800092e:	2028      	movs	r0, #40	@ 0x28
 8000930:	f002 fe99 	bl	8003666 <HAL_NVIC_EnableIRQ>

}
 8000934:	bf00      	nop
 8000936:	3730      	adds	r7, #48	@ 0x30
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000
 8000940:	48000400 	.word	0x48000400
 8000944:	48001800 	.word	0x48001800
 8000948:	48000800 	.word	0x48000800

0800094c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8000956:	88fb      	ldrh	r3, [r7, #6]
 8000958:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800095c:	d125      	bne.n	80009aa <HAL_GPIO_EXTI_Callback+0x5e>
		static bool previous;
		if(previous == false){
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	f083 0301 	eor.w	r3, r3, #1
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d009      	beq.n	8000980 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000972:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000974:	f003 fb9a 	bl	80040ac <HAL_GPIO_WritePin>
			previous = true;
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e008      	b.n	8000992 <HAL_GPIO_EXTI_Callback+0x46>
		} else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000986:	480c      	ldr	r0, [pc, #48]	@ (80009b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000988:	f003 fb90 	bl	80040ac <HAL_GPIO_WritePin>
			previous = false;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <HAL_GPIO_EXTI_Callback+0x68>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
		}

		int test = 1984;
 8000992:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000996:	60fb      	str	r3, [r7, #12]
		comms_append_int32(10, 1, &test);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	461a      	mov	r2, r3
 800099e:	2101      	movs	r1, #1
 80009a0:	200a      	movs	r0, #10
 80009a2:	f000 f8d5 	bl	8000b50 <comms_append_int32>
		comms_send();
 80009a6:	f000 f94b 	bl	8000c40 <comms_send>
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000250 	.word	0x20000250
 80009b8:	48000400 	.word	0x48000400

080009bc <comms_reset_active_tx_buffer>:
	DataValue data[255];
} CommsData;

extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);

void comms_reset_active_tx_buffer() {
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_tx_active_buffer)) = START_HEADER; // start bits
 80009c0:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <comms_reset_active_tx_buffer+0x38>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 80009c8:	801a      	strh	r2, [r3, #0]
	comms_tx_active_buffer[2] = 0; // buffer id
 80009ca:	4b0a      	ldr	r3, [pc, #40]	@ (80009f4 <comms_reset_active_tx_buffer+0x38>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	3302      	adds	r3, #2
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
	*((uint16_t*) (comms_tx_active_buffer + 3)) = 0; // num of elements
 80009d4:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <comms_reset_active_tx_buffer+0x38>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3303      	adds	r3, #3
 80009da:	2200      	movs	r2, #0
 80009dc:	801a      	strh	r2, [r3, #0]
	comms_tx_active_wr_pointer = comms_tx_active_buffer + 5; // first empty position for data
 80009de:	4b05      	ldr	r3, [pc, #20]	@ (80009f4 <comms_reset_active_tx_buffer+0x38>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3305      	adds	r3, #5
 80009e4:	4a04      	ldr	r2, [pc, #16]	@ (80009f8 <comms_reset_active_tx_buffer+0x3c>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000a54 	.word	0x20000a54
 80009f8:	20000a58 	.word	0x20000a58

080009fc <comms_reset_active_rx_buffer>:

void comms_reset_active_rx_buffer() {
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	//reset whole head
	comms_rx_active_buffer[0] = 0;
 8000a00:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <comms_reset_active_rx_buffer+0x3c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2200      	movs	r2, #0
 8000a06:	701a      	strb	r2, [r3, #0]
	comms_rx_active_buffer[1] = 0;
 8000a08:	4b0b      	ldr	r3, [pc, #44]	@ (8000a38 <comms_reset_active_rx_buffer+0x3c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
	comms_rx_active_buffer[2] = 0;
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <comms_reset_active_rx_buffer+0x3c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3302      	adds	r3, #2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
	*((uint16_t*) (comms_rx_active_buffer + 3)) = 0;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <comms_reset_active_rx_buffer+0x3c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3303      	adds	r3, #3
 8000a22:	2200      	movs	r2, #0
 8000a24:	801a      	strh	r2, [r3, #0]
	//reset pointer
	comms_rx_active_rd_pointer = comms_rx_active_buffer;
 8000a26:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <comms_reset_active_rx_buffer+0x3c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <comms_reset_active_rx_buffer+0x40>)
 8000a2c:	6013      	str	r3, [r2, #0]
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	20001660 	.word	0x20001660
 8000a3c:	20001664 	.word	0x20001664

08000a40 <comms_uart_init>:

void comms_uart_init() {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_buffer,
 8000a46:	4b06      	ldr	r3, [pc, #24]	@ (8000a60 <comms_uart_init+0x20>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2205      	movs	r2, #5
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <comms_uart_init+0x24>)
 8000a50:	f006 ffce 	bl	80079f0 <HAL_UART_Receive_IT>
 8000a54:	4603      	mov	r3, r0
 8000a56:	71fb      	strb	r3, [r7, #7]
			5);
	UNUSED(rcode);
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20001660 	.word	0x20001660
 8000a64:	20003874 	.word	0x20003874

08000a68 <comms_init>:

void comms_init() {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	comms_tx_active_buffer = comms_tx_buffer1;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	@ (8000ab0 <comms_init+0x48>)
 8000a6e:	4a11      	ldr	r2, [pc, #68]	@ (8000ab4 <comms_init+0x4c>)
 8000a70:	601a      	str	r2, [r3, #0]
	comms_tx_prepared_buffer = comms_tx_buffer2;
 8000a72:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <comms_init+0x50>)
 8000a74:	4a11      	ldr	r2, [pc, #68]	@ (8000abc <comms_init+0x54>)
 8000a76:	601a      	str	r2, [r3, #0]

	comms_reset_active_tx_buffer();
 8000a78:	f7ff ffa0 	bl	80009bc <comms_reset_active_tx_buffer>
	comms_tx_prepared_wr_pointer = comms_tx_prepared_buffer + 5;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <comms_init+0x50>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	3305      	adds	r3, #5
 8000a82:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac0 <comms_init+0x58>)
 8000a84:	6013      	str	r3, [r2, #0]

	if (comms_selected_interface == COMMS_UART){
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <comms_init+0x5c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d101      	bne.n	8000a92 <comms_init+0x2a>
		comms_uart_init();
 8000a8e:	f7ff ffd7 	bl	8000a40 <comms_uart_init>
	}

	comms_rx_active_buffer = comms_rx_buffer1;
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <comms_init+0x60>)
 8000a94:	4a0d      	ldr	r2, [pc, #52]	@ (8000acc <comms_init+0x64>)
 8000a96:	601a      	str	r2, [r3, #0]
	comms_rx_prepared_buffer = comms_rx_buffer2;
 8000a98:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <comms_init+0x68>)
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad4 <comms_init+0x6c>)
 8000a9c:	601a      	str	r2, [r3, #0]

	comms_reset_active_rx_buffer();
 8000a9e:	f7ff ffad 	bl	80009fc <comms_reset_active_rx_buffer>
	comms_rx_prepared_rd_pointer = comms_rx_prepared_buffer + 5;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <comms_init+0x68>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	3305      	adds	r3, #5
 8000aa8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad8 <comms_init+0x70>)
 8000aaa:	6013      	str	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000a54 	.word	0x20000a54
 8000ab4:	20000254 	.word	0x20000254
 8000ab8:	20000a5c 	.word	0x20000a5c
 8000abc:	20000654 	.word	0x20000654
 8000ac0:	20000a60 	.word	0x20000a60
 8000ac4:	20001678 	.word	0x20001678
 8000ac8:	20001660 	.word	0x20001660
 8000acc:	20000e60 	.word	0x20000e60
 8000ad0:	20001668 	.word	0x20001668
 8000ad4:	20001260 	.word	0x20001260
 8000ad8:	2000166c 	.word	0x2000166c

08000adc <comms_purge_id_register>:

void comms_purge_id_register() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	memset(comms_tx_data_id_register, NULL, sizeof(comms_tx_data_id_register));
 8000ae0:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4802      	ldr	r0, [pc, #8]	@ (8000af0 <comms_purge_id_register+0x14>)
 8000ae8:	f00d f888 	bl	800dbfc <memset>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000a64 	.word	0x20000a64

08000af4 <comms_find_existing_data>:

void* comms_find_existing_data(uint8_t data_id) {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	if (comms_tx_data_id_register[data_id] != NULL) {
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <comms_find_existing_data+0x30>)
 8000b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d004      	beq.n	8000b14 <comms_find_existing_data+0x20>
		return comms_tx_data_id_register[data_id];
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <comms_find_existing_data+0x30>)
 8000b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b12:	e000      	b.n	8000b16 <comms_find_existing_data+0x22>
	}
	return NULL;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000a64 	.word	0x20000a64

08000b28 <comms_increment_active_buffer_data>:

void comms_increment_active_buffer_data() {
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	*((uint16_t*) (comms_tx_active_buffer + 3)) += 1;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <comms_increment_active_buffer_data+0x24>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	3303      	adds	r3, #3
 8000b32:	881a      	ldrh	r2, [r3, #0]
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <comms_increment_active_buffer_data+0x24>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	3303      	adds	r3, #3
 8000b3a:	3201      	adds	r2, #1
 8000b3c:	b292      	uxth	r2, r2
 8000b3e:	801a      	strh	r2, [r3, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000a54 	.word	0x20000a54

08000b50 <comms_append_int32>:

int comms_append_int32(uint8_t data_id, uint8_t data_count, int *data) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	603a      	str	r2, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	71bb      	strb	r3, [r7, #6]
	// dissable interrupts
//	uint32_t primask = __get_PRIMASK();
//	__disable_irq();

	//check tx_register for same data id, return if existing
	if (comms_find_existing_data(data_id) != NULL) {
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ffc6 	bl	8000af4 <comms_find_existing_data>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <comms_append_int32+0x22>
		return 1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e02d      	b.n	8000bce <comms_append_int32+0x7e>
	}

	if (wr_status) {
 8000b72:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <comms_append_int32+0x88>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <comms_append_int32+0x2e>
		return COMMS_WR_LOCKED;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	e027      	b.n	8000bce <comms_append_int32+0x7e>
	}
	else {
		wr_status = COMMS_INPROGRESS;
 8000b7e:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <comms_append_int32+0x88>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
	}

	// save the pointer to new data to register
	comms_tx_data_id_register[data_id] = (void*) comms_tx_active_wr_pointer;
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	4a15      	ldr	r2, [pc, #84]	@ (8000bdc <comms_append_int32+0x8c>)
 8000b88:	6812      	ldr	r2, [r2, #0]
 8000b8a:	4915      	ldr	r1, [pc, #84]	@ (8000be0 <comms_append_int32+0x90>)
 8000b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// increment total data in buffer
	comms_increment_active_buffer_data();
 8000b90:	f7ff ffca 	bl	8000b28 <comms_increment_active_buffer_data>

	// write id, bytes and count
	*comms_tx_active_wr_pointer = data_id;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <comms_append_int32+0x8c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	79fa      	ldrb	r2, [r7, #7]
 8000b9a:	701a      	strb	r2, [r3, #0]
	*(comms_tx_active_wr_pointer + 1) = (uint8_t) sizeof(*data);
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <comms_append_int32+0x8c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	2204      	movs	r2, #4
 8000ba4:	701a      	strb	r2, [r3, #0]
	*(comms_tx_active_wr_pointer + 2) = data_count;
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <comms_append_int32+0x8c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3302      	adds	r3, #2
 8000bac:	79ba      	ldrb	r2, [r7, #6]
 8000bae:	701a      	strb	r2, [r3, #0]

	// write integer as 4 uint8_t to tx_buffer
	*((int*) (comms_tx_active_wr_pointer + 3)) = *data;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <comms_append_int32+0x8c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3303      	adds	r3, #3
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	601a      	str	r2, [r3, #0]

	// move pointer comms_tx_buffer_wr_pointer
	comms_tx_active_wr_pointer = (comms_tx_active_wr_pointer + 3 + sizeof(*data));
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <comms_append_int32+0x8c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3307      	adds	r3, #7
 8000bc2:	4a06      	ldr	r2, [pc, #24]	@ (8000bdc <comms_append_int32+0x8c>)
 8000bc4:	6013      	str	r3, [r2, #0]

	wr_status = COMMS_READY;
 8000bc6:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <comms_append_int32+0x88>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]

	// restore interrupts
//	__set_PRIMASK(primask);

	return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20001679 	.word	0x20001679
 8000bdc:	20000a58 	.word	0x20000a58
 8000be0:	20000a64 	.word	0x20000a64

08000be4 <comms_switch_tx_buffers>:

void comms_switch_tx_buffers() {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000bea:	f3ef 8310 	mrs	r3, PRIMASK
 8000bee:	603b      	str	r3, [r7, #0]
  return(result);
 8000bf0:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000bf2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
	__disable_irq();

	// switch buffers
	uint8_t *_temp = comms_tx_prepared_buffer;
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <comms_switch_tx_buffers+0x4c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60bb      	str	r3, [r7, #8]
	comms_tx_prepared_buffer = comms_tx_active_buffer;
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <comms_switch_tx_buffers+0x50>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a0b      	ldr	r2, [pc, #44]	@ (8000c30 <comms_switch_tx_buffers+0x4c>)
 8000c04:	6013      	str	r3, [r2, #0]
	comms_tx_active_buffer = _temp;
 8000c06:	4a0b      	ldr	r2, [pc, #44]	@ (8000c34 <comms_switch_tx_buffers+0x50>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	6013      	str	r3, [r2, #0]

	// set pointer to the end of prepared buffer data
	comms_tx_prepared_wr_pointer = comms_tx_active_wr_pointer;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <comms_switch_tx_buffers+0x54>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <comms_switch_tx_buffers+0x58>)
 8000c12:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_tx_buffer();
 8000c14:	f7ff fed2 	bl	80009bc <comms_reset_active_tx_buffer>
	comms_purge_id_register();
 8000c18:	f7ff ff60 	bl	8000adc <comms_purge_id_register>
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f383 8810 	msr	PRIMASK, r3
}
 8000c26:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000a5c 	.word	0x20000a5c
 8000c34:	20000a54 	.word	0x20000a54
 8000c38:	20000a58 	.word	0x20000a58
 8000c3c:	20000a60 	.word	0x20000a60

08000c40 <comms_send>:

int comms_send() {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

	if (tx_status > 0) {
 8000c46:	4b32      	ldr	r3, [pc, #200]	@ (8000d10 <comms_send+0xd0>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <comms_send+0x12>
		return COMMS_TX_LOCKED;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	e059      	b.n	8000d06 <comms_send+0xc6>
	}

	tx_status = COMMS_INPROGRESS;
 8000c52:	4b2f      	ldr	r3, [pc, #188]	@ (8000d10 <comms_send+0xd0>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]

	// need to switch buffers
	comms_switch_tx_buffers();
 8000c58:	f7ff ffc4 	bl	8000be4 <comms_switch_tx_buffers>

	// terminator at the end
	*comms_tx_prepared_wr_pointer = END_CR;
 8000c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d14 <comms_send+0xd4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	220d      	movs	r2, #13
 8000c62:	701a      	strb	r2, [r3, #0]
	*(comms_tx_prepared_wr_pointer + 1) = END_LF;
 8000c64:	4b2b      	ldr	r3, [pc, #172]	@ (8000d14 <comms_send+0xd4>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	220a      	movs	r2, #10
 8000c6c:	701a      	strb	r2, [r3, #0]
	comms_tx_prepared_wr_pointer += 2;
 8000c6e:	4b29      	ldr	r3, [pc, #164]	@ (8000d14 <comms_send+0xd4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3302      	adds	r3, #2
 8000c74:	4a27      	ldr	r2, [pc, #156]	@ (8000d14 <comms_send+0xd4>)
 8000c76:	6013      	str	r3, [r2, #0]

	// buffer is empty
	if (comms_tx_prepared_buffer[3] == 0) {
 8000c78:	4b27      	ldr	r3, [pc, #156]	@ (8000d18 <comms_send+0xd8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	3303      	adds	r3, #3
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d109      	bne.n	8000c98 <comms_send+0x58>
		++empty; //DEBUG
 8000c84:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <comms_send+0xdc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a24      	ldr	r2, [pc, #144]	@ (8000d1c <comms_send+0xdc>)
 8000c8c:	6013      	str	r3, [r2, #0]
		tx_status = COMMS_READY;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <comms_send+0xd0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	701a      	strb	r2, [r3, #0]
		return COMMS_TX_BUFFER_EMPTY;
 8000c94:	2303      	movs	r3, #3
 8000c96:	e036      	b.n	8000d06 <comms_send+0xc6>
	} else {
		full++;
 8000c98:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <comms_send+0xe0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	4a20      	ldr	r2, [pc, #128]	@ (8000d20 <comms_send+0xe0>)
 8000ca0:	6013      	str	r3, [r2, #0]
	}

	// send data
	USBD_StatusTypeDef cdc_return = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_return = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	71bb      	strb	r3, [r7, #6]

	if(comms_selected_interface == COMMS_USB_OTG){
 8000caa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d24 <comms_send+0xe4>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10d      	bne.n	8000cce <comms_send+0x8e>
		cdc_return = CDC_Transmit_FS(comms_tx_prepared_buffer, comms_tx_prepared_wr_pointer - comms_tx_prepared_buffer);
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <comms_send+0xd8>)
 8000cb4:	6818      	ldr	r0, [r3, #0]
 8000cb6:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <comms_send+0xd4>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b17      	ldr	r3, [pc, #92]	@ (8000d18 <comms_send+0xd8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f00c f9fa 	bl	800d0bc <CDC_Transmit_FS>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	71fb      	strb	r3, [r7, #7]
 8000ccc:	e00d      	b.n	8000cea <comms_send+0xaa>
	} else {
		uart_return = HAL_UART_Transmit(&hlpuart1, comms_tx_prepared_buffer, comms_tx_prepared_wr_pointer - comms_tx_prepared_buffer, 100);
 8000cce:	4b12      	ldr	r3, [pc, #72]	@ (8000d18 <comms_send+0xd8>)
 8000cd0:	6819      	ldr	r1, [r3, #0]
 8000cd2:	4b10      	ldr	r3, [pc, #64]	@ (8000d14 <comms_send+0xd4>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <comms_send+0xd8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	2364      	movs	r3, #100	@ 0x64
 8000ce0:	4811      	ldr	r0, [pc, #68]	@ (8000d28 <comms_send+0xe8>)
 8000ce2:	f006 fdf7 	bl	80078d4 <HAL_UART_Transmit>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71bb      	strb	r3, [r7, #6]
	}

	tx_status = COMMS_READY;
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <comms_send+0xd0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]

	if (cdc_return) {
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <comms_send+0xba>
		return COMMS_TX_CDC_FAIL;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e005      	b.n	8000d06 <comms_send+0xc6>
	}

	if (uart_return) {
 8000cfa:	79bb      	ldrb	r3, [r7, #6]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <comms_send+0xc4>
		return COMMS_TX_UART_FAIL;
 8000d00:	2306      	movs	r3, #6
 8000d02:	e000      	b.n	8000d06 <comms_send+0xc6>
	}

	return COMMS_SUCCESS;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000167a 	.word	0x2000167a
 8000d14:	20000a60 	.word	0x20000a60
 8000d18:	20000a5c 	.word	0x20000a5c
 8000d1c:	20001670 	.word	0x20001670
 8000d20:	20001674 	.word	0x20001674
 8000d24:	20001678 	.word	0x20001678
 8000d28:	20003874 	.word	0x20003874

08000d2c <comms_switch_rx_buffers>:

void comms_switch_rx_buffers(){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d32:	f3ef 8310 	mrs	r3, PRIMASK
 8000d36:	603b      	str	r3, [r7, #0]
  return(result);
 8000d38:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000d3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3c:	b672      	cpsid	i
}
 8000d3e:	bf00      	nop
	__disable_irq();

	// switch rx buffers
	uint8_t *_temp = comms_rx_prepared_buffer;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <comms_switch_rx_buffers+0x48>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60bb      	str	r3, [r7, #8]
	comms_rx_prepared_buffer = comms_rx_active_buffer;
 8000d46:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <comms_switch_rx_buffers+0x4c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d74 <comms_switch_rx_buffers+0x48>)
 8000d4c:	6013      	str	r3, [r2, #0]
	comms_rx_active_buffer = _temp;
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <comms_switch_rx_buffers+0x4c>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	6013      	str	r3, [r2, #0]

	// set pointer to the prepared buffer data
	comms_rx_prepared_rd_pointer = comms_rx_active_rd_pointer;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <comms_switch_rx_buffers+0x50>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a09      	ldr	r2, [pc, #36]	@ (8000d80 <comms_switch_rx_buffers+0x54>)
 8000d5a:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_rx_buffer();
 8000d5c:	f7ff fe4e 	bl	80009fc <comms_reset_active_rx_buffer>
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f383 8810 	msr	PRIMASK, r3
}
 8000d6a:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20001668 	.word	0x20001668
 8000d78:	20001660 	.word	0x20001660
 8000d7c:	20001664 	.word	0x20001664
 8000d80:	2000166c 	.word	0x2000166c

08000d84 <comms_cdc_rx_callback>:

void comms_cdc_rx_callback(uint8_t *buffer, uint32_t length) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	// call this func inside of usbd_cdc_if.c in CDC_Receive_FS()

	if (comms_selected_interface != COMMS_USB_OTG){
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <comms_cdc_rx_callback+0x5c>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11b      	bne.n	8000dce <comms_cdc_rx_callback+0x4a>
		// quit if UART is in use
		return;
	}

	if (rx_status) {
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <comms_cdc_rx_callback+0x60>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d119      	bne.n	8000dd2 <comms_cdc_rx_callback+0x4e>
		// not ready yet
		return;
	}

	if (length < 3) {
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d918      	bls.n	8000dd6 <comms_cdc_rx_callback+0x52>
		// invalid buffer
		return;
	}

	rx_status = COMMS_INPROGRESS;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <comms_cdc_rx_callback+0x60>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]

	//copy to the active buffer
	memcpy(comms_rx_active_buffer, buffer, length);
 8000daa:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <comms_cdc_rx_callback+0x64>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f00c ff4e 	bl	800dc54 <memcpy>
	comms_rx_active_rd_pointer = comms_rx_active_buffer + 5;
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <comms_cdc_rx_callback+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3305      	adds	r3, #5
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8000dec <comms_cdc_rx_callback+0x68>)
 8000dc0:	6013      	str	r3, [r2, #0]
	comms_switch_rx_buffers();
 8000dc2:	f7ff ffb3 	bl	8000d2c <comms_switch_rx_buffers>

	rx_status = COMMS_RECEIVED;
 8000dc6:	4b07      	ldr	r3, [pc, #28]	@ (8000de4 <comms_cdc_rx_callback+0x60>)
 8000dc8:	2202      	movs	r2, #2
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	e004      	b.n	8000dd8 <comms_cdc_rx_callback+0x54>
		return;
 8000dce:	bf00      	nop
 8000dd0:	e002      	b.n	8000dd8 <comms_cdc_rx_callback+0x54>
		return;
 8000dd2:	bf00      	nop
 8000dd4:	e000      	b.n	8000dd8 <comms_cdc_rx_callback+0x54>
		return;
 8000dd6:	bf00      	nop
}
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20001678 	.word	0x20001678
 8000de4:	2000167b 	.word	0x2000167b
 8000de8:	20001660 	.word	0x20001660
 8000dec:	20001664 	.word	0x20001664

08000df0 <comms_data_handler>:

__weak void comms_data_handler(CommsData *data) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

	if (data == NULL) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00c      	beq.n	8000e18 <comms_data_handler+0x28>
		return;
	}

	switch (data->data_id) {
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b05      	cmp	r3, #5
 8000e04:	d10a      	bne.n	8000e1c <comms_data_handler+0x2c>
	case 5:
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
				(GPIO_PinState) (data->data[0].u8));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	791b      	ldrb	r3, [r3, #4]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e10:	4804      	ldr	r0, [pc, #16]	@ (8000e24 <comms_data_handler+0x34>)
 8000e12:	f003 f94b 	bl	80040ac <HAL_GPIO_WritePin>
		break;
 8000e16:	e002      	b.n	8000e1e <comms_data_handler+0x2e>
		return;
 8000e18:	bf00      	nop
 8000e1a:	e000      	b.n	8000e1e <comms_data_handler+0x2e>
	default:
		break;
 8000e1c:	bf00      	nop
	}

}
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	48000400 	.word	0x48000400

08000e28 <comms_rx_process>:

void comms_rx_process() {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000e2e:	af00      	add	r7, sp, #0
	if (!rx_status) {
 8000e30:	4b50      	ldr	r3, [pc, #320]	@ (8000f74 <comms_rx_process+0x14c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 8096 	beq.w	8000f66 <comms_rx_process+0x13e>
		// no data yet
		return;
	}

	if (comms_rx_prepared_buffer[2] == 0) {
 8000e3a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f78 <comms_rx_process+0x150>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3302      	adds	r3, #2
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f040 808b 	bne.w	8000f5e <comms_rx_process+0x136>
		uint16_t elements = *((uint16_t*) (comms_rx_prepared_buffer + 3));
 8000e48:	4b4b      	ldr	r3, [pc, #300]	@ (8000f78 <comms_rx_process+0x150>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000e50:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406

		for (; elements > 0; --elements) {
 8000e54:	e07e      	b.n	8000f54 <comms_rx_process+0x12c>
			CommsData data;
			data.data_id = *comms_rx_prepared_rd_pointer;
 8000e56:	4b49      	ldr	r3, [pc, #292]	@ (8000f7c <comms_rx_process+0x154>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	781a      	ldrb	r2, [r3, #0]
 8000e5c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e60:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e64:	701a      	strb	r2, [r3, #0]
			data.data_size = *(comms_rx_prepared_rd_pointer + 1);
 8000e66:	4b45      	ldr	r3, [pc, #276]	@ (8000f7c <comms_rx_process+0x154>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	785a      	ldrb	r2, [r3, #1]
 8000e6c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e70:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e74:	705a      	strb	r2, [r3, #1]
			data.data_count = *(comms_rx_prepared_rd_pointer + 2);
 8000e76:	4b41      	ldr	r3, [pc, #260]	@ (8000f7c <comms_rx_process+0x154>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	789a      	ldrb	r2, [r3, #2]
 8000e7c:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e80:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e84:	709a      	strb	r2, [r3, #2]

			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000e86:	2300      	movs	r3, #0
 8000e88:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000e8c:	e03d      	b.n	8000f0a <comms_rx_process+0xe2>
				switch (data.data_size) {
 8000e8e:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000e92:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000e96:	785b      	ldrb	r3, [r3, #1]
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	d023      	beq.n	8000ee4 <comms_rx_process+0xbc>
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	dc64      	bgt.n	8000f6a <comms_rx_process+0x142>
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d002      	beq.n	8000eaa <comms_rx_process+0x82>
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d00e      	beq.n	8000ec6 <comms_rx_process+0x9e>
				case 4:
					data.data[x].u32 =
							*((uint32_t*) (comms_rx_prepared_rd_pointer + 3));
					break;
				default:
					return;
 8000ea8:	e05f      	b.n	8000f6a <comms_rx_process+0x142>
					data.data[x].u8 = *(comms_rx_prepared_rd_pointer + 3);
 8000eaa:	4b34      	ldr	r3, [pc, #208]	@ (8000f7c <comms_rx_process+0x154>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000eb2:	78d1      	ldrb	r1, [r2, #3]
 8000eb4:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000eb8:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	711a      	strb	r2, [r3, #4]
					break;
 8000ec4:	e01c      	b.n	8000f00 <comms_rx_process+0xd8>
					data.data[x].u16 =
 8000ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8000f7c <comms_rx_process+0x154>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000ece:	f8b2 1003 	ldrh.w	r1, [r2, #3]
 8000ed2:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000ed6:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	460a      	mov	r2, r1
 8000ee0:	809a      	strh	r2, [r3, #4]
					break;
 8000ee2:	e00d      	b.n	8000f00 <comms_rx_process+0xd8>
					data.data[x].u32 =
 8000ee4:	4b25      	ldr	r3, [pc, #148]	@ (8000f7c <comms_rx_process+0x154>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000eec:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8000ef0:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8000ef4:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	440b      	add	r3, r1
 8000efc:	605a      	str	r2, [r3, #4]
					break;
 8000efe:	bf00      	nop
			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000f00:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000f04:	3301      	adds	r3, #1
 8000f06:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000f0a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000f0e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000f12:	789b      	ldrb	r3, [r3, #2]
 8000f14:	f897 2405 	ldrb.w	r2, [r7, #1029]	@ 0x405
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d3b8      	bcc.n	8000e8e <comms_rx_process+0x66>
				}
			}

			comms_data_handler(&data);
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff66 	bl	8000df0 <comms_data_handler>

			comms_rx_prepared_rd_pointer = (comms_rx_prepared_rd_pointer + 3
					+ (data.data_size * data.data_count));
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <comms_rx_process+0x154>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000f2c:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	4619      	mov	r1, r3
 8000f34:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000f38:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000f3c:	789b      	ldrb	r3, [r3, #2]
 8000f3e:	fb01 f303 	mul.w	r3, r1, r3
 8000f42:	3303      	adds	r3, #3
 8000f44:	4413      	add	r3, r2
			comms_rx_prepared_rd_pointer = (comms_rx_prepared_rd_pointer + 3
 8000f46:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <comms_rx_process+0x154>)
 8000f48:	6013      	str	r3, [r2, #0]
		for (; elements > 0; --elements) {
 8000f4a:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406
 8000f54:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f47f af7c 	bne.w	8000e56 <comms_rx_process+0x2e>
		}
	}

	rx_status = COMMS_READY;
 8000f5e:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <comms_rx_process+0x14c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
 8000f64:	e002      	b.n	8000f6c <comms_rx_process+0x144>
		return;
 8000f66:	bf00      	nop
 8000f68:	e000      	b.n	8000f6c <comms_rx_process+0x144>
					return;
 8000f6a:	bf00      	nop
}
 8000f6c:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000167b 	.word	0x2000167b
 8000f78:	20001668 	.word	0x20001668
 8000f7c:	2000166c 	.word	0x2000166c

08000f80 <comms_lpuart_rx_callback>:


void comms_lpuart_rx_callback(UART_HandleTypeDef *huart) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	static int uart_elements;
	static int data_total_length;
	static HAL_StatusTypeDef rcode;
	UNUSED(rcode);

	if (comms_selected_interface != COMMS_UART){
 8000f88:	4b4a      	ldr	r3, [pc, #296]	@ (80010b4 <comms_lpuart_rx_callback+0x134>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	f040 808b 	bne.w	80010a8 <comms_lpuart_rx_callback+0x128>
		// quit if USB OTG is in use
		return;
	}

	switch (uart_rx_state) {
 8000f92:	4b49      	ldr	r3, [pc, #292]	@ (80010b8 <comms_lpuart_rx_callback+0x138>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d04f      	beq.n	800103a <comms_lpuart_rx_callback+0xba>
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	f300 8086 	bgt.w	80010ac <comms_lpuart_rx_callback+0x12c>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d002      	beq.n	8000faa <comms_lpuart_rx_callback+0x2a>
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d025      	beq.n	8000ff4 <comms_lpuart_rx_callback+0x74>
			UNUSED(rcode);

			break;

		default:
			break;
 8000fa8:	e080      	b.n	80010ac <comms_lpuart_rx_callback+0x12c>
			if (*((uint16_t*) (comms_rx_active_buffer)) != START_HEADER) {
 8000faa:	4b44      	ldr	r3, [pc, #272]	@ (80010bc <comms_lpuart_rx_callback+0x13c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d002      	beq.n	8000fbe <comms_lpuart_rx_callback+0x3e>
				comms_uart_init();
 8000fb8:	f7ff fd42 	bl	8000a40 <comms_uart_init>
				break;
 8000fbc:	e077      	b.n	80010ae <comms_lpuart_rx_callback+0x12e>
			uart_elements = *((uint16_t*) (comms_rx_active_buffer + 3));
 8000fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80010bc <comms_lpuart_rx_callback+0x13c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3303      	adds	r3, #3
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80010c0 <comms_lpuart_rx_callback+0x140>)
 8000fca:	601a      	str	r2, [r3, #0]
			comms_rx_active_rd_pointer = comms_rx_active_buffer + 5;
 8000fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80010bc <comms_lpuart_rx_callback+0x13c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3305      	adds	r3, #5
 8000fd2:	4a3c      	ldr	r2, [pc, #240]	@ (80010c4 <comms_lpuart_rx_callback+0x144>)
 8000fd4:	6013      	str	r3, [r2, #0]
			rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_rd_pointer, 3);
 8000fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80010c4 <comms_lpuart_rx_callback+0x144>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2203      	movs	r2, #3
 8000fdc:	4619      	mov	r1, r3
 8000fde:	483a      	ldr	r0, [pc, #232]	@ (80010c8 <comms_lpuart_rx_callback+0x148>)
 8000fe0:	f006 fd06 	bl	80079f0 <HAL_UART_Receive_IT>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b38      	ldr	r3, [pc, #224]	@ (80010cc <comms_lpuart_rx_callback+0x14c>)
 8000fea:	701a      	strb	r2, [r3, #0]
			uart_rx_state = COMMS_UART_PACKET_HEAD;
 8000fec:	4b32      	ldr	r3, [pc, #200]	@ (80010b8 <comms_lpuart_rx_callback+0x138>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
			break;
 8000ff2:	e05c      	b.n	80010ae <comms_lpuart_rx_callback+0x12e>
			data_total_length = (*(comms_rx_active_rd_pointer + 1)) * (*(comms_rx_active_rd_pointer + 2));
 8000ff4:	4b33      	ldr	r3, [pc, #204]	@ (80010c4 <comms_lpuart_rx_callback+0x144>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b31      	ldr	r3, [pc, #196]	@ (80010c4 <comms_lpuart_rx_callback+0x144>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	3302      	adds	r3, #2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	4a31      	ldr	r2, [pc, #196]	@ (80010d0 <comms_lpuart_rx_callback+0x150>)
 800100c:	6013      	str	r3, [r2, #0]
			comms_rx_active_rd_pointer = comms_rx_active_rd_pointer + 3;
 800100e:	4b2d      	ldr	r3, [pc, #180]	@ (80010c4 <comms_lpuart_rx_callback+0x144>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	3303      	adds	r3, #3
 8001014:	4a2b      	ldr	r2, [pc, #172]	@ (80010c4 <comms_lpuart_rx_callback+0x144>)
 8001016:	6013      	str	r3, [r2, #0]
			rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_rd_pointer, data_total_length);
 8001018:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <comms_lpuart_rx_callback+0x144>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a2c      	ldr	r2, [pc, #176]	@ (80010d0 <comms_lpuart_rx_callback+0x150>)
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	b292      	uxth	r2, r2
 8001022:	4619      	mov	r1, r3
 8001024:	4828      	ldr	r0, [pc, #160]	@ (80010c8 <comms_lpuart_rx_callback+0x148>)
 8001026:	f006 fce3 	bl	80079f0 <HAL_UART_Receive_IT>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <comms_lpuart_rx_callback+0x14c>)
 8001030:	701a      	strb	r2, [r3, #0]
			uart_rx_state = COMMS_UART_PACKET_DATA;
 8001032:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <comms_lpuart_rx_callback+0x138>)
 8001034:	2202      	movs	r2, #2
 8001036:	701a      	strb	r2, [r3, #0]
			break;
 8001038:	e039      	b.n	80010ae <comms_lpuart_rx_callback+0x12e>
			comms_rx_active_rd_pointer = comms_rx_active_rd_pointer + data_total_length;
 800103a:	4b22      	ldr	r3, [pc, #136]	@ (80010c4 <comms_lpuart_rx_callback+0x144>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a24      	ldr	r2, [pc, #144]	@ (80010d0 <comms_lpuart_rx_callback+0x150>)
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a1f      	ldr	r2, [pc, #124]	@ (80010c4 <comms_lpuart_rx_callback+0x144>)
 8001046:	6013      	str	r3, [r2, #0]
			if(uart_elements > 0) {
 8001048:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <comms_lpuart_rx_callback+0x140>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd07      	ble.n	8001060 <comms_lpuart_rx_callback+0xe0>
				uart_rx_state = COMMS_UART_PACKET_HEAD;
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <comms_lpuart_rx_callback+0x138>)
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
				--uart_elements;
 8001056:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <comms_lpuart_rx_callback+0x140>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	3b01      	subs	r3, #1
 800105c:	4a18      	ldr	r2, [pc, #96]	@ (80010c0 <comms_lpuart_rx_callback+0x140>)
 800105e:	6013      	str	r3, [r2, #0]
			if (uart_elements == 0) {
 8001060:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <comms_lpuart_rx_callback+0x140>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d115      	bne.n	8001094 <comms_lpuart_rx_callback+0x114>
				comms_rx_active_rd_pointer = comms_rx_active_buffer + 5;
 8001068:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <comms_lpuart_rx_callback+0x13c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3305      	adds	r3, #5
 800106e:	4a15      	ldr	r2, [pc, #84]	@ (80010c4 <comms_lpuart_rx_callback+0x144>)
 8001070:	6013      	str	r3, [r2, #0]
				comms_switch_rx_buffers();
 8001072:	f7ff fe5b 	bl	8000d2c <comms_switch_rx_buffers>
				rx_status = COMMS_RECEIVED;
 8001076:	4b17      	ldr	r3, [pc, #92]	@ (80010d4 <comms_lpuart_rx_callback+0x154>)
 8001078:	2202      	movs	r2, #2
 800107a:	701a      	strb	r2, [r3, #0]
				uart_rx_state = COMMS_UART_HEAD;
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <comms_lpuart_rx_callback+0x138>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
				uart_elements = 0;
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <comms_lpuart_rx_callback+0x140>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
				data_total_length = 0;
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <comms_lpuart_rx_callback+0x150>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
				comms_uart_init();
 800108e:	f7ff fcd7 	bl	8000a40 <comms_uart_init>
				break;
 8001092:	e00c      	b.n	80010ae <comms_lpuart_rx_callback+0x12e>
			HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_rd_pointer, 3);
 8001094:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <comms_lpuart_rx_callback+0x144>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2203      	movs	r2, #3
 800109a:	4619      	mov	r1, r3
 800109c:	480a      	ldr	r0, [pc, #40]	@ (80010c8 <comms_lpuart_rx_callback+0x148>)
 800109e:	f006 fca7 	bl	80079f0 <HAL_UART_Receive_IT>
 80010a2:	4603      	mov	r3, r0
 80010a4:	73fb      	strb	r3, [r7, #15]
			break;
 80010a6:	e002      	b.n	80010ae <comms_lpuart_rx_callback+0x12e>
		return;
 80010a8:	bf00      	nop
 80010aa:	e000      	b.n	80010ae <comms_lpuart_rx_callback+0x12e>
			break;
 80010ac:	bf00      	nop
	}

}
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20001678 	.word	0x20001678
 80010b8:	2000167c 	.word	0x2000167c
 80010bc:	20001660 	.word	0x20001660
 80010c0:	20003784 	.word	0x20003784
 80010c4:	20001664 	.word	0x20001664
 80010c8:	20003874 	.word	0x20003874
 80010cc:	20003788 	.word	0x20003788
 80010d0:	2000378c 	.word	0x2000378c
 80010d4:	2000167b 	.word	0x2000167b

080010d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	// user defined __weak callback from stm32l4xx_hal_uart.c
	// uart loaded data
	if (huart == &hlpuart1) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <HAL_UART_RxCpltCallback+0x20>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d102      	bne.n	80010ee <HAL_UART_RxCpltCallback+0x16>
		comms_lpuart_rx_callback(huart);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff49 	bl	8000f80 <comms_lpuart_rx_callback>
	}
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20003874 	.word	0x20003874

080010fc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d10d      	bne.n	8001128 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800110c:	2180      	movs	r1, #128	@ 0x80
 800110e:	4809      	ldr	r0, [pc, #36]	@ (8001134 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001110:	f002 ffe4 	bl	80040dc <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	4a07      	ldr	r2, [pc, #28]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800111c:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		comms_append_int32(1, 1, &periodical);
 800111e:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001120:	2101      	movs	r1, #1
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff fd14 	bl	8000b50 <comms_append_int32>
	}

	if (htim == &htim3) {
			//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		}
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20003828 	.word	0x20003828
 8001134:	48000400 	.word	0x48000400
 8001138:	20001680 	.word	0x20001680

0800113c <myDmaFunction>:

char testdata[10];

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <myDmaFunction+0x28>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114a:	4a07      	ldr	r2, [pc, #28]	@ (8001168 <myDmaFunction+0x2c>)
 800114c:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <myDmaFunction+0x28>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001154:	4a05      	ldr	r2, [pc, #20]	@ (800116c <myDmaFunction+0x30>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	200037dc 	.word	0x200037dc
 8001168:	2000168c 	.word	0x2000168c
 800116c:	20001690 	.word	0x20001690

08001170 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);
    //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);

    ++call_count;
 8001178:	4b58      	ldr	r3, [pc, #352]	@ (80012dc <HAL_ADC_ConvCpltCallback+0x16c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a57      	ldr	r2, [pc, #348]	@ (80012dc <HAL_ADC_ConvCpltCallback+0x16c>)
 8001180:	6013      	str	r3, [r2, #0]

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 8001182:	4b57      	ldr	r3, [pc, #348]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x170>)
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 800118a:	4b56      	ldr	r3, [pc, #344]	@ (80012e4 <HAL_ADC_ConvCpltCallback+0x174>)
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 10; i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e027      	b.n	80011e8 <HAL_ADC_ConvCpltCallback+0x78>
        adcValue += dma_data_buffer[i + 10]; // Použití druhé poloviny DMA bufferu
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	330a      	adds	r3, #10
 800119c:	4a52      	ldr	r2, [pc, #328]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x178>)
 800119e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011aa:	4b4d      	ldr	r3, [pc, #308]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x170>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	4b4a      	ldr	r3, [pc, #296]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x170>)
 80011b6:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 10];
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	330b      	adds	r3, #11
 80011be:	4a4a      	ldr	r2, [pc, #296]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x178>)
 80011c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011cc:	4b45      	ldr	r3, [pc, #276]	@ (80012e4 <HAL_ADC_ConvCpltCallback+0x174>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b43      	ldr	r3, [pc, #268]	@ (80012e4 <HAL_ADC_ConvCpltCallback+0x174>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
        i++;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 10; i++) {
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	2b09      	cmp	r3, #9
 80011ec:	ddd4      	ble.n	8001198 <HAL_ADC_ConvCpltCallback+0x28>
    }
    adcValue /= 50.0f;
 80011ee:	4b3c      	ldr	r3, [pc, #240]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x170>)
 80011f0:	ed93 7a00 	vldr	s14, [r3]
 80011f4:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80012ec <HAL_ADC_ConvCpltCallback+0x17c>
 80011f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fc:	4b38      	ldr	r3, [pc, #224]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x170>)
 80011fe:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 8001202:	4b38      	ldr	r3, [pc, #224]	@ (80012e4 <HAL_ADC_ConvCpltCallback+0x174>)
 8001204:	ed93 7a00 	vldr	s14, [r3]
 8001208:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80012ec <HAL_ADC_ConvCpltCallback+0x17c>
 800120c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001210:	4b34      	ldr	r3, [pc, #208]	@ (80012e4 <HAL_ADC_ConvCpltCallback+0x174>)
 8001212:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8001216:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <HAL_ADC_ConvCpltCallback+0x170>)
 8001218:	ed93 7a00 	vldr	s14, [r3]
 800121c:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80012f0 <HAL_ADC_ConvCpltCallback+0x180>
 8001220:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001224:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80012f4 <HAL_ADC_ConvCpltCallback+0x184>
 8001228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122c:	edc7 7a04 	vstr	s15, [r7, #16]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 8001230:	4b31      	ldr	r3, [pc, #196]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x188>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800123c:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 80012f0 <HAL_ADC_ConvCpltCallback+0x180>
 8001240:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001244:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80012f4 <HAL_ADC_ConvCpltCallback+0x184>
 8001248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124c:	edc7 7a03 	vstr	s15, [r7, #12]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 8001250:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x18c>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800125c:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80012f0 <HAL_ADC_ConvCpltCallback+0x180>
 8001260:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001264:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80012f4 <HAL_ADC_ConvCpltCallback+0x184>
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	edc7 7a02 	vstr	s15, [r7, #8]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 8001270:	ed97 7a04 	vldr	s14, [r7, #16]
 8001274:	edd7 7a03 	vldr	s15, [r7, #12]
 8001278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001300 <HAL_ADC_ConvCpltCallback+0x190>
 8001280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001284:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001288:	ee77 7a87 	vadd.f32	s15, s15, s14
 800128c:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x194>)
 800128e:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x198>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a1b      	ldr	r2, [pc, #108]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x198>)
 800129a:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    temperatureInt = (int)temperature;
 800129c:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x194>)
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a6:	ee17 2a90 	vmov	r2, s15
 80012aa:	4b18      	ldr	r3, [pc, #96]	@ (800130c <HAL_ADC_ConvCpltCallback+0x19c>)
 80012ac:	601a      	str	r2, [r3, #0]

    adcIn1Int = (int)adcIn1;
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <HAL_ADC_ConvCpltCallback+0x174>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b8:	ee17 2a90 	vmov	r2, s15
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80012be:	601a      	str	r2, [r3, #0]

    full_adc++;
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80012c8:	6013      	str	r3, [r2, #0]

    //comms_append_int32(2, 1, &temperatureInt);
    comms_append_int32(23, 1, &adcIn1Int);
 80012ca:	4a11      	ldr	r2, [pc, #68]	@ (8001310 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80012cc:	2101      	movs	r1, #1
 80012ce:	2017      	movs	r0, #23
 80012d0:	f7ff fc3e 	bl	8000b50 <comms_append_int32>
}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000377c 	.word	0x2000377c
 80012e0:	20003764 	.word	0x20003764
 80012e4:	2000376c 	.word	0x2000376c
 80012e8:	200035d4 	.word	0x200035d4
 80012ec:	42480000 	.word	0x42480000
 80012f0:	45800000 	.word	0x45800000
 80012f4:	40533333 	.word	0x40533333
 80012f8:	1fff75a8 	.word	0x1fff75a8
 80012fc:	1fff75ca 	.word	0x1fff75ca
 8001300:	42a00000 	.word	0x42a00000
 8001304:	20003768 	.word	0x20003768
 8001308:	20003770 	.word	0x20003770
 800130c:	20003774 	.word	0x20003774
 8001310:	20003778 	.word	0x20003778
 8001314:	20003780 	.word	0x20003780

08001318 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
//		adcValue = adcValue + dma_data_buffer[i];
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001332:	f000 fc2e 	bl	8001b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001336:	f000 f885 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133a:	f7ff fa49 	bl	80007d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800133e:	f7ff f9eb 	bl	8000718 <MX_DMA_Init>
  MX_TIM6_Init();
 8001342:	f000 fa29 	bl	8001798 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8001346:	f00b fdf5 	bl	800cf34 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 800134a:	f000 f9d7 	bl	80016fc <MX_TIM5_Init>
  MX_ADC1_Init();
 800134e:	f7ff f8cd 	bl	80004ec <MX_ADC1_Init>
  MX_TIM3_Init();
 8001352:	f000 f985 	bl	8001660 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001356:	f000 faf9 	bl	800194c <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 800135a:	f000 faab 	bl	80018b4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800135e:	2201      	movs	r2, #1
 8001360:	2180      	movs	r1, #128	@ 0x80
 8001362:	482b      	ldr	r0, [pc, #172]	@ (8001410 <main+0xe4>)
 8001364:	f002 fea2 	bl	80040ac <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 8001368:	482a      	ldr	r0, [pc, #168]	@ (8001414 <main+0xe8>)
 800136a:	f005 fe25 	bl	8006fb8 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 800136e:	482a      	ldr	r0, [pc, #168]	@ (8001418 <main+0xec>)
 8001370:	f005 fdba 	bl	8006ee8 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	e00d      	b.n	8001396 <main+0x6a>
		dma[i] = i;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	4a25      	ldr	r2, [pc, #148]	@ (800141c <main+0xf0>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3301      	adds	r3, #1
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800139c:	dbed      	blt.n	800137a <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 800139e:	4a20      	ldr	r2, [pc, #128]	@ (8001420 <main+0xf4>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	4820      	ldr	r0, [pc, #128]	@ (8001424 <main+0xf8>)
 80013a4:	f002 fc08 	bl	8003bb8 <HAL_DMA_RegisterCallback>
 80013a8:	4603      	mov	r3, r0
 80013aa:	70fb      	strb	r3, [r7, #3]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <main+0xec>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001428 <main+0xfc>)
 80013b4:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 80013b6:	4919      	ldr	r1, [pc, #100]	@ (800141c <main+0xf0>)
 80013b8:	4a1c      	ldr	r2, [pc, #112]	@ (800142c <main+0x100>)
 80013ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013be:	4819      	ldr	r0, [pc, #100]	@ (8001424 <main+0xf8>)
 80013c0:	f002 fa14 	bl	80037ec <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 80013c4:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <main+0xec>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ca:	4a19      	ldr	r2, [pc, #100]	@ (8001430 <main+0x104>)
 80013cc:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <main+0xec>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d4:	4a17      	ldr	r2, [pc, #92]	@ (8001434 <main+0x108>)
 80013d6:	6013      	str	r3, [r2, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80013d8:	217f      	movs	r1, #127	@ 0x7f
 80013da:	4817      	ldr	r0, [pc, #92]	@ (8001438 <main+0x10c>)
 80013dc:	f001 ffba 	bl	8003354 <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 80013e0:	2032      	movs	r0, #50	@ 0x32
 80013e2:	f000 fc4b 	bl	8001c7c <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 20);
 80013e6:	2214      	movs	r2, #20
 80013e8:	4914      	ldr	r1, [pc, #80]	@ (800143c <main+0x110>)
 80013ea:	4813      	ldr	r0, [pc, #76]	@ (8001438 <main+0x10c>)
 80013ec:	f000 ffc4 	bl	8002378 <HAL_ADC_Start_DMA>
 80013f0:	4603      	mov	r3, r0
 80013f2:	70bb      	strb	r3, [r7, #2]

	HAL_TIM_Base_Start_IT(&htim3);
 80013f4:	4812      	ldr	r0, [pc, #72]	@ (8001440 <main+0x114>)
 80013f6:	f005 fddf 	bl	8006fb8 <HAL_TIM_Base_Start_IT>

	comms_init();
 80013fa:	f7ff fb35 	bl	8000a68 <comms_init>
	comms_uart_init();
 80013fe:	f7ff fb1f 	bl	8000a40 <comms_uart_init>
//	    comms_append_int32(2, 1, &temperatureInt);

//	    comms_send();

		//load_CPU();
		comms_send();
 8001402:	f7ff fc1d 	bl	8000c40 <comms_send>
		comms_rx_process();
 8001406:	f7ff fd0f 	bl	8000e28 <comms_rx_process>
		comms_send();
 800140a:	bf00      	nop
 800140c:	e7f9      	b.n	8001402 <main+0xd6>
 800140e:	bf00      	nop
 8001410:	48000800 	.word	0x48000800
 8001414:	20003828 	.word	0x20003828
 8001418:	200037dc 	.word	0x200037dc
 800141c:	20001694 	.word	0x20001694
 8001420:	0800113d 	.word	0x0800113d
 8001424:	200001f0 	.word	0x200001f0
 8001428:	20001684 	.word	0x20001684
 800142c:	20002634 	.word	0x20002634
 8001430:	20001690 	.word	0x20001690
 8001434:	20001688 	.word	0x20001688
 8001438:	20000128 	.word	0x20000128
 800143c:	200035d4 	.word	0x200035d4
 8001440:	20003790 	.word	0x20003790

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b096      	sub	sp, #88	@ 0x58
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	2244      	movs	r2, #68	@ 0x44
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f00c fbd2 	bl	800dbfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001466:	2000      	movs	r0, #0
 8001468:	f004 f832 	bl	80054d0 <HAL_PWREx_ControlVoltageScaling>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001472:	f000 f83a 	bl	80014ea <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001476:	2322      	movs	r3, #34	@ 0x22
 8001478:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800147a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001480:	2301      	movs	r3, #1
 8001482:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001484:	2340      	movs	r3, #64	@ 0x40
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001488:	2302      	movs	r3, #2
 800148a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800148c:	2302      	movs	r3, #2
 800148e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001490:	2302      	movs	r3, #2
 8001492:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001494:	231e      	movs	r3, #30
 8001496:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001498:	2302      	movs	r3, #2
 800149a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800149c:	2302      	movs	r3, #2
 800149e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4618      	mov	r0, r3
 80014aa:	f004 f8d5 	bl	8005658 <HAL_RCC_OscConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80014b4:	f000 f819 	bl	80014ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b8:	230f      	movs	r3, #15
 80014ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014bc:	2303      	movs	r3, #3
 80014be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014ce:	463b      	mov	r3, r7
 80014d0:	2105      	movs	r1, #5
 80014d2:	4618      	mov	r0, r3
 80014d4:	f004 fcda 	bl	8005e8c <HAL_RCC_ClockConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014de:	f000 f804 	bl	80014ea <Error_Handler>
  }
}
 80014e2:	bf00      	nop
 80014e4:	3758      	adds	r7, #88	@ 0x58
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014ee:	b672      	cpsid	i
}
 80014f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014f2:	bf00      	nop
 80014f4:	e7fd      	b.n	80014f2 <Error_Handler+0x8>
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <HAL_MspInit+0x44>)
 8001500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001502:	4a0e      	ldr	r2, [pc, #56]	@ (800153c <HAL_MspInit+0x44>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6613      	str	r3, [r2, #96]	@ 0x60
 800150a:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <HAL_MspInit+0x44>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <HAL_MspInit+0x44>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151a:	4a08      	ldr	r2, [pc, #32]	@ (800153c <HAL_MspInit+0x44>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001520:	6593      	str	r3, [r2, #88]	@ 0x58
 8001522:	4b06      	ldr	r3, [pc, #24]	@ (800153c <HAL_MspInit+0x44>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <NMI_Handler+0x4>

08001548 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <MemManage_Handler+0x4>

08001558 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <UsageFault_Handler+0x4>

08001568 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001596:	f000 fb51 	bl	8001c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <DMA1_Channel1_IRQHandler+0x10>)
 80015a6:	f002 fa57 	bl	8003a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000190 	.word	0x20000190

080015b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <DMA1_Channel2_IRQHandler+0x10>)
 80015ba:	f002 fa4d 	bl	8003a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200001f0 	.word	0x200001f0

080015c8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <ADC1_IRQHandler+0x10>)
 80015ce:	f000 ff57 	bl	8002480 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000128 	.word	0x20000128

080015dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <TIM3_IRQHandler+0x10>)
 80015e2:	f005 fd59 	bl	8007098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20003790 	.word	0x20003790

080015f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015f8:	f002 fd8a 	bl	8004110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001604:	4802      	ldr	r0, [pc, #8]	@ (8001610 <TIM6_DAC_IRQHandler+0x10>)
 8001606:	f005 fd47 	bl	8007098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20003828 	.word	0x20003828

08001614 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <OTG_FS_IRQHandler+0x10>)
 800161a:	f002 fee4 	bl	80043e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20004e80 	.word	0x20004e80

08001628 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <LPUART1_IRQHandler+0x10>)
 800162e:	f006 fa2b 	bl	8007a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20003874 	.word	0x20003874

0800163c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <SystemInit+0x20>)
 8001642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001646:	4a05      	ldr	r2, [pc, #20]	@ (800165c <SystemInit+0x20>)
 8001648:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800164c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800167e:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <MX_TIM3_Init+0x94>)
 8001680:	4a1d      	ldr	r2, [pc, #116]	@ (80016f8 <MX_TIM3_Init+0x98>)
 8001682:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <MX_TIM3_Init+0x94>)
 8001686:	22c7      	movs	r2, #199	@ 0xc7
 8001688:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <MX_TIM3_Init+0x94>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <MX_TIM3_Init+0x94>)
 8001692:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001696:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <MX_TIM3_Init+0x94>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <MX_TIM3_Init+0x94>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016a4:	4813      	ldr	r0, [pc, #76]	@ (80016f4 <MX_TIM3_Init+0x94>)
 80016a6:	f005 fbc7 	bl	8006e38 <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80016b0:	f7ff ff1b 	bl	80014ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	4619      	mov	r1, r3
 80016c0:	480c      	ldr	r0, [pc, #48]	@ (80016f4 <MX_TIM3_Init+0x94>)
 80016c2:	f005 fdeb 	bl	800729c <HAL_TIM_ConfigClockSource>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016cc:	f7ff ff0d 	bl	80014ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016d0:	2320      	movs	r3, #32
 80016d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_TIM3_Init+0x94>)
 80016de:	f006 f803 	bl	80076e8 <HAL_TIMEx_MasterConfigSynchronization>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80016e8:	f7ff feff 	bl	80014ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 80016ec:	bf00      	nop
 80016ee:	3720      	adds	r7, #32
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20003790 	.word	0x20003790
 80016f8:	40000400 	.word	0x40000400

080016fc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800171a:	4b1d      	ldr	r3, [pc, #116]	@ (8001790 <MX_TIM5_Init+0x94>)
 800171c:	4a1d      	ldr	r2, [pc, #116]	@ (8001794 <MX_TIM5_Init+0x98>)
 800171e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <MX_TIM5_Init+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <MX_TIM5_Init+0x94>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800172c:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <MX_TIM5_Init+0x94>)
 800172e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001732:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <MX_TIM5_Init+0x94>)
 8001736:	2200      	movs	r2, #0
 8001738:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <MX_TIM5_Init+0x94>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001740:	4813      	ldr	r0, [pc, #76]	@ (8001790 <MX_TIM5_Init+0x94>)
 8001742:	f005 fb79 	bl	8006e38 <HAL_TIM_Base_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800174c:	f7ff fecd 	bl	80014ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001754:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <MX_TIM5_Init+0x94>)
 800175e:	f005 fd9d 	bl	800729c <HAL_TIM_ConfigClockSource>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001768:	f7ff febf 	bl	80014ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4805      	ldr	r0, [pc, #20]	@ (8001790 <MX_TIM5_Init+0x94>)
 800177a:	f005 ffb5 	bl	80076e8 <HAL_TIMEx_MasterConfigSynchronization>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001784:	f7ff feb1 	bl	80014ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	3720      	adds	r7, #32
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	200037dc 	.word	0x200037dc
 8001794:	40000c00 	.word	0x40000c00

08001798 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017a8:	4b15      	ldr	r3, [pc, #84]	@ (8001800 <MX_TIM6_Init+0x68>)
 80017aa:	4a16      	ldr	r2, [pc, #88]	@ (8001804 <MX_TIM6_Init+0x6c>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 80017ae:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <MX_TIM6_Init+0x68>)
 80017b0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80017b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <MX_TIM6_Init+0x68>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 80017bc:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <MX_TIM6_Init+0x68>)
 80017be:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 80017c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <MX_TIM6_Init+0x68>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017ca:	480d      	ldr	r0, [pc, #52]	@ (8001800 <MX_TIM6_Init+0x68>)
 80017cc:	f005 fb34 	bl	8006e38 <HAL_TIM_Base_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80017d6:	f7ff fe88 	bl	80014ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017da:	2320      	movs	r3, #32
 80017dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	4619      	mov	r1, r3
 80017e6:	4806      	ldr	r0, [pc, #24]	@ (8001800 <MX_TIM6_Init+0x68>)
 80017e8:	f005 ff7e 	bl	80076e8 <HAL_TIMEx_MasterConfigSynchronization>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80017f2:	f7ff fe7a 	bl	80014ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20003828 	.word	0x20003828
 8001804:	40001000 	.word	0x40001000

08001808 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a23      	ldr	r2, [pc, #140]	@ (80018a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d114      	bne.n	8001844 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800181a:	4b23      	ldr	r3, [pc, #140]	@ (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181e:	4a22      	ldr	r2, [pc, #136]	@ (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6593      	str	r3, [r2, #88]	@ 0x58
 8001826:	4b20      	ldr	r3, [pc, #128]	@ (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	201d      	movs	r0, #29
 8001838:	f001 fef9 	bl	800362e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800183c:	201d      	movs	r0, #29
 800183e:	f001 ff12 	bl	8003666 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001842:	e02a      	b.n	800189a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a18      	ldr	r2, [pc, #96]	@ (80018ac <HAL_TIM_Base_MspInit+0xa4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d10c      	bne.n	8001868 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800184e:	4b16      	ldr	r3, [pc, #88]	@ (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	4a15      	ldr	r2, [pc, #84]	@ (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	6593      	str	r3, [r2, #88]	@ 0x58
 800185a:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
}
 8001866:	e018      	b.n	800189a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a10      	ldr	r2, [pc, #64]	@ (80018b0 <HAL_TIM_Base_MspInit+0xa8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d113      	bne.n	800189a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001872:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001876:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001878:	f043 0310 	orr.w	r3, r3, #16
 800187c:	6593      	str	r3, [r2, #88]	@ 0x58
 800187e:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2036      	movs	r0, #54	@ 0x36
 8001890:	f001 fecd 	bl	800362e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001894:	2036      	movs	r0, #54	@ 0x36
 8001896:	f001 fee6 	bl	8003666 <HAL_NVIC_EnableIRQ>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40000400 	.word	0x40000400
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40000c00 	.word	0x40000c00
 80018b0:	40001000 	.word	0x40001000

080018b4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018b8:	4b22      	ldr	r3, [pc, #136]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018ba:	4a23      	ldr	r2, [pc, #140]	@ (8001948 <MX_LPUART1_UART_Init+0x94>)
 80018bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80018be:	4b21      	ldr	r3, [pc, #132]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018c4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80018d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80018d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018da:	220c      	movs	r2, #12
 80018dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018de:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e4:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018ea:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f0:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80018f6:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80018fc:	4811      	ldr	r0, [pc, #68]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 80018fe:	f005 ff99 	bl	8007834 <HAL_UART_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001908:	f7ff fdef 	bl	80014ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800190c:	2100      	movs	r1, #0
 800190e:	480d      	ldr	r0, [pc, #52]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 8001910:	f007 fff3 	bl	80098fa <HAL_UARTEx_SetTxFifoThreshold>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800191a:	f7ff fde6 	bl	80014ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800191e:	2100      	movs	r1, #0
 8001920:	4808      	ldr	r0, [pc, #32]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 8001922:	f008 f828 	bl	8009976 <HAL_UARTEx_SetRxFifoThreshold>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800192c:	f7ff fddd 	bl	80014ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	@ (8001944 <MX_LPUART1_UART_Init+0x90>)
 8001932:	f007 ffa9 	bl	8009888 <HAL_UARTEx_DisableFifoMode>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800193c:	f7ff fdd5 	bl	80014ea <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20003874 	.word	0x20003874
 8001948:	40008000 	.word	0x40008000

0800194c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001950:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 8001952:	4a23      	ldr	r2, [pc, #140]	@ (80019e0 <MX_USART3_UART_Init+0x94>)
 8001954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001956:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 8001958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800195c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001982:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800198e:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001994:	4811      	ldr	r0, [pc, #68]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 8001996:	f005 ff4d 	bl	8007834 <HAL_UART_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019a0:	f7ff fda3 	bl	80014ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a4:	2100      	movs	r1, #0
 80019a6:	480d      	ldr	r0, [pc, #52]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 80019a8:	f007 ffa7 	bl	80098fa <HAL_UARTEx_SetTxFifoThreshold>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019b2:	f7ff fd9a 	bl	80014ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b6:	2100      	movs	r1, #0
 80019b8:	4808      	ldr	r0, [pc, #32]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 80019ba:	f007 ffdc 	bl	8009976 <HAL_UARTEx_SetRxFifoThreshold>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80019c4:	f7ff fd91 	bl	80014ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80019c8:	4804      	ldr	r0, [pc, #16]	@ (80019dc <MX_USART3_UART_Init+0x90>)
 80019ca:	f007 ff5d 	bl	8009888 <HAL_UARTEx_DisableFifoMode>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80019d4:	f7ff fd89 	bl	80014ea <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20003908 	.word	0x20003908
 80019e0:	40004800 	.word	0x40004800

080019e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b0b0      	sub	sp, #192	@ 0xc0
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019fc:	f107 0318 	add.w	r3, r7, #24
 8001a00:	2294      	movs	r2, #148	@ 0x94
 8001a02:	2100      	movs	r1, #0
 8001a04:	4618      	mov	r0, r3
 8001a06:	f00c f8f9 	bl	800dbfc <memset>
  if(uartHandle->Instance==LPUART1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a47      	ldr	r2, [pc, #284]	@ (8001b2c <HAL_UART_MspInit+0x148>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d146      	bne.n	8001aa2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a14:	2320      	movs	r3, #32
 8001a16:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a1c:	f107 0318 	add.w	r3, r7, #24
 8001a20:	4618      	mov	r0, r3
 8001a22:	f004 fcf1 	bl	8006408 <HAL_RCCEx_PeriphCLKConfig>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a2c:	f7ff fd5d 	bl	80014ea <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a30:	4b3f      	ldr	r3, [pc, #252]	@ (8001b30 <HAL_UART_MspInit+0x14c>)
 8001a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a34:	4a3e      	ldr	r2, [pc, #248]	@ (8001b30 <HAL_UART_MspInit+0x14c>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001a3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b30 <HAL_UART_MspInit+0x14c>)
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a48:	4b39      	ldr	r3, [pc, #228]	@ (8001b30 <HAL_UART_MspInit+0x14c>)
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4c:	4a38      	ldr	r2, [pc, #224]	@ (8001b30 <HAL_UART_MspInit+0x14c>)
 8001a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a54:	4b36      	ldr	r3, [pc, #216]	@ (8001b30 <HAL_UART_MspInit+0x14c>)
 8001a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001a60:	f003 fdea 	bl	8005638 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001a64:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a7e:	2308      	movs	r3, #8
 8001a80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a84:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a88:	4619      	mov	r1, r3
 8001a8a:	482a      	ldr	r0, [pc, #168]	@ (8001b34 <HAL_UART_MspInit+0x150>)
 8001a8c:	f002 f97c 	bl	8003d88 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	2046      	movs	r0, #70	@ 0x46
 8001a96:	f001 fdca 	bl	800362e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001a9a:	2046      	movs	r0, #70	@ 0x46
 8001a9c:	f001 fde3 	bl	8003666 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001aa0:	e040      	b.n	8001b24 <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART3)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a24      	ldr	r2, [pc, #144]	@ (8001b38 <HAL_UART_MspInit+0x154>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d13b      	bne.n	8001b24 <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001aac:	2304      	movs	r3, #4
 8001aae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab4:	f107 0318 	add.w	r3, r7, #24
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f004 fca5 	bl	8006408 <HAL_RCCEx_PeriphCLKConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001ac4:	f7ff fd11 	bl	80014ea <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_UART_MspInit+0x14c>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001acc:	4a18      	ldr	r2, [pc, #96]	@ (8001b30 <HAL_UART_MspInit+0x14c>)
 8001ace:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <HAL_UART_MspInit+0x14c>)
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae0:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <HAL_UART_MspInit+0x14c>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae4:	4a12      	ldr	r2, [pc, #72]	@ (8001b30 <HAL_UART_MspInit+0x14c>)
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <HAL_UART_MspInit+0x14c>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001af8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001afc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b12:	2307      	movs	r3, #7
 8001b14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b18:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4807      	ldr	r0, [pc, #28]	@ (8001b3c <HAL_UART_MspInit+0x158>)
 8001b20:	f002 f932 	bl	8003d88 <HAL_GPIO_Init>
}
 8001b24:	bf00      	nop
 8001b26:	37c0      	adds	r7, #192	@ 0xc0
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40008000 	.word	0x40008000
 8001b30:	40021000 	.word	0x40021000
 8001b34:	48001800 	.word	0x48001800
 8001b38:	40004800 	.word	0x40004800
 8001b3c:	48000c00 	.word	0x48000c00

08001b40 <Reset_Handler>:
 8001b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b78 <LoopForever+0x2>
 8001b44:	f7ff fd7a 	bl	800163c <SystemInit>
 8001b48:	480c      	ldr	r0, [pc, #48]	@ (8001b7c <LoopForever+0x6>)
 8001b4a:	490d      	ldr	r1, [pc, #52]	@ (8001b80 <LoopForever+0xa>)
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <LoopForever+0xe>)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:
 8001b52:	58d4      	ldr	r4, [r2, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:
 8001b58:	18c4      	adds	r4, r0, r3
 8001b5a:	428c      	cmp	r4, r1
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b88 <LoopForever+0x12>)
 8001b60:	4c0a      	ldr	r4, [pc, #40]	@ (8001b8c <LoopForever+0x16>)
 8001b62:	2300      	movs	r3, #0
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:
 8001b6a:	42a2      	cmp	r2, r4
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>
 8001b6e:	f00c f84d 	bl	800dc0c <__libc_init_array>
 8001b72:	f7ff fbdb 	bl	800132c <main>

08001b76 <LoopForever>:
 8001b76:	e7fe      	b.n	8001b76 <LoopForever>
 8001b78:	200a0000 	.word	0x200a0000
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	2000010c 	.word	0x2000010c
 8001b84:	0800dd50 	.word	0x0800dd50
 8001b88:	2000010c 	.word	0x2000010c
 8001b8c:	200055ac 	.word	0x200055ac

08001b90 <CAN1_RX0_IRQHandler>:
 8001b90:	e7fe      	b.n	8001b90 <CAN1_RX0_IRQHandler>

08001b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f001 fd3b 	bl	8003618 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f000 f80e 	bl	8001bc4 <HAL_InitTick>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	e001      	b.n	8001bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bb4:	f7ff fca0 	bl	80014f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bd0:	4b17      	ldr	r3, [pc, #92]	@ (8001c30 <HAL_InitTick+0x6c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d023      	beq.n	8001c20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bd8:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <HAL_InitTick+0x70>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b14      	ldr	r3, [pc, #80]	@ (8001c30 <HAL_InitTick+0x6c>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 fd47 	bl	8003682 <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10f      	bne.n	8001c1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d809      	bhi.n	8001c14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c08:	f001 fd11 	bl	800362e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <HAL_InitTick+0x74>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e007      	b.n	8001c24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e004      	b.n	8001c24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	e001      	b.n	8001c24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000008 	.word	0x20000008
 8001c34:	20000000 	.word	0x20000000
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	2000399c 	.word	0x2000399c

08001c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	2000399c 	.word	0x2000399c

08001c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff ffee 	bl	8001c64 <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c94:	d005      	beq.n	8001ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c96:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <HAL_Delay+0x44>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ca2:	bf00      	nop
 8001ca4:	f7ff ffde 	bl	8001c64 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d8f7      	bhi.n	8001ca4 <HAL_Delay+0x28>
  {
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000008 	.word	0x20000008

08001cc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	609a      	str	r2, [r3, #8]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	3360      	adds	r3, #96	@ 0x60
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <LL_ADC_SetOffset+0x44>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d64:	bf00      	nop
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	03fff000 	.word	0x03fff000

08001d74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3360      	adds	r3, #96	@ 0x60
 8001d82:	461a      	mov	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3360      	adds	r3, #96	@ 0x60
 8001db0:	461a      	mov	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dca:	bf00      	nop
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	615a      	str	r2, [r3, #20]
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b087      	sub	sp, #28
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3330      	adds	r3, #48	@ 0x30
 8001e32:	461a      	mov	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	4413      	add	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	f003 031f 	and.w	r3, r3, #31
 8001e4c:	211f      	movs	r1, #31
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	401a      	ands	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	0e9b      	lsrs	r3, r3, #26
 8001e5a:	f003 011f 	and.w	r1, r3, #31
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e6e:	bf00      	nop
 8001e70:	371c      	adds	r7, #28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b087      	sub	sp, #28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3314      	adds	r3, #20
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	0e5b      	lsrs	r3, r3, #25
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	4413      	add	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	0d1b      	lsrs	r3, r3, #20
 8001ec8:	f003 031f 	and.w	r3, r3, #31
 8001ecc:	2107      	movs	r1, #7
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	401a      	ands	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	0d1b      	lsrs	r3, r3, #20
 8001eda:	f003 031f 	and.w	r3, r3, #31
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
	...

08001ef8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f10:	43db      	mvns	r3, r3
 8001f12:	401a      	ands	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f003 0318 	and.w	r3, r3, #24
 8001f1a:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f1c:	40d9      	lsrs	r1, r3
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	400b      	ands	r3, r1
 8001f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f26:	431a      	orrs	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	0007ffff 	.word	0x0007ffff

08001f40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6093      	str	r3, [r2, #8]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f78:	d101      	bne.n	8001f7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fa0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fc8:	d101      	bne.n	8001fce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002014:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002018:	f043 0202 	orr.w	r2, r3, #2
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <LL_ADC_IsEnabled+0x18>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <LL_ADC_IsEnabled+0x1a>
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b02      	cmp	r3, #2
 8002064:	d101      	bne.n	800206a <LL_ADC_IsDisableOngoing+0x18>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <LL_ADC_IsDisableOngoing+0x1a>
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002088:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800208c:	f043 0204 	orr.w	r2, r3, #4
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d101      	bne.n	80020b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d101      	bne.n	80020de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e129      	b.n	800235a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7fe fa5f 	bl	80005d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff19 	bl	8001f64 <LL_ADC_IsDeepPowerDownEnabled>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d004      	beq.n	8002142 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff feff 	bl	8001f40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff34 	bl	8001fb4 <LL_ADC_IsInternalRegulatorEnabled>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d115      	bne.n	800217e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff ff18 	bl	8001f8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800215c:	4b81      	ldr	r3, [pc, #516]	@ (8002364 <HAL_ADC_Init+0x278>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	099b      	lsrs	r3, r3, #6
 8002162:	4a81      	ldr	r2, [pc, #516]	@ (8002368 <HAL_ADC_Init+0x27c>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	099b      	lsrs	r3, r3, #6
 800216a:	3301      	adds	r3, #1
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002170:	e002      	b.n	8002178 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3b01      	subs	r3, #1
 8002176:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f9      	bne.n	8002172 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff16 	bl	8001fb4 <LL_ADC_IsInternalRegulatorEnabled>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10d      	bne.n	80021aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002192:	f043 0210 	orr.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff76 	bl	80020a0 <LL_ADC_REG_IsConversionOngoing>
 80021b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ba:	f003 0310 	and.w	r3, r3, #16
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 80c2 	bne.w	8002348 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 80be 	bne.w	8002348 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021d4:	f043 0202 	orr.w	r2, r3, #2
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff23 	bl	800202c <LL_ADC_IsEnabled>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10b      	bne.n	8002204 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021ec:	485f      	ldr	r0, [pc, #380]	@ (800236c <HAL_ADC_Init+0x280>)
 80021ee:	f7ff ff1d 	bl	800202c <LL_ADC_IsEnabled>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4619      	mov	r1, r3
 80021fe:	485c      	ldr	r0, [pc, #368]	@ (8002370 <HAL_ADC_Init+0x284>)
 8002200:	f7ff fd60 	bl	8001cc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7e5b      	ldrb	r3, [r3, #25]
 8002208:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800220e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002214:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800221a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002222:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d106      	bne.n	8002240 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	3b01      	subs	r3, #1
 8002238:	045b      	lsls	r3, r3, #17
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	4b44      	ldr	r3, [pc, #272]	@ (8002374 <HAL_ADC_Init+0x288>)
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	69b9      	ldr	r1, [r7, #24]
 800226c:	430b      	orrs	r3, r1
 800226e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff26 	bl	80020c6 <LL_ADC_INJ_IsConversionOngoing>
 800227a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d140      	bne.n	8002304 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d13d      	bne.n	8002304 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7e1b      	ldrb	r3, [r3, #24]
 8002290:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002292:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800229a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022aa:	f023 0306 	bic.w	r3, r3, #6
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6812      	ldr	r2, [r2, #0]
 80022b2:	69b9      	ldr	r1, [r7, #24]
 80022b4:	430b      	orrs	r3, r1
 80022b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d118      	bne.n	80022f4 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022d8:	4311      	orrs	r1, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022de:	4311      	orrs	r1, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022e4:	430a      	orrs	r2, r1
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	611a      	str	r2, [r3, #16]
 80022f2:	e007      	b.n	8002304 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d10c      	bne.n	8002326 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002312:	f023 010f 	bic.w	r1, r3, #15
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	1e5a      	subs	r2, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	631a      	str	r2, [r3, #48]	@ 0x30
 8002324:	e007      	b.n	8002336 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 020f 	bic.w	r2, r2, #15
 8002334:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	f023 0303 	bic.w	r3, r3, #3
 800233e:	f043 0201 	orr.w	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	659a      	str	r2, [r3, #88]	@ 0x58
 8002346:	e007      	b.n	8002358 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234c:	f043 0210 	orr.w	r2, r3, #16
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002358:	7ffb      	ldrb	r3, [r7, #31]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3720      	adds	r7, #32
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000000 	.word	0x20000000
 8002368:	053e2d63 	.word	0x053e2d63
 800236c:	50040000 	.word	0x50040000
 8002370:	50040300 	.word	0x50040300
 8002374:	fff0c007 	.word	0xfff0c007

08002378 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fe89 	bl	80020a0 <LL_ADC_REG_IsConversionOngoing>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d167      	bne.n	8002464 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Start_DMA+0x2a>
 800239e:	2302      	movs	r3, #2
 80023a0:	e063      	b.n	800246a <HAL_ADC_Start_DMA+0xf2>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fe2c 	bl	8003008 <ADC_Enable>
 80023b0:	4603      	mov	r3, r0
 80023b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023b4:	7dfb      	ldrb	r3, [r7, #23]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d14f      	bne.n	800245a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023c2:	f023 0301 	bic.w	r3, r3, #1
 80023c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	f023 0206 	bic.w	r2, r3, #6
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023e6:	e002      	b.n	80023ee <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f2:	4a20      	ldr	r2, [pc, #128]	@ (8002474 <HAL_ADC_Start_DMA+0xfc>)
 80023f4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002478 <HAL_ADC_Start_DMA+0x100>)
 80023fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002402:	4a1e      	ldr	r2, [pc, #120]	@ (800247c <HAL_ADC_Start_DMA+0x104>)
 8002404:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	221c      	movs	r2, #28
 800240c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0210 	orr.w	r2, r2, #16
 8002424:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0201 	orr.w	r2, r2, #1
 8002434:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	3340      	adds	r3, #64	@ 0x40
 8002440:	4619      	mov	r1, r3
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f001 f9d1 	bl	80037ec <HAL_DMA_Start_IT>
 800244a:	4603      	mov	r3, r0
 800244c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fe10 	bl	8002078 <LL_ADC_REG_StartConversion>
 8002458:	e006      	b.n	8002468 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002462:	e001      	b.n	8002468 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002464:	2302      	movs	r3, #2
 8002466:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002468:	7dfb      	ldrb	r3, [r7, #23]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	080031d3 	.word	0x080031d3
 8002478:	080032ab 	.word	0x080032ab
 800247c:	080032c7 	.word	0x080032c7

08002480 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d017      	beq.n	80024d6 <HAL_ADC_IRQHandler+0x56>
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d012      	beq.n	80024d6 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b4:	f003 0310 	and.w	r3, r3, #16
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 ffcb 	bl	8003464 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2202      	movs	r2, #2
 80024d4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d004      	beq.n	80024ea <HAL_ADC_IRQHandler+0x6a>
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d109      	bne.n	80024fe <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d05e      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d059      	beq.n	80025b2 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	d105      	bne.n	8002516 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800250e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fc6e 	bl	8001dfc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d03e      	beq.n	80025a4 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d135      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b08      	cmp	r3, #8
 8002544:	d12e      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fda8 	bl	80020a0 <LL_ADC_REG_IsConversionOngoing>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d11a      	bne.n	800258c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 020c 	bic.w	r2, r2, #12
 8002564:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002576:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d112      	bne.n	80025a4 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	@ 0x58
 800258a:	e00b      	b.n	80025a4 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	f043 0210 	orr.w	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7fe fde3 	bl	8001170 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_IRQHandler+0x146>
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d072      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d06d      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d105      	bne.n	80025f2 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ea:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fc3f 	bl	8001e7a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80025fc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fbfa 	bl	8001dfc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002608:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d047      	beq.n	80026a8 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <HAL_ADC_IRQHandler+0x1b2>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d03f      	beq.n	80026a8 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800262e:	2b00      	cmp	r3, #0
 8002630:	d13a      	bne.n	80026a8 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800263c:	2b40      	cmp	r3, #64	@ 0x40
 800263e:	d133      	bne.n	80026a8 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d12e      	bne.n	80026a8 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fd39 	bl	80020c6 <LL_ADC_INJ_IsConversionOngoing>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11a      	bne.n	8002690 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002668:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d112      	bne.n	80026a8 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	659a      	str	r2, [r3, #88]	@ 0x58
 800268e:	e00b      	b.n	80026a8 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	f043 0210 	orr.w	r2, r3, #16
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 feb3 	bl	8003414 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2260      	movs	r2, #96	@ 0x60
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d011      	beq.n	80026e4 <HAL_ADC_IRQHandler+0x264>
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00c      	beq.n	80026e4 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f886 	bl	80027e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2280      	movs	r2, #128	@ 0x80
 80026e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d012      	beq.n	8002714 <HAL_ADC_IRQHandler+0x294>
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fe99 	bl	800343c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002712:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800271a:	2b00      	cmp	r3, #0
 800271c:	d012      	beq.n	8002744 <HAL_ADC_IRQHandler+0x2c4>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00d      	beq.n	8002744 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fe8b 	bl	8003450 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002742:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b00      	cmp	r3, #0
 800274c:	d02a      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x324>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	d025      	beq.n	80027a4 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002760:	2301      	movs	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	e008      	b.n	8002778 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002774:	2301      	movs	r3, #1
 8002776:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10e      	bne.n	800279c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002782:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278e:	f043 0202 	orr.w	r2, r3, #2
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f830 	bl	80027fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2210      	movs	r2, #16
 80027a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d018      	beq.n	80027e0 <HAL_ADC_IRQHandler+0x360>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d013      	beq.n	80027e0 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027bc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	f043 0208 	orr.w	r2, r3, #8
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fe24 	bl	8003428 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80027e0:	bf00      	nop
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b0b6      	sub	sp, #216	@ 0xd8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x22>
 800282e:	2302      	movs	r3, #2
 8002830:	e3d5      	b.n	8002fde <HAL_ADC_ConfigChannel+0x7ce>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fc2e 	bl	80020a0 <LL_ADC_REG_IsConversionOngoing>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 83ba 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b05      	cmp	r3, #5
 800285a:	d824      	bhi.n	80028a6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	3b02      	subs	r3, #2
 8002862:	2b03      	cmp	r3, #3
 8002864:	d81b      	bhi.n	800289e <HAL_ADC_ConfigChannel+0x8e>
 8002866:	a201      	add	r2, pc, #4	@ (adr r2, 800286c <HAL_ADC_ConfigChannel+0x5c>)
 8002868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286c:	0800287d 	.word	0x0800287d
 8002870:	08002885 	.word	0x08002885
 8002874:	0800288d 	.word	0x0800288d
 8002878:	08002895 	.word	0x08002895
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800287c:	230c      	movs	r3, #12
 800287e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002882:	e010      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002884:	2312      	movs	r3, #18
 8002886:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800288a:	e00c      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800288c:	2318      	movs	r3, #24
 800288e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002892:	e008      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002898:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800289c:	e003      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800289e:	2306      	movs	r3, #6
 80028a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028a4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80028b4:	f7ff fab5 	bl	8001e22 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fbef 	bl	80020a0 <LL_ADC_REG_IsConversionOngoing>
 80028c2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fbfb 	bl	80020c6 <LL_ADC_INJ_IsConversionOngoing>
 80028d0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f040 81bf 	bne.w	8002c5c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f040 81ba 	bne.w	8002c5c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028f0:	d10f      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2200      	movs	r2, #0
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7ff facf 	bl	8001ea0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fa63 	bl	8001dd6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002910:	e00e      	b.n	8002930 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6819      	ldr	r1, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	461a      	mov	r2, r3
 8002920:	f7ff fabe 	bl	8001ea0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fa53 	bl	8001dd6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	08db      	lsrs	r3, r3, #3
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b04      	cmp	r3, #4
 8002950:	d00a      	beq.n	8002968 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6919      	ldr	r1, [r3, #16]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002962:	f7ff f9e3 	bl	8001d2c <LL_ADC_SetOffset>
 8002966:	e179      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fa00 	bl	8001d74 <LL_ADC_GetOffsetChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x184>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff f9f5 	bl	8001d74 <LL_ADC_GetOffsetChannel>
 800298a:	4603      	mov	r3, r0
 800298c:	0e9b      	lsrs	r3, r3, #26
 800298e:	f003 021f 	and.w	r2, r3, #31
 8002992:	e01e      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x1c2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff f9ea 	bl	8001d74 <LL_ADC_GetOffsetChannel>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 80029c2:	2320      	movs	r3, #32
 80029c4:	e004      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 80029c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x1da>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	e018      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x20c>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80029fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002a06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002a0e:	2320      	movs	r3, #32
 8002a10:	e004      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002a12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d106      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2200      	movs	r2, #0
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff f9b9 	bl	8001da0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f99d 	bl	8001d74 <LL_ADC_GetOffsetChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x24a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f992 	bl	8001d74 <LL_ADC_GetOffsetChannel>
 8002a50:	4603      	mov	r3, r0
 8002a52:	0e9b      	lsrs	r3, r3, #26
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	e01e      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x288>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff f987 	bl	8001d74 <LL_ADC_GetOffsetChannel>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a70:	fa93 f3a3 	rbit	r3, r3
 8002a74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002a80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e004      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002a8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a90:	fab3 f383 	clz	r3, r3
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d105      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x2a0>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0e9b      	lsrs	r3, r3, #26
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	e018      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x2d2>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002ac4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ac8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	e004      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002ad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d106      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2200      	movs	r2, #0
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f956 	bl	8001da0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2102      	movs	r1, #2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f93a 	bl	8001d74 <LL_ADC_GetOffsetChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10a      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x310>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2102      	movs	r1, #2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff f92f 	bl	8001d74 <LL_ADC_GetOffsetChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	0e9b      	lsrs	r3, r3, #26
 8002b1a:	f003 021f 	and.w	r2, r3, #31
 8002b1e:	e01e      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x34e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2102      	movs	r1, #2
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff f924 	bl	8001d74 <LL_ADC_GetOffsetChannel>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002b4e:	2320      	movs	r3, #32
 8002b50:	e004      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b56:	fab3 f383 	clz	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d105      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x366>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	0e9b      	lsrs	r3, r3, #26
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	e014      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x390>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b7e:	fa93 f3a3 	rbit	r3, r3
 8002b82:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002b84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002b8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002b92:	2320      	movs	r3, #32
 8002b94:	e004      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d106      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2102      	movs	r1, #2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff f8f7 	bl	8001da0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2103      	movs	r1, #3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff f8db 	bl	8001d74 <LL_ADC_GetOffsetChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10a      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x3ce>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2103      	movs	r1, #3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f8d0 	bl	8001d74 <LL_ADC_GetOffsetChannel>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	0e9b      	lsrs	r3, r3, #26
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	e017      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x3fe>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2103      	movs	r1, #3
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff f8c5 	bl	8001d74 <LL_ADC_GetOffsetChannel>
 8002bea:	4603      	mov	r3, r0
 8002bec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bf8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d105      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x416>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	e011      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x43a>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c2e:	fa93 f3a3 	rbit	r3, r3
 8002c32:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002c34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c36:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002c38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	e003      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002c42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d106      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2200      	movs	r2, #0
 8002c54:	2103      	movs	r1, #3
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff f8a2 	bl	8001da0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff f9e3 	bl	800202c <LL_ADC_IsEnabled>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f040 813f 	bne.w	8002eec <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6819      	ldr	r1, [r3, #0]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f7ff f93c 	bl	8001ef8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a8e      	ldr	r2, [pc, #568]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x6b0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	f040 8130 	bne.w	8002eec <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x4a4>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	0e9b      	lsrs	r3, r3, #26
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	2b09      	cmp	r3, #9
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e019      	b.n	8002ce8 <HAL_ADC_ConfigChannel+0x4d8>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cbc:	fa93 f3a3 	rbit	r3, r3
 8002cc0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e003      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002cd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2b09      	cmp	r3, #9
 8002ce0:	bf94      	ite	ls
 8002ce2:	2301      	movls	r3, #1
 8002ce4:	2300      	movhi	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d079      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d107      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x4f8>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	0e9b      	lsrs	r3, r3, #26
 8002cfe:	3301      	adds	r3, #1
 8002d00:	069b      	lsls	r3, r3, #26
 8002d02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d06:	e015      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x524>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d18:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002d20:	2320      	movs	r3, #32
 8002d22:	e003      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	069b      	lsls	r3, r3, #26
 8002d30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x544>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	e017      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x574>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d64:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002d6c:	2320      	movs	r3, #32
 8002d6e:	e003      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	2101      	movs	r1, #1
 8002d80:	fa01 f303 	lsl.w	r3, r1, r3
 8002d84:	ea42 0103 	orr.w	r1, r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x59a>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	f003 021f 	and.w	r2, r3, #31
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	051b      	lsls	r3, r3, #20
 8002da8:	e018      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x5cc>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	e003      	b.n	8002dce <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	e080      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d107      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x5ec>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	3301      	adds	r3, #1
 8002df4:	069b      	lsls	r3, r3, #26
 8002df6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dfa:	e015      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x618>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002e14:	2320      	movs	r3, #32
 8002e16:	e003      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	3301      	adds	r3, #1
 8002e22:	069b      	lsls	r3, r3, #26
 8002e24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d109      	bne.n	8002e48 <HAL_ADC_ConfigChannel+0x638>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	2101      	movs	r1, #1
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	e017      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x668>
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	61bb      	str	r3, [r7, #24]
  return result;
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002e60:	2320      	movs	r3, #32
 8002e62:	e003      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	2101      	movs	r1, #1
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	ea42 0103 	orr.w	r1, r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10d      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x694>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0e9b      	lsrs	r3, r3, #26
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f003 021f 	and.w	r2, r3, #31
 8002e94:	4613      	mov	r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	4413      	add	r3, r2
 8002e9a:	3b1e      	subs	r3, #30
 8002e9c:	051b      	lsls	r3, r3, #20
 8002e9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ea2:	e01d      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x6d0>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	fa93 f3a3 	rbit	r3, r3
 8002eb0:	60fb      	str	r3, [r7, #12]
  return result;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d103      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	e005      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x6bc>
 8002ec0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f003 021f 	and.w	r2, r3, #31
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b1e      	subs	r3, #30
 8002eda:	051b      	lsls	r3, r3, #20
 8002edc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f7fe ffda 	bl	8001ea0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fe8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d06c      	beq.n	8002fd2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ef8:	483c      	ldr	r0, [pc, #240]	@ (8002fec <HAL_ADC_ConfigChannel+0x7dc>)
 8002efa:	f7fe ff09 	bl	8001d10 <LL_ADC_GetCommonPathInternalCh>
 8002efe:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a3a      	ldr	r2, [pc, #232]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d127      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d121      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a35      	ldr	r2, [pc, #212]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d157      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	482f      	ldr	r0, [pc, #188]	@ (8002fec <HAL_ADC_ConfigChannel+0x7dc>)
 8002f2e:	f7fe fedc 	bl	8001cea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f32:	4b31      	ldr	r3, [pc, #196]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x7e8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	099b      	lsrs	r3, r3, #6
 8002f38:	4a30      	ldr	r2, [pc, #192]	@ (8002ffc <HAL_ADC_ConfigChannel+0x7ec>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f4c:	e002      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f9      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f5a:	e03a      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a27      	ldr	r2, [pc, #156]	@ (8003000 <HAL_ADC_ConfigChannel+0x7f0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d113      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10d      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d12a      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f84:	4619      	mov	r1, r3
 8002f86:	4819      	ldr	r0, [pc, #100]	@ (8002fec <HAL_ADC_ConfigChannel+0x7dc>)
 8002f88:	f7fe feaf 	bl	8001cea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f8c:	e021      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <HAL_ADC_ConfigChannel+0x7f4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d11c      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d116      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a12      	ldr	r2, [pc, #72]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d111      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	480c      	ldr	r0, [pc, #48]	@ (8002fec <HAL_ADC_ConfigChannel+0x7dc>)
 8002fba:	f7fe fe96 	bl	8001cea <LL_ADC_SetCommonPathInternalCh>
 8002fbe:	e008      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002fda:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	37d8      	adds	r7, #216	@ 0xd8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	80080000 	.word	0x80080000
 8002fec:	50040300 	.word	0x50040300
 8002ff0:	c7520000 	.word	0xc7520000
 8002ff4:	50040000 	.word	0x50040000
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	053e2d63 	.word	0x053e2d63
 8003000:	cb840000 	.word	0xcb840000
 8003004:	80000001 	.word	0x80000001

08003008 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003010:	2300      	movs	r3, #0
 8003012:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff f807 	bl	800202c <LL_ADC_IsEnabled>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d169      	bne.n	80030f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	4b36      	ldr	r3, [pc, #216]	@ (8003104 <ADC_Enable+0xfc>)
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00d      	beq.n	800304e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003036:	f043 0210 	orr.w	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003042:	f043 0201 	orr.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e055      	b.n	80030fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe ffc2 	bl	8001fdc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003058:	482b      	ldr	r0, [pc, #172]	@ (8003108 <ADC_Enable+0x100>)
 800305a:	f7fe fe59 	bl	8001d10 <LL_ADC_GetCommonPathInternalCh>
 800305e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003060:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003064:	2b00      	cmp	r3, #0
 8003066:	d013      	beq.n	8003090 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003068:	4b28      	ldr	r3, [pc, #160]	@ (800310c <ADC_Enable+0x104>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	4a28      	ldr	r2, [pc, #160]	@ (8003110 <ADC_Enable+0x108>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	099b      	lsrs	r3, r3, #6
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003082:	e002      	b.n	800308a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	3b01      	subs	r3, #1
 8003088:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f9      	bne.n	8003084 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003090:	f7fe fde8 	bl	8001c64 <HAL_GetTick>
 8003094:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003096:	e028      	b.n	80030ea <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe ffc5 	bl	800202c <LL_ADC_IsEnabled>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d104      	bne.n	80030b2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fe ff95 	bl	8001fdc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030b2:	f7fe fdd7 	bl	8001c64 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d914      	bls.n	80030ea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d00d      	beq.n	80030ea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d2:	f043 0210 	orr.w	r2, r3, #16
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e007      	b.n	80030fa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d1cf      	bne.n	8003098 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	8000003f 	.word	0x8000003f
 8003108:	50040300 	.word	0x50040300
 800310c:	20000000 	.word	0x20000000
 8003110:	053e2d63 	.word	0x053e2d63

08003114 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe ff96 	bl	8002052 <LL_ADC_IsDisableOngoing>
 8003126:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe ff7d 	bl	800202c <LL_ADC_IsEnabled>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d047      	beq.n	80031c8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d144      	bne.n	80031c8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 030d 	and.w	r3, r3, #13
 8003148:	2b01      	cmp	r3, #1
 800314a:	d10c      	bne.n	8003166 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe ff57 	bl	8002004 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2203      	movs	r2, #3
 800315c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800315e:	f7fe fd81 	bl	8001c64 <HAL_GetTick>
 8003162:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003164:	e029      	b.n	80031ba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316a:	f043 0210 	orr.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	f043 0201 	orr.w	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e023      	b.n	80031ca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003182:	f7fe fd6f 	bl	8001c64 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d914      	bls.n	80031ba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	f043 0210 	orr.w	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ae:	f043 0201 	orr.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e007      	b.n	80031ca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1dc      	bne.n	8003182 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d14b      	bne.n	8003284 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d021      	beq.n	800324a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fdf6 	bl	8001dfc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d032      	beq.n	800327c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d12b      	bne.n	800327c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003228:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d11f      	bne.n	800327c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	f043 0201 	orr.w	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	659a      	str	r2, [r3, #88]	@ 0x58
 8003248:	e018      	b.n	800327c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d111      	bne.n	800327c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	f043 0201 	orr.w	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f7fd ff77 	bl	8001170 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003282:	e00e      	b.n	80032a2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7ff fab3 	bl	80027fc <HAL_ADC_ErrorCallback>
}
 8003296:	e004      	b.n	80032a2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800329c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7fe f82d 	bl	8001318 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e4:	f043 0204 	orr.w	r2, r3, #4
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f7ff fa85 	bl	80027fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <LL_ADC_StartCalibration>:
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800330c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003316:	4313      	orrs	r3, r2
 8003318:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	609a      	str	r2, [r3, #8]
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_ADC_IsCalibrationOnGoing>:
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800333c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003340:	d101      	bne.n	8003346 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003368:	2b01      	cmp	r3, #1
 800336a:	d101      	bne.n	8003370 <HAL_ADCEx_Calibration_Start+0x1c>
 800336c:	2302      	movs	r3, #2
 800336e:	e04d      	b.n	800340c <HAL_ADCEx_Calibration_Start+0xb8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fecb 	bl	8003114 <ADC_Disable>
 800337e:	4603      	mov	r3, r0
 8003380:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d136      	bne.n	80033f6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003390:	f023 0302 	bic.w	r3, r3, #2
 8003394:	f043 0202 	orr.w	r2, r3, #2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6839      	ldr	r1, [r7, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ffa9 	bl	80032fa <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033a8:	e014      	b.n	80033d4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3301      	adds	r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80033b6:	d30d      	bcc.n	80033d4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033bc:	f023 0312 	bic.w	r3, r3, #18
 80033c0:	f043 0210 	orr.w	r2, r3, #16
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e01b      	b.n	800340c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ffa7 	bl	800332c <LL_ADC_IsCalibrationOnGoing>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e2      	bne.n	80033aa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e8:	f023 0303 	bic.w	r3, r3, #3
 80033ec:	f043 0201 	orr.w	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80033f4:	e005      	b.n	8003402 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fa:	f043 0210 	orr.w	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3710      	adds	r7, #16
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003488:	4b0c      	ldr	r3, [pc, #48]	@ (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003494:	4013      	ands	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034aa:	4a04      	ldr	r2, [pc, #16]	@ (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	60d3      	str	r3, [r2, #12]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c4:	4b04      	ldr	r3, [pc, #16]	@ (80034d8 <__NVIC_GetPriorityGrouping+0x18>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0a1b      	lsrs	r3, r3, #8
 80034ca:	f003 0307 	and.w	r3, r3, #7
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	db0b      	blt.n	8003506 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	f003 021f 	and.w	r2, r3, #31
 80034f4:	4907      	ldr	r1, [pc, #28]	@ (8003514 <__NVIC_EnableIRQ+0x38>)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	2001      	movs	r0, #1
 80034fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	e000e100 	.word	0xe000e100

08003518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	6039      	str	r1, [r7, #0]
 8003522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003528:	2b00      	cmp	r3, #0
 800352a:	db0a      	blt.n	8003542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	b2da      	uxtb	r2, r3
 8003530:	490c      	ldr	r1, [pc, #48]	@ (8003564 <__NVIC_SetPriority+0x4c>)
 8003532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003536:	0112      	lsls	r2, r2, #4
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	440b      	add	r3, r1
 800353c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003540:	e00a      	b.n	8003558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4908      	ldr	r1, [pc, #32]	@ (8003568 <__NVIC_SetPriority+0x50>)
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	3b04      	subs	r3, #4
 8003550:	0112      	lsls	r2, r2, #4
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	440b      	add	r3, r1
 8003556:	761a      	strb	r2, [r3, #24]
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	e000e100 	.word	0xe000e100
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800356c:	b480      	push	{r7}
 800356e:	b089      	sub	sp, #36	@ 0x24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f1c3 0307 	rsb	r3, r3, #7
 8003586:	2b04      	cmp	r3, #4
 8003588:	bf28      	it	cs
 800358a:	2304      	movcs	r3, #4
 800358c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	3304      	adds	r3, #4
 8003592:	2b06      	cmp	r3, #6
 8003594:	d902      	bls.n	800359c <NVIC_EncodePriority+0x30>
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3b03      	subs	r3, #3
 800359a:	e000      	b.n	800359e <NVIC_EncodePriority+0x32>
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	401a      	ands	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	43d9      	mvns	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c4:	4313      	orrs	r3, r2
         );
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3724      	adds	r7, #36	@ 0x24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
	...

080035d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3b01      	subs	r3, #1
 80035e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035e4:	d301      	bcc.n	80035ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e6:	2301      	movs	r3, #1
 80035e8:	e00f      	b.n	800360a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003614 <SysTick_Config+0x40>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035f2:	210f      	movs	r1, #15
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035f8:	f7ff ff8e 	bl	8003518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035fc:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <SysTick_Config+0x40>)
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003602:	4b04      	ldr	r3, [pc, #16]	@ (8003614 <SysTick_Config+0x40>)
 8003604:	2207      	movs	r2, #7
 8003606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	e000e010 	.word	0xe000e010

08003618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff ff29 	bl	8003478 <__NVIC_SetPriorityGrouping>
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b086      	sub	sp, #24
 8003632:	af00      	add	r7, sp, #0
 8003634:	4603      	mov	r3, r0
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003640:	f7ff ff3e 	bl	80034c0 <__NVIC_GetPriorityGrouping>
 8003644:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	6978      	ldr	r0, [r7, #20]
 800364c:	f7ff ff8e 	bl	800356c <NVIC_EncodePriority>
 8003650:	4602      	mov	r2, r0
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003656:	4611      	mov	r1, r2
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff5d 	bl	8003518 <__NVIC_SetPriority>
}
 800365e:	bf00      	nop
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	4603      	mov	r3, r0
 800366e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff31 	bl	80034dc <__NVIC_EnableIRQ>
}
 800367a:	bf00      	nop
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ffa2 	bl	80035d4 <SysTick_Config>
 8003690:	4603      	mov	r3, r0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e08d      	b.n	80037ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b47      	ldr	r3, [pc, #284]	@ (80037d4 <HAL_DMA_Init+0x138>)
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d80f      	bhi.n	80036da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	4b45      	ldr	r3, [pc, #276]	@ (80037d8 <HAL_DMA_Init+0x13c>)
 80036c2:	4413      	add	r3, r2
 80036c4:	4a45      	ldr	r2, [pc, #276]	@ (80037dc <HAL_DMA_Init+0x140>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	009a      	lsls	r2, r3, #2
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a42      	ldr	r2, [pc, #264]	@ (80037e0 <HAL_DMA_Init+0x144>)
 80036d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80036d8:	e00e      	b.n	80036f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	4b40      	ldr	r3, [pc, #256]	@ (80037e4 <HAL_DMA_Init+0x148>)
 80036e2:	4413      	add	r3, r2
 80036e4:	4a3d      	ldr	r2, [pc, #244]	@ (80037dc <HAL_DMA_Init+0x140>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	009a      	lsls	r2, r3, #2
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a3c      	ldr	r2, [pc, #240]	@ (80037e8 <HAL_DMA_Init+0x14c>)
 80036f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800370e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003712:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800371c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 faba 	bl	8003cc4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003758:	d102      	bne.n	8003760 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003774:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <HAL_DMA_Init+0x104>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b04      	cmp	r3, #4
 8003784:	d80c      	bhi.n	80037a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fada 	bl	8003d40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	e008      	b.n	80037b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40020407 	.word	0x40020407
 80037d8:	bffdfff8 	.word	0xbffdfff8
 80037dc:	cccccccd 	.word	0xcccccccd
 80037e0:	40020000 	.word	0x40020000
 80037e4:	bffdfbf8 	.word	0xbffdfbf8
 80037e8:	40020400 	.word	0x40020400

080037ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_DMA_Start_IT+0x20>
 8003808:	2302      	movs	r3, #2
 800380a:	e066      	b.n	80038da <HAL_DMA_Start_IT+0xee>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d155      	bne.n	80038cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f9ff 	bl	8003c48 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 020e 	orr.w	r2, r2, #14
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	e00f      	b.n	8003884 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0204 	bic.w	r2, r2, #4
 8003872:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 020a 	orr.w	r2, r2, #10
 8003882:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d007      	beq.n	80038a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038b8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0201 	orr.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	e005      	b.n	80038d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
 80038d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b085      	sub	sp, #20
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d008      	beq.n	800390c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2204      	movs	r2, #4
 80038fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e040      	b.n	800398e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 020e 	bic.w	r2, r2, #14
 800391a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003926:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800392a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003940:	f003 021c 	and.w	r2, r3, #28
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f202 	lsl.w	r2, r1, r2
 800394e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003958:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00c      	beq.n	800397c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003970:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800397a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d005      	beq.n	80039be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2204      	movs	r2, #4
 80039b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	e047      	b.n	8003a4e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 020e 	bic.w	r2, r2, #14
 80039cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f2:	f003 021c 	and.w	r2, r3, #28
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	2101      	movs	r1, #1
 80039fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003a00:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a0a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00c      	beq.n	8003a2e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a2c:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	4798      	blx	r3
    }
  }
  return status;
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a74:	f003 031c 	and.w	r3, r3, #28
 8003a78:	2204      	movs	r2, #4
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d026      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x7a>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d021      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0204 	bic.w	r2, r2, #4
 8003aaa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab0:	f003 021c 	and.w	r2, r3, #28
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab8:	2104      	movs	r1, #4
 8003aba:	fa01 f202 	lsl.w	r2, r1, r2
 8003abe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d071      	beq.n	8003bac <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003ad0:	e06c      	b.n	8003bac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	f003 031c 	and.w	r3, r3, #28
 8003ada:	2202      	movs	r2, #2
 8003adc:	409a      	lsls	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d02e      	beq.n	8003b44 <HAL_DMA_IRQHandler+0xec>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d029      	beq.n	8003b44 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10b      	bne.n	8003b16 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 020a 	bic.w	r2, r2, #10
 8003b0c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	f003 021c 	and.w	r2, r3, #28
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	2102      	movs	r1, #2
 8003b24:	fa01 f202 	lsl.w	r2, r1, r2
 8003b28:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d038      	beq.n	8003bac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b42:	e033      	b.n	8003bac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	f003 031c 	and.w	r3, r3, #28
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02a      	beq.n	8003bae <HAL_DMA_IRQHandler+0x156>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d025      	beq.n	8003bae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 020e 	bic.w	r2, r2, #14
 8003b70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	f003 021c 	and.w	r2, r3, #28
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	2101      	movs	r1, #1
 8003b80:	fa01 f202 	lsl.w	r2, r1, r2
 8003b84:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d004      	beq.n	8003bae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003bac:	bf00      	nop
 8003bae:	bf00      	nop
}
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_DMA_RegisterCallback+0x20>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e031      	b.n	8003c3c <HAL_DMA_RegisterCallback+0x84>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d120      	bne.n	8003c2e <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003bec:	7afb      	ldrb	r3, [r7, #11]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d81a      	bhi.n	8003c28 <HAL_DMA_RegisterCallback+0x70>
 8003bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf8 <HAL_DMA_RegisterCallback+0x40>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c11 	.word	0x08003c11
 8003c00:	08003c19 	.word	0x08003c19
 8003c04:	08003c21 	.word	0x08003c21
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003c0e:	e010      	b.n	8003c32 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8003c16:	e00c      	b.n	8003c32 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003c1e:	e008      	b.n	8003c32 <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003c26:	e004      	b.n	8003c32 <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
        break;
 8003c2c:	e001      	b.n	8003c32 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c5e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d004      	beq.n	8003c72 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c70:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	f003 021c 	and.w	r2, r3, #28
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	2101      	movs	r1, #1
 8003c80:	fa01 f202 	lsl.w	r2, r1, r2
 8003c84:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b10      	cmp	r3, #16
 8003c94:	d108      	bne.n	8003ca8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ca6:	e007      	b.n	8003cb8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	60da      	str	r2, [r3, #12]
}
 8003cb8:	bf00      	nop
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d80a      	bhi.n	8003cee <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cdc:	089b      	lsrs	r3, r3, #2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ce4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6493      	str	r3, [r2, #72]	@ 0x48
 8003cec:	e007      	b.n	8003cfe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf2:	089b      	lsrs	r3, r3, #2
 8003cf4:	009a      	lsls	r2, r3, #2
 8003cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003cf8:	4413      	add	r3, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	3b08      	subs	r3, #8
 8003d06:	4a0c      	ldr	r2, [pc, #48]	@ (8003d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d08:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a0a      	ldr	r2, [pc, #40]	@ (8003d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40020407 	.word	0x40020407
 8003d34:	4002081c 	.word	0x4002081c
 8003d38:	cccccccd 	.word	0xcccccccd
 8003d3c:	40020880 	.word	0x40020880

08003d40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4b0b      	ldr	r3, [pc, #44]	@ (8003d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	461a      	mov	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a08      	ldr	r2, [pc, #32]	@ (8003d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d62:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	409a      	lsls	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	1000823f 	.word	0x1000823f
 8003d84:	40020940 	.word	0x40020940

08003d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d96:	e166      	b.n	8004066 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	fa01 f303 	lsl.w	r3, r1, r3
 8003da4:	4013      	ands	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8158 	beq.w	8004060 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 0303 	and.w	r3, r3, #3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d005      	beq.n	8003dc8 <HAL_GPIO_Init+0x40>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d130      	bne.n	8003e2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	43db      	mvns	r3, r3
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dfe:	2201      	movs	r2, #1
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43db      	mvns	r3, r3
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	f003 0201 	and.w	r2, r3, #1
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d017      	beq.n	8003e66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	2203      	movs	r2, #3
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d123      	bne.n	8003eba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	08da      	lsrs	r2, r3, #3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3208      	adds	r2, #8
 8003e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	220f      	movs	r2, #15
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	08da      	lsrs	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3208      	adds	r2, #8
 8003eb4:	6939      	ldr	r1, [r7, #16]
 8003eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0203 	and.w	r2, r3, #3
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80b2 	beq.w	8004060 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efc:	4b61      	ldr	r3, [pc, #388]	@ (8004084 <HAL_GPIO_Init+0x2fc>)
 8003efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f00:	4a60      	ldr	r2, [pc, #384]	@ (8004084 <HAL_GPIO_Init+0x2fc>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f08:	4b5e      	ldr	r3, [pc, #376]	@ (8004084 <HAL_GPIO_Init+0x2fc>)
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f14:	4a5c      	ldr	r2, [pc, #368]	@ (8004088 <HAL_GPIO_Init+0x300>)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	220f      	movs	r2, #15
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	43db      	mvns	r3, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4013      	ands	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f3e:	d02b      	beq.n	8003f98 <HAL_GPIO_Init+0x210>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a52      	ldr	r2, [pc, #328]	@ (800408c <HAL_GPIO_Init+0x304>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d025      	beq.n	8003f94 <HAL_GPIO_Init+0x20c>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a51      	ldr	r2, [pc, #324]	@ (8004090 <HAL_GPIO_Init+0x308>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d01f      	beq.n	8003f90 <HAL_GPIO_Init+0x208>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a50      	ldr	r2, [pc, #320]	@ (8004094 <HAL_GPIO_Init+0x30c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d019      	beq.n	8003f8c <HAL_GPIO_Init+0x204>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a4f      	ldr	r2, [pc, #316]	@ (8004098 <HAL_GPIO_Init+0x310>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d013      	beq.n	8003f88 <HAL_GPIO_Init+0x200>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a4e      	ldr	r2, [pc, #312]	@ (800409c <HAL_GPIO_Init+0x314>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00d      	beq.n	8003f84 <HAL_GPIO_Init+0x1fc>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a4d      	ldr	r2, [pc, #308]	@ (80040a0 <HAL_GPIO_Init+0x318>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d007      	beq.n	8003f80 <HAL_GPIO_Init+0x1f8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a4c      	ldr	r2, [pc, #304]	@ (80040a4 <HAL_GPIO_Init+0x31c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d101      	bne.n	8003f7c <HAL_GPIO_Init+0x1f4>
 8003f78:	2307      	movs	r3, #7
 8003f7a:	e00e      	b.n	8003f9a <HAL_GPIO_Init+0x212>
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	e00c      	b.n	8003f9a <HAL_GPIO_Init+0x212>
 8003f80:	2306      	movs	r3, #6
 8003f82:	e00a      	b.n	8003f9a <HAL_GPIO_Init+0x212>
 8003f84:	2305      	movs	r3, #5
 8003f86:	e008      	b.n	8003f9a <HAL_GPIO_Init+0x212>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	e006      	b.n	8003f9a <HAL_GPIO_Init+0x212>
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e004      	b.n	8003f9a <HAL_GPIO_Init+0x212>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e002      	b.n	8003f9a <HAL_GPIO_Init+0x212>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <HAL_GPIO_Init+0x212>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	f002 0203 	and.w	r2, r2, #3
 8003fa0:	0092      	lsls	r2, r2, #2
 8003fa2:	4093      	lsls	r3, r2
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003faa:	4937      	ldr	r1, [pc, #220]	@ (8004088 <HAL_GPIO_Init+0x300>)
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	089b      	lsrs	r3, r3, #2
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80040a8 <HAL_GPIO_Init+0x320>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fdc:	4a32      	ldr	r2, [pc, #200]	@ (80040a8 <HAL_GPIO_Init+0x320>)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fe2:	4b31      	ldr	r3, [pc, #196]	@ (80040a8 <HAL_GPIO_Init+0x320>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004006:	4a28      	ldr	r2, [pc, #160]	@ (80040a8 <HAL_GPIO_Init+0x320>)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800400c:	4b26      	ldr	r3, [pc, #152]	@ (80040a8 <HAL_GPIO_Init+0x320>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	43db      	mvns	r3, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004030:	4a1d      	ldr	r2, [pc, #116]	@ (80040a8 <HAL_GPIO_Init+0x320>)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004036:	4b1c      	ldr	r3, [pc, #112]	@ (80040a8 <HAL_GPIO_Init+0x320>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800405a:	4a13      	ldr	r2, [pc, #76]	@ (80040a8 <HAL_GPIO_Init+0x320>)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	3301      	adds	r3, #1
 8004064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	f47f ae91 	bne.w	8003d98 <HAL_GPIO_Init+0x10>
  }
}
 8004076:	bf00      	nop
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	40021000 	.word	0x40021000
 8004088:	40010000 	.word	0x40010000
 800408c:	48000400 	.word	0x48000400
 8004090:	48000800 	.word	0x48000800
 8004094:	48000c00 	.word	0x48000c00
 8004098:	48001000 	.word	0x48001000
 800409c:	48001400 	.word	0x48001400
 80040a0:	48001800 	.word	0x48001800
 80040a4:	48001c00 	.word	0x48001c00
 80040a8:	40010400 	.word	0x40010400

080040ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	807b      	strh	r3, [r7, #2]
 80040b8:	4613      	mov	r3, r2
 80040ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040bc:	787b      	ldrb	r3, [r7, #1]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040c8:	e002      	b.n	80040d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040ca:	887a      	ldrh	r2, [r7, #2]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040ee:	887a      	ldrh	r2, [r7, #2]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4013      	ands	r3, r2
 80040f4:	041a      	lsls	r2, r3, #16
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	43d9      	mvns	r1, r3
 80040fa:	887b      	ldrh	r3, [r7, #2]
 80040fc:	400b      	ands	r3, r1
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	619a      	str	r2, [r3, #24]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800411a:	4b08      	ldr	r3, [pc, #32]	@ (800413c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d006      	beq.n	8004134 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004126:	4a05      	ldr	r2, [pc, #20]	@ (800413c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc fc0c 	bl	800094c <HAL_GPIO_EXTI_Callback>
  }
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40010400 	.word	0x40010400

08004140 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004142:	b08f      	sub	sp, #60	@ 0x3c
 8004144:	af0a      	add	r7, sp, #40	@ 0x28
 8004146:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e116      	b.n	8004380 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	d106      	bne.n	8004172 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f009 f8ff 	bl	800d370 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2203      	movs	r2, #3
 8004176:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f005 fd56 	bl	8009c42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	687e      	ldr	r6, [r7, #4]
 800419e:	466d      	mov	r5, sp
 80041a0:	f106 0410 	add.w	r4, r6, #16
 80041a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80041b4:	1d33      	adds	r3, r6, #4
 80041b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041b8:	6838      	ldr	r0, [r7, #0]
 80041ba:	f005 fc69 	bl	8009a90 <USB_CoreInit>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0d7      	b.n	8004380 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f005 fd44 	bl	8009c64 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	e04a      	b.n	8004278 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041e2:	7bfa      	ldrb	r2, [r7, #15]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	333d      	adds	r3, #61	@ 0x3d
 80041f2:	2201      	movs	r2, #1
 80041f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	333c      	adds	r3, #60	@ 0x3c
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800420a:	7bfa      	ldrb	r2, [r7, #15]
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	b298      	uxth	r0, r3
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3356      	adds	r3, #86	@ 0x56
 800421e:	4602      	mov	r2, r0
 8004220:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004222:	7bfa      	ldrb	r2, [r7, #15]
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	3340      	adds	r3, #64	@ 0x40
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	3344      	adds	r3, #68	@ 0x44
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800424a:	7bfa      	ldrb	r2, [r7, #15]
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4613      	mov	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	440b      	add	r3, r1
 8004258:	3348      	adds	r3, #72	@ 0x48
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800425e:	7bfa      	ldrb	r2, [r7, #15]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	334c      	adds	r3, #76	@ 0x4c
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	3301      	adds	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	d3af      	bcc.n	80041e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004282:	2300      	movs	r3, #0
 8004284:	73fb      	strb	r3, [r7, #15]
 8004286:	e044      	b.n	8004312 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004288:	7bfa      	ldrb	r2, [r7, #15]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800429e:	7bfa      	ldrb	r2, [r7, #15]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 80042b0:	7bfa      	ldrb	r2, [r7, #15]
 80042b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80042ca:	7bfa      	ldrb	r2, [r7, #15]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	4413      	add	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80042f2:	2200      	movs	r2, #0
 80042f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	3301      	adds	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
 8004312:	7bfa      	ldrb	r2, [r7, #15]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	429a      	cmp	r2, r3
 800431a:	d3b5      	bcc.n	8004288 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	603b      	str	r3, [r7, #0]
 8004322:	687e      	ldr	r6, [r7, #4]
 8004324:	466d      	mov	r5, sp
 8004326:	f106 0410 	add.w	r4, r6, #16
 800432a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800432c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800432e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004332:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004336:	e885 0003 	stmia.w	r5, {r0, r1}
 800433a:	1d33      	adds	r3, r6, #4
 800433c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800433e:	6838      	ldr	r0, [r7, #0]
 8004340:	f005 fcdc 	bl	8009cfc <USB_DevInit>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e014      	b.n	8004380 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	2b01      	cmp	r3, #1
 800436c:	d102      	bne.n	8004374 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f001 f86a 	bl	8005448 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f006 fc8a 	bl	800ac92 <USB_DevDisconnect>

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004388 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_PCD_Start+0x1c>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e01c      	b.n	80043de <HAL_PCD_Start+0x56>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d105      	bne.n	80043c0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f005 fc2b 	bl	8009c20 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f006 fc3e 	bl	800ac50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80043e6:	b590      	push	{r4, r7, lr}
 80043e8:	b08d      	sub	sp, #52	@ 0x34
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f006 fcfc 	bl	800adfa <USB_GetMode>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	f040 847e 	bne.w	8004d06 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f006 fc60 	bl	800acd4 <USB_ReadInterrupts>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 8474 	beq.w	8004d04 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	0a1b      	lsrs	r3, r3, #8
 8004426:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f006 fc4d 	bl	800acd4 <USB_ReadInterrupts>
 800443a:	4603      	mov	r3, r0
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b02      	cmp	r3, #2
 8004442:	d107      	bne.n	8004454 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f002 0202 	and.w	r2, r2, #2
 8004452:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f006 fc3b 	bl	800acd4 <USB_ReadInterrupts>
 800445e:	4603      	mov	r3, r0
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b10      	cmp	r3, #16
 8004466:	d161      	bne.n	800452c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0210 	bic.w	r2, r2, #16
 8004476:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	f003 020f 	and.w	r2, r3, #15
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	3304      	adds	r3, #4
 8004496:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	0c5b      	lsrs	r3, r3, #17
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d124      	bne.n	80044ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d035      	beq.n	800451c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80044ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044be:	b29b      	uxth	r3, r3
 80044c0:	461a      	mov	r2, r3
 80044c2:	6a38      	ldr	r0, [r7, #32]
 80044c4:	f006 fa72 	bl	800a9ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	091b      	lsrs	r3, r3, #4
 80044d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044d4:	441a      	add	r2, r3
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	695a      	ldr	r2, [r3, #20]
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044e6:	441a      	add	r2, r3
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	615a      	str	r2, [r3, #20]
 80044ec:	e016      	b.n	800451c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	0c5b      	lsrs	r3, r3, #17
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	2b06      	cmp	r3, #6
 80044f8:	d110      	bne.n	800451c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004500:	2208      	movs	r2, #8
 8004502:	4619      	mov	r1, r3
 8004504:	6a38      	ldr	r0, [r7, #32]
 8004506:	f006 fa51 	bl	800a9ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	091b      	lsrs	r3, r3, #4
 8004512:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004516:	441a      	add	r2, r3
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699a      	ldr	r2, [r3, #24]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0210 	orr.w	r2, r2, #16
 800452a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f006 fbcf 	bl	800acd4 <USB_ReadInterrupts>
 8004536:	4603      	mov	r3, r0
 8004538:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800453c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004540:	f040 80a7 	bne.w	8004692 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f006 fbd4 	bl	800acfa <USB_ReadDevAllOutEpInterrupt>
 8004552:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004554:	e099      	b.n	800468a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 808e 	beq.w	800467e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f006 fbf8 	bl	800ad62 <USB_ReadDevOutEPInterrupt>
 8004572:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00c      	beq.n	8004598 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800458a:	461a      	mov	r2, r3
 800458c:	2301      	movs	r3, #1
 800458e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004590:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fe7e 	bl	8005294 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00c      	beq.n	80045bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ae:	461a      	mov	r2, r3
 80045b0:	2308      	movs	r3, #8
 80045b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80045b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 feba 	bl	8005330 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80045c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d2:	461a      	mov	r2, r3
 80045d4:	2310      	movs	r3, #16
 80045d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d030      	beq.n	8004644 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ea:	2b80      	cmp	r3, #128	@ 0x80
 80045ec:	d109      	bne.n	8004602 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004600:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	4413      	add	r3, r2
 8004614:	3304      	adds	r3, #4
 8004616:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	78db      	ldrb	r3, [r3, #3]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d108      	bne.n	8004632 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2200      	movs	r2, #0
 8004624:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	b2db      	uxtb	r3, r3
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f008 fff5 	bl	800d61c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800463e:	461a      	mov	r2, r3
 8004640:	2302      	movs	r3, #2
 8004642:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800465a:	461a      	mov	r2, r3
 800465c:	2320      	movs	r3, #32
 800465e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004676:	461a      	mov	r2, r3
 8004678:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800467c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	3301      	adds	r3, #1
 8004682:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	f47f af62 	bne.w	8004556 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f006 fb1c 	bl	800acd4 <USB_ReadInterrupts>
 800469c:	4603      	mov	r3, r0
 800469e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046a6:	f040 80a4 	bne.w	80047f2 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f006 fb3d 	bl	800ad2e <USB_ReadDevAllInEpInterrupt>
 80046b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80046ba:	e096      	b.n	80047ea <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80046bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 808b 	beq.w	80047de <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f006 fb63 	bl	800ad9e <USB_ReadDevInEPInterrupt>
 80046d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	2201      	movs	r2, #1
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69f9      	ldr	r1, [r7, #28]
 8004700:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004704:	4013      	ands	r3, r2
 8004706:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004714:	461a      	mov	r2, r3
 8004716:	2301      	movs	r3, #1
 8004718:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	b2db      	uxtb	r3, r3
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f008 fee6 	bl	800d4f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800473c:	461a      	mov	r2, r3
 800473e:	2308      	movs	r3, #8
 8004740:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004758:	461a      	mov	r2, r3
 800475a:	2310      	movs	r3, #16
 800475c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004774:	461a      	mov	r2, r3
 8004776:	2340      	movs	r3, #64	@ 0x40
 8004778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d023      	beq.n	80047cc <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004784:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004786:	6a38      	ldr	r0, [r7, #32]
 8004788:	f005 fbfa 	bl	8009f80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800478c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800478e:	4613      	mov	r3, r2
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4413      	add	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	3338      	adds	r3, #56	@ 0x38
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	4413      	add	r3, r2
 800479c:	3304      	adds	r3, #4
 800479e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	78db      	ldrb	r3, [r3, #3]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d108      	bne.n	80047ba <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2200      	movs	r2, #0
 80047ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f008 ff43 	bl	800d640 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047c6:	461a      	mov	r2, r3
 80047c8:	2302      	movs	r3, #2
 80047ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80047d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fcd2 	bl	8005182 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80047de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e0:	3301      	adds	r3, #1
 80047e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80047ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f47f af65 	bne.w	80046bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f006 fa6c 	bl	800acd4 <USB_ReadInterrupts>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004802:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004806:	d122      	bne.n	800484e <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8004822:	2b01      	cmp	r3, #1
 8004824:	d108      	bne.n	8004838 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800482e:	2100      	movs	r1, #0
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f009 f977 	bl	800db24 <HAL_PCDEx_LPM_Callback>
 8004836:	e002      	b.n	800483e <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f008 fec7 	bl	800d5cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800484c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f006 fa3e 	bl	800acd4 <USB_ReadInterrupts>
 8004858:	4603      	mov	r3, r0
 800485a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800485e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004862:	d112      	bne.n	800488a <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b01      	cmp	r3, #1
 8004872:	d102      	bne.n	800487a <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f008 fe83 	bl	800d580 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695a      	ldr	r2, [r3, #20]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004888:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f006 fa20 	bl	800acd4 <USB_ReadInterrupts>
 8004894:	4603      	mov	r3, r0
 8004896:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800489a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800489e:	d121      	bne.n	80048e4 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80048ae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d111      	bne.n	80048de <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	f003 020f 	and.w	r2, r3, #15
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80048d4:	2101      	movs	r1, #1
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f009 f924 	bl	800db24 <HAL_PCDEx_LPM_Callback>
 80048dc:	e002      	b.n	80048e4 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f008 fe4e 	bl	800d580 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f006 f9f3 	bl	800acd4 <USB_ReadInterrupts>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f8:	f040 80b5 	bne.w	8004a66 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2110      	movs	r1, #16
 8004916:	4618      	mov	r0, r3
 8004918:	f005 fb32 	bl	8009f80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800491c:	2300      	movs	r3, #0
 800491e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004920:	e046      	b.n	80049b0 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800492e:	461a      	mov	r2, r3
 8004930:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004934:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004946:	0151      	lsls	r1, r2, #5
 8004948:	69fa      	ldr	r2, [r7, #28]
 800494a:	440a      	add	r2, r1
 800494c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004950:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004954:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004962:	461a      	mov	r2, r3
 8004964:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004968:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800496a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4413      	add	r3, r2
 8004972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800497a:	0151      	lsls	r1, r2, #5
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	440a      	add	r2, r1
 8004980:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004984:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004988:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800498a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800499a:	0151      	lsls	r1, r2, #5
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	440a      	add	r2, r1
 80049a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80049a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ac:	3301      	adds	r3, #1
 80049ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3b3      	bcc.n	8004922 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049c8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80049cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049e6:	f043 030b 	orr.w	r3, r3, #11
 80049ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f6:	69fa      	ldr	r2, [r7, #28]
 80049f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049fc:	f043 030b 	orr.w	r3, r3, #11
 8004a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a02:	e015      	b.n	8004a30 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004a16:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004a1a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a2a:	f043 030b 	orr.w	r3, r3, #11
 8004a2e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a3e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004a42:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f006 fa03 	bl	800ae5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f006 f932 	bl	800acd4 <USB_ReadInterrupts>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a7a:	d124      	bne.n	8004ac6 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f006 f9c8 	bl	800ae16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f005 faf5 	bl	800a07a <USB_GetDevSpeed>
 8004a90:	4603      	mov	r3, r0
 8004a92:	461a      	mov	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681c      	ldr	r4, [r3, #0]
 8004a9c:	f001 fbbc 	bl	8006218 <HAL_RCC_GetHCLKFreq>
 8004aa0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f005 f81c 	bl	8009ae8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f008 fd46 	bl	800d542 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f006 f902 	bl	800acd4 <USB_ReadInterrupts>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f003 0308 	and.w	r3, r3, #8
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d10a      	bne.n	8004af0 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f008 fd23 	bl	800d526 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695a      	ldr	r2, [r3, #20]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f002 0208 	and.w	r2, r2, #8
 8004aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f006 f8ed 	bl	800acd4 <USB_ReadInterrupts>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b00:	2b80      	cmp	r3, #128	@ 0x80
 8004b02:	d122      	bne.n	8004b4a <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b10:	2301      	movs	r3, #1
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b14:	e014      	b.n	8004b40 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	00db      	lsls	r3, r3, #3
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d105      	bne.n	8004b3a <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 faf3 	bl	8005120 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d3e5      	bcc.n	8004b16 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f006 f8c0 	bl	800acd4 <USB_ReadInterrupts>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b5e:	d13b      	bne.n	8004bd8 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b60:	2301      	movs	r3, #1
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b64:	e02b      	b.n	8004bbe <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	4413      	add	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	3340      	adds	r3, #64	@ 0x40
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d115      	bne.n	8004bb8 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004b8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da12      	bge.n	8004bb8 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b96:	4613      	mov	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	333f      	adds	r3, #63	@ 0x3f
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fab4 	bl	8005120 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bba:	3301      	adds	r3, #1
 8004bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d3ce      	bcc.n	8004b66 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695a      	ldr	r2, [r3, #20]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f006 f879 	bl	800acd4 <USB_ReadInterrupts>
 8004be2:	4603      	mov	r3, r0
 8004be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004be8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bec:	d155      	bne.n	8004c9a <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bee:	2301      	movs	r3, #1
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf2:	e045      	b.n	8004c80 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d12e      	bne.n	8004c7a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	da2b      	bge.n	8004c7a <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004c2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d121      	bne.n	8004c7a <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10a      	bne.n	8004c7a <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c76:	6053      	str	r3, [r2, #4]
            break;
 8004c78:	e007      	b.n	8004c8a <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d3b4      	bcc.n	8004bf4 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	695a      	ldr	r2, [r3, #20]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004c98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f006 f818 	bl	800acd4 <USB_ReadInterrupts>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cae:	d10a      	bne.n	8004cc6 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f008 fcd7 	bl	800d664 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004cc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f006 f802 	bl	800acd4 <USB_ReadInterrupts>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d115      	bne.n	8004d06 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f008 fcc7 	bl	800d680 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6859      	ldr	r1, [r3, #4]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	e000      	b.n	8004d06 <HAL_PCD_IRQHandler+0x920>
      return;
 8004d04:	bf00      	nop
    }
  }
}
 8004d06:	3734      	adds	r7, #52	@ 0x34
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd90      	pop	{r4, r7, pc}

08004d0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_PCD_SetAddress+0x1a>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e013      	b.n	8004d4e <HAL_PCD_SetAddress+0x42>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	78fa      	ldrb	r2, [r7, #3]
 8004d32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	78fa      	ldrb	r2, [r7, #3]
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f005 ff60 	bl	800ac04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d56:	b580      	push	{r7, lr}
 8004d58:	b084      	sub	sp, #16
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
 8004d5e:	4608      	mov	r0, r1
 8004d60:	4611      	mov	r1, r2
 8004d62:	461a      	mov	r2, r3
 8004d64:	4603      	mov	r3, r0
 8004d66:	70fb      	strb	r3, [r7, #3]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	803b      	strh	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	da0f      	bge.n	8004d9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	f003 020f 	and.w	r2, r3, #15
 8004d82:	4613      	mov	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	3338      	adds	r3, #56	@ 0x38
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	4413      	add	r3, r2
 8004d90:	3304      	adds	r3, #4
 8004d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2201      	movs	r2, #1
 8004d98:	705a      	strb	r2, [r3, #1]
 8004d9a:	e00f      	b.n	8004dbc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	f003 020f 	and.w	r2, r3, #15
 8004da2:	4613      	mov	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	4413      	add	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	4413      	add	r3, r2
 8004db2:	3304      	adds	r3, #4
 8004db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004dc8:	883a      	ldrh	r2, [r7, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	78ba      	ldrb	r2, [r7, #2]
 8004dd2:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004de6:	78bb      	ldrb	r3, [r7, #2]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d102      	bne.n	8004df2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_PCD_EP_Open+0xaa>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e00e      	b.n	8004e1e <HAL_PCD_EP_Open+0xc8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68f9      	ldr	r1, [r7, #12]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f005 f952 	bl	800a0b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004e1c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	da0f      	bge.n	8004e5a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	f003 020f 	and.w	r2, r3, #15
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	3338      	adds	r3, #56	@ 0x38
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3304      	adds	r3, #4
 8004e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	705a      	strb	r2, [r3, #1]
 8004e58:	e00f      	b.n	8004e7a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	f003 020f 	and.w	r2, r3, #15
 8004e60:	4613      	mov	r3, r2
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	4413      	add	r3, r2
 8004e70:	3304      	adds	r3, #4
 8004e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	f003 030f 	and.w	r3, r3, #15
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_PCD_EP_Close+0x6e>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e00e      	b.n	8004eb2 <HAL_PCD_EP_Close+0x8c>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68f9      	ldr	r1, [r7, #12]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f005 f990 	bl	800a1c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b086      	sub	sp, #24
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004eca:	7afb      	ldrb	r3, [r7, #11]
 8004ecc:	f003 020f 	and.w	r2, r3, #15
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004efc:	7afb      	ldrb	r3, [r7, #11]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6979      	ldr	r1, [r7, #20]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f005 fa36 	bl	800a380 <USB_EPStartXfer>

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	460b      	mov	r3, r1
 8004f28:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	f003 020f 	and.w	r2, r3, #15
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	4413      	add	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	440b      	add	r3, r1
 8004f3c:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8004f40:	681b      	ldr	r3, [r3, #0]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b086      	sub	sp, #24
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f5e:	7afb      	ldrb	r3, [r7, #11]
 8004f60:	f003 020f 	and.w	r2, r3, #15
 8004f64:	4613      	mov	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4413      	add	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	3338      	adds	r3, #56	@ 0x38
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4413      	add	r3, r2
 8004f72:	3304      	adds	r3, #4
 8004f74:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2200      	movs	r2, #0
 8004f86:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f8e:	7afb      	ldrb	r3, [r7, #11]
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6979      	ldr	r1, [r7, #20]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f005 f9ed 	bl	800a380 <USB_EPStartXfer>

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	f003 020f 	and.w	r2, r3, #15
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d901      	bls.n	8004fce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e04e      	b.n	800506c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	da0f      	bge.n	8004ff6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fd6:	78fb      	ldrb	r3, [r7, #3]
 8004fd8:	f003 020f 	and.w	r2, r3, #15
 8004fdc:	4613      	mov	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	3338      	adds	r3, #56	@ 0x38
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4413      	add	r3, r2
 8004fea:	3304      	adds	r3, #4
 8004fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	705a      	strb	r2, [r3, #1]
 8004ff4:	e00d      	b.n	8005012 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ff6:	78fa      	ldrb	r2, [r7, #3]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	4413      	add	r3, r2
 8005008:	3304      	adds	r3, #4
 800500a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2201      	movs	r2, #1
 8005016:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	b2da      	uxtb	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800502a:	2b01      	cmp	r3, #1
 800502c:	d101      	bne.n	8005032 <HAL_PCD_EP_SetStall+0x82>
 800502e:	2302      	movs	r3, #2
 8005030:	e01c      	b.n	800506c <HAL_PCD_EP_SetStall+0xbc>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	4618      	mov	r0, r3
 8005042:	f005 fd0b 	bl	800aa5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005046:	78fb      	ldrb	r3, [r7, #3]
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	2b00      	cmp	r3, #0
 800504e:	d108      	bne.n	8005062 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800505a:	4619      	mov	r1, r3
 800505c:	4610      	mov	r0, r2
 800505e:	f005 fefd 	bl	800ae5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	f003 020f 	and.w	r2, r3, #15
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	429a      	cmp	r2, r3
 800508c:	d901      	bls.n	8005092 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e042      	b.n	8005118 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005092:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005096:	2b00      	cmp	r3, #0
 8005098:	da0f      	bge.n	80050ba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	f003 020f 	and.w	r2, r3, #15
 80050a0:	4613      	mov	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	3338      	adds	r3, #56	@ 0x38
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	4413      	add	r3, r2
 80050ae:	3304      	adds	r3, #4
 80050b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	705a      	strb	r2, [r3, #1]
 80050b8:	e00f      	b.n	80050da <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	f003 020f 	and.w	r2, r3, #15
 80050c0:	4613      	mov	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	4413      	add	r3, r2
 80050d0:	3304      	adds	r3, #4
 80050d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_PCD_EP_ClrStall+0x86>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e00e      	b.n	8005118 <HAL_PCD_EP_ClrStall+0xa4>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	4618      	mov	r0, r3
 800510a:	f005 fd15 	bl	800ab38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800512c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005130:	2b00      	cmp	r3, #0
 8005132:	da0c      	bge.n	800514e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	f003 020f 	and.w	r2, r3, #15
 800513a:	4613      	mov	r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	3338      	adds	r3, #56	@ 0x38
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	4413      	add	r3, r2
 8005148:	3304      	adds	r3, #4
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	e00c      	b.n	8005168 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	f003 020f 	and.w	r2, r3, #15
 8005154:	4613      	mov	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	4413      	add	r3, r2
 8005164:	3304      	adds	r3, #4
 8005166:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68f9      	ldr	r1, [r7, #12]
 800516e:	4618      	mov	r0, r3
 8005170:	f005 fb38 	bl	800a7e4 <USB_EPStopXfer>
 8005174:	4603      	mov	r3, r0
 8005176:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005178:	7afb      	ldrb	r3, [r7, #11]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b088      	sub	sp, #32
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	3338      	adds	r3, #56	@ 0x38
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	4413      	add	r3, r2
 80051a6:	3304      	adds	r3, #4
 80051a8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d901      	bls.n	80051ba <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e067      	b.n	800528a <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d902      	bls.n	80051d6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	3303      	adds	r3, #3
 80051da:	089b      	lsrs	r3, r3, #2
 80051dc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051de:	e026      	b.n	800522e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	69fa      	ldr	r2, [r7, #28]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d902      	bls.n	80051fc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	3303      	adds	r3, #3
 8005200:	089b      	lsrs	r3, r3, #2
 8005202:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	68d9      	ldr	r1, [r3, #12]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	b2da      	uxtb	r2, r3
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	b29b      	uxth	r3, r3
 8005210:	6978      	ldr	r0, [r7, #20]
 8005212:	f005 fb91 	bl	800a938 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	441a      	add	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	695a      	ldr	r2, [r3, #20]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	441a      	add	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	429a      	cmp	r2, r3
 8005242:	d809      	bhi.n	8005258 <PCD_WriteEmptyTxFifo+0xd6>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	695a      	ldr	r2, [r3, #20]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800524c:	429a      	cmp	r2, r3
 800524e:	d203      	bcs.n	8005258 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1c3      	bne.n	80051e0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	429a      	cmp	r2, r3
 8005262:	d811      	bhi.n	8005288 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	2201      	movs	r2, #1
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005278:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	43db      	mvns	r3, r3
 800527e:	6939      	ldr	r1, [r7, #16]
 8005280:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005284:	4013      	ands	r3, r2
 8005286:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	333c      	adds	r3, #60	@ 0x3c
 80052ac:	3304      	adds	r3, #4
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4a19      	ldr	r2, [pc, #100]	@ (800532c <PCD_EP_OutXfrComplete_int+0x98>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d124      	bne.n	8005314 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e0:	461a      	mov	r2, r3
 80052e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052e6:	6093      	str	r3, [r2, #8]
 80052e8:	e01a      	b.n	8005320 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d008      	beq.n	8005306 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005300:	461a      	mov	r2, r3
 8005302:	2320      	movs	r3, #32
 8005304:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	b2db      	uxtb	r3, r3
 800530a:	4619      	mov	r1, r3
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f008 f8d5 	bl	800d4bc <HAL_PCD_DataOutStageCallback>
 8005312:	e005      	b.n	8005320 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	b2db      	uxtb	r3, r3
 8005318:	4619      	mov	r1, r3
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f008 f8ce 	bl	800d4bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	4f54310a 	.word	0x4f54310a

08005330 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	333c      	adds	r3, #60	@ 0x3c
 8005348:	3304      	adds	r3, #4
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4a0c      	ldr	r2, [pc, #48]	@ (8005394 <PCD_EP_OutSetupPacket_int+0x64>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d90e      	bls.n	8005384 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800536c:	2b00      	cmp	r3, #0
 800536e:	d009      	beq.n	8005384 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800537c:	461a      	mov	r2, r3
 800537e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005382:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f008 f887 	bl	800d498 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	4f54300a 	.word	0x4f54300a

08005398 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70fb      	strb	r3, [r7, #3]
 80053a4:	4613      	mov	r3, r2
 80053a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d107      	bne.n	80053c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80053b6:	883b      	ldrh	r3, [r7, #0]
 80053b8:	0419      	lsls	r1, r3, #16
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80053c4:	e028      	b.n	8005418 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	4413      	add	r3, r2
 80053d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80053d4:	2300      	movs	r3, #0
 80053d6:	73fb      	strb	r3, [r7, #15]
 80053d8:	e00d      	b.n	80053f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	7bfb      	ldrb	r3, [r7, #15]
 80053e0:	3340      	adds	r3, #64	@ 0x40
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	0c1b      	lsrs	r3, r3, #16
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	4413      	add	r3, r2
 80053ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	3301      	adds	r3, #1
 80053f4:	73fb      	strb	r3, [r7, #15]
 80053f6:	7bfa      	ldrb	r2, [r7, #15]
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	3b01      	subs	r3, #1
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d3ec      	bcc.n	80053da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005400:	883b      	ldrh	r3, [r7, #0]
 8005402:	0418      	lsls	r0, r3, #16
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6819      	ldr	r1, [r3, #0]
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	3b01      	subs	r3, #1
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	4302      	orrs	r2, r0
 8005410:	3340      	adds	r3, #64	@ 0x40
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	460b      	mov	r3, r1
 8005430:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	887a      	ldrh	r2, [r7, #2]
 8005438:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800547a:	f043 0303 	orr.w	r3, r3, #3
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005494:	4b0d      	ldr	r3, [pc, #52]	@ (80054cc <HAL_PWREx_GetVoltageRange+0x3c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800549c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054a0:	d102      	bne.n	80054a8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80054a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054a6:	e00b      	b.n	80054c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80054a8:	4b08      	ldr	r3, [pc, #32]	@ (80054cc <HAL_PWREx_GetVoltageRange+0x3c>)
 80054aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054b6:	d102      	bne.n	80054be <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80054b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054bc:	e000      	b.n	80054c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80054be:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40007000 	.word	0x40007000

080054d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d141      	bne.n	8005562 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054de:	4b4b      	ldr	r3, [pc, #300]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ea:	d131      	bne.n	8005550 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054ec:	4b47      	ldr	r3, [pc, #284]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054f2:	4a46      	ldr	r2, [pc, #280]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054fc:	4b43      	ldr	r3, [pc, #268]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005504:	4a41      	ldr	r2, [pc, #260]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800550a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800550c:	4b40      	ldr	r3, [pc, #256]	@ (8005610 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2232      	movs	r2, #50	@ 0x32
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	4a3f      	ldr	r2, [pc, #252]	@ (8005614 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	0c9b      	lsrs	r3, r3, #18
 800551e:	3301      	adds	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005522:	e002      	b.n	800552a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3b01      	subs	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800552a:	4b38      	ldr	r3, [pc, #224]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005536:	d102      	bne.n	800553e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f2      	bne.n	8005524 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800553e:	4b33      	ldr	r3, [pc, #204]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800554a:	d158      	bne.n	80055fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e057      	b.n	8005600 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005550:	4b2e      	ldr	r3, [pc, #184]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005556:	4a2d      	ldr	r2, [pc, #180]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800555c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005560:	e04d      	b.n	80055fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005568:	d141      	bne.n	80055ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800556a:	4b28      	ldr	r3, [pc, #160]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005576:	d131      	bne.n	80055dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005578:	4b24      	ldr	r3, [pc, #144]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800557a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800557e:	4a23      	ldr	r2, [pc, #140]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005584:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005588:	4b20      	ldr	r3, [pc, #128]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005590:	4a1e      	ldr	r2, [pc, #120]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005596:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005598:	4b1d      	ldr	r3, [pc, #116]	@ (8005610 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2232      	movs	r2, #50	@ 0x32
 800559e:	fb02 f303 	mul.w	r3, r2, r3
 80055a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005614 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80055a4:	fba2 2303 	umull	r2, r3, r2, r3
 80055a8:	0c9b      	lsrs	r3, r3, #18
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055ae:	e002      	b.n	80055b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055b6:	4b15      	ldr	r3, [pc, #84]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c2:	d102      	bne.n	80055ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f2      	bne.n	80055b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80055ca:	4b10      	ldr	r3, [pc, #64]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055d6:	d112      	bne.n	80055fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e011      	b.n	8005600 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055dc:	4b0b      	ldr	r3, [pc, #44]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055e2:	4a0a      	ldr	r2, [pc, #40]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80055ec:	e007      	b.n	80055fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055ee:	4b07      	ldr	r3, [pc, #28]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80055f6:	4a05      	ldr	r2, [pc, #20]	@ (800560c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	40007000 	.word	0x40007000
 8005610:	20000000 	.word	0x20000000
 8005614:	431bde83 	.word	0x431bde83

08005618 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800561c:	4b05      	ldr	r3, [pc, #20]	@ (8005634 <HAL_PWREx_EnableVddUSB+0x1c>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	4a04      	ldr	r2, [pc, #16]	@ (8005634 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005622:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005626:	6053      	str	r3, [r2, #4]
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40007000 	.word	0x40007000

08005638 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800563c:	4b05      	ldr	r3, [pc, #20]	@ (8005654 <HAL_PWREx_EnableVddIO2+0x1c>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a04      	ldr	r2, [pc, #16]	@ (8005654 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005642:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005646:	6053      	str	r3, [r2, #4]
}
 8005648:	bf00      	nop
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40007000 	.word	0x40007000

08005658 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	f000 bc08 	b.w	8005e7c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800566c:	4b96      	ldr	r3, [pc, #600]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 030c 	and.w	r3, r3, #12
 8005674:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005676:	4b94      	ldr	r3, [pc, #592]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 80e4 	beq.w	8005856 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d007      	beq.n	80056a4 <HAL_RCC_OscConfig+0x4c>
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	2b0c      	cmp	r3, #12
 8005698:	f040 808b 	bne.w	80057b2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	f040 8087 	bne.w	80057b2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056a4:	4b88      	ldr	r3, [pc, #544]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d005      	beq.n	80056bc <HAL_RCC_OscConfig+0x64>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e3df      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1a      	ldr	r2, [r3, #32]
 80056c0:	4b81      	ldr	r3, [pc, #516]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <HAL_RCC_OscConfig+0x7e>
 80056cc:	4b7e      	ldr	r3, [pc, #504]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056d4:	e005      	b.n	80056e2 <HAL_RCC_OscConfig+0x8a>
 80056d6:	4b7c      	ldr	r3, [pc, #496]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80056d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056dc:	091b      	lsrs	r3, r3, #4
 80056de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d223      	bcs.n	800572e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fdcc 	bl	8006288 <RCC_SetFlashLatencyFromMSIRange>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e3c0      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056fa:	4b73      	ldr	r3, [pc, #460]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a72      	ldr	r2, [pc, #456]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005700:	f043 0308 	orr.w	r3, r3, #8
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	4b70      	ldr	r3, [pc, #448]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	496d      	ldr	r1, [pc, #436]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005714:	4313      	orrs	r3, r2
 8005716:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005718:	4b6b      	ldr	r3, [pc, #428]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69db      	ldr	r3, [r3, #28]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	4968      	ldr	r1, [pc, #416]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005728:	4313      	orrs	r3, r2
 800572a:	604b      	str	r3, [r1, #4]
 800572c:	e025      	b.n	800577a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800572e:	4b66      	ldr	r3, [pc, #408]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a65      	ldr	r2, [pc, #404]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005734:	f043 0308 	orr.w	r3, r3, #8
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	4b63      	ldr	r3, [pc, #396]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	4960      	ldr	r1, [pc, #384]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005748:	4313      	orrs	r3, r2
 800574a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800574c:	4b5e      	ldr	r3, [pc, #376]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	495b      	ldr	r1, [pc, #364]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 800575c:	4313      	orrs	r3, r2
 800575e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fd8c 	bl	8006288 <RCC_SetFlashLatencyFromMSIRange>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e380      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800577a:	f000 fcc1 	bl	8006100 <HAL_RCC_GetSysClockFreq>
 800577e:	4602      	mov	r2, r0
 8005780:	4b51      	ldr	r3, [pc, #324]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	091b      	lsrs	r3, r3, #4
 8005786:	f003 030f 	and.w	r3, r3, #15
 800578a:	4950      	ldr	r1, [pc, #320]	@ (80058cc <HAL_RCC_OscConfig+0x274>)
 800578c:	5ccb      	ldrb	r3, [r1, r3]
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	fa22 f303 	lsr.w	r3, r2, r3
 8005796:	4a4e      	ldr	r2, [pc, #312]	@ (80058d0 <HAL_RCC_OscConfig+0x278>)
 8005798:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800579a:	4b4e      	ldr	r3, [pc, #312]	@ (80058d4 <HAL_RCC_OscConfig+0x27c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fc fa10 	bl	8001bc4 <HAL_InitTick>
 80057a4:	4603      	mov	r3, r0
 80057a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d052      	beq.n	8005854 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
 80057b0:	e364      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d032      	beq.n	8005820 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80057ba:	4b43      	ldr	r3, [pc, #268]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a42      	ldr	r2, [pc, #264]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80057c0:	f043 0301 	orr.w	r3, r3, #1
 80057c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057c6:	f7fc fa4d 	bl	8001c64 <HAL_GetTick>
 80057ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057ce:	f7fc fa49 	bl	8001c64 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e34d      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057e0:	4b39      	ldr	r3, [pc, #228]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f0      	beq.n	80057ce <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057ec:	4b36      	ldr	r3, [pc, #216]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a35      	ldr	r2, [pc, #212]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80057f2:	f043 0308 	orr.w	r3, r3, #8
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	4b33      	ldr	r3, [pc, #204]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	4930      	ldr	r1, [pc, #192]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005806:	4313      	orrs	r3, r2
 8005808:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800580a:	4b2f      	ldr	r3, [pc, #188]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	492b      	ldr	r1, [pc, #172]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 800581a:	4313      	orrs	r3, r2
 800581c:	604b      	str	r3, [r1, #4]
 800581e:	e01a      	b.n	8005856 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005820:	4b29      	ldr	r3, [pc, #164]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a28      	ldr	r2, [pc, #160]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005826:	f023 0301 	bic.w	r3, r3, #1
 800582a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800582c:	f7fc fa1a 	bl	8001c64 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005834:	f7fc fa16 	bl	8001c64 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e31a      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005846:	4b20      	ldr	r3, [pc, #128]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f0      	bne.n	8005834 <HAL_RCC_OscConfig+0x1dc>
 8005852:	e000      	b.n	8005856 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005854:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d073      	beq.n	800594a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	2b08      	cmp	r3, #8
 8005866:	d005      	beq.n	8005874 <HAL_RCC_OscConfig+0x21c>
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b0c      	cmp	r3, #12
 800586c:	d10e      	bne.n	800588c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b03      	cmp	r3, #3
 8005872:	d10b      	bne.n	800588c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005874:	4b14      	ldr	r3, [pc, #80]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d063      	beq.n	8005948 <HAL_RCC_OscConfig+0x2f0>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d15f      	bne.n	8005948 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e2f7      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005894:	d106      	bne.n	80058a4 <HAL_RCC_OscConfig+0x24c>
 8005896:	4b0c      	ldr	r3, [pc, #48]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a0b      	ldr	r2, [pc, #44]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 800589c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	e025      	b.n	80058f0 <HAL_RCC_OscConfig+0x298>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058ac:	d114      	bne.n	80058d8 <HAL_RCC_OscConfig+0x280>
 80058ae:	4b06      	ldr	r3, [pc, #24]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a05      	ldr	r2, [pc, #20]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80058b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	4b03      	ldr	r3, [pc, #12]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a02      	ldr	r2, [pc, #8]	@ (80058c8 <HAL_RCC_OscConfig+0x270>)
 80058c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	e013      	b.n	80058f0 <HAL_RCC_OscConfig+0x298>
 80058c8:	40021000 	.word	0x40021000
 80058cc:	0800dcd0 	.word	0x0800dcd0
 80058d0:	20000000 	.word	0x20000000
 80058d4:	20000004 	.word	0x20000004
 80058d8:	4ba0      	ldr	r3, [pc, #640]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a9f      	ldr	r2, [pc, #636]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 80058de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	4b9d      	ldr	r3, [pc, #628]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a9c      	ldr	r2, [pc, #624]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 80058ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80058ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d013      	beq.n	8005920 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f8:	f7fc f9b4 	bl	8001c64 <HAL_GetTick>
 80058fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058fe:	e008      	b.n	8005912 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005900:	f7fc f9b0 	bl	8001c64 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b64      	cmp	r3, #100	@ 0x64
 800590c:	d901      	bls.n	8005912 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800590e:	2303      	movs	r3, #3
 8005910:	e2b4      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005912:	4b92      	ldr	r3, [pc, #584]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f0      	beq.n	8005900 <HAL_RCC_OscConfig+0x2a8>
 800591e:	e014      	b.n	800594a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005920:	f7fc f9a0 	bl	8001c64 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005928:	f7fc f99c 	bl	8001c64 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b64      	cmp	r3, #100	@ 0x64
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e2a0      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800593a:	4b88      	ldr	r3, [pc, #544]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x2d0>
 8005946:	e000      	b.n	800594a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d060      	beq.n	8005a18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	2b04      	cmp	r3, #4
 800595a:	d005      	beq.n	8005968 <HAL_RCC_OscConfig+0x310>
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b0c      	cmp	r3, #12
 8005960:	d119      	bne.n	8005996 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b02      	cmp	r3, #2
 8005966:	d116      	bne.n	8005996 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005968:	4b7c      	ldr	r3, [pc, #496]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <HAL_RCC_OscConfig+0x328>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e27d      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005980:	4b76      	ldr	r3, [pc, #472]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	061b      	lsls	r3, r3, #24
 800598e:	4973      	ldr	r1, [pc, #460]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005990:	4313      	orrs	r3, r2
 8005992:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005994:	e040      	b.n	8005a18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d023      	beq.n	80059e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800599e:	4b6f      	ldr	r3, [pc, #444]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6e      	ldr	r2, [pc, #440]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 80059a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059aa:	f7fc f95b 	bl	8001c64 <HAL_GetTick>
 80059ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059b2:	f7fc f957 	bl	8001c64 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e25b      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059c4:	4b65      	ldr	r3, [pc, #404]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0f0      	beq.n	80059b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d0:	4b62      	ldr	r3, [pc, #392]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	061b      	lsls	r3, r3, #24
 80059de:	495f      	ldr	r1, [pc, #380]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	604b      	str	r3, [r1, #4]
 80059e4:	e018      	b.n	8005a18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059e6:	4b5d      	ldr	r3, [pc, #372]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a5c      	ldr	r2, [pc, #368]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 80059ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f2:	f7fc f937 	bl	8001c64 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059fa:	f7fc f933 	bl	8001c64 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e237      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a0c:	4b53      	ldr	r3, [pc, #332]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f0      	bne.n	80059fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d03c      	beq.n	8005a9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01c      	beq.n	8005a66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a32:	4a4a      	ldr	r2, [pc, #296]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3c:	f7fc f912 	bl	8001c64 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a44:	f7fc f90e 	bl	8001c64 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e212      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a56:	4b41      	ldr	r3, [pc, #260]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0ef      	beq.n	8005a44 <HAL_RCC_OscConfig+0x3ec>
 8005a64:	e01b      	b.n	8005a9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a66:	4b3d      	ldr	r3, [pc, #244]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a6c:	4a3b      	ldr	r2, [pc, #236]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005a6e:	f023 0301 	bic.w	r3, r3, #1
 8005a72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a76:	f7fc f8f5 	bl	8001c64 <HAL_GetTick>
 8005a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a7e:	f7fc f8f1 	bl	8001c64 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e1f5      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a90:	4b32      	ldr	r3, [pc, #200]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1ef      	bne.n	8005a7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 80a6 	beq.w	8005bf8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005aac:	2300      	movs	r3, #0
 8005aae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10d      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005abc:	4b27      	ldr	r3, [pc, #156]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac0:	4a26      	ldr	r2, [pc, #152]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005ac2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac8:	4b24      	ldr	r3, [pc, #144]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ad8:	4b21      	ldr	r3, [pc, #132]	@ (8005b60 <HAL_RCC_OscConfig+0x508>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d118      	bne.n	8005b16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8005b60 <HAL_RCC_OscConfig+0x508>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b60 <HAL_RCC_OscConfig+0x508>)
 8005aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005af0:	f7fc f8b8 	bl	8001c64 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af8:	f7fc f8b4 	bl	8001c64 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e1b8      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b0a:	4b15      	ldr	r3, [pc, #84]	@ (8005b60 <HAL_RCC_OscConfig+0x508>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d108      	bne.n	8005b30 <HAL_RCC_OscConfig+0x4d8>
 8005b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b24:	4a0d      	ldr	r2, [pc, #52]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b2e:	e029      	b.n	8005b84 <HAL_RCC_OscConfig+0x52c>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	2b05      	cmp	r3, #5
 8005b36:	d115      	bne.n	8005b64 <HAL_RCC_OscConfig+0x50c>
 8005b38:	4b08      	ldr	r3, [pc, #32]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b3e:	4a07      	ldr	r2, [pc, #28]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005b40:	f043 0304 	orr.w	r3, r3, #4
 8005b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b48:	4b04      	ldr	r3, [pc, #16]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4e:	4a03      	ldr	r2, [pc, #12]	@ (8005b5c <HAL_RCC_OscConfig+0x504>)
 8005b50:	f043 0301 	orr.w	r3, r3, #1
 8005b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b58:	e014      	b.n	8005b84 <HAL_RCC_OscConfig+0x52c>
 8005b5a:	bf00      	nop
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40007000 	.word	0x40007000
 8005b64:	4b9d      	ldr	r3, [pc, #628]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b6a:	4a9c      	ldr	r2, [pc, #624]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005b6c:	f023 0301 	bic.w	r3, r3, #1
 8005b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005b74:	4b99      	ldr	r3, [pc, #612]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b7a:	4a98      	ldr	r2, [pc, #608]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005b7c:	f023 0304 	bic.w	r3, r3, #4
 8005b80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d016      	beq.n	8005bba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8c:	f7fc f86a 	bl	8001c64 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b92:	e00a      	b.n	8005baa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b94:	f7fc f866 	bl	8001c64 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e168      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005baa:	4b8c      	ldr	r3, [pc, #560]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0ed      	beq.n	8005b94 <HAL_RCC_OscConfig+0x53c>
 8005bb8:	e015      	b.n	8005be6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bba:	f7fc f853 	bl	8001c64 <HAL_GetTick>
 8005bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bc0:	e00a      	b.n	8005bd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bc2:	f7fc f84f 	bl	8001c64 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e151      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005bd8:	4b80      	ldr	r3, [pc, #512]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1ed      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005be6:	7ffb      	ldrb	r3, [r7, #31]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d105      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bec:	4b7b      	ldr	r3, [pc, #492]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf0:	4a7a      	ldr	r2, [pc, #488]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005bf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005bf6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d03c      	beq.n	8005c7e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01c      	beq.n	8005c46 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c0c:	4b73      	ldr	r3, [pc, #460]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005c0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c12:	4a72      	ldr	r2, [pc, #456]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005c14:	f043 0301 	orr.w	r3, r3, #1
 8005c18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1c:	f7fc f822 	bl	8001c64 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c24:	f7fc f81e 	bl	8001c64 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e122      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005c36:	4b69      	ldr	r3, [pc, #420]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0ef      	beq.n	8005c24 <HAL_RCC_OscConfig+0x5cc>
 8005c44:	e01b      	b.n	8005c7e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c46:	4b65      	ldr	r3, [pc, #404]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005c48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c4c:	4a63      	ldr	r2, [pc, #396]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c56:	f7fc f805 	bl	8001c64 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c5e:	f7fc f801 	bl	8001c64 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e105      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c70:	4b5a      	ldr	r3, [pc, #360]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1ef      	bne.n	8005c5e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 80f9 	beq.w	8005e7a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	f040 80cf 	bne.w	8005e30 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005c92:	4b52      	ldr	r3, [pc, #328]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f003 0203 	and.w	r2, r3, #3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d12c      	bne.n	8005d00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d123      	bne.n	8005d00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d11b      	bne.n	8005d00 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d113      	bne.n	8005d00 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d109      	bne.n	8005d00 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	085b      	lsrs	r3, r3, #1
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d071      	beq.n	8005de4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	2b0c      	cmp	r3, #12
 8005d04:	d068      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d06:	4b35      	ldr	r3, [pc, #212]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d105      	bne.n	8005d1e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005d12:	4b32      	ldr	r3, [pc, #200]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e0ac      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d22:	4b2e      	ldr	r3, [pc, #184]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a2d      	ldr	r2, [pc, #180]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005d28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d2c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d2e:	f7fb ff99 	bl	8001c64 <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d36:	f7fb ff95 	bl	8001c64 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e099      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d48:	4b24      	ldr	r3, [pc, #144]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1f0      	bne.n	8005d36 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d54:	4b21      	ldr	r3, [pc, #132]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005d56:	68da      	ldr	r2, [r3, #12]
 8005d58:	4b21      	ldr	r3, [pc, #132]	@ (8005de0 <HAL_RCC_OscConfig+0x788>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005d64:	3a01      	subs	r2, #1
 8005d66:	0112      	lsls	r2, r2, #4
 8005d68:	4311      	orrs	r1, r2
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d6e:	0212      	lsls	r2, r2, #8
 8005d70:	4311      	orrs	r1, r2
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d76:	0852      	lsrs	r2, r2, #1
 8005d78:	3a01      	subs	r2, #1
 8005d7a:	0552      	lsls	r2, r2, #21
 8005d7c:	4311      	orrs	r1, r2
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005d82:	0852      	lsrs	r2, r2, #1
 8005d84:	3a01      	subs	r2, #1
 8005d86:	0652      	lsls	r2, r2, #25
 8005d88:	4311      	orrs	r1, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005d8e:	06d2      	lsls	r2, r2, #27
 8005d90:	430a      	orrs	r2, r1
 8005d92:	4912      	ldr	r1, [pc, #72]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005d98:	4b10      	ldr	r3, [pc, #64]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a0f      	ldr	r2, [pc, #60]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005d9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005da2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005da4:	4b0d      	ldr	r3, [pc, #52]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	4a0c      	ldr	r2, [pc, #48]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005daa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005db0:	f7fb ff58 	bl	8001c64 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db8:	f7fb ff54 	bl	8001c64 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e058      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dca:	4b04      	ldr	r3, [pc, #16]	@ (8005ddc <HAL_RCC_OscConfig+0x784>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dd6:	e050      	b.n	8005e7a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e04f      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005de4:	4b27      	ldr	r3, [pc, #156]	@ (8005e84 <HAL_RCC_OscConfig+0x82c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d144      	bne.n	8005e7a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005df0:	4b24      	ldr	r3, [pc, #144]	@ (8005e84 <HAL_RCC_OscConfig+0x82c>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a23      	ldr	r2, [pc, #140]	@ (8005e84 <HAL_RCC_OscConfig+0x82c>)
 8005df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dfc:	4b21      	ldr	r3, [pc, #132]	@ (8005e84 <HAL_RCC_OscConfig+0x82c>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4a20      	ldr	r2, [pc, #128]	@ (8005e84 <HAL_RCC_OscConfig+0x82c>)
 8005e02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e08:	f7fb ff2c 	bl	8001c64 <HAL_GetTick>
 8005e0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e10:	f7fb ff28 	bl	8001c64 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e02c      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e22:	4b18      	ldr	r3, [pc, #96]	@ (8005e84 <HAL_RCC_OscConfig+0x82c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f0      	beq.n	8005e10 <HAL_RCC_OscConfig+0x7b8>
 8005e2e:	e024      	b.n	8005e7a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	2b0c      	cmp	r3, #12
 8005e34:	d01f      	beq.n	8005e76 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e36:	4b13      	ldr	r3, [pc, #76]	@ (8005e84 <HAL_RCC_OscConfig+0x82c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a12      	ldr	r2, [pc, #72]	@ (8005e84 <HAL_RCC_OscConfig+0x82c>)
 8005e3c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e42:	f7fb ff0f 	bl	8001c64 <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e4a:	f7fb ff0b 	bl	8001c64 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e00f      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e5c:	4b09      	ldr	r3, [pc, #36]	@ (8005e84 <HAL_RCC_OscConfig+0x82c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f0      	bne.n	8005e4a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005e68:	4b06      	ldr	r3, [pc, #24]	@ (8005e84 <HAL_RCC_OscConfig+0x82c>)
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	4905      	ldr	r1, [pc, #20]	@ (8005e84 <HAL_RCC_OscConfig+0x82c>)
 8005e6e:	4b06      	ldr	r3, [pc, #24]	@ (8005e88 <HAL_RCC_OscConfig+0x830>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	60cb      	str	r3, [r1, #12]
 8005e74:	e001      	b.n	8005e7a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3720      	adds	r7, #32
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	40021000 	.word	0x40021000
 8005e88:	feeefffc 	.word	0xfeeefffc

08005e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005e96:	2300      	movs	r3, #0
 8005e98:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e11d      	b.n	80060e0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ea4:	4b90      	ldr	r3, [pc, #576]	@ (80060e8 <HAL_RCC_ClockConfig+0x25c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 030f 	and.w	r3, r3, #15
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d910      	bls.n	8005ed4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb2:	4b8d      	ldr	r3, [pc, #564]	@ (80060e8 <HAL_RCC_ClockConfig+0x25c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f023 020f 	bic.w	r2, r3, #15
 8005eba:	498b      	ldr	r1, [pc, #556]	@ (80060e8 <HAL_RCC_ClockConfig+0x25c>)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ec2:	4b89      	ldr	r3, [pc, #548]	@ (80060e8 <HAL_RCC_ClockConfig+0x25c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 030f 	and.w	r3, r3, #15
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d001      	beq.n	8005ed4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e105      	b.n	80060e0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d010      	beq.n	8005f02 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689a      	ldr	r2, [r3, #8]
 8005ee4:	4b81      	ldr	r3, [pc, #516]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d908      	bls.n	8005f02 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ef0:	4b7e      	ldr	r3, [pc, #504]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	497b      	ldr	r1, [pc, #492]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d079      	beq.n	8006002 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d11e      	bne.n	8005f54 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f16:	4b75      	ldr	r3, [pc, #468]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e0dc      	b.n	80060e0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005f26:	f000 fa09 	bl	800633c <RCC_GetSysClockFreqFromPLLSource>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4a70      	ldr	r2, [pc, #448]	@ (80060f0 <HAL_RCC_ClockConfig+0x264>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d946      	bls.n	8005fc0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005f32:	4b6e      	ldr	r3, [pc, #440]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d140      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005f3e:	4b6b      	ldr	r3, [pc, #428]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f46:	4a69      	ldr	r2, [pc, #420]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005f4e:	2380      	movs	r3, #128	@ 0x80
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	e035      	b.n	8005fc0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d107      	bne.n	8005f6c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f5c:	4b63      	ldr	r3, [pc, #396]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d115      	bne.n	8005f94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e0b9      	b.n	80060e0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d107      	bne.n	8005f84 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f74:	4b5d      	ldr	r3, [pc, #372]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d109      	bne.n	8005f94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0ad      	b.n	80060e0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f84:	4b59      	ldr	r3, [pc, #356]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e0a5      	b.n	80060e0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005f94:	f000 f8b4 	bl	8006100 <HAL_RCC_GetSysClockFreq>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	4a55      	ldr	r2, [pc, #340]	@ (80060f0 <HAL_RCC_ClockConfig+0x264>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d90f      	bls.n	8005fc0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005fa0:	4b52      	ldr	r3, [pc, #328]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d109      	bne.n	8005fc0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fac:	4b4f      	ldr	r3, [pc, #316]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fb4:	4a4d      	ldr	r2, [pc, #308]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fbc:	2380      	movs	r3, #128	@ 0x80
 8005fbe:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f023 0203 	bic.w	r2, r3, #3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	4947      	ldr	r1, [pc, #284]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd2:	f7fb fe47 	bl	8001c64 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd8:	e00a      	b.n	8005ff0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fda:	f7fb fe43 	bl	8001c64 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d901      	bls.n	8005ff0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e077      	b.n	80060e0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f003 020c 	and.w	r2, r3, #12
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d1eb      	bne.n	8005fda <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b80      	cmp	r3, #128	@ 0x80
 8006006:	d105      	bne.n	8006014 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006008:	4b38      	ldr	r3, [pc, #224]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	4a37      	ldr	r2, [pc, #220]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 800600e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006012:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d010      	beq.n	8006042 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	4b31      	ldr	r3, [pc, #196]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800602c:	429a      	cmp	r2, r3
 800602e:	d208      	bcs.n	8006042 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006030:	4b2e      	ldr	r3, [pc, #184]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	492b      	ldr	r1, [pc, #172]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006042:	4b29      	ldr	r3, [pc, #164]	@ (80060e8 <HAL_RCC_ClockConfig+0x25c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d210      	bcs.n	8006072 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006050:	4b25      	ldr	r3, [pc, #148]	@ (80060e8 <HAL_RCC_ClockConfig+0x25c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f023 020f 	bic.w	r2, r3, #15
 8006058:	4923      	ldr	r1, [pc, #140]	@ (80060e8 <HAL_RCC_ClockConfig+0x25c>)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	4313      	orrs	r3, r2
 800605e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006060:	4b21      	ldr	r3, [pc, #132]	@ (80060e8 <HAL_RCC_ClockConfig+0x25c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d001      	beq.n	8006072 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e036      	b.n	80060e0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	d008      	beq.n	8006090 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800607e:	4b1b      	ldr	r3, [pc, #108]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	4918      	ldr	r1, [pc, #96]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 800608c:	4313      	orrs	r3, r2
 800608e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d009      	beq.n	80060b0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800609c:	4b13      	ldr	r3, [pc, #76]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	4910      	ldr	r1, [pc, #64]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80060b0:	f000 f826 	bl	8006100 <HAL_RCC_GetSysClockFreq>
 80060b4:	4602      	mov	r2, r0
 80060b6:	4b0d      	ldr	r3, [pc, #52]	@ (80060ec <HAL_RCC_ClockConfig+0x260>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	490c      	ldr	r1, [pc, #48]	@ (80060f4 <HAL_RCC_ClockConfig+0x268>)
 80060c2:	5ccb      	ldrb	r3, [r1, r3]
 80060c4:	f003 031f 	and.w	r3, r3, #31
 80060c8:	fa22 f303 	lsr.w	r3, r2, r3
 80060cc:	4a0a      	ldr	r2, [pc, #40]	@ (80060f8 <HAL_RCC_ClockConfig+0x26c>)
 80060ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80060d0:	4b0a      	ldr	r3, [pc, #40]	@ (80060fc <HAL_RCC_ClockConfig+0x270>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fb fd75 	bl	8001bc4 <HAL_InitTick>
 80060da:	4603      	mov	r3, r0
 80060dc:	73fb      	strb	r3, [r7, #15]

  return status;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3718      	adds	r7, #24
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40022000 	.word	0x40022000
 80060ec:	40021000 	.word	0x40021000
 80060f0:	04c4b400 	.word	0x04c4b400
 80060f4:	0800dcd0 	.word	0x0800dcd0
 80060f8:	20000000 	.word	0x20000000
 80060fc:	20000004 	.word	0x20000004

08006100 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006100:	b480      	push	{r7}
 8006102:	b089      	sub	sp, #36	@ 0x24
 8006104:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	2300      	movs	r3, #0
 800610c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800610e:	4b3e      	ldr	r3, [pc, #248]	@ (8006208 <HAL_RCC_GetSysClockFreq+0x108>)
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006118:	4b3b      	ldr	r3, [pc, #236]	@ (8006208 <HAL_RCC_GetSysClockFreq+0x108>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0303 	and.w	r3, r3, #3
 8006120:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_RCC_GetSysClockFreq+0x34>
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b0c      	cmp	r3, #12
 800612c:	d121      	bne.n	8006172 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d11e      	bne.n	8006172 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006134:	4b34      	ldr	r3, [pc, #208]	@ (8006208 <HAL_RCC_GetSysClockFreq+0x108>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0308 	and.w	r3, r3, #8
 800613c:	2b00      	cmp	r3, #0
 800613e:	d107      	bne.n	8006150 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006140:	4b31      	ldr	r3, [pc, #196]	@ (8006208 <HAL_RCC_GetSysClockFreq+0x108>)
 8006142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006146:	0a1b      	lsrs	r3, r3, #8
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	61fb      	str	r3, [r7, #28]
 800614e:	e005      	b.n	800615c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006150:	4b2d      	ldr	r3, [pc, #180]	@ (8006208 <HAL_RCC_GetSysClockFreq+0x108>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800615c:	4a2b      	ldr	r2, [pc, #172]	@ (800620c <HAL_RCC_GetSysClockFreq+0x10c>)
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006164:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10d      	bne.n	8006188 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006170:	e00a      	b.n	8006188 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b04      	cmp	r3, #4
 8006176:	d102      	bne.n	800617e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006178:	4b25      	ldr	r3, [pc, #148]	@ (8006210 <HAL_RCC_GetSysClockFreq+0x110>)
 800617a:	61bb      	str	r3, [r7, #24]
 800617c:	e004      	b.n	8006188 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d101      	bne.n	8006188 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006184:	4b23      	ldr	r3, [pc, #140]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x114>)
 8006186:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	2b0c      	cmp	r3, #12
 800618c:	d134      	bne.n	80061f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800618e:	4b1e      	ldr	r3, [pc, #120]	@ (8006208 <HAL_RCC_GetSysClockFreq+0x108>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d003      	beq.n	80061a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d003      	beq.n	80061ac <HAL_RCC_GetSysClockFreq+0xac>
 80061a4:	e005      	b.n	80061b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80061a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006210 <HAL_RCC_GetSysClockFreq+0x110>)
 80061a8:	617b      	str	r3, [r7, #20]
      break;
 80061aa:	e005      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80061ac:	4b19      	ldr	r3, [pc, #100]	@ (8006214 <HAL_RCC_GetSysClockFreq+0x114>)
 80061ae:	617b      	str	r3, [r7, #20]
      break;
 80061b0:	e002      	b.n	80061b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	617b      	str	r3, [r7, #20]
      break;
 80061b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061b8:	4b13      	ldr	r3, [pc, #76]	@ (8006208 <HAL_RCC_GetSysClockFreq+0x108>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	091b      	lsrs	r3, r3, #4
 80061be:	f003 030f 	and.w	r3, r3, #15
 80061c2:	3301      	adds	r3, #1
 80061c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80061c6:	4b10      	ldr	r3, [pc, #64]	@ (8006208 <HAL_RCC_GetSysClockFreq+0x108>)
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	0a1b      	lsrs	r3, r3, #8
 80061cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	fb03 f202 	mul.w	r2, r3, r2
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061de:	4b0a      	ldr	r3, [pc, #40]	@ (8006208 <HAL_RCC_GetSysClockFreq+0x108>)
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	0e5b      	lsrs	r3, r3, #25
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	3301      	adds	r3, #1
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80061f8:	69bb      	ldr	r3, [r7, #24]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3724      	adds	r7, #36	@ 0x24
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	40021000 	.word	0x40021000
 800620c:	0800dce8 	.word	0x0800dce8
 8006210:	00f42400 	.word	0x00f42400
 8006214:	007a1200 	.word	0x007a1200

08006218 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800621c:	4b03      	ldr	r3, [pc, #12]	@ (800622c <HAL_RCC_GetHCLKFreq+0x14>)
 800621e:	681b      	ldr	r3, [r3, #0]
}
 8006220:	4618      	mov	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	20000000 	.word	0x20000000

08006230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006234:	f7ff fff0 	bl	8006218 <HAL_RCC_GetHCLKFreq>
 8006238:	4602      	mov	r2, r0
 800623a:	4b06      	ldr	r3, [pc, #24]	@ (8006254 <HAL_RCC_GetPCLK1Freq+0x24>)
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	f003 0307 	and.w	r3, r3, #7
 8006244:	4904      	ldr	r1, [pc, #16]	@ (8006258 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006246:	5ccb      	ldrb	r3, [r1, r3]
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006250:	4618      	mov	r0, r3
 8006252:	bd80      	pop	{r7, pc}
 8006254:	40021000 	.word	0x40021000
 8006258:	0800dce0 	.word	0x0800dce0

0800625c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006260:	f7ff ffda 	bl	8006218 <HAL_RCC_GetHCLKFreq>
 8006264:	4602      	mov	r2, r0
 8006266:	4b06      	ldr	r3, [pc, #24]	@ (8006280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	0adb      	lsrs	r3, r3, #11
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	4904      	ldr	r1, [pc, #16]	@ (8006284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006272:	5ccb      	ldrb	r3, [r1, r3]
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800627c:	4618      	mov	r0, r3
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40021000 	.word	0x40021000
 8006284:	0800dce0 	.word	0x0800dce0

08006288 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006290:	2300      	movs	r3, #0
 8006292:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006294:	4b27      	ldr	r3, [pc, #156]	@ (8006334 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80062a0:	f7ff f8f6 	bl	8005490 <HAL_PWREx_GetVoltageRange>
 80062a4:	6178      	str	r0, [r7, #20]
 80062a6:	e014      	b.n	80062d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80062a8:	4b22      	ldr	r3, [pc, #136]	@ (8006334 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ac:	4a21      	ldr	r2, [pc, #132]	@ (8006334 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80062b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006334 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80062c0:	f7ff f8e6 	bl	8005490 <HAL_PWREx_GetVoltageRange>
 80062c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80062c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006334 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006334 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80062cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062d8:	d10b      	bne.n	80062f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b80      	cmp	r3, #128	@ 0x80
 80062de:	d913      	bls.n	8006308 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80062e4:	d902      	bls.n	80062ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062e6:	2302      	movs	r3, #2
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	e00d      	b.n	8006308 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062ec:	2301      	movs	r3, #1
 80062ee:	613b      	str	r3, [r7, #16]
 80062f0:	e00a      	b.n	8006308 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80062f6:	d902      	bls.n	80062fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80062f8:	2302      	movs	r3, #2
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	e004      	b.n	8006308 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b70      	cmp	r3, #112	@ 0x70
 8006302:	d101      	bne.n	8006308 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006304:	2301      	movs	r3, #1
 8006306:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006308:	4b0b      	ldr	r3, [pc, #44]	@ (8006338 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f023 020f 	bic.w	r2, r3, #15
 8006310:	4909      	ldr	r1, [pc, #36]	@ (8006338 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006318:	4b07      	ldr	r3, [pc, #28]	@ (8006338 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	429a      	cmp	r2, r3
 8006324:	d001      	beq.n	800632a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e000      	b.n	800632c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40021000 	.word	0x40021000
 8006338:	40022000 	.word	0x40022000

0800633c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006342:	4b2d      	ldr	r3, [pc, #180]	@ (80063f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b03      	cmp	r3, #3
 8006350:	d00b      	beq.n	800636a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b03      	cmp	r3, #3
 8006356:	d825      	bhi.n	80063a4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d008      	beq.n	8006370 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b02      	cmp	r3, #2
 8006362:	d11f      	bne.n	80063a4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006364:	4b25      	ldr	r3, [pc, #148]	@ (80063fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006366:	613b      	str	r3, [r7, #16]
    break;
 8006368:	e01f      	b.n	80063aa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800636a:	4b25      	ldr	r3, [pc, #148]	@ (8006400 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800636c:	613b      	str	r3, [r7, #16]
    break;
 800636e:	e01c      	b.n	80063aa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006370:	4b21      	ldr	r3, [pc, #132]	@ (80063f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0308 	and.w	r3, r3, #8
 8006378:	2b00      	cmp	r3, #0
 800637a:	d107      	bne.n	800638c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800637c:	4b1e      	ldr	r3, [pc, #120]	@ (80063f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800637e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006382:	0a1b      	lsrs	r3, r3, #8
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	e005      	b.n	8006398 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800638c:	4b1a      	ldr	r3, [pc, #104]	@ (80063f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	091b      	lsrs	r3, r3, #4
 8006392:	f003 030f 	and.w	r3, r3, #15
 8006396:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006398:	4a1a      	ldr	r2, [pc, #104]	@ (8006404 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a0:	613b      	str	r3, [r7, #16]
    break;
 80063a2:	e002      	b.n	80063aa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	613b      	str	r3, [r7, #16]
    break;
 80063a8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063aa:	4b13      	ldr	r3, [pc, #76]	@ (80063f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	091b      	lsrs	r3, r3, #4
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	3301      	adds	r3, #1
 80063b6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80063b8:	4b0f      	ldr	r3, [pc, #60]	@ (80063f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	0a1b      	lsrs	r3, r3, #8
 80063be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	fb03 f202 	mul.w	r2, r3, r2
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80063d0:	4b09      	ldr	r3, [pc, #36]	@ (80063f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	0e5b      	lsrs	r3, r3, #25
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	3301      	adds	r3, #1
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80063ea:	683b      	ldr	r3, [r7, #0]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	40021000 	.word	0x40021000
 80063fc:	00f42400 	.word	0x00f42400
 8006400:	007a1200 	.word	0x007a1200
 8006404:	0800dce8 	.word	0x0800dce8

08006408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006410:	2300      	movs	r3, #0
 8006412:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006414:	2300      	movs	r3, #0
 8006416:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006420:	2b00      	cmp	r3, #0
 8006422:	d040      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006428:	2b80      	cmp	r3, #128	@ 0x80
 800642a:	d02a      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800642c:	2b80      	cmp	r3, #128	@ 0x80
 800642e:	d825      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006430:	2b60      	cmp	r3, #96	@ 0x60
 8006432:	d026      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006434:	2b60      	cmp	r3, #96	@ 0x60
 8006436:	d821      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006438:	2b40      	cmp	r3, #64	@ 0x40
 800643a:	d006      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800643c:	2b40      	cmp	r3, #64	@ 0x40
 800643e:	d81d      	bhi.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006444:	2b20      	cmp	r3, #32
 8006446:	d010      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006448:	e018      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800644a:	4b89      	ldr	r3, [pc, #548]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	4a88      	ldr	r2, [pc, #544]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006454:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006456:	e015      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	3304      	adds	r3, #4
 800645c:	2100      	movs	r1, #0
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fb02 	bl	8006a68 <RCCEx_PLLSAI1_Config>
 8006464:	4603      	mov	r3, r0
 8006466:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006468:	e00c      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3320      	adds	r3, #32
 800646e:	2100      	movs	r1, #0
 8006470:	4618      	mov	r0, r3
 8006472:	f000 fbed 	bl	8006c50 <RCCEx_PLLSAI2_Config>
 8006476:	4603      	mov	r3, r0
 8006478:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800647a:	e003      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	74fb      	strb	r3, [r7, #19]
      break;
 8006480:	e000      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006482:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006484:	7cfb      	ldrb	r3, [r7, #19]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800648a:	4b79      	ldr	r3, [pc, #484]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800648c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006490:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006498:	4975      	ldr	r1, [pc, #468]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80064a0:	e001      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a2:	7cfb      	ldrb	r3, [r7, #19]
 80064a4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d047      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ba:	d030      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80064bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064c0:	d82a      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80064c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064c6:	d02a      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80064c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064cc:	d824      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80064ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d2:	d008      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80064d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d8:	d81e      	bhi.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80064de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e2:	d010      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80064e4:	e018      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80064e6:	4b62      	ldr	r3, [pc, #392]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	4a61      	ldr	r2, [pc, #388]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80064ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064f0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80064f2:	e015      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fab4 	bl	8006a68 <RCCEx_PLLSAI1_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006504:	e00c      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3320      	adds	r3, #32
 800650a:	2100      	movs	r1, #0
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fb9f 	bl	8006c50 <RCCEx_PLLSAI2_Config>
 8006512:	4603      	mov	r3, r0
 8006514:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006516:	e003      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	74fb      	strb	r3, [r7, #19]
      break;
 800651c:	e000      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800651e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006520:	7cfb      	ldrb	r3, [r7, #19]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10b      	bne.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006526:	4b52      	ldr	r3, [pc, #328]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006528:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800652c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006534:	494e      	ldr	r1, [pc, #312]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800653c:	e001      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653e:	7cfb      	ldrb	r3, [r7, #19]
 8006540:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 809f 	beq.w	800668e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006550:	2300      	movs	r3, #0
 8006552:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006554:	4b46      	ldr	r3, [pc, #280]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006564:	2300      	movs	r3, #0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00d      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800656a:	4b41      	ldr	r3, [pc, #260]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800656c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656e:	4a40      	ldr	r2, [pc, #256]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006574:	6593      	str	r3, [r2, #88]	@ 0x58
 8006576:	4b3e      	ldr	r3, [pc, #248]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800657e:	60bb      	str	r3, [r7, #8]
 8006580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006582:	2301      	movs	r3, #1
 8006584:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006586:	4b3b      	ldr	r3, [pc, #236]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a3a      	ldr	r2, [pc, #232]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800658c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006590:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006592:	f7fb fb67 	bl	8001c64 <HAL_GetTick>
 8006596:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006598:	e009      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659a:	f7fb fb63 	bl	8001c64 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d902      	bls.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	74fb      	strb	r3, [r7, #19]
        break;
 80065ac:	e005      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065ae:	4b31      	ldr	r3, [pc, #196]	@ (8006674 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0ef      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80065ba:	7cfb      	ldrb	r3, [r7, #19]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d15b      	bne.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d01f      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d019      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065de:	4b24      	ldr	r3, [pc, #144]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065ea:	4b21      	ldr	r3, [pc, #132]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006600:	4a1b      	ldr	r2, [pc, #108]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006606:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800660a:	4a19      	ldr	r2, [pc, #100]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d016      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661c:	f7fb fb22 	bl	8001c64 <HAL_GetTick>
 8006620:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006622:	e00b      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006624:	f7fb fb1e 	bl	8001c64 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006632:	4293      	cmp	r3, r2
 8006634:	d902      	bls.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	74fb      	strb	r3, [r7, #19]
            break;
 800663a:	e006      	b.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800663c:	4b0c      	ldr	r3, [pc, #48]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0ec      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800664a:	7cfb      	ldrb	r3, [r7, #19]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10c      	bne.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006650:	4b07      	ldr	r3, [pc, #28]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006656:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006660:	4903      	ldr	r1, [pc, #12]	@ (8006670 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006662:	4313      	orrs	r3, r2
 8006664:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006668:	e008      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800666a:	7cfb      	ldrb	r3, [r7, #19]
 800666c:	74bb      	strb	r3, [r7, #18]
 800666e:	e005      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006670:	40021000 	.word	0x40021000
 8006674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006678:	7cfb      	ldrb	r3, [r7, #19]
 800667a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800667c:	7c7b      	ldrb	r3, [r7, #17]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d105      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006682:	4ba0      	ldr	r3, [pc, #640]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006686:	4a9f      	ldr	r2, [pc, #636]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800668c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800669a:	4b9a      	ldr	r3, [pc, #616]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800669c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a0:	f023 0203 	bic.w	r2, r3, #3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a8:	4996      	ldr	r1, [pc, #600]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066bc:	4b91      	ldr	r3, [pc, #580]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c2:	f023 020c 	bic.w	r2, r3, #12
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ca:	498e      	ldr	r1, [pc, #568]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066de:	4b89      	ldr	r3, [pc, #548]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ec:	4985      	ldr	r1, [pc, #532]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006700:	4b80      	ldr	r3, [pc, #512]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006706:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800670e:	497d      	ldr	r1, [pc, #500]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006710:	4313      	orrs	r3, r2
 8006712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0310 	and.w	r3, r3, #16
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006722:	4b78      	ldr	r3, [pc, #480]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006728:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006730:	4974      	ldr	r1, [pc, #464]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006732:	4313      	orrs	r3, r2
 8006734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006744:	4b6f      	ldr	r3, [pc, #444]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800674a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006752:	496c      	ldr	r1, [pc, #432]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006754:	4313      	orrs	r3, r2
 8006756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006766:	4b67      	ldr	r3, [pc, #412]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800676c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006774:	4963      	ldr	r1, [pc, #396]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006776:	4313      	orrs	r3, r2
 8006778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00a      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006788:	4b5e      	ldr	r3, [pc, #376]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800678a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006796:	495b      	ldr	r1, [pc, #364]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006798:	4313      	orrs	r3, r2
 800679a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00a      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067aa:	4b56      	ldr	r3, [pc, #344]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b8:	4952      	ldr	r1, [pc, #328]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067cc:	4b4d      	ldr	r3, [pc, #308]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067da:	494a      	ldr	r1, [pc, #296]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067ee:	4b45      	ldr	r3, [pc, #276]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067fc:	4941      	ldr	r1, [pc, #260]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00a      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006810:	4b3c      	ldr	r3, [pc, #240]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006812:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006816:	f023 0203 	bic.w	r2, r3, #3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800681e:	4939      	ldr	r1, [pc, #228]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006820:	4313      	orrs	r3, r2
 8006822:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d028      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006832:	4b34      	ldr	r3, [pc, #208]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006838:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006840:	4930      	ldr	r1, [pc, #192]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006842:	4313      	orrs	r3, r2
 8006844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800684c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006850:	d106      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006852:	4b2c      	ldr	r3, [pc, #176]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	4a2b      	ldr	r2, [pc, #172]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006858:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800685c:	60d3      	str	r3, [r2, #12]
 800685e:	e011      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006864:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006868:	d10c      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3304      	adds	r3, #4
 800686e:	2101      	movs	r1, #1
 8006870:	4618      	mov	r0, r3
 8006872:	f000 f8f9 	bl	8006a68 <RCCEx_PLLSAI1_Config>
 8006876:	4603      	mov	r3, r0
 8006878:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800687a:	7cfb      	ldrb	r3, [r7, #19]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006880:	7cfb      	ldrb	r3, [r7, #19]
 8006882:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d04d      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006894:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006898:	d108      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800689a:	4b1a      	ldr	r3, [pc, #104]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800689c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068a0:	4a18      	ldr	r2, [pc, #96]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068a6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80068aa:	e012      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80068ac:	4b15      	ldr	r3, [pc, #84]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068b2:	4a14      	ldr	r2, [pc, #80]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068b8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80068bc:	4b11      	ldr	r3, [pc, #68]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068ca:	490e      	ldr	r1, [pc, #56]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068da:	d106      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068dc:	4b09      	ldr	r3, [pc, #36]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	4a08      	ldr	r2, [pc, #32]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068e6:	60d3      	str	r3, [r2, #12]
 80068e8:	e020      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80068ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068f2:	d109      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80068f4:	4b03      	ldr	r3, [pc, #12]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	4a02      	ldr	r2, [pc, #8]	@ (8006904 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068fe:	60d3      	str	r3, [r2, #12]
 8006900:	e014      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006902:	bf00      	nop
 8006904:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800690c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006910:	d10c      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	3304      	adds	r3, #4
 8006916:	2101      	movs	r1, #1
 8006918:	4618      	mov	r0, r3
 800691a:	f000 f8a5 	bl	8006a68 <RCCEx_PLLSAI1_Config>
 800691e:	4603      	mov	r3, r0
 8006920:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006922:	7cfb      	ldrb	r3, [r7, #19]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8006928:	7cfb      	ldrb	r3, [r7, #19]
 800692a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d028      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006938:	4b4a      	ldr	r3, [pc, #296]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800693a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800693e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006946:	4947      	ldr	r1, [pc, #284]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006952:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006956:	d106      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006958:	4b42      	ldr	r3, [pc, #264]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	4a41      	ldr	r2, [pc, #260]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800695e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006962:	60d3      	str	r3, [r2, #12]
 8006964:	e011      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800696a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800696e:	d10c      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	3304      	adds	r3, #4
 8006974:	2101      	movs	r1, #1
 8006976:	4618      	mov	r0, r3
 8006978:	f000 f876 	bl	8006a68 <RCCEx_PLLSAI1_Config>
 800697c:	4603      	mov	r3, r0
 800697e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006980:	7cfb      	ldrb	r3, [r7, #19]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006986:	7cfb      	ldrb	r3, [r7, #19]
 8006988:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01e      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006996:	4b33      	ldr	r3, [pc, #204]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800699c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069a6:	492f      	ldr	r1, [pc, #188]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069b8:	d10c      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3304      	adds	r3, #4
 80069be:	2102      	movs	r1, #2
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 f851 	bl	8006a68 <RCCEx_PLLSAI1_Config>
 80069c6:	4603      	mov	r3, r0
 80069c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069ca:	7cfb      	ldrb	r3, [r7, #19]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d001      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80069d0:	7cfb      	ldrb	r3, [r7, #19]
 80069d2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80069e0:	4b20      	ldr	r3, [pc, #128]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069e6:	f023 0204 	bic.w	r2, r3, #4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069f0:	491c      	ldr	r1, [pc, #112]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006a04:	4b17      	ldr	r3, [pc, #92]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a0a:	f023 0218 	bic.w	r2, r3, #24
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a14:	4913      	ldr	r1, [pc, #76]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d017      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006a28:	4b0e      	ldr	r3, [pc, #56]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a38:	490a      	ldr	r1, [pc, #40]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a4a:	d105      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a4c:	4b05      	ldr	r3, [pc, #20]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	4a04      	ldr	r2, [pc, #16]	@ (8006a64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006a58:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	40021000 	.word	0x40021000

08006a68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a76:	4b72      	ldr	r3, [pc, #456]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00e      	beq.n	8006aa0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a82:	4b6f      	ldr	r3, [pc, #444]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f003 0203 	and.w	r2, r3, #3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d103      	bne.n	8006a9a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
       ||
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d142      	bne.n	8006b20 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	73fb      	strb	r3, [r7, #15]
 8006a9e:	e03f      	b.n	8006b20 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d018      	beq.n	8006ada <RCCEx_PLLSAI1_Config+0x72>
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d825      	bhi.n	8006af8 <RCCEx_PLLSAI1_Config+0x90>
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d002      	beq.n	8006ab6 <RCCEx_PLLSAI1_Config+0x4e>
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d009      	beq.n	8006ac8 <RCCEx_PLLSAI1_Config+0x60>
 8006ab4:	e020      	b.n	8006af8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ab6:	4b62      	ldr	r3, [pc, #392]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d11d      	bne.n	8006afe <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ac6:	e01a      	b.n	8006afe <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ac8:	4b5d      	ldr	r3, [pc, #372]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d116      	bne.n	8006b02 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ad8:	e013      	b.n	8006b02 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ada:	4b59      	ldr	r3, [pc, #356]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10f      	bne.n	8006b06 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ae6:	4b56      	ldr	r3, [pc, #344]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d109      	bne.n	8006b06 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006af6:	e006      	b.n	8006b06 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
      break;
 8006afc:	e004      	b.n	8006b08 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006afe:	bf00      	nop
 8006b00:	e002      	b.n	8006b08 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b02:	bf00      	nop
 8006b04:	e000      	b.n	8006b08 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006b06:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d108      	bne.n	8006b20 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006b0e:	4b4c      	ldr	r3, [pc, #304]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f023 0203 	bic.w	r2, r3, #3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4949      	ldr	r1, [pc, #292]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f040 8086 	bne.w	8006c34 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b28:	4b45      	ldr	r3, [pc, #276]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a44      	ldr	r2, [pc, #272]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b34:	f7fb f896 	bl	8001c64 <HAL_GetTick>
 8006b38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b3a:	e009      	b.n	8006b50 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b3c:	f7fb f892 	bl	8001c64 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d902      	bls.n	8006b50 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b4e:	e005      	b.n	8006b5c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b50:	4b3b      	ldr	r3, [pc, #236]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1ef      	bne.n	8006b3c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d168      	bne.n	8006c34 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d113      	bne.n	8006b90 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b68:	4b35      	ldr	r3, [pc, #212]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b6a:	691a      	ldr	r2, [r3, #16]
 8006b6c:	4b35      	ldr	r3, [pc, #212]	@ (8006c44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6892      	ldr	r2, [r2, #8]
 8006b74:	0211      	lsls	r1, r2, #8
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	68d2      	ldr	r2, [r2, #12]
 8006b7a:	06d2      	lsls	r2, r2, #27
 8006b7c:	4311      	orrs	r1, r2
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6852      	ldr	r2, [r2, #4]
 8006b82:	3a01      	subs	r2, #1
 8006b84:	0112      	lsls	r2, r2, #4
 8006b86:	430a      	orrs	r2, r1
 8006b88:	492d      	ldr	r1, [pc, #180]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	610b      	str	r3, [r1, #16]
 8006b8e:	e02d      	b.n	8006bec <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d115      	bne.n	8006bc2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b96:	4b2a      	ldr	r3, [pc, #168]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8006c48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	6892      	ldr	r2, [r2, #8]
 8006ba2:	0211      	lsls	r1, r2, #8
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6912      	ldr	r2, [r2, #16]
 8006ba8:	0852      	lsrs	r2, r2, #1
 8006baa:	3a01      	subs	r2, #1
 8006bac:	0552      	lsls	r2, r2, #21
 8006bae:	4311      	orrs	r1, r2
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6852      	ldr	r2, [r2, #4]
 8006bb4:	3a01      	subs	r2, #1
 8006bb6:	0112      	lsls	r2, r2, #4
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	4921      	ldr	r1, [pc, #132]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	610b      	str	r3, [r1, #16]
 8006bc0:	e014      	b.n	8006bec <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bc4:	691a      	ldr	r2, [r3, #16]
 8006bc6:	4b21      	ldr	r3, [pc, #132]	@ (8006c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bc8:	4013      	ands	r3, r2
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6892      	ldr	r2, [r2, #8]
 8006bce:	0211      	lsls	r1, r2, #8
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6952      	ldr	r2, [r2, #20]
 8006bd4:	0852      	lsrs	r2, r2, #1
 8006bd6:	3a01      	subs	r2, #1
 8006bd8:	0652      	lsls	r2, r2, #25
 8006bda:	4311      	orrs	r1, r2
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	6852      	ldr	r2, [r2, #4]
 8006be0:	3a01      	subs	r2, #1
 8006be2:	0112      	lsls	r2, r2, #4
 8006be4:	430a      	orrs	r2, r1
 8006be6:	4916      	ldr	r1, [pc, #88]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006bec:	4b14      	ldr	r3, [pc, #80]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a13      	ldr	r2, [pc, #76]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bf2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf8:	f7fb f834 	bl	8001c64 <HAL_GetTick>
 8006bfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bfe:	e009      	b.n	8006c14 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c00:	f7fb f830 	bl	8001c64 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d902      	bls.n	8006c14 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	73fb      	strb	r3, [r7, #15]
          break;
 8006c12:	e005      	b.n	8006c20 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c14:	4b0a      	ldr	r3, [pc, #40]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0ef      	beq.n	8006c00 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c26:	4b06      	ldr	r3, [pc, #24]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	4904      	ldr	r1, [pc, #16]	@ (8006c40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40021000 	.word	0x40021000
 8006c44:	07ff800f 	.word	0x07ff800f
 8006c48:	ff9f800f 	.word	0xff9f800f
 8006c4c:	f9ff800f 	.word	0xf9ff800f

08006c50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c5e:	4b72      	ldr	r3, [pc, #456]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00e      	beq.n	8006c88 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006c6a:	4b6f      	ldr	r3, [pc, #444]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f003 0203 	and.w	r2, r3, #3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d103      	bne.n	8006c82 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
       ||
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d142      	bne.n	8006d08 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	73fb      	strb	r3, [r7, #15]
 8006c86:	e03f      	b.n	8006d08 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d018      	beq.n	8006cc2 <RCCEx_PLLSAI2_Config+0x72>
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d825      	bhi.n	8006ce0 <RCCEx_PLLSAI2_Config+0x90>
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d002      	beq.n	8006c9e <RCCEx_PLLSAI2_Config+0x4e>
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d009      	beq.n	8006cb0 <RCCEx_PLLSAI2_Config+0x60>
 8006c9c:	e020      	b.n	8006ce0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c9e:	4b62      	ldr	r3, [pc, #392]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d11d      	bne.n	8006ce6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cae:	e01a      	b.n	8006ce6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cb0:	4b5d      	ldr	r3, [pc, #372]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d116      	bne.n	8006cea <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cc0:	e013      	b.n	8006cea <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cc2:	4b59      	ldr	r3, [pc, #356]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10f      	bne.n	8006cee <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006cce:	4b56      	ldr	r3, [pc, #344]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cde:	e006      	b.n	8006cee <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce4:	e004      	b.n	8006cf0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006ce6:	bf00      	nop
 8006ce8:	e002      	b.n	8006cf0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006cea:	bf00      	nop
 8006cec:	e000      	b.n	8006cf0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006cee:	bf00      	nop
    }

    if(status == HAL_OK)
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d108      	bne.n	8006d08 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006cf6:	4b4c      	ldr	r3, [pc, #304]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f023 0203 	bic.w	r2, r3, #3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4949      	ldr	r1, [pc, #292]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f040 8086 	bne.w	8006e1c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006d10:	4b45      	ldr	r3, [pc, #276]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a44      	ldr	r2, [pc, #272]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d1c:	f7fa ffa2 	bl	8001c64 <HAL_GetTick>
 8006d20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d22:	e009      	b.n	8006d38 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d24:	f7fa ff9e 	bl	8001c64 <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d902      	bls.n	8006d38 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	73fb      	strb	r3, [r7, #15]
        break;
 8006d36:	e005      	b.n	8006d44 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006d38:	4b3b      	ldr	r3, [pc, #236]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1ef      	bne.n	8006d24 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d168      	bne.n	8006e1c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d113      	bne.n	8006d78 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d50:	4b35      	ldr	r3, [pc, #212]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d52:	695a      	ldr	r2, [r3, #20]
 8006d54:	4b35      	ldr	r3, [pc, #212]	@ (8006e2c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6892      	ldr	r2, [r2, #8]
 8006d5c:	0211      	lsls	r1, r2, #8
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	68d2      	ldr	r2, [r2, #12]
 8006d62:	06d2      	lsls	r2, r2, #27
 8006d64:	4311      	orrs	r1, r2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6852      	ldr	r2, [r2, #4]
 8006d6a:	3a01      	subs	r2, #1
 8006d6c:	0112      	lsls	r2, r2, #4
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	492d      	ldr	r1, [pc, #180]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	614b      	str	r3, [r1, #20]
 8006d76:	e02d      	b.n	8006dd4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d115      	bne.n	8006daa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d80:	695a      	ldr	r2, [r3, #20]
 8006d82:	4b2b      	ldr	r3, [pc, #172]	@ (8006e30 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006d84:	4013      	ands	r3, r2
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6892      	ldr	r2, [r2, #8]
 8006d8a:	0211      	lsls	r1, r2, #8
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6912      	ldr	r2, [r2, #16]
 8006d90:	0852      	lsrs	r2, r2, #1
 8006d92:	3a01      	subs	r2, #1
 8006d94:	0552      	lsls	r2, r2, #21
 8006d96:	4311      	orrs	r1, r2
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6852      	ldr	r2, [r2, #4]
 8006d9c:	3a01      	subs	r2, #1
 8006d9e:	0112      	lsls	r2, r2, #4
 8006da0:	430a      	orrs	r2, r1
 8006da2:	4921      	ldr	r1, [pc, #132]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	614b      	str	r3, [r1, #20]
 8006da8:	e014      	b.n	8006dd4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006daa:	4b1f      	ldr	r3, [pc, #124]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dac:	695a      	ldr	r2, [r3, #20]
 8006dae:	4b21      	ldr	r3, [pc, #132]	@ (8006e34 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6892      	ldr	r2, [r2, #8]
 8006db6:	0211      	lsls	r1, r2, #8
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6952      	ldr	r2, [r2, #20]
 8006dbc:	0852      	lsrs	r2, r2, #1
 8006dbe:	3a01      	subs	r2, #1
 8006dc0:	0652      	lsls	r2, r2, #25
 8006dc2:	4311      	orrs	r1, r2
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	6852      	ldr	r2, [r2, #4]
 8006dc8:	3a01      	subs	r2, #1
 8006dca:	0112      	lsls	r2, r2, #4
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	4916      	ldr	r1, [pc, #88]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006dd4:	4b14      	ldr	r3, [pc, #80]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a13      	ldr	r2, [pc, #76]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de0:	f7fa ff40 	bl	8001c64 <HAL_GetTick>
 8006de4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006de6:	e009      	b.n	8006dfc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006de8:	f7fa ff3c 	bl	8001c64 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d902      	bls.n	8006dfc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	73fb      	strb	r3, [r7, #15]
          break;
 8006dfa:	e005      	b.n	8006e08 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0ef      	beq.n	8006de8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006e0e:	4b06      	ldr	r3, [pc, #24]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e10:	695a      	ldr	r2, [r3, #20]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	4904      	ldr	r1, [pc, #16]	@ (8006e28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	07ff800f 	.word	0x07ff800f
 8006e30:	ff9f800f 	.word	0xff9f800f
 8006e34:	f9ff800f 	.word	0xf9ff800f

08006e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e049      	b.n	8006ede <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d106      	bne.n	8006e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f7fa fcd2 	bl	8001808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2202      	movs	r2, #2
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3304      	adds	r3, #4
 8006e74:	4619      	mov	r1, r3
 8006e76:	4610      	mov	r0, r2
 8006e78:	f000 fb02 	bl	8007480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
	...

08006ee8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d001      	beq.n	8006f00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e047      	b.n	8006f90 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a23      	ldr	r2, [pc, #140]	@ (8006f9c <HAL_TIM_Base_Start+0xb4>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d01d      	beq.n	8006f4e <HAL_TIM_Base_Start+0x66>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f1a:	d018      	beq.n	8006f4e <HAL_TIM_Base_Start+0x66>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a1f      	ldr	r2, [pc, #124]	@ (8006fa0 <HAL_TIM_Base_Start+0xb8>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d013      	beq.n	8006f4e <HAL_TIM_Base_Start+0x66>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8006fa4 <HAL_TIM_Base_Start+0xbc>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d00e      	beq.n	8006f4e <HAL_TIM_Base_Start+0x66>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a1c      	ldr	r2, [pc, #112]	@ (8006fa8 <HAL_TIM_Base_Start+0xc0>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d009      	beq.n	8006f4e <HAL_TIM_Base_Start+0x66>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8006fac <HAL_TIM_Base_Start+0xc4>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d004      	beq.n	8006f4e <HAL_TIM_Base_Start+0x66>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a19      	ldr	r2, [pc, #100]	@ (8006fb0 <HAL_TIM_Base_Start+0xc8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d115      	bne.n	8006f7a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	4b17      	ldr	r3, [pc, #92]	@ (8006fb4 <HAL_TIM_Base_Start+0xcc>)
 8006f56:	4013      	ands	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b06      	cmp	r3, #6
 8006f5e:	d015      	beq.n	8006f8c <HAL_TIM_Base_Start+0xa4>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f66:	d011      	beq.n	8006f8c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f78:	e008      	b.n	8006f8c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f042 0201 	orr.w	r2, r2, #1
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e000      	b.n	8006f8e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f8c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	40012c00 	.word	0x40012c00
 8006fa0:	40000400 	.word	0x40000400
 8006fa4:	40000800 	.word	0x40000800
 8006fa8:	40000c00 	.word	0x40000c00
 8006fac:	40013400 	.word	0x40013400
 8006fb0:	40014000 	.word	0x40014000
 8006fb4:	00010007 	.word	0x00010007

08006fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d001      	beq.n	8006fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e04f      	b.n	8007070 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a23      	ldr	r2, [pc, #140]	@ (800707c <HAL_TIM_Base_Start_IT+0xc4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01d      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x76>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ffa:	d018      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x76>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1f      	ldr	r2, [pc, #124]	@ (8007080 <HAL_TIM_Base_Start_IT+0xc8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d013      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x76>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a1e      	ldr	r2, [pc, #120]	@ (8007084 <HAL_TIM_Base_Start_IT+0xcc>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d00e      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x76>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a1c      	ldr	r2, [pc, #112]	@ (8007088 <HAL_TIM_Base_Start_IT+0xd0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d009      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x76>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a1b      	ldr	r2, [pc, #108]	@ (800708c <HAL_TIM_Base_Start_IT+0xd4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d004      	beq.n	800702e <HAL_TIM_Base_Start_IT+0x76>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a19      	ldr	r2, [pc, #100]	@ (8007090 <HAL_TIM_Base_Start_IT+0xd8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d115      	bne.n	800705a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689a      	ldr	r2, [r3, #8]
 8007034:	4b17      	ldr	r3, [pc, #92]	@ (8007094 <HAL_TIM_Base_Start_IT+0xdc>)
 8007036:	4013      	ands	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b06      	cmp	r3, #6
 800703e:	d015      	beq.n	800706c <HAL_TIM_Base_Start_IT+0xb4>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007046:	d011      	beq.n	800706c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0201 	orr.w	r2, r2, #1
 8007056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007058:	e008      	b.n	800706c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 0201 	orr.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e000      	b.n	800706e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800706c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	40012c00 	.word	0x40012c00
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40013400 	.word	0x40013400
 8007090:	40014000 	.word	0x40014000
 8007094:	00010007 	.word	0x00010007

08007098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d020      	beq.n	80070fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d01b      	beq.n	80070fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f06f 0202 	mvn.w	r2, #2
 80070cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d003      	beq.n	80070ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f9ad 	bl	8007442 <HAL_TIM_IC_CaptureCallback>
 80070e8:	e005      	b.n	80070f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f99f 	bl	800742e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f9b0 	bl	8007456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	f003 0304 	and.w	r3, r3, #4
 8007102:	2b00      	cmp	r3, #0
 8007104:	d020      	beq.n	8007148 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01b      	beq.n	8007148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f06f 0204 	mvn.w	r2, #4
 8007118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2202      	movs	r2, #2
 800711e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	699b      	ldr	r3, [r3, #24]
 8007126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f987 	bl	8007442 <HAL_TIM_IC_CaptureCallback>
 8007134:	e005      	b.n	8007142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f979 	bl	800742e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 f98a 	bl	8007456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f003 0308 	and.w	r3, r3, #8
 800714e:	2b00      	cmp	r3, #0
 8007150:	d020      	beq.n	8007194 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f003 0308 	and.w	r3, r3, #8
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01b      	beq.n	8007194 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f06f 0208 	mvn.w	r2, #8
 8007164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2204      	movs	r2, #4
 800716a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	69db      	ldr	r3, [r3, #28]
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f961 	bl	8007442 <HAL_TIM_IC_CaptureCallback>
 8007180:	e005      	b.n	800718e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f953 	bl	800742e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f964 	bl	8007456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f003 0310 	and.w	r3, r3, #16
 800719a:	2b00      	cmp	r3, #0
 800719c:	d020      	beq.n	80071e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01b      	beq.n	80071e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f06f 0210 	mvn.w	r2, #16
 80071b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2208      	movs	r2, #8
 80071b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f93b 	bl	8007442 <HAL_TIM_IC_CaptureCallback>
 80071cc:	e005      	b.n	80071da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f92d 	bl	800742e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f93e 	bl	8007456 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00c      	beq.n	8007204 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d007      	beq.n	8007204 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f06f 0201 	mvn.w	r2, #1
 80071fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7f9 ff7c 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00c      	beq.n	8007228 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 faf2 	bl	800780c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00c      	beq.n	800724c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007238:	2b00      	cmp	r3, #0
 800723a:	d007      	beq.n	800724c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 faea 	bl	8007820 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00c      	beq.n	8007270 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800725c:	2b00      	cmp	r3, #0
 800725e:	d007      	beq.n	8007270 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f8fd 	bl	800746a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00c      	beq.n	8007294 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b00      	cmp	r3, #0
 8007282:	d007      	beq.n	8007294 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f06f 0220 	mvn.w	r2, #32
 800728c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fab2 	bl	80077f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007294:	bf00      	nop
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_TIM_ConfigClockSource+0x1c>
 80072b4:	2302      	movs	r3, #2
 80072b6:	e0b6      	b.n	8007426 <HAL_TIM_ConfigClockSource+0x18a>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f4:	d03e      	beq.n	8007374 <HAL_TIM_ConfigClockSource+0xd8>
 80072f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072fa:	f200 8087 	bhi.w	800740c <HAL_TIM_ConfigClockSource+0x170>
 80072fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007302:	f000 8086 	beq.w	8007412 <HAL_TIM_ConfigClockSource+0x176>
 8007306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800730a:	d87f      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x170>
 800730c:	2b70      	cmp	r3, #112	@ 0x70
 800730e:	d01a      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0xaa>
 8007310:	2b70      	cmp	r3, #112	@ 0x70
 8007312:	d87b      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x170>
 8007314:	2b60      	cmp	r3, #96	@ 0x60
 8007316:	d050      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x11e>
 8007318:	2b60      	cmp	r3, #96	@ 0x60
 800731a:	d877      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x170>
 800731c:	2b50      	cmp	r3, #80	@ 0x50
 800731e:	d03c      	beq.n	800739a <HAL_TIM_ConfigClockSource+0xfe>
 8007320:	2b50      	cmp	r3, #80	@ 0x50
 8007322:	d873      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x170>
 8007324:	2b40      	cmp	r3, #64	@ 0x40
 8007326:	d058      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x13e>
 8007328:	2b40      	cmp	r3, #64	@ 0x40
 800732a:	d86f      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x170>
 800732c:	2b30      	cmp	r3, #48	@ 0x30
 800732e:	d064      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x15e>
 8007330:	2b30      	cmp	r3, #48	@ 0x30
 8007332:	d86b      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x170>
 8007334:	2b20      	cmp	r3, #32
 8007336:	d060      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x15e>
 8007338:	2b20      	cmp	r3, #32
 800733a:	d867      	bhi.n	800740c <HAL_TIM_ConfigClockSource+0x170>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d05c      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x15e>
 8007340:	2b10      	cmp	r3, #16
 8007342:	d05a      	beq.n	80073fa <HAL_TIM_ConfigClockSource+0x15e>
 8007344:	e062      	b.n	800740c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007356:	f000 f9a7 	bl	80076a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007368:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	609a      	str	r2, [r3, #8]
      break;
 8007372:	e04f      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007384:	f000 f990 	bl	80076a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007396:	609a      	str	r2, [r3, #8]
      break;
 8007398:	e03c      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a6:	461a      	mov	r2, r3
 80073a8:	f000 f904 	bl	80075b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2150      	movs	r1, #80	@ 0x50
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 f95d 	bl	8007672 <TIM_ITRx_SetConfig>
      break;
 80073b8:	e02c      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073c6:	461a      	mov	r2, r3
 80073c8:	f000 f923 	bl	8007612 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2160      	movs	r1, #96	@ 0x60
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 f94d 	bl	8007672 <TIM_ITRx_SetConfig>
      break;
 80073d8:	e01c      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e6:	461a      	mov	r2, r3
 80073e8:	f000 f8e4 	bl	80075b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2140      	movs	r1, #64	@ 0x40
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 f93d 	bl	8007672 <TIM_ITRx_SetConfig>
      break;
 80073f8:	e00c      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4619      	mov	r1, r3
 8007404:	4610      	mov	r0, r2
 8007406:	f000 f934 	bl	8007672 <TIM_ITRx_SetConfig>
      break;
 800740a:	e003      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	73fb      	strb	r3, [r7, #15]
      break;
 8007410:	e000      	b.n	8007414 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007412:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007424:	7bfb      	ldrb	r3, [r7, #15]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3710      	adds	r7, #16
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800745e:	bf00      	nop
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
	...

08007480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a40      	ldr	r2, [pc, #256]	@ (8007594 <TIM_Base_SetConfig+0x114>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d013      	beq.n	80074c0 <TIM_Base_SetConfig+0x40>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800749e:	d00f      	beq.n	80074c0 <TIM_Base_SetConfig+0x40>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a3d      	ldr	r2, [pc, #244]	@ (8007598 <TIM_Base_SetConfig+0x118>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d00b      	beq.n	80074c0 <TIM_Base_SetConfig+0x40>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a3c      	ldr	r2, [pc, #240]	@ (800759c <TIM_Base_SetConfig+0x11c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d007      	beq.n	80074c0 <TIM_Base_SetConfig+0x40>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a3b      	ldr	r2, [pc, #236]	@ (80075a0 <TIM_Base_SetConfig+0x120>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d003      	beq.n	80074c0 <TIM_Base_SetConfig+0x40>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a3a      	ldr	r2, [pc, #232]	@ (80075a4 <TIM_Base_SetConfig+0x124>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d108      	bne.n	80074d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a2f      	ldr	r2, [pc, #188]	@ (8007594 <TIM_Base_SetConfig+0x114>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d01f      	beq.n	800751a <TIM_Base_SetConfig+0x9a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074e0:	d01b      	beq.n	800751a <TIM_Base_SetConfig+0x9a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007598 <TIM_Base_SetConfig+0x118>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d017      	beq.n	800751a <TIM_Base_SetConfig+0x9a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a2b      	ldr	r2, [pc, #172]	@ (800759c <TIM_Base_SetConfig+0x11c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d013      	beq.n	800751a <TIM_Base_SetConfig+0x9a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a2a      	ldr	r2, [pc, #168]	@ (80075a0 <TIM_Base_SetConfig+0x120>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d00f      	beq.n	800751a <TIM_Base_SetConfig+0x9a>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a29      	ldr	r2, [pc, #164]	@ (80075a4 <TIM_Base_SetConfig+0x124>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d00b      	beq.n	800751a <TIM_Base_SetConfig+0x9a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a28      	ldr	r2, [pc, #160]	@ (80075a8 <TIM_Base_SetConfig+0x128>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d007      	beq.n	800751a <TIM_Base_SetConfig+0x9a>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a27      	ldr	r2, [pc, #156]	@ (80075ac <TIM_Base_SetConfig+0x12c>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d003      	beq.n	800751a <TIM_Base_SetConfig+0x9a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a26      	ldr	r2, [pc, #152]	@ (80075b0 <TIM_Base_SetConfig+0x130>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d108      	bne.n	800752c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	695b      	ldr	r3, [r3, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	689a      	ldr	r2, [r3, #8]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a10      	ldr	r2, [pc, #64]	@ (8007594 <TIM_Base_SetConfig+0x114>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d00f      	beq.n	8007578 <TIM_Base_SetConfig+0xf8>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a12      	ldr	r2, [pc, #72]	@ (80075a4 <TIM_Base_SetConfig+0x124>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00b      	beq.n	8007578 <TIM_Base_SetConfig+0xf8>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a11      	ldr	r2, [pc, #68]	@ (80075a8 <TIM_Base_SetConfig+0x128>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d007      	beq.n	8007578 <TIM_Base_SetConfig+0xf8>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a10      	ldr	r2, [pc, #64]	@ (80075ac <TIM_Base_SetConfig+0x12c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d003      	beq.n	8007578 <TIM_Base_SetConfig+0xf8>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a0f      	ldr	r2, [pc, #60]	@ (80075b0 <TIM_Base_SetConfig+0x130>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d103      	bne.n	8007580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	615a      	str	r2, [r3, #20]
}
 8007586:	bf00      	nop
 8007588:	3714      	adds	r7, #20
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	40012c00 	.word	0x40012c00
 8007598:	40000400 	.word	0x40000400
 800759c:	40000800 	.word	0x40000800
 80075a0:	40000c00 	.word	0x40000c00
 80075a4:	40013400 	.word	0x40013400
 80075a8:	40014000 	.word	0x40014000
 80075ac:	40014400 	.word	0x40014400
 80075b0:	40014800 	.word	0x40014800

080075b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f023 0201 	bic.w	r2, r3, #1
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f023 030a 	bic.w	r3, r3, #10
 80075f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	621a      	str	r2, [r3, #32]
}
 8007606:	bf00      	nop
 8007608:	371c      	adds	r7, #28
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007612:	b480      	push	{r7}
 8007614:	b087      	sub	sp, #28
 8007616:	af00      	add	r7, sp, #0
 8007618:	60f8      	str	r0, [r7, #12]
 800761a:	60b9      	str	r1, [r7, #8]
 800761c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	f023 0210 	bic.w	r2, r3, #16
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800763c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	031b      	lsls	r3, r3, #12
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	4313      	orrs	r3, r2
 8007646:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800764e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	4313      	orrs	r3, r2
 8007658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	621a      	str	r2, [r3, #32]
}
 8007666:	bf00      	nop
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007672:	b480      	push	{r7}
 8007674:	b085      	sub	sp, #20
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4313      	orrs	r3, r2
 8007690:	f043 0307 	orr.w	r3, r3, #7
 8007694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	609a      	str	r2, [r3, #8]
}
 800769c:	bf00      	nop
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	021a      	lsls	r2, r3, #8
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	431a      	orrs	r2, r3
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	609a      	str	r2, [r3, #8]
}
 80076dc:	bf00      	nop
 80076de:	371c      	adds	r7, #28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d101      	bne.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076fc:	2302      	movs	r3, #2
 80076fe:	e068      	b.n	80077d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a2e      	ldr	r2, [pc, #184]	@ (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d004      	beq.n	8007734 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a2d      	ldr	r2, [pc, #180]	@ (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d108      	bne.n	8007746 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800773a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800774c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	4313      	orrs	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1e      	ldr	r2, [pc, #120]	@ (80077e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d01d      	beq.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007772:	d018      	beq.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1b      	ldr	r2, [pc, #108]	@ (80077e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d013      	beq.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1a      	ldr	r2, [pc, #104]	@ (80077ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00e      	beq.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a18      	ldr	r2, [pc, #96]	@ (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d009      	beq.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a13      	ldr	r2, [pc, #76]	@ (80077e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d004      	beq.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a14      	ldr	r2, [pc, #80]	@ (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d10c      	bne.n	80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	40012c00 	.word	0x40012c00
 80077e4:	40013400 	.word	0x40013400
 80077e8:	40000400 	.word	0x40000400
 80077ec:	40000800 	.word	0x40000800
 80077f0:	40000c00 	.word	0x40000c00
 80077f4:	40014000 	.word	0x40014000

080077f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e042      	b.n	80078cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800784c:	2b00      	cmp	r3, #0
 800784e:	d106      	bne.n	800785e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fa f8c3 	bl	80019e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2224      	movs	r2, #36	@ 0x24
 8007862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0201 	bic.w	r2, r2, #1
 8007874:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 ff42 	bl	8008708 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fc43 	bl	8008110 <UART_SetConfig>
 800788a:	4603      	mov	r3, r0
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e01b      	b.n	80078cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685a      	ldr	r2, [r3, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80078a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80078b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0201 	orr.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 ffc1 	bl	800884c <UART_CheckIdleState>
 80078ca:	4603      	mov	r3, r0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b08a      	sub	sp, #40	@ 0x28
 80078d8:	af02      	add	r7, sp, #8
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	4613      	mov	r3, r2
 80078e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ea:	2b20      	cmp	r3, #32
 80078ec:	d17b      	bne.n	80079e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <HAL_UART_Transmit+0x26>
 80078f4:	88fb      	ldrh	r3, [r7, #6]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e074      	b.n	80079e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2221      	movs	r2, #33	@ 0x21
 800790a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800790e:	f7fa f9a9 	bl	8001c64 <HAL_GetTick>
 8007912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	88fa      	ldrh	r2, [r7, #6]
 8007918:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	88fa      	ldrh	r2, [r7, #6]
 8007920:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800792c:	d108      	bne.n	8007940 <HAL_UART_Transmit+0x6c>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007936:	2300      	movs	r3, #0
 8007938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	e003      	b.n	8007948 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007944:	2300      	movs	r3, #0
 8007946:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007948:	e030      	b.n	80079ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	2200      	movs	r2, #0
 8007952:	2180      	movs	r1, #128	@ 0x80
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f001 f823 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d005      	beq.n	800796c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e03d      	b.n	80079e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10b      	bne.n	800798a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	881a      	ldrh	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800797e:	b292      	uxth	r2, r2
 8007980:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	3302      	adds	r3, #2
 8007986:	61bb      	str	r3, [r7, #24]
 8007988:	e007      	b.n	800799a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	3301      	adds	r3, #1
 8007998:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1c8      	bne.n	800794a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2200      	movs	r2, #0
 80079c0:	2140      	movs	r1, #64	@ 0x40
 80079c2:	68f8      	ldr	r0, [r7, #12]
 80079c4:	f000 ffec 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d005      	beq.n	80079da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e006      	b.n	80079e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2220      	movs	r2, #32
 80079de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	e000      	b.n	80079e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80079e6:	2302      	movs	r3, #2
  }
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3720      	adds	r7, #32
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08a      	sub	sp, #40	@ 0x28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a04:	2b20      	cmp	r3, #32
 8007a06:	d137      	bne.n	8007a78 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d002      	beq.n	8007a14 <HAL_UART_Receive_IT+0x24>
 8007a0e:	88fb      	ldrh	r3, [r7, #6]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e030      	b.n	8007a7a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a18      	ldr	r2, [pc, #96]	@ (8007a84 <HAL_UART_Receive_IT+0x94>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d01f      	beq.n	8007a68 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d018      	beq.n	8007a68 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	613b      	str	r3, [r7, #16]
   return(result);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	461a      	mov	r2, r3
 8007a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a54:	623b      	str	r3, [r7, #32]
 8007a56:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	69f9      	ldr	r1, [r7, #28]
 8007a5a:	6a3a      	ldr	r2, [r7, #32]
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e6      	bne.n	8007a36 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a68:	88fb      	ldrh	r3, [r7, #6]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f000 fffe 	bl	8008a70 <UART_Start_Receive_IT>
 8007a74:	4603      	mov	r3, r0
 8007a76:	e000      	b.n	8007a7a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007a78:	2302      	movs	r3, #2
  }
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3728      	adds	r7, #40	@ 0x28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	40008000 	.word	0x40008000

08007a88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b0ba      	sub	sp, #232	@ 0xe8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689b      	ldr	r3, [r3, #8]
 8007aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007aae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007ab2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007abc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d11b      	bne.n	8007afc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d015      	beq.n	8007afc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ad4:	f003 0320 	and.w	r3, r3, #32
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d105      	bne.n	8007ae8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d009      	beq.n	8007afc <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 82e3 	beq.w	80080b8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	4798      	blx	r3
      }
      return;
 8007afa:	e2dd      	b.n	80080b8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8007afc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 8123 	beq.w	8007d4c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007b0a:	4b8d      	ldr	r3, [pc, #564]	@ (8007d40 <HAL_UART_IRQHandler+0x2b8>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d106      	bne.n	8007b20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007b12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007b16:	4b8b      	ldr	r3, [pc, #556]	@ (8007d44 <HAL_UART_IRQHandler+0x2bc>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	f000 8116 	beq.w	8007d4c <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d011      	beq.n	8007b50 <HAL_UART_IRQHandler+0xc8>
 8007b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00b      	beq.n	8007b50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b46:	f043 0201 	orr.w	r2, r3, #1
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d011      	beq.n	8007b80 <HAL_UART_IRQHandler+0xf8>
 8007b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b76:	f043 0204 	orr.w	r2, r3, #4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d011      	beq.n	8007bb0 <HAL_UART_IRQHandler+0x128>
 8007b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2204      	movs	r2, #4
 8007b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ba6:	f043 0202 	orr.w	r2, r3, #2
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d017      	beq.n	8007bec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d105      	bne.n	8007bd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007bc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007bcc:	4b5c      	ldr	r3, [pc, #368]	@ (8007d40 <HAL_UART_IRQHandler+0x2b8>)
 8007bce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	2208      	movs	r2, #8
 8007bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be2:	f043 0208 	orr.w	r2, r3, #8
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d012      	beq.n	8007c1e <HAL_UART_IRQHandler+0x196>
 8007bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bfc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00c      	beq.n	8007c1e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c14:	f043 0220 	orr.w	r2, r3, #32
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8249 	beq.w	80080bc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d013      	beq.n	8007c5e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d105      	bne.n	8007c4e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d007      	beq.n	8007c5e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c72:	2b40      	cmp	r3, #64	@ 0x40
 8007c74:	d005      	beq.n	8007c82 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007c7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d054      	beq.n	8007d2c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 f816 	bl	8008cb4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c92:	2b40      	cmp	r3, #64	@ 0x40
 8007c94:	d146      	bne.n	8007d24 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3308      	adds	r3, #8
 8007c9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007cc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007cce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1d9      	bne.n	8007c96 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d017      	beq.n	8007d1c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cf2:	4a15      	ldr	r2, [pc, #84]	@ (8007d48 <HAL_UART_IRQHandler+0x2c0>)
 8007cf4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7fb fe4c 	bl	800399a <HAL_DMA_Abort_IT>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d019      	beq.n	8007d3c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007d16:	4610      	mov	r0, r2
 8007d18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d1a:	e00f      	b.n	8007d3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f9e1 	bl	80080e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d22:	e00b      	b.n	8007d3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f9dd 	bl	80080e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d2a:	e007      	b.n	8007d3c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f9d9 	bl	80080e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007d3a:	e1bf      	b.n	80080bc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d3c:	bf00      	nop
    return;
 8007d3e:	e1bd      	b.n	80080bc <HAL_UART_IRQHandler+0x634>
 8007d40:	10000001 	.word	0x10000001
 8007d44:	04000120 	.word	0x04000120
 8007d48:	08008d81 	.word	0x08008d81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	f040 8153 	bne.w	8007ffc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d5a:	f003 0310 	and.w	r3, r3, #16
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 814c 	beq.w	8007ffc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d68:	f003 0310 	and.w	r3, r3, #16
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 8145 	beq.w	8007ffc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2210      	movs	r2, #16
 8007d78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d84:	2b40      	cmp	r3, #64	@ 0x40
 8007d86:	f040 80bb 	bne.w	8007f00 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 818f 	beq.w	80080c0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007da8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dac:	429a      	cmp	r2, r3
 8007dae:	f080 8187 	bcs.w	80080c0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007db8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0320 	and.w	r3, r3, #32
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f040 8087 	bne.w	8007ede <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	461a      	mov	r2, r3
 8007df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007dfe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1da      	bne.n	8007dd0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	3308      	adds	r3, #8
 8007e20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e24:	e853 3f00 	ldrex	r3, [r3]
 8007e28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e2c:	f023 0301 	bic.w	r3, r3, #1
 8007e30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3308      	adds	r3, #8
 8007e3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e1      	bne.n	8007e1a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007e60:	e853 3f00 	ldrex	r3, [r3]
 8007e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007e66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007e68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3308      	adds	r3, #8
 8007e76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007e7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007e7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007e88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e3      	bne.n	8007e56 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2220      	movs	r2, #32
 8007e92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007eaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eac:	f023 0310 	bic.w	r3, r3, #16
 8007eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ebe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ec0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ec4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ecc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e4      	bne.n	8007e9c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fb fd02 	bl	80038e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f8fd 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007efe:	e0df      	b.n	80080c0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 80d1 	beq.w	80080c4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007f22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 80cc 	beq.w	80080c4 <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	461a      	mov	r2, r3
 8007f4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f50:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f56:	e841 2300 	strex	r3, r2, [r1]
 8007f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1e4      	bne.n	8007f2c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3308      	adds	r3, #8
 8007f68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	623b      	str	r3, [r7, #32]
   return(result);
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f78:	f023 0301 	bic.w	r3, r3, #1
 8007f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3308      	adds	r3, #8
 8007f86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007f8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f92:	e841 2300 	strex	r3, r2, [r1]
 8007f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1e1      	bne.n	8007f62 <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f023 0310 	bic.w	r3, r3, #16
 8007fc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007fd4:	61fb      	str	r3, [r7, #28]
 8007fd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd8:	69b9      	ldr	r1, [r7, #24]
 8007fda:	69fa      	ldr	r2, [r7, #28]
 8007fdc:	e841 2300 	strex	r3, r2, [r1]
 8007fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1e4      	bne.n	8007fb2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f87f 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ffa:	e063      	b.n	80080c4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008000:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00e      	beq.n	8008026 <HAL_UART_IRQHandler+0x59e>
 8008008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800800c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800801c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 fc14 	bl	800984c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008024:	e051      	b.n	80080ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800802a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800802e:	2b00      	cmp	r3, #0
 8008030:	d014      	beq.n	800805c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800803a:	2b00      	cmp	r3, #0
 800803c:	d105      	bne.n	800804a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800803e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d008      	beq.n	800805c <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800804e:	2b00      	cmp	r3, #0
 8008050:	d03a      	beq.n	80080c8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
    }
    return;
 800805a:	e035      	b.n	80080c8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800805c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008064:	2b00      	cmp	r3, #0
 8008066:	d009      	beq.n	800807c <HAL_UART_IRQHandler+0x5f4>
 8008068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800806c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008070:	2b00      	cmp	r3, #0
 8008072:	d003      	beq.n	800807c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fe99 	bl	8008dac <UART_EndTransmit_IT>
    return;
 800807a:	e026      	b.n	80080ca <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800807c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008080:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d009      	beq.n	800809c <HAL_UART_IRQHandler+0x614>
 8008088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800808c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f001 fbed 	bl	8009874 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800809a:	e016      	b.n	80080ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800809c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d010      	beq.n	80080ca <HAL_UART_IRQHandler+0x642>
 80080a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	da0c      	bge.n	80080ca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 fbd5 	bl	8009860 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080b6:	e008      	b.n	80080ca <HAL_UART_IRQHandler+0x642>
      return;
 80080b8:	bf00      	nop
 80080ba:	e006      	b.n	80080ca <HAL_UART_IRQHandler+0x642>
    return;
 80080bc:	bf00      	nop
 80080be:	e004      	b.n	80080ca <HAL_UART_IRQHandler+0x642>
      return;
 80080c0:	bf00      	nop
 80080c2:	e002      	b.n	80080ca <HAL_UART_IRQHandler+0x642>
      return;
 80080c4:	bf00      	nop
 80080c6:	e000      	b.n	80080ca <HAL_UART_IRQHandler+0x642>
    return;
 80080c8:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80080ca:	37e8      	adds	r7, #232	@ 0xe8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008114:	b08c      	sub	sp, #48	@ 0x30
 8008116:	af00      	add	r7, sp, #0
 8008118:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	689a      	ldr	r2, [r3, #8]
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	431a      	orrs	r2, r3
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	431a      	orrs	r2, r3
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	4313      	orrs	r3, r2
 8008136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	4baa      	ldr	r3, [pc, #680]	@ (80083e8 <UART_SetConfig+0x2d8>)
 8008140:	4013      	ands	r3, r2
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	6812      	ldr	r2, [r2, #0]
 8008146:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008148:	430b      	orrs	r3, r1
 800814a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	430a      	orrs	r2, r1
 8008160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a9f      	ldr	r2, [pc, #636]	@ (80083ec <UART_SetConfig+0x2dc>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d004      	beq.n	800817c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008178:	4313      	orrs	r3, r2
 800817a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008186:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	6812      	ldr	r2, [r2, #0]
 800818e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008190:	430b      	orrs	r3, r1
 8008192:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819a:	f023 010f 	bic.w	r1, r3, #15
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a90      	ldr	r2, [pc, #576]	@ (80083f0 <UART_SetConfig+0x2e0>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d125      	bne.n	8008200 <UART_SetConfig+0xf0>
 80081b4:	4b8f      	ldr	r3, [pc, #572]	@ (80083f4 <UART_SetConfig+0x2e4>)
 80081b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d81a      	bhi.n	80081f8 <UART_SetConfig+0xe8>
 80081c2:	a201      	add	r2, pc, #4	@ (adr r2, 80081c8 <UART_SetConfig+0xb8>)
 80081c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c8:	080081d9 	.word	0x080081d9
 80081cc:	080081e9 	.word	0x080081e9
 80081d0:	080081e1 	.word	0x080081e1
 80081d4:	080081f1 	.word	0x080081f1
 80081d8:	2301      	movs	r3, #1
 80081da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081de:	e116      	b.n	800840e <UART_SetConfig+0x2fe>
 80081e0:	2302      	movs	r3, #2
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081e6:	e112      	b.n	800840e <UART_SetConfig+0x2fe>
 80081e8:	2304      	movs	r3, #4
 80081ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ee:	e10e      	b.n	800840e <UART_SetConfig+0x2fe>
 80081f0:	2308      	movs	r3, #8
 80081f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081f6:	e10a      	b.n	800840e <UART_SetConfig+0x2fe>
 80081f8:	2310      	movs	r3, #16
 80081fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081fe:	e106      	b.n	800840e <UART_SetConfig+0x2fe>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a7c      	ldr	r2, [pc, #496]	@ (80083f8 <UART_SetConfig+0x2e8>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d138      	bne.n	800827c <UART_SetConfig+0x16c>
 800820a:	4b7a      	ldr	r3, [pc, #488]	@ (80083f4 <UART_SetConfig+0x2e4>)
 800820c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008210:	f003 030c 	and.w	r3, r3, #12
 8008214:	2b0c      	cmp	r3, #12
 8008216:	d82d      	bhi.n	8008274 <UART_SetConfig+0x164>
 8008218:	a201      	add	r2, pc, #4	@ (adr r2, 8008220 <UART_SetConfig+0x110>)
 800821a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821e:	bf00      	nop
 8008220:	08008255 	.word	0x08008255
 8008224:	08008275 	.word	0x08008275
 8008228:	08008275 	.word	0x08008275
 800822c:	08008275 	.word	0x08008275
 8008230:	08008265 	.word	0x08008265
 8008234:	08008275 	.word	0x08008275
 8008238:	08008275 	.word	0x08008275
 800823c:	08008275 	.word	0x08008275
 8008240:	0800825d 	.word	0x0800825d
 8008244:	08008275 	.word	0x08008275
 8008248:	08008275 	.word	0x08008275
 800824c:	08008275 	.word	0x08008275
 8008250:	0800826d 	.word	0x0800826d
 8008254:	2300      	movs	r3, #0
 8008256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800825a:	e0d8      	b.n	800840e <UART_SetConfig+0x2fe>
 800825c:	2302      	movs	r3, #2
 800825e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008262:	e0d4      	b.n	800840e <UART_SetConfig+0x2fe>
 8008264:	2304      	movs	r3, #4
 8008266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800826a:	e0d0      	b.n	800840e <UART_SetConfig+0x2fe>
 800826c:	2308      	movs	r3, #8
 800826e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008272:	e0cc      	b.n	800840e <UART_SetConfig+0x2fe>
 8008274:	2310      	movs	r3, #16
 8008276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800827a:	e0c8      	b.n	800840e <UART_SetConfig+0x2fe>
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a5e      	ldr	r2, [pc, #376]	@ (80083fc <UART_SetConfig+0x2ec>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d125      	bne.n	80082d2 <UART_SetConfig+0x1c2>
 8008286:	4b5b      	ldr	r3, [pc, #364]	@ (80083f4 <UART_SetConfig+0x2e4>)
 8008288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800828c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008290:	2b30      	cmp	r3, #48	@ 0x30
 8008292:	d016      	beq.n	80082c2 <UART_SetConfig+0x1b2>
 8008294:	2b30      	cmp	r3, #48	@ 0x30
 8008296:	d818      	bhi.n	80082ca <UART_SetConfig+0x1ba>
 8008298:	2b20      	cmp	r3, #32
 800829a:	d00a      	beq.n	80082b2 <UART_SetConfig+0x1a2>
 800829c:	2b20      	cmp	r3, #32
 800829e:	d814      	bhi.n	80082ca <UART_SetConfig+0x1ba>
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <UART_SetConfig+0x19a>
 80082a4:	2b10      	cmp	r3, #16
 80082a6:	d008      	beq.n	80082ba <UART_SetConfig+0x1aa>
 80082a8:	e00f      	b.n	80082ca <UART_SetConfig+0x1ba>
 80082aa:	2300      	movs	r3, #0
 80082ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082b0:	e0ad      	b.n	800840e <UART_SetConfig+0x2fe>
 80082b2:	2302      	movs	r3, #2
 80082b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082b8:	e0a9      	b.n	800840e <UART_SetConfig+0x2fe>
 80082ba:	2304      	movs	r3, #4
 80082bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082c0:	e0a5      	b.n	800840e <UART_SetConfig+0x2fe>
 80082c2:	2308      	movs	r3, #8
 80082c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082c8:	e0a1      	b.n	800840e <UART_SetConfig+0x2fe>
 80082ca:	2310      	movs	r3, #16
 80082cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082d0:	e09d      	b.n	800840e <UART_SetConfig+0x2fe>
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a4a      	ldr	r2, [pc, #296]	@ (8008400 <UART_SetConfig+0x2f0>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d125      	bne.n	8008328 <UART_SetConfig+0x218>
 80082dc:	4b45      	ldr	r3, [pc, #276]	@ (80083f4 <UART_SetConfig+0x2e4>)
 80082de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80082e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80082e8:	d016      	beq.n	8008318 <UART_SetConfig+0x208>
 80082ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80082ec:	d818      	bhi.n	8008320 <UART_SetConfig+0x210>
 80082ee:	2b80      	cmp	r3, #128	@ 0x80
 80082f0:	d00a      	beq.n	8008308 <UART_SetConfig+0x1f8>
 80082f2:	2b80      	cmp	r3, #128	@ 0x80
 80082f4:	d814      	bhi.n	8008320 <UART_SetConfig+0x210>
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <UART_SetConfig+0x1f0>
 80082fa:	2b40      	cmp	r3, #64	@ 0x40
 80082fc:	d008      	beq.n	8008310 <UART_SetConfig+0x200>
 80082fe:	e00f      	b.n	8008320 <UART_SetConfig+0x210>
 8008300:	2300      	movs	r3, #0
 8008302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008306:	e082      	b.n	800840e <UART_SetConfig+0x2fe>
 8008308:	2302      	movs	r3, #2
 800830a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800830e:	e07e      	b.n	800840e <UART_SetConfig+0x2fe>
 8008310:	2304      	movs	r3, #4
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008316:	e07a      	b.n	800840e <UART_SetConfig+0x2fe>
 8008318:	2308      	movs	r3, #8
 800831a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800831e:	e076      	b.n	800840e <UART_SetConfig+0x2fe>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008326:	e072      	b.n	800840e <UART_SetConfig+0x2fe>
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a35      	ldr	r2, [pc, #212]	@ (8008404 <UART_SetConfig+0x2f4>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d12a      	bne.n	8008388 <UART_SetConfig+0x278>
 8008332:	4b30      	ldr	r3, [pc, #192]	@ (80083f4 <UART_SetConfig+0x2e4>)
 8008334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008338:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800833c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008340:	d01a      	beq.n	8008378 <UART_SetConfig+0x268>
 8008342:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008346:	d81b      	bhi.n	8008380 <UART_SetConfig+0x270>
 8008348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800834c:	d00c      	beq.n	8008368 <UART_SetConfig+0x258>
 800834e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008352:	d815      	bhi.n	8008380 <UART_SetConfig+0x270>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <UART_SetConfig+0x250>
 8008358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800835c:	d008      	beq.n	8008370 <UART_SetConfig+0x260>
 800835e:	e00f      	b.n	8008380 <UART_SetConfig+0x270>
 8008360:	2300      	movs	r3, #0
 8008362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008366:	e052      	b.n	800840e <UART_SetConfig+0x2fe>
 8008368:	2302      	movs	r3, #2
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800836e:	e04e      	b.n	800840e <UART_SetConfig+0x2fe>
 8008370:	2304      	movs	r3, #4
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008376:	e04a      	b.n	800840e <UART_SetConfig+0x2fe>
 8008378:	2308      	movs	r3, #8
 800837a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800837e:	e046      	b.n	800840e <UART_SetConfig+0x2fe>
 8008380:	2310      	movs	r3, #16
 8008382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008386:	e042      	b.n	800840e <UART_SetConfig+0x2fe>
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a17      	ldr	r2, [pc, #92]	@ (80083ec <UART_SetConfig+0x2dc>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d13a      	bne.n	8008408 <UART_SetConfig+0x2f8>
 8008392:	4b18      	ldr	r3, [pc, #96]	@ (80083f4 <UART_SetConfig+0x2e4>)
 8008394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008398:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800839c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083a0:	d01a      	beq.n	80083d8 <UART_SetConfig+0x2c8>
 80083a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083a6:	d81b      	bhi.n	80083e0 <UART_SetConfig+0x2d0>
 80083a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083ac:	d00c      	beq.n	80083c8 <UART_SetConfig+0x2b8>
 80083ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083b2:	d815      	bhi.n	80083e0 <UART_SetConfig+0x2d0>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <UART_SetConfig+0x2b0>
 80083b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083bc:	d008      	beq.n	80083d0 <UART_SetConfig+0x2c0>
 80083be:	e00f      	b.n	80083e0 <UART_SetConfig+0x2d0>
 80083c0:	2300      	movs	r3, #0
 80083c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083c6:	e022      	b.n	800840e <UART_SetConfig+0x2fe>
 80083c8:	2302      	movs	r3, #2
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ce:	e01e      	b.n	800840e <UART_SetConfig+0x2fe>
 80083d0:	2304      	movs	r3, #4
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083d6:	e01a      	b.n	800840e <UART_SetConfig+0x2fe>
 80083d8:	2308      	movs	r3, #8
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083de:	e016      	b.n	800840e <UART_SetConfig+0x2fe>
 80083e0:	2310      	movs	r3, #16
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083e6:	e012      	b.n	800840e <UART_SetConfig+0x2fe>
 80083e8:	cfff69f3 	.word	0xcfff69f3
 80083ec:	40008000 	.word	0x40008000
 80083f0:	40013800 	.word	0x40013800
 80083f4:	40021000 	.word	0x40021000
 80083f8:	40004400 	.word	0x40004400
 80083fc:	40004800 	.word	0x40004800
 8008400:	40004c00 	.word	0x40004c00
 8008404:	40005000 	.word	0x40005000
 8008408:	2310      	movs	r3, #16
 800840a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4aae      	ldr	r2, [pc, #696]	@ (80086cc <UART_SetConfig+0x5bc>)
 8008414:	4293      	cmp	r3, r2
 8008416:	f040 8097 	bne.w	8008548 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800841a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800841e:	2b08      	cmp	r3, #8
 8008420:	d823      	bhi.n	800846a <UART_SetConfig+0x35a>
 8008422:	a201      	add	r2, pc, #4	@ (adr r2, 8008428 <UART_SetConfig+0x318>)
 8008424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008428:	0800844d 	.word	0x0800844d
 800842c:	0800846b 	.word	0x0800846b
 8008430:	08008455 	.word	0x08008455
 8008434:	0800846b 	.word	0x0800846b
 8008438:	0800845b 	.word	0x0800845b
 800843c:	0800846b 	.word	0x0800846b
 8008440:	0800846b 	.word	0x0800846b
 8008444:	0800846b 	.word	0x0800846b
 8008448:	08008463 	.word	0x08008463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800844c:	f7fd fef0 	bl	8006230 <HAL_RCC_GetPCLK1Freq>
 8008450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008452:	e010      	b.n	8008476 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008454:	4b9e      	ldr	r3, [pc, #632]	@ (80086d0 <UART_SetConfig+0x5c0>)
 8008456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008458:	e00d      	b.n	8008476 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800845a:	f7fd fe51 	bl	8006100 <HAL_RCC_GetSysClockFreq>
 800845e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008460:	e009      	b.n	8008476 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008468:	e005      	b.n	8008476 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008474:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008478:	2b00      	cmp	r3, #0
 800847a:	f000 8130 	beq.w	80086de <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008482:	4a94      	ldr	r2, [pc, #592]	@ (80086d4 <UART_SetConfig+0x5c4>)
 8008484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008488:	461a      	mov	r2, r3
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008490:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	4613      	mov	r3, r2
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	4413      	add	r3, r2
 800849c:	69ba      	ldr	r2, [r7, #24]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d305      	bcc.n	80084ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d903      	bls.n	80084b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80084b4:	e113      	b.n	80086de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	2200      	movs	r2, #0
 80084ba:	60bb      	str	r3, [r7, #8]
 80084bc:	60fa      	str	r2, [r7, #12]
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084c2:	4a84      	ldr	r2, [pc, #528]	@ (80086d4 <UART_SetConfig+0x5c4>)
 80084c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	2200      	movs	r2, #0
 80084cc:	603b      	str	r3, [r7, #0]
 80084ce:	607a      	str	r2, [r7, #4]
 80084d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084d8:	f7f7 fe90 	bl	80001fc <__aeabi_uldivmod>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4610      	mov	r0, r2
 80084e2:	4619      	mov	r1, r3
 80084e4:	f04f 0200 	mov.w	r2, #0
 80084e8:	f04f 0300 	mov.w	r3, #0
 80084ec:	020b      	lsls	r3, r1, #8
 80084ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084f2:	0202      	lsls	r2, r0, #8
 80084f4:	6979      	ldr	r1, [r7, #20]
 80084f6:	6849      	ldr	r1, [r1, #4]
 80084f8:	0849      	lsrs	r1, r1, #1
 80084fa:	2000      	movs	r0, #0
 80084fc:	460c      	mov	r4, r1
 80084fe:	4605      	mov	r5, r0
 8008500:	eb12 0804 	adds.w	r8, r2, r4
 8008504:	eb43 0905 	adc.w	r9, r3, r5
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	469a      	mov	sl, r3
 8008510:	4693      	mov	fp, r2
 8008512:	4652      	mov	r2, sl
 8008514:	465b      	mov	r3, fp
 8008516:	4640      	mov	r0, r8
 8008518:	4649      	mov	r1, r9
 800851a:	f7f7 fe6f 	bl	80001fc <__aeabi_uldivmod>
 800851e:	4602      	mov	r2, r0
 8008520:	460b      	mov	r3, r1
 8008522:	4613      	mov	r3, r2
 8008524:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800852c:	d308      	bcc.n	8008540 <UART_SetConfig+0x430>
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008534:	d204      	bcs.n	8008540 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6a3a      	ldr	r2, [r7, #32]
 800853c:	60da      	str	r2, [r3, #12]
 800853e:	e0ce      	b.n	80086de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008546:	e0ca      	b.n	80086de <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008550:	d166      	bne.n	8008620 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008552:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008556:	2b08      	cmp	r3, #8
 8008558:	d827      	bhi.n	80085aa <UART_SetConfig+0x49a>
 800855a:	a201      	add	r2, pc, #4	@ (adr r2, 8008560 <UART_SetConfig+0x450>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	08008585 	.word	0x08008585
 8008564:	0800858d 	.word	0x0800858d
 8008568:	08008595 	.word	0x08008595
 800856c:	080085ab 	.word	0x080085ab
 8008570:	0800859b 	.word	0x0800859b
 8008574:	080085ab 	.word	0x080085ab
 8008578:	080085ab 	.word	0x080085ab
 800857c:	080085ab 	.word	0x080085ab
 8008580:	080085a3 	.word	0x080085a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008584:	f7fd fe54 	bl	8006230 <HAL_RCC_GetPCLK1Freq>
 8008588:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800858a:	e014      	b.n	80085b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800858c:	f7fd fe66 	bl	800625c <HAL_RCC_GetPCLK2Freq>
 8008590:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008592:	e010      	b.n	80085b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008594:	4b4e      	ldr	r3, [pc, #312]	@ (80086d0 <UART_SetConfig+0x5c0>)
 8008596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008598:	e00d      	b.n	80085b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800859a:	f7fd fdb1 	bl	8006100 <HAL_RCC_GetSysClockFreq>
 800859e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085a0:	e009      	b.n	80085b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085a8:	e005      	b.n	80085b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8090 	beq.w	80086de <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c2:	4a44      	ldr	r2, [pc, #272]	@ (80086d4 <UART_SetConfig+0x5c4>)
 80085c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085c8:	461a      	mov	r2, r3
 80085ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80085d0:	005a      	lsls	r2, r3, #1
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	085b      	lsrs	r3, r3, #1
 80085d8:	441a      	add	r2, r3
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	2b0f      	cmp	r3, #15
 80085e8:	d916      	bls.n	8008618 <UART_SetConfig+0x508>
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085f0:	d212      	bcs.n	8008618 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	f023 030f 	bic.w	r3, r3, #15
 80085fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085fc:	6a3b      	ldr	r3, [r7, #32]
 80085fe:	085b      	lsrs	r3, r3, #1
 8008600:	b29b      	uxth	r3, r3
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	b29a      	uxth	r2, r3
 8008608:	8bfb      	ldrh	r3, [r7, #30]
 800860a:	4313      	orrs	r3, r2
 800860c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	8bfa      	ldrh	r2, [r7, #30]
 8008614:	60da      	str	r2, [r3, #12]
 8008616:	e062      	b.n	80086de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800861e:	e05e      	b.n	80086de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008620:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008624:	2b08      	cmp	r3, #8
 8008626:	d828      	bhi.n	800867a <UART_SetConfig+0x56a>
 8008628:	a201      	add	r2, pc, #4	@ (adr r2, 8008630 <UART_SetConfig+0x520>)
 800862a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862e:	bf00      	nop
 8008630:	08008655 	.word	0x08008655
 8008634:	0800865d 	.word	0x0800865d
 8008638:	08008665 	.word	0x08008665
 800863c:	0800867b 	.word	0x0800867b
 8008640:	0800866b 	.word	0x0800866b
 8008644:	0800867b 	.word	0x0800867b
 8008648:	0800867b 	.word	0x0800867b
 800864c:	0800867b 	.word	0x0800867b
 8008650:	08008673 	.word	0x08008673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008654:	f7fd fdec 	bl	8006230 <HAL_RCC_GetPCLK1Freq>
 8008658:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800865a:	e014      	b.n	8008686 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800865c:	f7fd fdfe 	bl	800625c <HAL_RCC_GetPCLK2Freq>
 8008660:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008662:	e010      	b.n	8008686 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008664:	4b1a      	ldr	r3, [pc, #104]	@ (80086d0 <UART_SetConfig+0x5c0>)
 8008666:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008668:	e00d      	b.n	8008686 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800866a:	f7fd fd49 	bl	8006100 <HAL_RCC_GetSysClockFreq>
 800866e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008670:	e009      	b.n	8008686 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008676:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008678:	e005      	b.n	8008686 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008684:	bf00      	nop
    }

    if (pclk != 0U)
 8008686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008688:	2b00      	cmp	r3, #0
 800868a:	d028      	beq.n	80086de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008690:	4a10      	ldr	r2, [pc, #64]	@ (80086d4 <UART_SetConfig+0x5c4>)
 8008692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008696:	461a      	mov	r2, r3
 8008698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869a:	fbb3 f2f2 	udiv	r2, r3, r2
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	085b      	lsrs	r3, r3, #1
 80086a4:	441a      	add	r2, r3
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	2b0f      	cmp	r3, #15
 80086b4:	d910      	bls.n	80086d8 <UART_SetConfig+0x5c8>
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086bc:	d20c      	bcs.n	80086d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60da      	str	r2, [r3, #12]
 80086c8:	e009      	b.n	80086de <UART_SetConfig+0x5ce>
 80086ca:	bf00      	nop
 80086cc:	40008000 	.word	0x40008000
 80086d0:	00f42400 	.word	0x00f42400
 80086d4:	0800dd18 	.word	0x0800dd18
      }
      else
      {
        ret = HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2200      	movs	r2, #0
 80086f2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2200      	movs	r2, #0
 80086f8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80086fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3730      	adds	r7, #48	@ 0x30
 8008702:	46bd      	mov	sp, r7
 8008704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008708 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008714:	f003 0308 	and.w	r3, r3, #8
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00a      	beq.n	8008732 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008736:	f003 0301 	and.w	r3, r3, #1
 800873a:	2b00      	cmp	r3, #0
 800873c:	d00a      	beq.n	8008754 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008758:	f003 0302 	and.w	r3, r3, #2
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800879c:	f003 0310 	and.w	r3, r3, #16
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00a      	beq.n	80087ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	430a      	orrs	r2, r1
 80087b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087be:	f003 0320 	and.w	r3, r3, #32
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00a      	beq.n	80087dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d01a      	beq.n	800881e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	430a      	orrs	r2, r1
 80087fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008802:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008806:	d10a      	bne.n	800881e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	430a      	orrs	r2, r1
 800883e:	605a      	str	r2, [r3, #4]
  }
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b098      	sub	sp, #96	@ 0x60
 8008850:	af02      	add	r7, sp, #8
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800885c:	f7f9 fa02 	bl	8001c64 <HAL_GetTick>
 8008860:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0308 	and.w	r3, r3, #8
 800886c:	2b08      	cmp	r3, #8
 800886e:	d12f      	bne.n	80088d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008870:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008878:	2200      	movs	r2, #0
 800887a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 f88e 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d022      	beq.n	80088d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008892:	e853 3f00 	ldrex	r3, [r3]
 8008896:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800889a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800889e:	653b      	str	r3, [r7, #80]	@ 0x50
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	461a      	mov	r2, r3
 80088a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80088aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088b0:	e841 2300 	strex	r3, r2, [r1]
 80088b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e6      	bne.n	800888a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2220      	movs	r2, #32
 80088c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e063      	b.n	8008998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b04      	cmp	r3, #4
 80088dc:	d149      	bne.n	8008972 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088e6:	2200      	movs	r2, #0
 80088e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f857 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d03c      	beq.n	8008972 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	623b      	str	r3, [r7, #32]
   return(result);
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800890c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008916:	633b      	str	r3, [r7, #48]	@ 0x30
 8008918:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800891c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e6      	bne.n	80088f8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3308      	adds	r3, #8
 8008930:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	e853 3f00 	ldrex	r3, [r3]
 8008938:	60fb      	str	r3, [r7, #12]
   return(result);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f023 0301 	bic.w	r3, r3, #1
 8008940:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3308      	adds	r3, #8
 8008948:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800894a:	61fa      	str	r2, [r7, #28]
 800894c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	69b9      	ldr	r1, [r7, #24]
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	617b      	str	r3, [r7, #20]
   return(result);
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e5      	bne.n	800892a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e012      	b.n	8008998 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2220      	movs	r2, #32
 8008976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2220      	movs	r2, #32
 800897e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3758      	adds	r7, #88	@ 0x58
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	4613      	mov	r3, r2
 80089ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b0:	e049      	b.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089b8:	d045      	beq.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ba:	f7f9 f953 	bl	8001c64 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d302      	bcc.n	80089d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d101      	bne.n	80089d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e048      	b.n	8008a66 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d031      	beq.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69db      	ldr	r3, [r3, #28]
 80089e8:	f003 0308 	and.w	r3, r3, #8
 80089ec:	2b08      	cmp	r3, #8
 80089ee:	d110      	bne.n	8008a12 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2208      	movs	r2, #8
 80089f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 f95b 	bl	8008cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2208      	movs	r2, #8
 8008a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e029      	b.n	8008a66 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a20:	d111      	bne.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 f941 	bl	8008cb4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e00f      	b.n	8008a66 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	69da      	ldr	r2, [r3, #28]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	bf0c      	ite	eq
 8008a56:	2301      	moveq	r3, #1
 8008a58:	2300      	movne	r3, #0
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	79fb      	ldrb	r3, [r7, #7]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d0a6      	beq.n	80089b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b0a3      	sub	sp, #140	@ 0x8c
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	88fa      	ldrh	r2, [r7, #6]
 8008a88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	88fa      	ldrh	r2, [r7, #6]
 8008a90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aa2:	d10e      	bne.n	8008ac2 <UART_Start_Receive_IT+0x52>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d105      	bne.n	8008ab8 <UART_Start_Receive_IT+0x48>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008ab2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ab6:	e02d      	b.n	8008b14 <UART_Start_Receive_IT+0xa4>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	22ff      	movs	r2, #255	@ 0xff
 8008abc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ac0:	e028      	b.n	8008b14 <UART_Start_Receive_IT+0xa4>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10d      	bne.n	8008ae6 <UART_Start_Receive_IT+0x76>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d104      	bne.n	8008adc <UART_Start_Receive_IT+0x6c>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	22ff      	movs	r2, #255	@ 0xff
 8008ad6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ada:	e01b      	b.n	8008b14 <UART_Start_Receive_IT+0xa4>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	227f      	movs	r2, #127	@ 0x7f
 8008ae0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ae4:	e016      	b.n	8008b14 <UART_Start_Receive_IT+0xa4>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008aee:	d10d      	bne.n	8008b0c <UART_Start_Receive_IT+0x9c>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d104      	bne.n	8008b02 <UART_Start_Receive_IT+0x92>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	227f      	movs	r2, #127	@ 0x7f
 8008afc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b00:	e008      	b.n	8008b14 <UART_Start_Receive_IT+0xa4>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	223f      	movs	r2, #63	@ 0x3f
 8008b06:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b0a:	e003      	b.n	8008b14 <UART_Start_Receive_IT+0xa4>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2222      	movs	r2, #34	@ 0x22
 8008b20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3308      	adds	r3, #8
 8008b2a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b2e:	e853 3f00 	ldrex	r3, [r3]
 8008b32:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008b34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b36:	f043 0301 	orr.w	r3, r3, #1
 8008b3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3308      	adds	r3, #8
 8008b44:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008b48:	673a      	str	r2, [r7, #112]	@ 0x70
 8008b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008b4e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008b56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e3      	bne.n	8008b24 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b64:	d14f      	bne.n	8008c06 <UART_Start_Receive_IT+0x196>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008b6c:	88fa      	ldrh	r2, [r7, #6]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d349      	bcc.n	8008c06 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b7a:	d107      	bne.n	8008b8c <UART_Start_Receive_IT+0x11c>
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d103      	bne.n	8008b8c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4a47      	ldr	r2, [pc, #284]	@ (8008ca4 <UART_Start_Receive_IT+0x234>)
 8008b88:	675a      	str	r2, [r3, #116]	@ 0x74
 8008b8a:	e002      	b.n	8008b92 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4a46      	ldr	r2, [pc, #280]	@ (8008ca8 <UART_Start_Receive_IT+0x238>)
 8008b90:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d01a      	beq.n	8008bd0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ba2:	e853 3f00 	ldrex	r3, [r3]
 8008ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bbe:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008bc2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008bc4:	e841 2300 	strex	r3, r2, [r1]
 8008bc8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e4      	bne.n	8008b9a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008be6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3308      	adds	r3, #8
 8008bee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008bf0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008bf2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e5      	bne.n	8008bd0 <UART_Start_Receive_IT+0x160>
 8008c04:	e046      	b.n	8008c94 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c0e:	d107      	bne.n	8008c20 <UART_Start_Receive_IT+0x1b0>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d103      	bne.n	8008c20 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4a24      	ldr	r2, [pc, #144]	@ (8008cac <UART_Start_Receive_IT+0x23c>)
 8008c1c:	675a      	str	r2, [r3, #116]	@ 0x74
 8008c1e:	e002      	b.n	8008c26 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4a23      	ldr	r2, [pc, #140]	@ (8008cb0 <UART_Start_Receive_IT+0x240>)
 8008c24:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d019      	beq.n	8008c62 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c36:	e853 3f00 	ldrex	r3, [r3]
 8008c3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008c42:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c4e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008c52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e6      	bne.n	8008c2e <UART_Start_Receive_IT+0x1be>
 8008c60:	e018      	b.n	8008c94 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	e853 3f00 	ldrex	r3, [r3]
 8008c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f043 0320 	orr.w	r3, r3, #32
 8008c76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008c80:	623b      	str	r3, [r7, #32]
 8008c82:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c84:	69f9      	ldr	r1, [r7, #28]
 8008c86:	6a3a      	ldr	r2, [r7, #32]
 8008c88:	e841 2300 	strex	r3, r2, [r1]
 8008c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1e6      	bne.n	8008c62 <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	378c      	adds	r7, #140	@ 0x8c
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	080094e1 	.word	0x080094e1
 8008ca8:	0800917d 	.word	0x0800917d
 8008cac:	08008fc1 	.word	0x08008fc1
 8008cb0:	08008e05 	.word	0x08008e05

08008cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b095      	sub	sp, #84	@ 0x54
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cc4:	e853 3f00 	ldrex	r3, [r3]
 8008cc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ce0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ce2:	e841 2300 	strex	r3, r2, [r1]
 8008ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1e6      	bne.n	8008cbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3308      	adds	r3, #8
 8008cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	6a3b      	ldr	r3, [r7, #32]
 8008cf8:	e853 3f00 	ldrex	r3, [r3]
 8008cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d04:	f023 0301 	bic.w	r3, r3, #1
 8008d08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3308      	adds	r3, #8
 8008d10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e3      	bne.n	8008cee <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d118      	bne.n	8008d60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	e853 3f00 	ldrex	r3, [r3]
 8008d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f023 0310 	bic.w	r3, r3, #16
 8008d42:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d4c:	61bb      	str	r3, [r7, #24]
 8008d4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d50:	6979      	ldr	r1, [r7, #20]
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	e841 2300 	strex	r3, r2, [r1]
 8008d58:	613b      	str	r3, [r7, #16]
   return(result);
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1e6      	bne.n	8008d2e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008d74:	bf00      	nop
 8008d76:	3754      	adds	r7, #84	@ 0x54
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f7ff f9a0 	bl	80080e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008da4:	bf00      	nop
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b088      	sub	sp, #32
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dc8:	61fb      	str	r3, [r7, #28]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	61bb      	str	r3, [r7, #24]
 8008dd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	6979      	ldr	r1, [r7, #20]
 8008dd8:	69ba      	ldr	r2, [r7, #24]
 8008dda:	e841 2300 	strex	r3, r2, [r1]
 8008dde:	613b      	str	r3, [r7, #16]
   return(result);
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e6      	bne.n	8008db4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff f96b 	bl	80080d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dfa:	bf00      	nop
 8008dfc:	3720      	adds	r7, #32
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
	...

08008e04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b09c      	sub	sp, #112	@ 0x70
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e1c:	2b22      	cmp	r3, #34	@ 0x22
 8008e1e:	f040 80be 	bne.w	8008f9e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008e28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008e30:	b2d9      	uxtb	r1, r3
 8008e32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e3c:	400a      	ands	r2, r1
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f040 80a3 	bne.w	8008fb2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e6      	bne.n	8008e6c <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea8:	e853 3f00 	ldrex	r3, [r3]
 8008eac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3308      	adds	r3, #8
 8008ebc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008ebe:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ec0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ec4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ec6:	e841 2300 	strex	r3, r2, [r1]
 8008eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1e5      	bne.n	8008e9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2220      	movs	r2, #32
 8008ed6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a34      	ldr	r2, [pc, #208]	@ (8008fbc <UART_RxISR_8BIT+0x1b8>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d01f      	beq.n	8008f30 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d018      	beq.n	8008f30 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	623b      	str	r3, [r7, #32]
   return(result);
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f12:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f24:	e841 2300 	strex	r3, r2, [r1]
 8008f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e6      	bne.n	8008efe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d12e      	bne.n	8008f96 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 0310 	bic.w	r3, r3, #16
 8008f52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f5c:	61fb      	str	r3, [r7, #28]
 8008f5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f60:	69b9      	ldr	r1, [r7, #24]
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	e841 2300 	strex	r3, r2, [r1]
 8008f68:	617b      	str	r3, [r7, #20]
   return(result);
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e6      	bne.n	8008f3e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	69db      	ldr	r3, [r3, #28]
 8008f76:	f003 0310 	and.w	r3, r3, #16
 8008f7a:	2b10      	cmp	r3, #16
 8008f7c:	d103      	bne.n	8008f86 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2210      	movs	r2, #16
 8008f84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff f8b2 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f94:	e00d      	b.n	8008fb2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7f8 f89e 	bl	80010d8 <HAL_UART_RxCpltCallback>
}
 8008f9c:	e009      	b.n	8008fb2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	8b1b      	ldrh	r3, [r3, #24]
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f042 0208 	orr.w	r2, r2, #8
 8008fae:	b292      	uxth	r2, r2
 8008fb0:	831a      	strh	r2, [r3, #24]
}
 8008fb2:	bf00      	nop
 8008fb4:	3770      	adds	r7, #112	@ 0x70
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	40008000 	.word	0x40008000

08008fc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b09c      	sub	sp, #112	@ 0x70
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008fce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fd8:	2b22      	cmp	r3, #34	@ 0x22
 8008fda:	f040 80be 	bne.w	800915a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008fe4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fec:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fee:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008ff2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ffc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009002:	1c9a      	adds	r2, r3, #2
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800900e:	b29b      	uxth	r3, r3
 8009010:	3b01      	subs	r3, #1
 8009012:	b29a      	uxth	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009020:	b29b      	uxth	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	f040 80a3 	bne.w	800916e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009030:	e853 3f00 	ldrex	r3, [r3]
 8009034:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009036:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800903c:	667b      	str	r3, [r7, #100]	@ 0x64
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	461a      	mov	r2, r3
 8009044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009046:	657b      	str	r3, [r7, #84]	@ 0x54
 8009048:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800904c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800904e:	e841 2300 	strex	r3, r2, [r1]
 8009052:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e6      	bne.n	8009028 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3308      	adds	r3, #8
 8009060:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800906a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906c:	f023 0301 	bic.w	r3, r3, #1
 8009070:	663b      	str	r3, [r7, #96]	@ 0x60
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	3308      	adds	r3, #8
 8009078:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800907a:	643a      	str	r2, [r7, #64]	@ 0x40
 800907c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009080:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e5      	bne.n	800905a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2220      	movs	r2, #32
 8009092:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a34      	ldr	r2, [pc, #208]	@ (8009178 <UART_RxISR_16BIT+0x1b8>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d01f      	beq.n	80090ec <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d018      	beq.n	80090ec <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	e853 3f00 	ldrex	r3, [r3]
 80090c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80090ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	461a      	mov	r2, r3
 80090d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090da:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090e0:	e841 2300 	strex	r3, r2, [r1]
 80090e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d1e6      	bne.n	80090ba <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d12e      	bne.n	8009152 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	60bb      	str	r3, [r7, #8]
   return(result);
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	f023 0310 	bic.w	r3, r3, #16
 800910e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009118:	61bb      	str	r3, [r7, #24]
 800911a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	6979      	ldr	r1, [r7, #20]
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	613b      	str	r3, [r7, #16]
   return(result);
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e6      	bne.n	80090fa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f003 0310 	and.w	r3, r3, #16
 8009136:	2b10      	cmp	r3, #16
 8009138:	d103      	bne.n	8009142 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2210      	movs	r2, #16
 8009140:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009148:	4619      	mov	r1, r3
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7fe ffd4 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009150:	e00d      	b.n	800916e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7f7 ffc0 	bl	80010d8 <HAL_UART_RxCpltCallback>
}
 8009158:	e009      	b.n	800916e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	8b1b      	ldrh	r3, [r3, #24]
 8009160:	b29a      	uxth	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0208 	orr.w	r2, r2, #8
 800916a:	b292      	uxth	r2, r2
 800916c:	831a      	strh	r2, [r3, #24]
}
 800916e:	bf00      	nop
 8009170:	3770      	adds	r7, #112	@ 0x70
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	40008000 	.word	0x40008000

0800917c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b0ac      	sub	sp, #176	@ 0xb0
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800918a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091b2:	2b22      	cmp	r3, #34	@ 0x22
 80091b4:	f040 8182 	bne.w	80094bc <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80091be:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091c2:	e125      	b.n	8009410 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80091ca:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091ce:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80091d2:	b2d9      	uxtb	r1, r3
 80091d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091de:	400a      	ands	r2, r1
 80091e0:	b2d2      	uxtb	r2, r2
 80091e2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	3b01      	subs	r3, #1
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800920a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800920e:	f003 0307 	and.w	r3, r3, #7
 8009212:	2b00      	cmp	r3, #0
 8009214:	d053      	beq.n	80092be <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d011      	beq.n	8009246 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009222:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00b      	beq.n	8009246 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	2201      	movs	r2, #1
 8009234:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800923c:	f043 0201 	orr.w	r2, r3, #1
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800924a:	f003 0302 	and.w	r3, r3, #2
 800924e:	2b00      	cmp	r3, #0
 8009250:	d011      	beq.n	8009276 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00b      	beq.n	8009276 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2202      	movs	r2, #2
 8009264:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800926c:	f043 0204 	orr.w	r2, r3, #4
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800927a:	f003 0304 	and.w	r3, r3, #4
 800927e:	2b00      	cmp	r3, #0
 8009280:	d011      	beq.n	80092a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00b      	beq.n	80092a6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2204      	movs	r2, #4
 8009294:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800929c:	f043 0202 	orr.w	r2, r3, #2
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d006      	beq.n	80092be <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7fe ff17 	bl	80080e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f040 80a2 	bne.w	8009410 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80092da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	461a      	mov	r2, r3
 80092ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80092ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80092f0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80092f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80092fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e4      	bne.n	80092cc <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3308      	adds	r3, #8
 8009308:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009318:	f023 0301 	bic.w	r3, r3, #1
 800931c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3308      	adds	r3, #8
 8009326:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800932a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800932c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009330:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009332:	e841 2300 	strex	r3, r2, [r1]
 8009336:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009338:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1e1      	bne.n	8009302 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2220      	movs	r2, #32
 8009342:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a60      	ldr	r2, [pc, #384]	@ (80094d8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d021      	beq.n	80093a0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d01a      	beq.n	80093a0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009372:	e853 3f00 	ldrex	r3, [r3]
 8009376:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009378:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800937a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800937e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800938c:	657b      	str	r3, [r7, #84]	@ 0x54
 800938e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009390:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009392:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009394:	e841 2300 	strex	r3, r2, [r1]
 8009398:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800939a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1e4      	bne.n	800936a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d130      	bne.n	800940a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b6:	e853 3f00 	ldrex	r3, [r3]
 80093ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093be:	f023 0310 	bic.w	r3, r3, #16
 80093c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80093d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093d8:	e841 2300 	strex	r3, r2, [r1]
 80093dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1e4      	bne.n	80093ae <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	f003 0310 	and.w	r3, r3, #16
 80093ee:	2b10      	cmp	r3, #16
 80093f0:	d103      	bne.n	80093fa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2210      	movs	r2, #16
 80093f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7fe fe78 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
 8009408:	e002      	b.n	8009410 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7f7 fe64 	bl	80010d8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009410:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009414:	2b00      	cmp	r3, #0
 8009416:	d006      	beq.n	8009426 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b00      	cmp	r3, #0
 8009422:	f47f aecf 	bne.w	80091c4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800942c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009430:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009434:	2b00      	cmp	r3, #0
 8009436:	d04b      	beq.n	80094d0 <UART_RxISR_8BIT_FIFOEN+0x354>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800943e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009442:	429a      	cmp	r2, r3
 8009444:	d244      	bcs.n	80094d0 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3308      	adds	r3, #8
 800944c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	61fb      	str	r3, [r7, #28]
   return(result);
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800945c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3308      	adds	r3, #8
 8009466:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800946a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800946c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e3      	bne.n	8009446 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a16      	ldr	r2, [pc, #88]	@ (80094dc <UART_RxISR_8BIT_FIFOEN+0x360>)
 8009482:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	e853 3f00 	ldrex	r3, [r3]
 8009490:	60bb      	str	r3, [r7, #8]
   return(result);
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	f043 0320 	orr.w	r3, r3, #32
 8009498:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	461a      	mov	r2, r3
 80094a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80094a6:	61bb      	str	r3, [r7, #24]
 80094a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	6979      	ldr	r1, [r7, #20]
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	613b      	str	r3, [r7, #16]
   return(result);
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e4      	bne.n	8009484 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094ba:	e009      	b.n	80094d0 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	8b1b      	ldrh	r3, [r3, #24]
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f042 0208 	orr.w	r2, r2, #8
 80094cc:	b292      	uxth	r2, r2
 80094ce:	831a      	strh	r2, [r3, #24]
}
 80094d0:	bf00      	nop
 80094d2:	37b0      	adds	r7, #176	@ 0xb0
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	40008000 	.word	0x40008000
 80094dc:	08008e05 	.word	0x08008e05

080094e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b0ae      	sub	sp, #184	@ 0xb8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80094ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	69db      	ldr	r3, [r3, #28]
 80094f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009516:	2b22      	cmp	r3, #34	@ 0x22
 8009518:	f040 8186 	bne.w	8009828 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009522:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009526:	e129      	b.n	800977c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800952e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009536:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800953a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800953e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009542:	4013      	ands	r3, r2
 8009544:	b29a      	uxth	r2, r3
 8009546:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800954a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009550:	1c9a      	adds	r2, r3, #2
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800955c:	b29b      	uxth	r3, r3
 800955e:	3b01      	subs	r3, #1
 8009560:	b29a      	uxth	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	69db      	ldr	r3, [r3, #28]
 800956e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009576:	f003 0307 	and.w	r3, r3, #7
 800957a:	2b00      	cmp	r3, #0
 800957c:	d053      	beq.n	8009626 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800957e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009582:	f003 0301 	and.w	r3, r3, #1
 8009586:	2b00      	cmp	r3, #0
 8009588:	d011      	beq.n	80095ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800958a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800958e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00b      	beq.n	80095ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2201      	movs	r2, #1
 800959c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095a4:	f043 0201 	orr.w	r2, r3, #1
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095b2:	f003 0302 	and.w	r3, r3, #2
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d011      	beq.n	80095de <UART_RxISR_16BIT_FIFOEN+0xfe>
 80095ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00b      	beq.n	80095de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2202      	movs	r2, #2
 80095cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095d4:	f043 0204 	orr.w	r2, r3, #4
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095e2:	f003 0304 	and.w	r3, r3, #4
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d011      	beq.n	800960e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80095ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00b      	beq.n	800960e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2204      	movs	r2, #4
 80095fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009604:	f043 0202 	orr.w	r2, r3, #2
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009614:	2b00      	cmp	r3, #0
 8009616:	d006      	beq.n	8009626 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7fe fd63 	bl	80080e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800962c:	b29b      	uxth	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	f040 80a4 	bne.w	800977c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800963c:	e853 3f00 	ldrex	r3, [r3]
 8009640:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009642:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009648:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009656:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800965a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800965e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e2      	bne.n	8009634 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	3308      	adds	r3, #8
 8009674:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009676:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009678:	e853 3f00 	ldrex	r3, [r3]
 800967c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800967e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009684:	f023 0301 	bic.w	r3, r3, #1
 8009688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	3308      	adds	r3, #8
 8009692:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009696:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009698:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800969c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80096a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e1      	bne.n	800966e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a60      	ldr	r2, [pc, #384]	@ (8009844 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d021      	beq.n	800970c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d01a      	beq.n	800970c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80096e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	461a      	mov	r2, r3
 80096f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80096f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80096fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e4      	bne.n	80096d6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009710:	2b01      	cmp	r3, #1
 8009712:	d130      	bne.n	8009776 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800972a:	f023 0310 	bic.w	r3, r3, #16
 800972e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800973c:	647b      	str	r3, [r7, #68]	@ 0x44
 800973e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009742:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800974a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e4      	bne.n	800971a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	69db      	ldr	r3, [r3, #28]
 8009756:	f003 0310 	and.w	r3, r3, #16
 800975a:	2b10      	cmp	r3, #16
 800975c:	d103      	bne.n	8009766 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2210      	movs	r2, #16
 8009764:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fe fcc2 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
 8009774:	e002      	b.n	800977c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f7f7 fcae 	bl	80010d8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800977c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009780:	2b00      	cmp	r3, #0
 8009782:	d006      	beq.n	8009792 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009784:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009788:	f003 0320 	and.w	r3, r3, #32
 800978c:	2b00      	cmp	r3, #0
 800978e:	f47f aecb 	bne.w	8009528 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009798:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800979c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d04b      	beq.n	800983c <UART_RxISR_16BIT_FIFOEN+0x35c>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80097aa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d244      	bcs.n	800983c <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	3308      	adds	r3, #8
 80097b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	623b      	str	r3, [r7, #32]
   return(result);
 80097c2:	6a3b      	ldr	r3, [r7, #32]
 80097c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	3308      	adds	r3, #8
 80097d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80097d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80097d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097de:	e841 2300 	strex	r3, r2, [r1]
 80097e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1e3      	bne.n	80097b2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a16      	ldr	r2, [pc, #88]	@ (8009848 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80097ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f043 0320 	orr.w	r3, r3, #32
 8009804:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	461a      	mov	r2, r3
 800980e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009812:	61fb      	str	r3, [r7, #28]
 8009814:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009816:	69b9      	ldr	r1, [r7, #24]
 8009818:	69fa      	ldr	r2, [r7, #28]
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	617b      	str	r3, [r7, #20]
   return(result);
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e4      	bne.n	80097f0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009826:	e009      	b.n	800983c <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	8b1b      	ldrh	r3, [r3, #24]
 800982e:	b29a      	uxth	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f042 0208 	orr.w	r2, r2, #8
 8009838:	b292      	uxth	r2, r2
 800983a:	831a      	strh	r2, [r3, #24]
}
 800983c:	bf00      	nop
 800983e:	37b8      	adds	r7, #184	@ 0xb8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	40008000 	.word	0x40008000
 8009848:	08008fc1 	.word	0x08008fc1

0800984c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009896:	2b01      	cmp	r3, #1
 8009898:	d101      	bne.n	800989e <HAL_UARTEx_DisableFifoMode+0x16>
 800989a:	2302      	movs	r3, #2
 800989c:	e027      	b.n	80098ee <HAL_UARTEx_DisableFifoMode+0x66>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2224      	movs	r2, #36	@ 0x24
 80098aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0201 	bic.w	r2, r2, #1
 80098c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80098cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800990a:	2b01      	cmp	r3, #1
 800990c:	d101      	bne.n	8009912 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800990e:	2302      	movs	r3, #2
 8009910:	e02d      	b.n	800996e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2224      	movs	r2, #36	@ 0x24
 800991e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f022 0201 	bic.w	r2, r2, #1
 8009938:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f850 	bl	80099f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2220      	movs	r2, #32
 8009960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009986:	2b01      	cmp	r3, #1
 8009988:	d101      	bne.n	800998e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800998a:	2302      	movs	r3, #2
 800998c:	e02d      	b.n	80099ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2224      	movs	r2, #36	@ 0x24
 800999a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f022 0201 	bic.w	r2, r2, #1
 80099b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	430a      	orrs	r2, r1
 80099c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 f812 	bl	80099f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2220      	movs	r2, #32
 80099dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d108      	bne.n	8009a16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a14:	e031      	b.n	8009a7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a16:	2308      	movs	r3, #8
 8009a18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a1a:	2308      	movs	r3, #8
 8009a1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	0e5b      	lsrs	r3, r3, #25
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	f003 0307 	and.w	r3, r3, #7
 8009a2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	0f5b      	lsrs	r3, r3, #29
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f003 0307 	and.w	r3, r3, #7
 8009a3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	7b3a      	ldrb	r2, [r7, #12]
 8009a42:	4911      	ldr	r1, [pc, #68]	@ (8009a88 <UARTEx_SetNbDataToProcess+0x94>)
 8009a44:	5c8a      	ldrb	r2, [r1, r2]
 8009a46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a4a:	7b3a      	ldrb	r2, [r7, #12]
 8009a4c:	490f      	ldr	r1, [pc, #60]	@ (8009a8c <UARTEx_SetNbDataToProcess+0x98>)
 8009a4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a54:	b29a      	uxth	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	7b7a      	ldrb	r2, [r7, #13]
 8009a60:	4909      	ldr	r1, [pc, #36]	@ (8009a88 <UARTEx_SetNbDataToProcess+0x94>)
 8009a62:	5c8a      	ldrb	r2, [r1, r2]
 8009a64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a68:	7b7a      	ldrb	r2, [r7, #13]
 8009a6a:	4908      	ldr	r1, [pc, #32]	@ (8009a8c <UARTEx_SetNbDataToProcess+0x98>)
 8009a6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009a7a:	bf00      	nop
 8009a7c:	3714      	adds	r7, #20
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
 8009a86:	bf00      	nop
 8009a88:	0800dd30 	.word	0x0800dd30
 8009a8c:	0800dd38 	.word	0x0800dd38

08009a90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a90:	b084      	sub	sp, #16
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	f107 001c 	add.w	r0, r7, #28
 8009a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f001 fa1c 	bl	800aeec <USB_CoreReset>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009ab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d106      	bne.n	8009acc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	639a      	str	r2, [r3, #56]	@ 0x38
 8009aca:	e005      	b.n	8009ad8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ad0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8009ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ae4:	b004      	add	sp, #16
 8009ae6:	4770      	bx	lr

08009ae8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b087      	sub	sp, #28
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	4613      	mov	r3, r2
 8009af4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009af6:	79fb      	ldrb	r3, [r7, #7]
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d165      	bne.n	8009bc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	4a3e      	ldr	r2, [pc, #248]	@ (8009bf8 <USB_SetTurnaroundTime+0x110>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d906      	bls.n	8009b12 <USB_SetTurnaroundTime+0x2a>
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	4a3d      	ldr	r2, [pc, #244]	@ (8009bfc <USB_SetTurnaroundTime+0x114>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d202      	bcs.n	8009b12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009b0c:	230f      	movs	r3, #15
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	e05c      	b.n	8009bcc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	4a39      	ldr	r2, [pc, #228]	@ (8009bfc <USB_SetTurnaroundTime+0x114>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d306      	bcc.n	8009b28 <USB_SetTurnaroundTime+0x40>
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	4a38      	ldr	r2, [pc, #224]	@ (8009c00 <USB_SetTurnaroundTime+0x118>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d202      	bcs.n	8009b28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009b22:	230e      	movs	r3, #14
 8009b24:	617b      	str	r3, [r7, #20]
 8009b26:	e051      	b.n	8009bcc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	4a35      	ldr	r2, [pc, #212]	@ (8009c00 <USB_SetTurnaroundTime+0x118>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d306      	bcc.n	8009b3e <USB_SetTurnaroundTime+0x56>
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	4a34      	ldr	r2, [pc, #208]	@ (8009c04 <USB_SetTurnaroundTime+0x11c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d202      	bcs.n	8009b3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009b38:	230d      	movs	r3, #13
 8009b3a:	617b      	str	r3, [r7, #20]
 8009b3c:	e046      	b.n	8009bcc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	4a30      	ldr	r2, [pc, #192]	@ (8009c04 <USB_SetTurnaroundTime+0x11c>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d306      	bcc.n	8009b54 <USB_SetTurnaroundTime+0x6c>
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	4a2f      	ldr	r2, [pc, #188]	@ (8009c08 <USB_SetTurnaroundTime+0x120>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d802      	bhi.n	8009b54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009b4e:	230c      	movs	r3, #12
 8009b50:	617b      	str	r3, [r7, #20]
 8009b52:	e03b      	b.n	8009bcc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	4a2c      	ldr	r2, [pc, #176]	@ (8009c08 <USB_SetTurnaroundTime+0x120>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d906      	bls.n	8009b6a <USB_SetTurnaroundTime+0x82>
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	4a2b      	ldr	r2, [pc, #172]	@ (8009c0c <USB_SetTurnaroundTime+0x124>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d802      	bhi.n	8009b6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009b64:	230b      	movs	r3, #11
 8009b66:	617b      	str	r3, [r7, #20]
 8009b68:	e030      	b.n	8009bcc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	4a27      	ldr	r2, [pc, #156]	@ (8009c0c <USB_SetTurnaroundTime+0x124>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d906      	bls.n	8009b80 <USB_SetTurnaroundTime+0x98>
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	4a26      	ldr	r2, [pc, #152]	@ (8009c10 <USB_SetTurnaroundTime+0x128>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d802      	bhi.n	8009b80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009b7a:	230a      	movs	r3, #10
 8009b7c:	617b      	str	r3, [r7, #20]
 8009b7e:	e025      	b.n	8009bcc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	4a23      	ldr	r2, [pc, #140]	@ (8009c10 <USB_SetTurnaroundTime+0x128>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d906      	bls.n	8009b96 <USB_SetTurnaroundTime+0xae>
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	4a22      	ldr	r2, [pc, #136]	@ (8009c14 <USB_SetTurnaroundTime+0x12c>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d202      	bcs.n	8009b96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009b90:	2309      	movs	r3, #9
 8009b92:	617b      	str	r3, [r7, #20]
 8009b94:	e01a      	b.n	8009bcc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	4a1e      	ldr	r2, [pc, #120]	@ (8009c14 <USB_SetTurnaroundTime+0x12c>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d306      	bcc.n	8009bac <USB_SetTurnaroundTime+0xc4>
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8009c18 <USB_SetTurnaroundTime+0x130>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d802      	bhi.n	8009bac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009ba6:	2308      	movs	r3, #8
 8009ba8:	617b      	str	r3, [r7, #20]
 8009baa:	e00f      	b.n	8009bcc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	4a1a      	ldr	r2, [pc, #104]	@ (8009c18 <USB_SetTurnaroundTime+0x130>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d906      	bls.n	8009bc2 <USB_SetTurnaroundTime+0xda>
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	4a19      	ldr	r2, [pc, #100]	@ (8009c1c <USB_SetTurnaroundTime+0x134>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d202      	bcs.n	8009bc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009bbc:	2307      	movs	r3, #7
 8009bbe:	617b      	str	r3, [r7, #20]
 8009bc0:	e004      	b.n	8009bcc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009bc2:	2306      	movs	r3, #6
 8009bc4:	617b      	str	r3, [r7, #20]
 8009bc6:	e001      	b.n	8009bcc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009bc8:	2309      	movs	r3, #9
 8009bca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	68da      	ldr	r2, [r3, #12]
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	029b      	lsls	r3, r3, #10
 8009be0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009be4:	431a      	orrs	r2, r3
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	371c      	adds	r7, #28
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	00d8acbf 	.word	0x00d8acbf
 8009bfc:	00e4e1c0 	.word	0x00e4e1c0
 8009c00:	00f42400 	.word	0x00f42400
 8009c04:	01067380 	.word	0x01067380
 8009c08:	011a499f 	.word	0x011a499f
 8009c0c:	01312cff 	.word	0x01312cff
 8009c10:	014ca43f 	.word	0x014ca43f
 8009c14:	016e3600 	.word	0x016e3600
 8009c18:	01a6ab1f 	.word	0x01a6ab1f
 8009c1c:	01e84800 	.word	0x01e84800

08009c20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f043 0201 	orr.w	r2, r3, #1
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b083      	sub	sp, #12
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f023 0201 	bic.w	r2, r3, #1
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009c80:	78fb      	ldrb	r3, [r7, #3]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d115      	bne.n	8009cb2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c92:	2001      	movs	r0, #1
 8009c94:	f7f7 fff2 	bl	8001c7c <HAL_Delay>
      ms++;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f001 f8ab 	bl	800adfa <USB_GetMode>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d01e      	beq.n	8009ce8 <USB_SetCurrentMode+0x84>
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b31      	cmp	r3, #49	@ 0x31
 8009cae:	d9f0      	bls.n	8009c92 <USB_SetCurrentMode+0x2e>
 8009cb0:	e01a      	b.n	8009ce8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009cb2:	78fb      	ldrb	r3, [r7, #3]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d115      	bne.n	8009ce4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009cc4:	2001      	movs	r0, #1
 8009cc6:	f7f7 ffd9 	bl	8001c7c <HAL_Delay>
      ms++;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f001 f892 	bl	800adfa <USB_GetMode>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <USB_SetCurrentMode+0x84>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b31      	cmp	r3, #49	@ 0x31
 8009ce0:	d9f0      	bls.n	8009cc4 <USB_SetCurrentMode+0x60>
 8009ce2:	e001      	b.n	8009ce8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e005      	b.n	8009cf4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b32      	cmp	r3, #50	@ 0x32
 8009cec:	d101      	bne.n	8009cf2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e000      	b.n	8009cf4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b086      	sub	sp, #24
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009d0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d16:	2300      	movs	r3, #0
 8009d18:	613b      	str	r3, [r7, #16]
 8009d1a:	e009      	b.n	8009d30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	3340      	adds	r3, #64	@ 0x40
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	2200      	movs	r2, #0
 8009d28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	613b      	str	r3, [r7, #16]
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	2b0e      	cmp	r3, #14
 8009d34:	d9f2      	bls.n	8009d1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d11c      	bne.n	8009d76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d4a:	f043 0302 	orr.w	r3, r3, #2
 8009d4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d54:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	e005      	b.n	8009d82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009d88:	461a      	mov	r2, r3
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d8e:	2103      	movs	r1, #3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f959 	bl	800a048 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d96:	2110      	movs	r1, #16
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f8f1 	bl	8009f80 <USB_FlushTxFifo>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 f91d 	bl	8009fe8 <USB_FlushRxFifo>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dca:	461a      	mov	r2, r3
 8009dcc:	2300      	movs	r3, #0
 8009dce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	2300      	movs	r3, #0
 8009dda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	613b      	str	r3, [r7, #16]
 8009de0:	e043      	b.n	8009e6a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009df4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009df8:	d118      	bne.n	8009e2c <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10a      	bne.n	8009e16 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e12:	6013      	str	r3, [r2, #0]
 8009e14:	e013      	b.n	8009e3e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e22:	461a      	mov	r2, r3
 8009e24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e28:	6013      	str	r3, [r2, #0]
 8009e2a:	e008      	b.n	8009e3e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e38:	461a      	mov	r2, r3
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	015a      	lsls	r2, r3, #5
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	3301      	adds	r3, #1
 8009e68:	613b      	str	r3, [r7, #16]
 8009e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d3b7      	bcc.n	8009de2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e72:	2300      	movs	r3, #0
 8009e74:	613b      	str	r3, [r7, #16]
 8009e76:	e043      	b.n	8009f00 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	015a      	lsls	r2, r3, #5
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4413      	add	r3, r2
 8009e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e8e:	d118      	bne.n	8009ec2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10a      	bne.n	8009eac <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	015a      	lsls	r2, r3, #5
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ea8:	6013      	str	r3, [r2, #0]
 8009eaa:	e013      	b.n	8009ed4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	015a      	lsls	r2, r3, #5
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eb8:	461a      	mov	r2, r3
 8009eba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009ebe:	6013      	str	r3, [r2, #0]
 8009ec0:	e008      	b.n	8009ed4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	015a      	lsls	r2, r3, #5
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ece:	461a      	mov	r2, r3
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	015a      	lsls	r2, r3, #5
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	4413      	add	r3, r2
 8009edc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	015a      	lsls	r2, r3, #5
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	4413      	add	r3, r2
 8009eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009ef8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	3301      	adds	r3, #1
 8009efe:	613b      	str	r3, [r7, #16]
 8009f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d3b7      	bcc.n	8009e78 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009f28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	f043 0210 	orr.w	r2, r3, #16
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	699a      	ldr	r2, [r3, #24]
 8009f3a:	4b10      	ldr	r3, [pc, #64]	@ (8009f7c <USB_DevInit+0x280>)
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d005      	beq.n	8009f54 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	f043 0208 	orr.w	r2, r3, #8
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d107      	bne.n	8009f6a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f62:	f043 0304 	orr.w	r3, r3, #4
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f76:	b004      	add	sp, #16
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	803c3800 	.word	0x803c3800

08009f80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3301      	adds	r3, #1
 8009f92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	4a13      	ldr	r2, [pc, #76]	@ (8009fe4 <USB_FlushTxFifo+0x64>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d901      	bls.n	8009fa0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	e01b      	b.n	8009fd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	daf2      	bge.n	8009f8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	019b      	lsls	r3, r3, #6
 8009fb0:	f043 0220 	orr.w	r2, r3, #32
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	4a08      	ldr	r2, [pc, #32]	@ (8009fe4 <USB_FlushTxFifo+0x64>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d901      	bls.n	8009fca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e006      	b.n	8009fd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	f003 0320 	and.w	r3, r3, #32
 8009fd2:	2b20      	cmp	r3, #32
 8009fd4:	d0f0      	beq.n	8009fb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	00030d40 	.word	0x00030d40

08009fe8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	4a11      	ldr	r2, [pc, #68]	@ (800a044 <USB_FlushRxFifo+0x5c>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d901      	bls.n	800a006 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e018      	b.n	800a038 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	daf2      	bge.n	8009ff4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2210      	movs	r2, #16
 800a016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3301      	adds	r3, #1
 800a01c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	4a08      	ldr	r2, [pc, #32]	@ (800a044 <USB_FlushRxFifo+0x5c>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d901      	bls.n	800a02a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e006      	b.n	800a038 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	f003 0310 	and.w	r3, r3, #16
 800a032:	2b10      	cmp	r3, #16
 800a034:	d0f0      	beq.n	800a018 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	00030d40 	.word	0x00030d40

0800a048 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	68f9      	ldr	r1, [r7, #12]
 800a064:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a068:	4313      	orrs	r3, r2
 800a06a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b087      	sub	sp, #28
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f003 0306 	and.w	r3, r3, #6
 800a092:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2b02      	cmp	r3, #2
 800a098:	d002      	beq.n	800a0a0 <USB_GetDevSpeed+0x26>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2b06      	cmp	r3, #6
 800a09e:	d102      	bne.n	800a0a6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a0a0:	2302      	movs	r3, #2
 800a0a2:	75fb      	strb	r3, [r7, #23]
 800a0a4:	e001      	b.n	800a0aa <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800a0a6:	230f      	movs	r3, #15
 800a0a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a0aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	371c      	adds	r7, #28
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	785b      	ldrb	r3, [r3, #1]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d13a      	bne.n	800a14a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0da:	69da      	ldr	r2, [r3, #28]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	f003 030f 	and.w	r3, r3, #15
 800a0e4:	2101      	movs	r1, #1
 800a0e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	68f9      	ldr	r1, [r7, #12]
 800a0ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	015a      	lsls	r2, r3, #5
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d155      	bne.n	800a1b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	791b      	ldrb	r3, [r3, #4]
 800a126:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a128:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	059b      	lsls	r3, r3, #22
 800a12e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a130:	4313      	orrs	r3, r2
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	0151      	lsls	r1, r2, #5
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	440a      	add	r2, r1
 800a13a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a13e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a146:	6013      	str	r3, [r2, #0]
 800a148:	e036      	b.n	800a1b8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a150:	69da      	ldr	r2, [r3, #28]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	f003 030f 	and.w	r3, r3, #15
 800a15a:	2101      	movs	r1, #1
 800a15c:	fa01 f303 	lsl.w	r3, r1, r3
 800a160:	041b      	lsls	r3, r3, #16
 800a162:	68f9      	ldr	r1, [r7, #12]
 800a164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a168:	4313      	orrs	r3, r2
 800a16a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	015a      	lsls	r2, r3, #5
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4413      	add	r3, r2
 800a174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d11a      	bne.n	800a1b8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	689b      	ldr	r3, [r3, #8]
 800a194:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	791b      	ldrb	r3, [r3, #4]
 800a19c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a19e:	430b      	orrs	r3, r1
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	0151      	lsls	r1, r2, #5
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	440a      	add	r2, r1
 800a1aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1b6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
	...

0800a1c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	785b      	ldrb	r3, [r3, #1]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d161      	bne.n	800a2a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1fa:	d11f      	bne.n	800a23c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	0151      	lsls	r1, r2, #5
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	440a      	add	r2, r1
 800a212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a216:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a21a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	015a      	lsls	r2, r3, #5
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	4413      	add	r3, r2
 800a224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68ba      	ldr	r2, [r7, #8]
 800a22c:	0151      	lsls	r1, r2, #5
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	440a      	add	r2, r1
 800a232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a236:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a23a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a242:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	f003 030f 	and.w	r3, r3, #15
 800a24c:	2101      	movs	r1, #1
 800a24e:	fa01 f303 	lsl.w	r3, r1, r3
 800a252:	b29b      	uxth	r3, r3
 800a254:	43db      	mvns	r3, r3
 800a256:	68f9      	ldr	r1, [r7, #12]
 800a258:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a25c:	4013      	ands	r3, r2
 800a25e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a266:	69da      	ldr	r2, [r3, #28]
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	f003 030f 	and.w	r3, r3, #15
 800a270:	2101      	movs	r1, #1
 800a272:	fa01 f303 	lsl.w	r3, r1, r3
 800a276:	b29b      	uxth	r3, r3
 800a278:	43db      	mvns	r3, r3
 800a27a:	68f9      	ldr	r1, [r7, #12]
 800a27c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a280:	4013      	ands	r3, r2
 800a282:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	0159      	lsls	r1, r3, #5
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	440b      	add	r3, r1
 800a29a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a29e:	4619      	mov	r1, r3
 800a2a0:	4b35      	ldr	r3, [pc, #212]	@ (800a378 <USB_DeactivateEndpoint+0x1b0>)
 800a2a2:	4013      	ands	r3, r2
 800a2a4:	600b      	str	r3, [r1, #0]
 800a2a6:	e060      	b.n	800a36a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	015a      	lsls	r2, r3, #5
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2be:	d11f      	bne.n	800a300 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	0151      	lsls	r1, r2, #5
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	440a      	add	r2, r1
 800a2d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2da:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a2de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	015a      	lsls	r2, r3, #5
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	0151      	lsls	r1, r2, #5
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	440a      	add	r2, r1
 800a2f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a2fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a306:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	f003 030f 	and.w	r3, r3, #15
 800a310:	2101      	movs	r1, #1
 800a312:	fa01 f303 	lsl.w	r3, r1, r3
 800a316:	041b      	lsls	r3, r3, #16
 800a318:	43db      	mvns	r3, r3
 800a31a:	68f9      	ldr	r1, [r7, #12]
 800a31c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a320:	4013      	ands	r3, r2
 800a322:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a32a:	69da      	ldr	r2, [r3, #28]
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	f003 030f 	and.w	r3, r3, #15
 800a334:	2101      	movs	r1, #1
 800a336:	fa01 f303 	lsl.w	r3, r1, r3
 800a33a:	041b      	lsls	r3, r3, #16
 800a33c:	43db      	mvns	r3, r3
 800a33e:	68f9      	ldr	r1, [r7, #12]
 800a340:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a344:	4013      	ands	r3, r2
 800a346:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	015a      	lsls	r2, r3, #5
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	4413      	add	r3, r2
 800a350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	0159      	lsls	r1, r3, #5
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	440b      	add	r3, r1
 800a35e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a362:	4619      	mov	r1, r3
 800a364:	4b05      	ldr	r3, [pc, #20]	@ (800a37c <USB_DeactivateEndpoint+0x1b4>)
 800a366:	4013      	ands	r3, r2
 800a368:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr
 800a378:	ec337800 	.word	0xec337800
 800a37c:	eff37800 	.word	0xeff37800

0800a380 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	785b      	ldrb	r3, [r3, #1]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	f040 8128 	bne.w	800a5ee <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d132      	bne.n	800a40c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	015a      	lsls	r2, r3, #5
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	0151      	lsls	r1, r2, #5
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	440a      	add	r2, r1
 800a3bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3c0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a3c4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a3c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	015a      	lsls	r2, r3, #5
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	0151      	lsls	r1, r2, #5
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	440a      	add	r2, r1
 800a3e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a3e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	015a      	lsls	r2, r3, #5
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	0151      	lsls	r1, r2, #5
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	440a      	add	r2, r1
 800a400:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a404:	0cdb      	lsrs	r3, r3, #19
 800a406:	04db      	lsls	r3, r3, #19
 800a408:	6113      	str	r3, [r2, #16]
 800a40a:	e092      	b.n	800a532 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	0151      	lsls	r1, r2, #5
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	440a      	add	r2, r1
 800a422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a426:	0cdb      	lsrs	r3, r3, #19
 800a428:	04db      	lsls	r3, r3, #19
 800a42a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	015a      	lsls	r2, r3, #5
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	4413      	add	r3, r2
 800a434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	0151      	lsls	r1, r2, #5
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	440a      	add	r2, r1
 800a442:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a446:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a44a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a44e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d11a      	bne.n	800a48c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	691a      	ldr	r2, [r3, #16]
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d903      	bls.n	800a46a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	689a      	ldr	r2, [r3, #8]
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	4413      	add	r3, r2
 800a472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	0151      	lsls	r1, r2, #5
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	440a      	add	r2, r1
 800a480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a484:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a488:	6113      	str	r3, [r2, #16]
 800a48a:	e01b      	b.n	800a4c4 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	015a      	lsls	r2, r3, #5
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	4413      	add	r3, r2
 800a494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a498:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	6919      	ldr	r1, [r3, #16]
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	440b      	add	r3, r1
 800a4a4:	1e59      	subs	r1, r3, #1
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4ae:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a4b0:	4b8d      	ldr	r3, [pc, #564]	@ (800a6e8 <USB_EPStartXfer+0x368>)
 800a4b2:	400b      	ands	r3, r1
 800a4b4:	6939      	ldr	r1, [r7, #16]
 800a4b6:	0148      	lsls	r0, r1, #5
 800a4b8:	6979      	ldr	r1, [r7, #20]
 800a4ba:	4401      	add	r1, r0
 800a4bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d0:	691a      	ldr	r2, [r3, #16]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4da:	6939      	ldr	r1, [r7, #16]
 800a4dc:	0148      	lsls	r0, r1, #5
 800a4de:	6979      	ldr	r1, [r7, #20]
 800a4e0:	4401      	add	r1, r0
 800a4e2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	791b      	ldrb	r3, [r3, #4]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d11f      	bne.n	800a532 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	0151      	lsls	r1, r2, #5
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	440a      	add	r2, r1
 800a508:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a50c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a510:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	015a      	lsls	r2, r3, #5
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	4413      	add	r3, r2
 800a51a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	693a      	ldr	r2, [r7, #16]
 800a522:	0151      	lsls	r1, r2, #5
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	440a      	add	r2, r1
 800a528:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a52c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a530:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	0151      	lsls	r1, r2, #5
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	440a      	add	r2, r1
 800a548:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a54c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a550:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	791b      	ldrb	r3, [r3, #4]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d015      	beq.n	800a586 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f000 8139 	beq.w	800a7d6 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a56a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	f003 030f 	and.w	r3, r3, #15
 800a574:	2101      	movs	r1, #1
 800a576:	fa01 f303 	lsl.w	r3, r1, r3
 800a57a:	6979      	ldr	r1, [r7, #20]
 800a57c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a580:	4313      	orrs	r3, r2
 800a582:	634b      	str	r3, [r1, #52]	@ 0x34
 800a584:	e127      	b.n	800a7d6 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a592:	2b00      	cmp	r3, #0
 800a594:	d110      	bne.n	800a5b8 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	015a      	lsls	r2, r3, #5
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	4413      	add	r3, r2
 800a59e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	693a      	ldr	r2, [r7, #16]
 800a5a6:	0151      	lsls	r1, r2, #5
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	440a      	add	r2, r1
 800a5ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a5b4:	6013      	str	r3, [r2, #0]
 800a5b6:	e00f      	b.n	800a5d8 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	0151      	lsls	r1, r2, #5
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	440a      	add	r2, r1
 800a5ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5d6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	68d9      	ldr	r1, [r3, #12]
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	781a      	ldrb	r2, [r3, #0]
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f9a6 	bl	800a938 <USB_WritePacket>
 800a5ec:	e0f3      	b.n	800a7d6 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	015a      	lsls	r2, r3, #5
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	0151      	lsls	r1, r2, #5
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	440a      	add	r2, r1
 800a604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a608:	0cdb      	lsrs	r3, r3, #19
 800a60a:	04db      	lsls	r3, r3, #19
 800a60c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	015a      	lsls	r2, r3, #5
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	4413      	add	r3, r2
 800a616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a61a:	691b      	ldr	r3, [r3, #16]
 800a61c:	693a      	ldr	r2, [r7, #16]
 800a61e:	0151      	lsls	r1, r2, #5
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	440a      	add	r2, r1
 800a624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a628:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a62c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a630:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d12f      	bne.n	800a698 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	689a      	ldr	r2, [r3, #8]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	689a      	ldr	r2, [r3, #8]
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a65c:	691a      	ldr	r2, [r3, #16]
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	6a1b      	ldr	r3, [r3, #32]
 800a662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a666:	6939      	ldr	r1, [r7, #16]
 800a668:	0148      	lsls	r0, r1, #5
 800a66a:	6979      	ldr	r1, [r7, #20]
 800a66c:	4401      	add	r1, r0
 800a66e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a672:	4313      	orrs	r3, r2
 800a674:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	015a      	lsls	r2, r3, #5
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	4413      	add	r3, r2
 800a67e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	0151      	lsls	r1, r2, #5
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	440a      	add	r2, r1
 800a68c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a690:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a694:	6113      	str	r3, [r2, #16]
 800a696:	e061      	b.n	800a75c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d125      	bne.n	800a6ec <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ac:	691a      	ldr	r2, [r3, #16]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6b6:	6939      	ldr	r1, [r7, #16]
 800a6b8:	0148      	lsls	r0, r1, #5
 800a6ba:	6979      	ldr	r1, [r7, #20]
 800a6bc:	4401      	add	r1, r0
 800a6be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	015a      	lsls	r2, r3, #5
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	0151      	lsls	r1, r2, #5
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	440a      	add	r2, r1
 800a6dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6e4:	6113      	str	r3, [r2, #16]
 800a6e6:	e039      	b.n	800a75c <USB_EPStartXfer+0x3dc>
 800a6e8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	691a      	ldr	r2, [r3, #16]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	1e5a      	subs	r2, r3, #1
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a700:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	89fa      	ldrh	r2, [r7, #14]
 800a708:	fb03 f202 	mul.w	r2, r3, r2
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	015a      	lsls	r2, r3, #5
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	4413      	add	r3, r2
 800a718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a71c:	691a      	ldr	r2, [r3, #16]
 800a71e:	89fb      	ldrh	r3, [r7, #14]
 800a720:	04d9      	lsls	r1, r3, #19
 800a722:	4b2f      	ldr	r3, [pc, #188]	@ (800a7e0 <USB_EPStartXfer+0x460>)
 800a724:	400b      	ands	r3, r1
 800a726:	6939      	ldr	r1, [r7, #16]
 800a728:	0148      	lsls	r0, r1, #5
 800a72a:	6979      	ldr	r1, [r7, #20]
 800a72c:	4401      	add	r1, r0
 800a72e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a732:	4313      	orrs	r3, r2
 800a734:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a742:	691a      	ldr	r2, [r3, #16]
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	6a1b      	ldr	r3, [r3, #32]
 800a748:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a74c:	6939      	ldr	r1, [r7, #16]
 800a74e:	0148      	lsls	r0, r1, #5
 800a750:	6979      	ldr	r1, [r7, #20]
 800a752:	4401      	add	r1, r0
 800a754:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a758:	4313      	orrs	r3, r2
 800a75a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	791b      	ldrb	r3, [r3, #4]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d128      	bne.n	800a7b6 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a770:	2b00      	cmp	r3, #0
 800a772:	d110      	bne.n	800a796 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	0151      	lsls	r1, r2, #5
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	440a      	add	r2, r1
 800a78a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a78e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	e00f      	b.n	800a7b6 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	0151      	lsls	r1, r2, #5
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	440a      	add	r2, r1
 800a7ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7b4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	015a      	lsls	r2, r3, #5
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	4413      	add	r3, r2
 800a7be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	693a      	ldr	r2, [r7, #16]
 800a7c6:	0151      	lsls	r1, r2, #5
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	440a      	add	r2, r1
 800a7cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a7d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3718      	adds	r7, #24
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	1ff80000 	.word	0x1ff80000

0800a7e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	785b      	ldrb	r3, [r3, #1]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d14a      	bne.n	800a898 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	015a      	lsls	r2, r3, #5
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	4413      	add	r3, r2
 800a80c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a816:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a81a:	f040 8086 	bne.w	800a92a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	7812      	ldrb	r2, [r2, #0]
 800a832:	0151      	lsls	r1, r2, #5
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	440a      	add	r2, r1
 800a838:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a83c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a840:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	015a      	lsls	r2, r3, #5
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	4413      	add	r3, r2
 800a84c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	7812      	ldrb	r2, [r2, #0]
 800a856:	0151      	lsls	r1, r2, #5
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	440a      	add	r2, r1
 800a85c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a860:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a864:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	3301      	adds	r3, #1
 800a86a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a872:	4293      	cmp	r3, r2
 800a874:	d902      	bls.n	800a87c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	75fb      	strb	r3, [r7, #23]
          break;
 800a87a:	e056      	b.n	800a92a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	015a      	lsls	r2, r3, #5
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	4413      	add	r3, r2
 800a886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a890:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a894:	d0e7      	beq.n	800a866 <USB_EPStopXfer+0x82>
 800a896:	e048      	b.n	800a92a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8b0:	d13b      	bne.n	800a92a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	015a      	lsls	r2, r3, #5
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	4413      	add	r3, r2
 800a8bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	7812      	ldrb	r2, [r2, #0]
 800a8c6:	0151      	lsls	r1, r2, #5
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	440a      	add	r2, r1
 800a8cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	7812      	ldrb	r2, [r2, #0]
 800a8ea:	0151      	lsls	r1, r2, #5
 800a8ec:	693a      	ldr	r2, [r7, #16]
 800a8ee:	440a      	add	r2, r1
 800a8f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a906:	4293      	cmp	r3, r2
 800a908:	d902      	bls.n	800a910 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	75fb      	strb	r3, [r7, #23]
          break;
 800a90e:	e00c      	b.n	800a92a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	015a      	lsls	r2, r3, #5
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	4413      	add	r3, r2
 800a91a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a924:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a928:	d0e7      	beq.n	800a8fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	371c      	adds	r7, #28
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr

0800a938 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800a938:	b480      	push	{r7}
 800a93a:	b089      	sub	sp, #36	@ 0x24
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	4611      	mov	r1, r2
 800a944:	461a      	mov	r2, r3
 800a946:	460b      	mov	r3, r1
 800a948:	71fb      	strb	r3, [r7, #7]
 800a94a:	4613      	mov	r3, r2
 800a94c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800a956:	88bb      	ldrh	r3, [r7, #4]
 800a958:	3303      	adds	r3, #3
 800a95a:	089b      	lsrs	r3, r3, #2
 800a95c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800a95e:	2300      	movs	r3, #0
 800a960:	61bb      	str	r3, [r7, #24]
 800a962:	e018      	b.n	800a996 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a964:	79fb      	ldrb	r3, [r7, #7]
 800a966:	031a      	lsls	r2, r3, #12
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	4413      	add	r3, r2
 800a96c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a970:	461a      	mov	r2, r3
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6013      	str	r3, [r2, #0]
    pSrc++;
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	3301      	adds	r3, #1
 800a97c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	3301      	adds	r3, #1
 800a982:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	3301      	adds	r3, #1
 800a988:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	3301      	adds	r3, #1
 800a98e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	3301      	adds	r3, #1
 800a994:	61bb      	str	r3, [r7, #24]
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d3e2      	bcc.n	800a964 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3724      	adds	r7, #36	@ 0x24
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b08b      	sub	sp, #44	@ 0x2c
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a9c2:	88fb      	ldrh	r3, [r7, #6]
 800a9c4:	089b      	lsrs	r3, r3, #2
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a9ca:	88fb      	ldrh	r3, [r7, #6]
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	623b      	str	r3, [r7, #32]
 800a9d6:	e014      	b.n	800aa02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	623b      	str	r3, [r7, #32]
 800aa02:	6a3a      	ldr	r2, [r7, #32]
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d3e6      	bcc.n	800a9d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa0a:	8bfb      	ldrh	r3, [r7, #30]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d01e      	beq.n	800aa4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f107 0310 	add.w	r3, r7, #16
 800aa20:	6812      	ldr	r2, [r2, #0]
 800aa22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	00db      	lsls	r3, r3, #3
 800aa2c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa34:	701a      	strb	r2, [r3, #0]
      i++;
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	623b      	str	r3, [r7, #32]
      pDest++;
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3e:	3301      	adds	r3, #1
 800aa40:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aa42:	8bfb      	ldrh	r3, [r7, #30]
 800aa44:	3b01      	subs	r3, #1
 800aa46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aa48:	8bfb      	ldrh	r3, [r7, #30]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1ea      	bne.n	800aa24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	372c      	adds	r7, #44	@ 0x2c
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	785b      	ldrb	r3, [r3, #1]
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d12c      	bne.n	800aad2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	db12      	blt.n	800aab0 <USB_EPSetStall+0x54>
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00f      	beq.n	800aab0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68ba      	ldr	r2, [r7, #8]
 800aaa0:	0151      	lsls	r1, r2, #5
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	440a      	add	r2, r1
 800aaa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaaa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aaae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	0151      	lsls	r1, r2, #5
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	440a      	add	r2, r1
 800aac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aaca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800aace:	6013      	str	r3, [r2, #0]
 800aad0:	e02b      	b.n	800ab2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	015a      	lsls	r2, r3, #5
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	4413      	add	r3, r2
 800aada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	db12      	blt.n	800ab0a <USB_EPSetStall+0xae>
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00f      	beq.n	800ab0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	015a      	lsls	r2, r3, #5
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	0151      	lsls	r1, r2, #5
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	440a      	add	r2, r1
 800ab00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	015a      	lsls	r2, r3, #5
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	4413      	add	r3, r2
 800ab12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	0151      	lsls	r1, r2, #5
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	440a      	add	r2, r1
 800ab20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b085      	sub	sp, #20
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	785b      	ldrb	r3, [r3, #1]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d128      	bne.n	800aba6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	015a      	lsls	r2, r3, #5
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	4413      	add	r3, r2
 800ab5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	0151      	lsls	r1, r2, #5
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	440a      	add	r2, r1
 800ab6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	791b      	ldrb	r3, [r3, #4]
 800ab78:	2b03      	cmp	r3, #3
 800ab7a:	d003      	beq.n	800ab84 <USB_EPClearStall+0x4c>
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	791b      	ldrb	r3, [r3, #4]
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d138      	bne.n	800abf6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	015a      	lsls	r2, r3, #5
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	0151      	lsls	r1, r2, #5
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	440a      	add	r2, r1
 800ab9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aba2:	6013      	str	r3, [r2, #0]
 800aba4:	e027      	b.n	800abf6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	015a      	lsls	r2, r3, #5
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	4413      	add	r3, r2
 800abae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	0151      	lsls	r1, r2, #5
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	440a      	add	r2, r1
 800abbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abc0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	791b      	ldrb	r3, [r3, #4]
 800abca:	2b03      	cmp	r3, #3
 800abcc:	d003      	beq.n	800abd6 <USB_EPClearStall+0x9e>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	791b      	ldrb	r3, [r3, #4]
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d10f      	bne.n	800abf6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	015a      	lsls	r2, r3, #5
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	4413      	add	r3, r2
 800abde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	0151      	lsls	r1, r2, #5
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	440a      	add	r2, r1
 800abec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800abf4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3714      	adds	r7, #20
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac22:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ac26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	78fb      	ldrb	r3, [r7, #3]
 800ac32:	011b      	lsls	r3, r3, #4
 800ac34:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ac38:	68f9      	ldr	r1, [r7, #12]
 800ac3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac6a:	f023 0303 	bic.w	r3, r3, #3
 800ac6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	68fa      	ldr	r2, [r7, #12]
 800ac7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac7e:	f023 0302 	bic.w	r3, r3, #2
 800ac82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b085      	sub	sp, #20
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acac:	f023 0303 	bic.w	r3, r3, #3
 800acb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acc0:	f043 0302 	orr.w	r3, r3, #2
 800acc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	4013      	ands	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800acec:	68fb      	ldr	r3, [r7, #12]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800acfa:	b480      	push	{r7}
 800acfc:	b085      	sub	sp, #20
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad16:	69db      	ldr	r3, [r3, #28]
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	4013      	ands	r3, r2
 800ad1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	0c1b      	lsrs	r3, r3, #16
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b085      	sub	sp, #20
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad4a:	69db      	ldr	r3, [r3, #28]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	4013      	ands	r3, r2
 800ad50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	b29b      	uxth	r3, r3
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b085      	sub	sp, #20
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ad72:	78fb      	ldrb	r3, [r7, #3]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad88:	695b      	ldr	r3, [r3, #20]
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad90:	68bb      	ldr	r3, [r7, #8]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3714      	adds	r7, #20
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b087      	sub	sp, #28
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	460b      	mov	r3, r1
 800ada8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adc0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800adc2:	78fb      	ldrb	r3, [r7, #3]
 800adc4:	f003 030f 	and.w	r3, r3, #15
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	fa22 f303 	lsr.w	r3, r2, r3
 800adce:	01db      	lsls	r3, r3, #7
 800add0:	b2db      	uxtb	r3, r3
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	4313      	orrs	r3, r2
 800add6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	693a      	ldr	r2, [r7, #16]
 800ade8:	4013      	ands	r3, r2
 800adea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800adec:	68bb      	ldr	r3, [r7, #8]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	371c      	adds	r7, #28
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800adfa:	b480      	push	{r7}
 800adfc:	b083      	sub	sp, #12
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	f003 0301 	and.w	r3, r3, #1
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ae16:	b480      	push	{r7}
 800ae18:	b085      	sub	sp, #20
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ae34:	f023 0307 	bic.w	r3, r3, #7
 800ae38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	333c      	adds	r3, #60	@ 0x3c
 800ae6e:	3304      	adds	r3, #4
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	4a1c      	ldr	r2, [pc, #112]	@ (800aee8 <USB_EP0_OutStart+0x8c>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d90a      	bls.n	800ae92 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae8c:	d101      	bne.n	800ae92 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	e024      	b.n	800aedc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae98:	461a      	mov	r2, r3
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aeac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aeb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb8:	691b      	ldr	r3, [r3, #16]
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aec0:	f043 0318 	orr.w	r3, r3, #24
 800aec4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aed4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800aed8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	4f54300a 	.word	0x4f54300a

0800aeec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aef4:	2300      	movs	r3, #0
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	3301      	adds	r3, #1
 800aefc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	4a13      	ldr	r2, [pc, #76]	@ (800af50 <USB_CoreReset+0x64>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d901      	bls.n	800af0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e01b      	b.n	800af42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	daf2      	bge.n	800aef8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	f043 0201 	orr.w	r2, r3, #1
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3301      	adds	r3, #1
 800af26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	4a09      	ldr	r2, [pc, #36]	@ (800af50 <USB_CoreReset+0x64>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d901      	bls.n	800af34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e006      	b.n	800af42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d0f0      	beq.n	800af22 <USB_CoreReset+0x36>

  return HAL_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3714      	adds	r7, #20
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	00030d40 	.word	0x00030d40

0800af54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	460b      	mov	r3, r1
 800af5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af60:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800af64:	f002 fe2c 	bl	800dbc0 <USBD_static_malloc>
 800af68:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d109      	bne.n	800af84 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	32b0      	adds	r2, #176	@ 0xb0
 800af7a:	2100      	movs	r1, #0
 800af7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800af80:	2302      	movs	r3, #2
 800af82:	e0d4      	b.n	800b12e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800af84:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800af88:	2100      	movs	r1, #0
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f002 fe36 	bl	800dbfc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	32b0      	adds	r2, #176	@ 0xb0
 800af9a:	68f9      	ldr	r1, [r7, #12]
 800af9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	32b0      	adds	r2, #176	@ 0xb0
 800afaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	7c1b      	ldrb	r3, [r3, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d138      	bne.n	800b02e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800afbc:	4b5e      	ldr	r3, [pc, #376]	@ (800b138 <USBD_CDC_Init+0x1e4>)
 800afbe:	7819      	ldrb	r1, [r3, #0]
 800afc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afc4:	2202      	movs	r2, #2
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f002 fbe6 	bl	800d798 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800afcc:	4b5a      	ldr	r3, [pc, #360]	@ (800b138 <USBD_CDC_Init+0x1e4>)
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	f003 020f 	and.w	r2, r3, #15
 800afd4:	6879      	ldr	r1, [r7, #4]
 800afd6:	4613      	mov	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	4413      	add	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	440b      	add	r3, r1
 800afe0:	3324      	adds	r3, #36	@ 0x24
 800afe2:	2201      	movs	r2, #1
 800afe4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800afe6:	4b55      	ldr	r3, [pc, #340]	@ (800b13c <USBD_CDC_Init+0x1e8>)
 800afe8:	7819      	ldrb	r1, [r3, #0]
 800afea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afee:	2202      	movs	r2, #2
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f002 fbd1 	bl	800d798 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aff6:	4b51      	ldr	r3, [pc, #324]	@ (800b13c <USBD_CDC_Init+0x1e8>)
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	f003 020f 	and.w	r2, r3, #15
 800affe:	6879      	ldr	r1, [r7, #4]
 800b000:	4613      	mov	r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	4413      	add	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	440b      	add	r3, r1
 800b00a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b00e:	2201      	movs	r2, #1
 800b010:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b012:	4b4b      	ldr	r3, [pc, #300]	@ (800b140 <USBD_CDC_Init+0x1ec>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	f003 020f 	and.w	r2, r3, #15
 800b01a:	6879      	ldr	r1, [r7, #4]
 800b01c:	4613      	mov	r3, r2
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	440b      	add	r3, r1
 800b026:	3326      	adds	r3, #38	@ 0x26
 800b028:	2210      	movs	r2, #16
 800b02a:	801a      	strh	r2, [r3, #0]
 800b02c:	e035      	b.n	800b09a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b02e:	4b42      	ldr	r3, [pc, #264]	@ (800b138 <USBD_CDC_Init+0x1e4>)
 800b030:	7819      	ldrb	r1, [r3, #0]
 800b032:	2340      	movs	r3, #64	@ 0x40
 800b034:	2202      	movs	r2, #2
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f002 fbae 	bl	800d798 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b03c:	4b3e      	ldr	r3, [pc, #248]	@ (800b138 <USBD_CDC_Init+0x1e4>)
 800b03e:	781b      	ldrb	r3, [r3, #0]
 800b040:	f003 020f 	and.w	r2, r3, #15
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	4613      	mov	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	440b      	add	r3, r1
 800b050:	3324      	adds	r3, #36	@ 0x24
 800b052:	2201      	movs	r2, #1
 800b054:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b056:	4b39      	ldr	r3, [pc, #228]	@ (800b13c <USBD_CDC_Init+0x1e8>)
 800b058:	7819      	ldrb	r1, [r3, #0]
 800b05a:	2340      	movs	r3, #64	@ 0x40
 800b05c:	2202      	movs	r2, #2
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f002 fb9a 	bl	800d798 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b064:	4b35      	ldr	r3, [pc, #212]	@ (800b13c <USBD_CDC_Init+0x1e8>)
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	f003 020f 	and.w	r2, r3, #15
 800b06c:	6879      	ldr	r1, [r7, #4]
 800b06e:	4613      	mov	r3, r2
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	4413      	add	r3, r2
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	440b      	add	r3, r1
 800b078:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b07c:	2201      	movs	r2, #1
 800b07e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b080:	4b2f      	ldr	r3, [pc, #188]	@ (800b140 <USBD_CDC_Init+0x1ec>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	f003 020f 	and.w	r2, r3, #15
 800b088:	6879      	ldr	r1, [r7, #4]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	440b      	add	r3, r1
 800b094:	3326      	adds	r3, #38	@ 0x26
 800b096:	2210      	movs	r2, #16
 800b098:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b09a:	4b29      	ldr	r3, [pc, #164]	@ (800b140 <USBD_CDC_Init+0x1ec>)
 800b09c:	7819      	ldrb	r1, [r3, #0]
 800b09e:	2308      	movs	r3, #8
 800b0a0:	2203      	movs	r2, #3
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f002 fb78 	bl	800d798 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b0a8:	4b25      	ldr	r3, [pc, #148]	@ (800b140 <USBD_CDC_Init+0x1ec>)
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	f003 020f 	and.w	r2, r3, #15
 800b0b0:	6879      	ldr	r1, [r7, #4]
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	440b      	add	r3, r1
 800b0bc:	3324      	adds	r3, #36	@ 0x24
 800b0be:	2201      	movs	r2, #1
 800b0c0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	33b0      	adds	r3, #176	@ 0xb0
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4413      	add	r3, r2
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e018      	b.n	800b12e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	7c1b      	ldrb	r3, [r3, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d10a      	bne.n	800b11a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b104:	4b0d      	ldr	r3, [pc, #52]	@ (800b13c <USBD_CDC_Init+0x1e8>)
 800b106:	7819      	ldrb	r1, [r3, #0]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b10e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f002 fcba 	bl	800da8c <USBD_LL_PrepareReceive>
 800b118:	e008      	b.n	800b12c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b11a:	4b08      	ldr	r3, [pc, #32]	@ (800b13c <USBD_CDC_Init+0x1e8>)
 800b11c:	7819      	ldrb	r1, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b124:	2340      	movs	r3, #64	@ 0x40
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f002 fcb0 	bl	800da8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20000093 	.word	0x20000093
 800b13c:	20000094 	.word	0x20000094
 800b140:	20000095 	.word	0x20000095

0800b144 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b150:	4b3a      	ldr	r3, [pc, #232]	@ (800b23c <USBD_CDC_DeInit+0xf8>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f002 fb5c 	bl	800d814 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b15c:	4b37      	ldr	r3, [pc, #220]	@ (800b23c <USBD_CDC_DeInit+0xf8>)
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	f003 020f 	and.w	r2, r3, #15
 800b164:	6879      	ldr	r1, [r7, #4]
 800b166:	4613      	mov	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	4413      	add	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	440b      	add	r3, r1
 800b170:	3324      	adds	r3, #36	@ 0x24
 800b172:	2200      	movs	r2, #0
 800b174:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b176:	4b32      	ldr	r3, [pc, #200]	@ (800b240 <USBD_CDC_DeInit+0xfc>)
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f002 fb49 	bl	800d814 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b182:	4b2f      	ldr	r3, [pc, #188]	@ (800b240 <USBD_CDC_DeInit+0xfc>)
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	f003 020f 	and.w	r2, r3, #15
 800b18a:	6879      	ldr	r1, [r7, #4]
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	440b      	add	r3, r1
 800b196:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b19a:	2200      	movs	r2, #0
 800b19c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b19e:	4b29      	ldr	r3, [pc, #164]	@ (800b244 <USBD_CDC_DeInit+0x100>)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f002 fb35 	bl	800d814 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b1aa:	4b26      	ldr	r3, [pc, #152]	@ (800b244 <USBD_CDC_DeInit+0x100>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	f003 020f 	and.w	r2, r3, #15
 800b1b2:	6879      	ldr	r1, [r7, #4]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	4413      	add	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	440b      	add	r3, r1
 800b1be:	3324      	adds	r3, #36	@ 0x24
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b1c4:	4b1f      	ldr	r3, [pc, #124]	@ (800b244 <USBD_CDC_DeInit+0x100>)
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	f003 020f 	and.w	r2, r3, #15
 800b1cc:	6879      	ldr	r1, [r7, #4]
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	440b      	add	r3, r1
 800b1d8:	3326      	adds	r3, #38	@ 0x26
 800b1da:	2200      	movs	r2, #0
 800b1dc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	32b0      	adds	r2, #176	@ 0xb0
 800b1e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d01f      	beq.n	800b230 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	33b0      	adds	r3, #176	@ 0xb0
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	32b0      	adds	r2, #176	@ 0xb0
 800b20e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b212:	4618      	mov	r0, r3
 800b214:	f002 fce2 	bl	800dbdc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	32b0      	adds	r2, #176	@ 0xb0
 800b222:	2100      	movs	r1, #0
 800b224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	20000093 	.word	0x20000093
 800b240:	20000094 	.word	0x20000094
 800b244:	20000095 	.word	0x20000095

0800b248 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	32b0      	adds	r2, #176	@ 0xb0
 800b25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b260:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b262:	2300      	movs	r3, #0
 800b264:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b266:	2300      	movs	r3, #0
 800b268:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b26a:	2300      	movs	r3, #0
 800b26c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b274:	2303      	movs	r3, #3
 800b276:	e0bf      	b.n	800b3f8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b280:	2b00      	cmp	r3, #0
 800b282:	d050      	beq.n	800b326 <USBD_CDC_Setup+0xde>
 800b284:	2b20      	cmp	r3, #32
 800b286:	f040 80af 	bne.w	800b3e8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	88db      	ldrh	r3, [r3, #6]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d03a      	beq.n	800b308 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	b25b      	sxtb	r3, r3
 800b298:	2b00      	cmp	r3, #0
 800b29a:	da1b      	bge.n	800b2d4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	33b0      	adds	r3, #176	@ 0xb0
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	4413      	add	r3, r2
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b2b2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	88d2      	ldrh	r2, [r2, #6]
 800b2b8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	88db      	ldrh	r3, [r3, #6]
 800b2be:	2b07      	cmp	r3, #7
 800b2c0:	bf28      	it	cs
 800b2c2:	2307      	movcs	r3, #7
 800b2c4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	89fa      	ldrh	r2, [r7, #14]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f001 fdb1 	bl	800ce34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b2d2:	e090      	b.n	800b3f6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	785a      	ldrb	r2, [r3, #1]
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	88db      	ldrh	r3, [r3, #6]
 800b2e2:	2b3f      	cmp	r3, #63	@ 0x3f
 800b2e4:	d803      	bhi.n	800b2ee <USBD_CDC_Setup+0xa6>
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	88db      	ldrh	r3, [r3, #6]
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	e000      	b.n	800b2f0 <USBD_CDC_Setup+0xa8>
 800b2ee:	2240      	movs	r2, #64	@ 0x40
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b2f6:	6939      	ldr	r1, [r7, #16]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b2fe:	461a      	mov	r2, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f001 fdc3 	bl	800ce8c <USBD_CtlPrepareRx>
      break;
 800b306:	e076      	b.n	800b3f6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	33b0      	adds	r3, #176	@ 0xb0
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	683a      	ldr	r2, [r7, #0]
 800b31c:	7850      	ldrb	r0, [r2, #1]
 800b31e:	2200      	movs	r2, #0
 800b320:	6839      	ldr	r1, [r7, #0]
 800b322:	4798      	blx	r3
      break;
 800b324:	e067      	b.n	800b3f6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	785b      	ldrb	r3, [r3, #1]
 800b32a:	2b0b      	cmp	r3, #11
 800b32c:	d851      	bhi.n	800b3d2 <USBD_CDC_Setup+0x18a>
 800b32e:	a201      	add	r2, pc, #4	@ (adr r2, 800b334 <USBD_CDC_Setup+0xec>)
 800b330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b334:	0800b365 	.word	0x0800b365
 800b338:	0800b3e1 	.word	0x0800b3e1
 800b33c:	0800b3d3 	.word	0x0800b3d3
 800b340:	0800b3d3 	.word	0x0800b3d3
 800b344:	0800b3d3 	.word	0x0800b3d3
 800b348:	0800b3d3 	.word	0x0800b3d3
 800b34c:	0800b3d3 	.word	0x0800b3d3
 800b350:	0800b3d3 	.word	0x0800b3d3
 800b354:	0800b3d3 	.word	0x0800b3d3
 800b358:	0800b3d3 	.word	0x0800b3d3
 800b35c:	0800b38f 	.word	0x0800b38f
 800b360:	0800b3b9 	.word	0x0800b3b9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b03      	cmp	r3, #3
 800b36e:	d107      	bne.n	800b380 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b370:	f107 030a 	add.w	r3, r7, #10
 800b374:	2202      	movs	r2, #2
 800b376:	4619      	mov	r1, r3
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f001 fd5b 	bl	800ce34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b37e:	e032      	b.n	800b3e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f001 fce5 	bl	800cd52 <USBD_CtlError>
            ret = USBD_FAIL;
 800b388:	2303      	movs	r3, #3
 800b38a:	75fb      	strb	r3, [r7, #23]
          break;
 800b38c:	e02b      	b.n	800b3e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b03      	cmp	r3, #3
 800b398:	d107      	bne.n	800b3aa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b39a:	f107 030d 	add.w	r3, r7, #13
 800b39e:	2201      	movs	r2, #1
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f001 fd46 	bl	800ce34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3a8:	e01d      	b.n	800b3e6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b3aa:	6839      	ldr	r1, [r7, #0]
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f001 fcd0 	bl	800cd52 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b3b6:	e016      	b.n	800b3e6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3be:	b2db      	uxtb	r3, r3
 800b3c0:	2b03      	cmp	r3, #3
 800b3c2:	d00f      	beq.n	800b3e4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f001 fcc3 	bl	800cd52 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3cc:	2303      	movs	r3, #3
 800b3ce:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b3d0:	e008      	b.n	800b3e4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b3d2:	6839      	ldr	r1, [r7, #0]
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f001 fcbc 	bl	800cd52 <USBD_CtlError>
          ret = USBD_FAIL;
 800b3da:	2303      	movs	r3, #3
 800b3dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b3de:	e002      	b.n	800b3e6 <USBD_CDC_Setup+0x19e>
          break;
 800b3e0:	bf00      	nop
 800b3e2:	e008      	b.n	800b3f6 <USBD_CDC_Setup+0x1ae>
          break;
 800b3e4:	bf00      	nop
      }
      break;
 800b3e6:	e006      	b.n	800b3f6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f001 fcb1 	bl	800cd52 <USBD_CtlError>
      ret = USBD_FAIL;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3f4:	bf00      	nop
  }

  return (uint8_t)ret;
 800b3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}

0800b400 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	460b      	mov	r3, r1
 800b40a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b412:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	32b0      	adds	r2, #176	@ 0xb0
 800b41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b426:	2303      	movs	r3, #3
 800b428:	e065      	b.n	800b4f6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	32b0      	adds	r2, #176	@ 0xb0
 800b434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b438:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b43a:	78fb      	ldrb	r3, [r7, #3]
 800b43c:	f003 020f 	and.w	r2, r3, #15
 800b440:	6879      	ldr	r1, [r7, #4]
 800b442:	4613      	mov	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	440b      	add	r3, r1
 800b44c:	3318      	adds	r3, #24
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d02f      	beq.n	800b4b4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b454:	78fb      	ldrb	r3, [r7, #3]
 800b456:	f003 020f 	and.w	r2, r3, #15
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	4613      	mov	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	440b      	add	r3, r1
 800b466:	3318      	adds	r3, #24
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	78fb      	ldrb	r3, [r7, #3]
 800b46c:	f003 010f 	and.w	r1, r3, #15
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	460b      	mov	r3, r1
 800b474:	00db      	lsls	r3, r3, #3
 800b476:	440b      	add	r3, r1
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4403      	add	r3, r0
 800b47c:	3344      	adds	r3, #68	@ 0x44
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	fbb2 f1f3 	udiv	r1, r2, r3
 800b484:	fb01 f303 	mul.w	r3, r1, r3
 800b488:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d112      	bne.n	800b4b4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b48e:	78fb      	ldrb	r3, [r7, #3]
 800b490:	f003 020f 	and.w	r2, r3, #15
 800b494:	6879      	ldr	r1, [r7, #4]
 800b496:	4613      	mov	r3, r2
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	440b      	add	r3, r1
 800b4a0:	3318      	adds	r3, #24
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b4a6:	78f9      	ldrb	r1, [r7, #3]
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f002 fab5 	bl	800da1c <USBD_LL_Transmit>
 800b4b2:	e01f      	b.n	800b4f4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	33b0      	adds	r3, #176	@ 0xb0
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	691b      	ldr	r3, [r3, #16]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d010      	beq.n	800b4f4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	33b0      	adds	r3, #176	@ 0xb0
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	4413      	add	r3, r2
 800b4e0:	685b      	ldr	r3, [r3, #4]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b4f0:	78fa      	ldrb	r2, [r7, #3]
 800b4f2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b084      	sub	sp, #16
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
 800b506:	460b      	mov	r3, r1
 800b508:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	32b0      	adds	r2, #176	@ 0xb0
 800b514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b518:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	32b0      	adds	r2, #176	@ 0xb0
 800b524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b52c:	2303      	movs	r3, #3
 800b52e:	e01a      	b.n	800b566 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b530:	78fb      	ldrb	r3, [r7, #3]
 800b532:	4619      	mov	r1, r3
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f002 fae1 	bl	800dafc <USBD_LL_GetRxDataSize>
 800b53a:	4602      	mov	r2, r0
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	33b0      	adds	r3, #176	@ 0xb0
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b560:	4611      	mov	r1, r2
 800b562:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b564:	2300      	movs	r3, #0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3710      	adds	r7, #16
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b084      	sub	sp, #16
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	32b0      	adds	r2, #176	@ 0xb0
 800b580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b584:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d101      	bne.n	800b590 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b58c:	2303      	movs	r3, #3
 800b58e:	e024      	b.n	800b5da <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	33b0      	adds	r3, #176	@ 0xb0
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d019      	beq.n	800b5d8 <USBD_CDC_EP0_RxReady+0x6a>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b5aa:	2bff      	cmp	r3, #255	@ 0xff
 800b5ac:	d014      	beq.n	800b5d8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	33b0      	adds	r3, #176	@ 0xb0
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b5c6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b5ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	22ff      	movs	r2, #255	@ 0xff
 800b5d4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
	...

0800b5e4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b086      	sub	sp, #24
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b5ec:	2182      	movs	r1, #130	@ 0x82
 800b5ee:	4818      	ldr	r0, [pc, #96]	@ (800b650 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5f0:	f000 fd4f 	bl	800c092 <USBD_GetEpDesc>
 800b5f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	4815      	ldr	r0, [pc, #84]	@ (800b650 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b5fa:	f000 fd4a 	bl	800c092 <USBD_GetEpDesc>
 800b5fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b600:	2181      	movs	r1, #129	@ 0x81
 800b602:	4813      	ldr	r0, [pc, #76]	@ (800b650 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b604:	f000 fd45 	bl	800c092 <USBD_GetEpDesc>
 800b608:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d002      	beq.n	800b616 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	2210      	movs	r2, #16
 800b614:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d006      	beq.n	800b62a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	2200      	movs	r2, #0
 800b620:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b624:	711a      	strb	r2, [r3, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d006      	beq.n	800b63e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b638:	711a      	strb	r2, [r3, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2243      	movs	r2, #67	@ 0x43
 800b642:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b644:	4b02      	ldr	r3, [pc, #8]	@ (800b650 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b646:	4618      	mov	r0, r3
 800b648:	3718      	adds	r7, #24
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	20000050 	.word	0x20000050

0800b654 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b086      	sub	sp, #24
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b65c:	2182      	movs	r1, #130	@ 0x82
 800b65e:	4818      	ldr	r0, [pc, #96]	@ (800b6c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b660:	f000 fd17 	bl	800c092 <USBD_GetEpDesc>
 800b664:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b666:	2101      	movs	r1, #1
 800b668:	4815      	ldr	r0, [pc, #84]	@ (800b6c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b66a:	f000 fd12 	bl	800c092 <USBD_GetEpDesc>
 800b66e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b670:	2181      	movs	r1, #129	@ 0x81
 800b672:	4813      	ldr	r0, [pc, #76]	@ (800b6c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b674:	f000 fd0d 	bl	800c092 <USBD_GetEpDesc>
 800b678:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	2210      	movs	r2, #16
 800b684:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d006      	beq.n	800b69a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	2200      	movs	r2, #0
 800b690:	711a      	strb	r2, [r3, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f042 0202 	orr.w	r2, r2, #2
 800b698:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d006      	beq.n	800b6ae <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	711a      	strb	r2, [r3, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f042 0202 	orr.w	r2, r2, #2
 800b6ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2243      	movs	r2, #67	@ 0x43
 800b6b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6b4:	4b02      	ldr	r3, [pc, #8]	@ (800b6c0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	20000050 	.word	0x20000050

0800b6c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6cc:	2182      	movs	r1, #130	@ 0x82
 800b6ce:	4818      	ldr	r0, [pc, #96]	@ (800b730 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6d0:	f000 fcdf 	bl	800c092 <USBD_GetEpDesc>
 800b6d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6d6:	2101      	movs	r1, #1
 800b6d8:	4815      	ldr	r0, [pc, #84]	@ (800b730 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6da:	f000 fcda 	bl	800c092 <USBD_GetEpDesc>
 800b6de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6e0:	2181      	movs	r1, #129	@ 0x81
 800b6e2:	4813      	ldr	r0, [pc, #76]	@ (800b730 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b6e4:	f000 fcd5 	bl	800c092 <USBD_GetEpDesc>
 800b6e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d002      	beq.n	800b6f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	2210      	movs	r2, #16
 800b6f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d006      	beq.n	800b70a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b704:	711a      	strb	r2, [r3, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d006      	beq.n	800b71e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b718:	711a      	strb	r2, [r3, #4]
 800b71a:	2200      	movs	r2, #0
 800b71c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2243      	movs	r2, #67	@ 0x43
 800b722:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b724:	4b02      	ldr	r3, [pc, #8]	@ (800b730 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b726:	4618      	mov	r0, r3
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	20000050 	.word	0x20000050

0800b734 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	220a      	movs	r2, #10
 800b740:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b742:	4b03      	ldr	r3, [pc, #12]	@ (800b750 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b744:	4618      	mov	r0, r3
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr
 800b750:	2000000c 	.word	0x2000000c

0800b754 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d101      	bne.n	800b768 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b764:	2303      	movs	r3, #3
 800b766:	e009      	b.n	800b77c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	33b0      	adds	r3, #176	@ 0xb0
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4413      	add	r3, r2
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b788:	b480      	push	{r7}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	60f8      	str	r0, [r7, #12]
 800b790:	60b9      	str	r1, [r7, #8]
 800b792:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	32b0      	adds	r2, #176	@ 0xb0
 800b79e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7a2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d101      	bne.n	800b7ae <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e008      	b.n	800b7c0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	371c      	adds	r7, #28
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	32b0      	adds	r2, #176	@ 0xb0
 800b7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e004      	b.n	800b7fa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	683a      	ldr	r2, [r7, #0]
 800b7f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b7f8:	2300      	movs	r3, #0
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
	...

0800b808 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	32b0      	adds	r2, #176	@ 0xb0
 800b81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b81e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b820:	2301      	movs	r3, #1
 800b822:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d101      	bne.n	800b82e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b82a:	2303      	movs	r3, #3
 800b82c:	e025      	b.n	800b87a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b834:	2b00      	cmp	r3, #0
 800b836:	d11f      	bne.n	800b878 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b840:	4b10      	ldr	r3, [pc, #64]	@ (800b884 <USBD_CDC_TransmitPacket+0x7c>)
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	f003 020f 	and.w	r2, r3, #15
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	4613      	mov	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4403      	add	r3, r0
 800b85a:	3318      	adds	r3, #24
 800b85c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b85e:	4b09      	ldr	r3, [pc, #36]	@ (800b884 <USBD_CDC_TransmitPacket+0x7c>)
 800b860:	7819      	ldrb	r1, [r3, #0]
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f002 f8d4 	bl	800da1c <USBD_LL_Transmit>

    ret = USBD_OK;
 800b874:	2300      	movs	r3, #0
 800b876:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b878:	7bfb      	ldrb	r3, [r7, #15]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	20000093 	.word	0x20000093

0800b888 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	32b0      	adds	r2, #176	@ 0xb0
 800b89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b89e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	32b0      	adds	r2, #176	@ 0xb0
 800b8aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e018      	b.n	800b8e8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	7c1b      	ldrb	r3, [r3, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10a      	bne.n	800b8d4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8be:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f0 <USBD_CDC_ReceivePacket+0x68>)
 800b8c0:	7819      	ldrb	r1, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f002 f8dd 	bl	800da8c <USBD_LL_PrepareReceive>
 800b8d2:	e008      	b.n	800b8e6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8d4:	4b06      	ldr	r3, [pc, #24]	@ (800b8f0 <USBD_CDC_ReceivePacket+0x68>)
 800b8d6:	7819      	ldrb	r1, [r3, #0]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b8de:	2340      	movs	r3, #64	@ 0x40
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f002 f8d3 	bl	800da8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	20000094 	.word	0x20000094

0800b8f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b086      	sub	sp, #24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	4613      	mov	r3, r2
 800b900:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d101      	bne.n	800b90c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b908:	2303      	movs	r3, #3
 800b90a:	e01f      	b.n	800b94c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d003      	beq.n	800b932 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2201      	movs	r2, #1
 800b936:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	79fa      	ldrb	r2, [r7, #7]
 800b93e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f001 feab 	bl	800d69c <USBD_LL_Init>
 800b946:	4603      	mov	r3, r0
 800b948:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b94a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b95e:	2300      	movs	r3, #0
 800b960:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d101      	bne.n	800b96c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b968:	2303      	movs	r3, #3
 800b96a:	e025      	b.n	800b9b8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	683a      	ldr	r2, [r7, #0]
 800b970:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	32ae      	adds	r2, #174	@ 0xae
 800b97e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00f      	beq.n	800b9a8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	32ae      	adds	r2, #174	@ 0xae
 800b992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b998:	f107 020e 	add.w	r2, r7, #14
 800b99c:	4610      	mov	r0, r2
 800b99e:	4798      	blx	r3
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b9ae:	1c5a      	adds	r2, r3, #1
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f001 feb3 	bl	800d734 <USBD_LL_Start>
 800b9ce:	4603      	mov	r3, r0
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9e0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	370c      	adds	r7, #12
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr

0800b9ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b084      	sub	sp, #16
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d009      	beq.n	800ba1c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	78fa      	ldrb	r2, [r7, #3]
 800ba12:	4611      	mov	r1, r2
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	4798      	blx	r3
 800ba18:	4603      	mov	r3, r0
 800ba1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b084      	sub	sp, #16
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba3c:	685b      	ldr	r3, [r3, #4]
 800ba3e:	78fa      	ldrb	r2, [r7, #3]
 800ba40:	4611      	mov	r1, r2
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	4798      	blx	r3
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d001      	beq.n	800ba50 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba5a:	b580      	push	{r7, lr}
 800ba5c:	b084      	sub	sp, #16
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f001 f936 	bl	800ccde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ba80:	461a      	mov	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ba8e:	f003 031f 	and.w	r3, r3, #31
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	d01a      	beq.n	800bacc <USBD_LL_SetupStage+0x72>
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d822      	bhi.n	800bae0 <USBD_LL_SetupStage+0x86>
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d002      	beq.n	800baa4 <USBD_LL_SetupStage+0x4a>
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d00a      	beq.n	800bab8 <USBD_LL_SetupStage+0x5e>
 800baa2:	e01d      	b.n	800bae0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800baaa:	4619      	mov	r1, r3
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fb63 	bl	800c178 <USBD_StdDevReq>
 800bab2:	4603      	mov	r3, r0
 800bab4:	73fb      	strb	r3, [r7, #15]
      break;
 800bab6:	e020      	b.n	800bafa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800babe:	4619      	mov	r1, r3
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fbcb 	bl	800c25c <USBD_StdItfReq>
 800bac6:	4603      	mov	r3, r0
 800bac8:	73fb      	strb	r3, [r7, #15]
      break;
 800baca:	e016      	b.n	800bafa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bad2:	4619      	mov	r1, r3
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fc2d 	bl	800c334 <USBD_StdEPReq>
 800bada:	4603      	mov	r3, r0
 800badc:	73fb      	strb	r3, [r7, #15]
      break;
 800bade:	e00c      	b.n	800bafa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bae6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800baea:	b2db      	uxtb	r3, r3
 800baec:	4619      	mov	r1, r3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f001 fec6 	bl	800d880 <USBD_LL_StallEP>
 800baf4:	4603      	mov	r3, r0
 800baf6:	73fb      	strb	r3, [r7, #15]
      break;
 800baf8:	bf00      	nop
  }

  return ret;
 800bafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	607a      	str	r2, [r7, #4]
 800bb10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb12:	2300      	movs	r3, #0
 800bb14:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bb16:	7afb      	ldrb	r3, [r7, #11]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d16e      	bne.n	800bbfa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bb22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bb2a:	2b03      	cmp	r3, #3
 800bb2c:	f040 8098 	bne.w	800bc60 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d913      	bls.n	800bb64 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	689a      	ldr	r2, [r3, #8]
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	1ad2      	subs	r2, r2, r3
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	68da      	ldr	r2, [r3, #12]
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	4293      	cmp	r3, r2
 800bb54:	bf28      	it	cs
 800bb56:	4613      	movcs	r3, r2
 800bb58:	461a      	mov	r2, r3
 800bb5a:	6879      	ldr	r1, [r7, #4]
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	f001 f9b2 	bl	800cec6 <USBD_CtlContinueRx>
 800bb62:	e07d      	b.n	800bc60 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb6a:	f003 031f 	and.w	r3, r3, #31
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d014      	beq.n	800bb9c <USBD_LL_DataOutStage+0x98>
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d81d      	bhi.n	800bbb2 <USBD_LL_DataOutStage+0xae>
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d002      	beq.n	800bb80 <USBD_LL_DataOutStage+0x7c>
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d003      	beq.n	800bb86 <USBD_LL_DataOutStage+0x82>
 800bb7e:	e018      	b.n	800bbb2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bb80:	2300      	movs	r3, #0
 800bb82:	75bb      	strb	r3, [r7, #22]
            break;
 800bb84:	e018      	b.n	800bbb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	4619      	mov	r1, r3
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f000 fa64 	bl	800c05e <USBD_CoreFindIF>
 800bb96:	4603      	mov	r3, r0
 800bb98:	75bb      	strb	r3, [r7, #22]
            break;
 800bb9a:	e00d      	b.n	800bbb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	4619      	mov	r1, r3
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f000 fa66 	bl	800c078 <USBD_CoreFindEP>
 800bbac:	4603      	mov	r3, r0
 800bbae:	75bb      	strb	r3, [r7, #22]
            break;
 800bbb0:	e002      	b.n	800bbb8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	75bb      	strb	r3, [r7, #22]
            break;
 800bbb6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bbb8:	7dbb      	ldrb	r3, [r7, #22]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d119      	bne.n	800bbf2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b03      	cmp	r3, #3
 800bbc8:	d113      	bne.n	800bbf2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bbca:	7dba      	ldrb	r2, [r7, #22]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	32ae      	adds	r2, #174	@ 0xae
 800bbd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00b      	beq.n	800bbf2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bbda:	7dba      	ldrb	r2, [r7, #22]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bbe2:	7dba      	ldrb	r2, [r7, #22]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	32ae      	adds	r2, #174	@ 0xae
 800bbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bbf2:	68f8      	ldr	r0, [r7, #12]
 800bbf4:	f001 f978 	bl	800cee8 <USBD_CtlSendStatus>
 800bbf8:	e032      	b.n	800bc60 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bbfa:	7afb      	ldrb	r3, [r7, #11]
 800bbfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	4619      	mov	r1, r3
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f000 fa37 	bl	800c078 <USBD_CoreFindEP>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc0e:	7dbb      	ldrb	r3, [r7, #22]
 800bc10:	2bff      	cmp	r3, #255	@ 0xff
 800bc12:	d025      	beq.n	800bc60 <USBD_LL_DataOutStage+0x15c>
 800bc14:	7dbb      	ldrb	r3, [r7, #22]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d122      	bne.n	800bc60 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b03      	cmp	r3, #3
 800bc24:	d117      	bne.n	800bc56 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bc26:	7dba      	ldrb	r2, [r7, #22]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	32ae      	adds	r2, #174	@ 0xae
 800bc2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc30:	699b      	ldr	r3, [r3, #24]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00f      	beq.n	800bc56 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bc36:	7dba      	ldrb	r2, [r7, #22]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bc3e:	7dba      	ldrb	r2, [r7, #22]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	32ae      	adds	r2, #174	@ 0xae
 800bc44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc48:	699b      	ldr	r3, [r3, #24]
 800bc4a:	7afa      	ldrb	r2, [r7, #11]
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	4798      	blx	r3
 800bc52:	4603      	mov	r3, r0
 800bc54:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bc56:	7dfb      	ldrb	r3, [r7, #23]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bc5c:	7dfb      	ldrb	r3, [r7, #23]
 800bc5e:	e000      	b.n	800bc62 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3718      	adds	r7, #24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b086      	sub	sp, #24
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	60f8      	str	r0, [r7, #12]
 800bc72:	460b      	mov	r3, r1
 800bc74:	607a      	str	r2, [r7, #4]
 800bc76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bc78:	7afb      	ldrb	r3, [r7, #11]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d16f      	bne.n	800bd5e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	3314      	adds	r3, #20
 800bc82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d15a      	bne.n	800bd44 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	689a      	ldr	r2, [r3, #8]
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d914      	bls.n	800bcc4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	689a      	ldr	r2, [r3, #8]
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	1ad2      	subs	r2, r2, r3
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	461a      	mov	r2, r3
 800bcae:	6879      	ldr	r1, [r7, #4]
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f001 f8da 	bl	800ce6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	2200      	movs	r2, #0
 800bcba:	2100      	movs	r1, #0
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f001 fee5 	bl	800da8c <USBD_LL_PrepareReceive>
 800bcc2:	e03f      	b.n	800bd44 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	68da      	ldr	r2, [r3, #12]
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d11c      	bne.n	800bd0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	685a      	ldr	r2, [r3, #4]
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d316      	bcc.n	800bd0a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	685a      	ldr	r2, [r3, #4]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d20f      	bcs.n	800bd0a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bcea:	2200      	movs	r2, #0
 800bcec:	2100      	movs	r1, #0
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f001 f8bb 	bl	800ce6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	2200      	movs	r2, #0
 800bd00:	2100      	movs	r1, #0
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f001 fec2 	bl	800da8c <USBD_LL_PrepareReceive>
 800bd08:	e01c      	b.n	800bd44 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	d10f      	bne.n	800bd36 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d009      	beq.n	800bd36 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd36:	2180      	movs	r1, #128	@ 0x80
 800bd38:	68f8      	ldr	r0, [r7, #12]
 800bd3a:	f001 fda1 	bl	800d880 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f001 f8e5 	bl	800cf0e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d03a      	beq.n	800bdc4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f7ff fe42 	bl	800b9d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bd5c:	e032      	b.n	800bdc4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bd5e:	7afb      	ldrb	r3, [r7, #11]
 800bd60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	4619      	mov	r1, r3
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f000 f985 	bl	800c078 <USBD_CoreFindEP>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
 800bd74:	2bff      	cmp	r3, #255	@ 0xff
 800bd76:	d025      	beq.n	800bdc4 <USBD_LL_DataInStage+0x15a>
 800bd78:	7dfb      	ldrb	r3, [r7, #23]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d122      	bne.n	800bdc4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	2b03      	cmp	r3, #3
 800bd88:	d11c      	bne.n	800bdc4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bd8a:	7dfa      	ldrb	r2, [r7, #23]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	32ae      	adds	r2, #174	@ 0xae
 800bd90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d014      	beq.n	800bdc4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bd9a:	7dfa      	ldrb	r2, [r7, #23]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bda2:	7dfa      	ldrb	r2, [r7, #23]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	32ae      	adds	r2, #174	@ 0xae
 800bda8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	7afa      	ldrb	r2, [r7, #11]
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	4798      	blx	r3
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bdba:	7dbb      	ldrb	r3, [r7, #22]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d001      	beq.n	800bdc4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bdc0:	7dbb      	ldrb	r3, [r7, #22]
 800bdc2:	e000      	b.n	800bdc6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3718      	adds	r7, #24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b084      	sub	sp, #16
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2201      	movs	r2, #1
 800bdde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be06:	2b00      	cmp	r3, #0
 800be08:	d014      	beq.n	800be34 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00e      	beq.n	800be34 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	6852      	ldr	r2, [r2, #4]
 800be22:	b2d2      	uxtb	r2, r2
 800be24:	4611      	mov	r1, r2
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	4798      	blx	r3
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800be30:	2303      	movs	r3, #3
 800be32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be34:	2340      	movs	r3, #64	@ 0x40
 800be36:	2200      	movs	r2, #0
 800be38:	2100      	movs	r1, #0
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f001 fcac 	bl	800d798 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2240      	movs	r2, #64	@ 0x40
 800be4c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be50:	2340      	movs	r3, #64	@ 0x40
 800be52:	2200      	movs	r2, #0
 800be54:	2180      	movs	r1, #128	@ 0x80
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f001 fc9e 	bl	800d798 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2240      	movs	r2, #64	@ 0x40
 800be66:	621a      	str	r2, [r3, #32]

  return ret;
 800be68:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be72:	b480      	push	{r7}
 800be74:	b083      	sub	sp, #12
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
 800be7a:	460b      	mov	r3, r1
 800be7c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	78fa      	ldrb	r2, [r7, #3]
 800be82:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be92:	b480      	push	{r7}
 800be94:	b083      	sub	sp, #12
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	2b04      	cmp	r3, #4
 800bea4:	d006      	beq.n	800beb4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800beac:	b2da      	uxtb	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2204      	movs	r2, #4
 800beb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bebc:	2300      	movs	r3, #0
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	370c      	adds	r7, #12
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800beca:	b480      	push	{r7}
 800becc:	b083      	sub	sp, #12
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	2b04      	cmp	r3, #4
 800bedc:	d106      	bne.n	800beec <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bee4:	b2da      	uxtb	r2, r3
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	370c      	adds	r7, #12
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr

0800befa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b082      	sub	sp, #8
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b03      	cmp	r3, #3
 800bf0c:	d110      	bne.n	800bf30 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00b      	beq.n	800bf30 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf1e:	69db      	ldr	r3, [r3, #28]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d005      	beq.n	800bf30 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf2a:	69db      	ldr	r3, [r3, #28]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf3a:	b580      	push	{r7, lr}
 800bf3c:	b082      	sub	sp, #8
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	460b      	mov	r3, r1
 800bf44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	32ae      	adds	r2, #174	@ 0xae
 800bf50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	e01c      	b.n	800bf96 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	2b03      	cmp	r3, #3
 800bf66:	d115      	bne.n	800bf94 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	32ae      	adds	r2, #174	@ 0xae
 800bf72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf76:	6a1b      	ldr	r3, [r3, #32]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00b      	beq.n	800bf94 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	32ae      	adds	r2, #174	@ 0xae
 800bf86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf8a:	6a1b      	ldr	r3, [r3, #32]
 800bf8c:	78fa      	ldrb	r2, [r7, #3]
 800bf8e:	4611      	mov	r1, r2
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	32ae      	adds	r2, #174	@ 0xae
 800bfb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d101      	bne.n	800bfc0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bfbc:	2303      	movs	r3, #3
 800bfbe:	e01c      	b.n	800bffa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b03      	cmp	r3, #3
 800bfca:	d115      	bne.n	800bff8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	32ae      	adds	r2, #174	@ 0xae
 800bfd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00b      	beq.n	800bff8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	32ae      	adds	r2, #174	@ 0xae
 800bfea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff0:	78fa      	ldrb	r2, [r7, #3]
 800bff2:	4611      	mov	r1, r2
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c002:	b480      	push	{r7}
 800c004:	b083      	sub	sp, #12
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2201      	movs	r2, #1
 800c028:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00e      	beq.n	800c054 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	6852      	ldr	r2, [r2, #4]
 800c042:	b2d2      	uxtb	r2, r2
 800c044:	4611      	mov	r1, r2
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	4798      	blx	r3
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d001      	beq.n	800c054 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c050:	2303      	movs	r3, #3
 800c052:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c054:	7bfb      	ldrb	r3, [r7, #15]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c05e:	b480      	push	{r7}
 800c060:	b083      	sub	sp, #12
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	460b      	mov	r3, r1
 800c068:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c06a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c084:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c086:	4618      	mov	r0, r3
 800c088:	370c      	adds	r7, #12
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr

0800c092 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b086      	sub	sp, #24
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
 800c09a:	460b      	mov	r3, r1
 800c09c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	885b      	ldrh	r3, [r3, #2]
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	7812      	ldrb	r2, [r2, #0]
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d91f      	bls.n	800c0f8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c0be:	e013      	b.n	800c0e8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c0c0:	f107 030a 	add.w	r3, r7, #10
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	6978      	ldr	r0, [r7, #20]
 800c0c8:	f000 f81b 	bl	800c102 <USBD_GetNextDesc>
 800c0cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	785b      	ldrb	r3, [r3, #1]
 800c0d2:	2b05      	cmp	r3, #5
 800c0d4:	d108      	bne.n	800c0e8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	789b      	ldrb	r3, [r3, #2]
 800c0de:	78fa      	ldrb	r2, [r7, #3]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d008      	beq.n	800c0f6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	885b      	ldrh	r3, [r3, #2]
 800c0ec:	b29a      	uxth	r2, r3
 800c0ee:	897b      	ldrh	r3, [r7, #10]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d8e5      	bhi.n	800c0c0 <USBD_GetEpDesc+0x2e>
 800c0f4:	e000      	b.n	800c0f8 <USBD_GetEpDesc+0x66>
          break;
 800c0f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c0f8:	693b      	ldr	r3, [r7, #16]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3718      	adds	r7, #24
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}

0800c102 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c102:	b480      	push	{r7}
 800c104:	b085      	sub	sp, #20
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	881b      	ldrh	r3, [r3, #0]
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	7812      	ldrb	r2, [r2, #0]
 800c118:	4413      	add	r3, r2
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	461a      	mov	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4413      	add	r3, r2
 800c12a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c12c:	68fb      	ldr	r3, [r7, #12]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c13a:	b480      	push	{r7}
 800c13c:	b087      	sub	sp, #28
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	3301      	adds	r3, #1
 800c150:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c158:	8a3b      	ldrh	r3, [r7, #16]
 800c15a:	021b      	lsls	r3, r3, #8
 800c15c:	b21a      	sxth	r2, r3
 800c15e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c162:	4313      	orrs	r3, r2
 800c164:	b21b      	sxth	r3, r3
 800c166:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c168:	89fb      	ldrh	r3, [r7, #14]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	371c      	adds	r7, #28
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr
	...

0800c178 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c18e:	2b40      	cmp	r3, #64	@ 0x40
 800c190:	d005      	beq.n	800c19e <USBD_StdDevReq+0x26>
 800c192:	2b40      	cmp	r3, #64	@ 0x40
 800c194:	d857      	bhi.n	800c246 <USBD_StdDevReq+0xce>
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00f      	beq.n	800c1ba <USBD_StdDevReq+0x42>
 800c19a:	2b20      	cmp	r3, #32
 800c19c:	d153      	bne.n	800c246 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	32ae      	adds	r2, #174	@ 0xae
 800c1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	6839      	ldr	r1, [r7, #0]
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	4798      	blx	r3
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c1b8:	e04a      	b.n	800c250 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	785b      	ldrb	r3, [r3, #1]
 800c1be:	2b09      	cmp	r3, #9
 800c1c0:	d83b      	bhi.n	800c23a <USBD_StdDevReq+0xc2>
 800c1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c1c8 <USBD_StdDevReq+0x50>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c21d 	.word	0x0800c21d
 800c1cc:	0800c231 	.word	0x0800c231
 800c1d0:	0800c23b 	.word	0x0800c23b
 800c1d4:	0800c227 	.word	0x0800c227
 800c1d8:	0800c23b 	.word	0x0800c23b
 800c1dc:	0800c1fb 	.word	0x0800c1fb
 800c1e0:	0800c1f1 	.word	0x0800c1f1
 800c1e4:	0800c23b 	.word	0x0800c23b
 800c1e8:	0800c213 	.word	0x0800c213
 800c1ec:	0800c205 	.word	0x0800c205
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c1f0:	6839      	ldr	r1, [r7, #0]
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fa3c 	bl	800c670 <USBD_GetDescriptor>
          break;
 800c1f8:	e024      	b.n	800c244 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 fbcb 	bl	800c998 <USBD_SetAddress>
          break;
 800c202:	e01f      	b.n	800c244 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fc0a 	bl	800ca20 <USBD_SetConfig>
 800c20c:	4603      	mov	r3, r0
 800c20e:	73fb      	strb	r3, [r7, #15]
          break;
 800c210:	e018      	b.n	800c244 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 fcad 	bl	800cb74 <USBD_GetConfig>
          break;
 800c21a:	e013      	b.n	800c244 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fcde 	bl	800cbe0 <USBD_GetStatus>
          break;
 800c224:	e00e      	b.n	800c244 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fd0d 	bl	800cc48 <USBD_SetFeature>
          break;
 800c22e:	e009      	b.n	800c244 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fd31 	bl	800cc9a <USBD_ClrFeature>
          break;
 800c238:	e004      	b.n	800c244 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fd88 	bl	800cd52 <USBD_CtlError>
          break;
 800c242:	bf00      	nop
      }
      break;
 800c244:	e004      	b.n	800c250 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c246:	6839      	ldr	r1, [r7, #0]
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 fd82 	bl	800cd52 <USBD_CtlError>
      break;
 800c24e:	bf00      	nop
  }

  return ret;
 800c250:	7bfb      	ldrb	r3, [r7, #15]
}
 800c252:	4618      	mov	r0, r3
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop

0800c25c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c266:	2300      	movs	r3, #0
 800c268:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c272:	2b40      	cmp	r3, #64	@ 0x40
 800c274:	d005      	beq.n	800c282 <USBD_StdItfReq+0x26>
 800c276:	2b40      	cmp	r3, #64	@ 0x40
 800c278:	d852      	bhi.n	800c320 <USBD_StdItfReq+0xc4>
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d001      	beq.n	800c282 <USBD_StdItfReq+0x26>
 800c27e:	2b20      	cmp	r3, #32
 800c280:	d14e      	bne.n	800c320 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c288:	b2db      	uxtb	r3, r3
 800c28a:	3b01      	subs	r3, #1
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d840      	bhi.n	800c312 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	889b      	ldrh	r3, [r3, #4]
 800c294:	b2db      	uxtb	r3, r3
 800c296:	2b01      	cmp	r3, #1
 800c298:	d836      	bhi.n	800c308 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	889b      	ldrh	r3, [r3, #4]
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff fedb 	bl	800c05e <USBD_CoreFindIF>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	2bff      	cmp	r3, #255	@ 0xff
 800c2b0:	d01d      	beq.n	800c2ee <USBD_StdItfReq+0x92>
 800c2b2:	7bbb      	ldrb	r3, [r7, #14]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d11a      	bne.n	800c2ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c2b8:	7bba      	ldrb	r2, [r7, #14]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	32ae      	adds	r2, #174	@ 0xae
 800c2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2c2:	689b      	ldr	r3, [r3, #8]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00f      	beq.n	800c2e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c2c8:	7bba      	ldrb	r2, [r7, #14]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c2d0:	7bba      	ldrb	r2, [r7, #14]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	32ae      	adds	r2, #174	@ 0xae
 800c2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	4798      	blx	r3
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c2e6:	e004      	b.n	800c2f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c2ec:	e001      	b.n	800c2f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	88db      	ldrh	r3, [r3, #6]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d110      	bne.n	800c31c <USBD_StdItfReq+0xc0>
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10d      	bne.n	800c31c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f000 fdf1 	bl	800cee8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c306:	e009      	b.n	800c31c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c308:	6839      	ldr	r1, [r7, #0]
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 fd21 	bl	800cd52 <USBD_CtlError>
          break;
 800c310:	e004      	b.n	800c31c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fd1c 	bl	800cd52 <USBD_CtlError>
          break;
 800c31a:	e000      	b.n	800c31e <USBD_StdItfReq+0xc2>
          break;
 800c31c:	bf00      	nop
      }
      break;
 800c31e:	e004      	b.n	800c32a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 fd15 	bl	800cd52 <USBD_CtlError>
      break;
 800c328:	bf00      	nop
  }

  return ret;
 800c32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c33e:	2300      	movs	r3, #0
 800c340:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	889b      	ldrh	r3, [r3, #4]
 800c346:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c350:	2b40      	cmp	r3, #64	@ 0x40
 800c352:	d007      	beq.n	800c364 <USBD_StdEPReq+0x30>
 800c354:	2b40      	cmp	r3, #64	@ 0x40
 800c356:	f200 817f 	bhi.w	800c658 <USBD_StdEPReq+0x324>
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d02a      	beq.n	800c3b4 <USBD_StdEPReq+0x80>
 800c35e:	2b20      	cmp	r3, #32
 800c360:	f040 817a 	bne.w	800c658 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c364:	7bbb      	ldrb	r3, [r7, #14]
 800c366:	4619      	mov	r1, r3
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7ff fe85 	bl	800c078 <USBD_CoreFindEP>
 800c36e:	4603      	mov	r3, r0
 800c370:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c372:	7b7b      	ldrb	r3, [r7, #13]
 800c374:	2bff      	cmp	r3, #255	@ 0xff
 800c376:	f000 8174 	beq.w	800c662 <USBD_StdEPReq+0x32e>
 800c37a:	7b7b      	ldrb	r3, [r7, #13]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f040 8170 	bne.w	800c662 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c382:	7b7a      	ldrb	r2, [r7, #13]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c38a:	7b7a      	ldrb	r2, [r7, #13]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	32ae      	adds	r2, #174	@ 0xae
 800c390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	f000 8163 	beq.w	800c662 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c39c:	7b7a      	ldrb	r2, [r7, #13]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	32ae      	adds	r2, #174	@ 0xae
 800c3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	4798      	blx	r3
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c3b2:	e156      	b.n	800c662 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	785b      	ldrb	r3, [r3, #1]
 800c3b8:	2b03      	cmp	r3, #3
 800c3ba:	d008      	beq.n	800c3ce <USBD_StdEPReq+0x9a>
 800c3bc:	2b03      	cmp	r3, #3
 800c3be:	f300 8145 	bgt.w	800c64c <USBD_StdEPReq+0x318>
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f000 809b 	beq.w	800c4fe <USBD_StdEPReq+0x1ca>
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d03c      	beq.n	800c446 <USBD_StdEPReq+0x112>
 800c3cc:	e13e      	b.n	800c64c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	2b02      	cmp	r3, #2
 800c3d8:	d002      	beq.n	800c3e0 <USBD_StdEPReq+0xac>
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	d016      	beq.n	800c40c <USBD_StdEPReq+0xd8>
 800c3de:	e02c      	b.n	800c43a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3e0:	7bbb      	ldrb	r3, [r7, #14]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00d      	beq.n	800c402 <USBD_StdEPReq+0xce>
 800c3e6:	7bbb      	ldrb	r3, [r7, #14]
 800c3e8:	2b80      	cmp	r3, #128	@ 0x80
 800c3ea:	d00a      	beq.n	800c402 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3ec:	7bbb      	ldrb	r3, [r7, #14]
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f001 fa45 	bl	800d880 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3f6:	2180      	movs	r1, #128	@ 0x80
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f001 fa41 	bl	800d880 <USBD_LL_StallEP>
 800c3fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c400:	e020      	b.n	800c444 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fca4 	bl	800cd52 <USBD_CtlError>
              break;
 800c40a:	e01b      	b.n	800c444 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	885b      	ldrh	r3, [r3, #2]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d10e      	bne.n	800c432 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c414:	7bbb      	ldrb	r3, [r7, #14]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00b      	beq.n	800c432 <USBD_StdEPReq+0xfe>
 800c41a:	7bbb      	ldrb	r3, [r7, #14]
 800c41c:	2b80      	cmp	r3, #128	@ 0x80
 800c41e:	d008      	beq.n	800c432 <USBD_StdEPReq+0xfe>
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	88db      	ldrh	r3, [r3, #6]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d104      	bne.n	800c432 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c428:	7bbb      	ldrb	r3, [r7, #14]
 800c42a:	4619      	mov	r1, r3
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f001 fa27 	bl	800d880 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 fd58 	bl	800cee8 <USBD_CtlSendStatus>

              break;
 800c438:	e004      	b.n	800c444 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fc88 	bl	800cd52 <USBD_CtlError>
              break;
 800c442:	bf00      	nop
          }
          break;
 800c444:	e107      	b.n	800c656 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d002      	beq.n	800c458 <USBD_StdEPReq+0x124>
 800c452:	2b03      	cmp	r3, #3
 800c454:	d016      	beq.n	800c484 <USBD_StdEPReq+0x150>
 800c456:	e04b      	b.n	800c4f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c458:	7bbb      	ldrb	r3, [r7, #14]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00d      	beq.n	800c47a <USBD_StdEPReq+0x146>
 800c45e:	7bbb      	ldrb	r3, [r7, #14]
 800c460:	2b80      	cmp	r3, #128	@ 0x80
 800c462:	d00a      	beq.n	800c47a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c464:	7bbb      	ldrb	r3, [r7, #14]
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f001 fa09 	bl	800d880 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c46e:	2180      	movs	r1, #128	@ 0x80
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f001 fa05 	bl	800d880 <USBD_LL_StallEP>
 800c476:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c478:	e040      	b.n	800c4fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 fc68 	bl	800cd52 <USBD_CtlError>
              break;
 800c482:	e03b      	b.n	800c4fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	885b      	ldrh	r3, [r3, #2]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d136      	bne.n	800c4fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c48c:	7bbb      	ldrb	r3, [r7, #14]
 800c48e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c492:	2b00      	cmp	r3, #0
 800c494:	d004      	beq.n	800c4a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c496:	7bbb      	ldrb	r3, [r7, #14]
 800c498:	4619      	mov	r1, r3
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f001 fa26 	bl	800d8ec <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 fd21 	bl	800cee8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c4a6:	7bbb      	ldrb	r3, [r7, #14]
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7ff fde4 	bl	800c078 <USBD_CoreFindEP>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c4b4:	7b7b      	ldrb	r3, [r7, #13]
 800c4b6:	2bff      	cmp	r3, #255	@ 0xff
 800c4b8:	d01f      	beq.n	800c4fa <USBD_StdEPReq+0x1c6>
 800c4ba:	7b7b      	ldrb	r3, [r7, #13]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d11c      	bne.n	800c4fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c4c0:	7b7a      	ldrb	r2, [r7, #13]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c4c8:	7b7a      	ldrb	r2, [r7, #13]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	32ae      	adds	r2, #174	@ 0xae
 800c4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4d2:	689b      	ldr	r3, [r3, #8]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d010      	beq.n	800c4fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c4d8:	7b7a      	ldrb	r2, [r7, #13]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	32ae      	adds	r2, #174	@ 0xae
 800c4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	4798      	blx	r3
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c4ee:	e004      	b.n	800c4fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c4f0:	6839      	ldr	r1, [r7, #0]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 fc2d 	bl	800cd52 <USBD_CtlError>
              break;
 800c4f8:	e000      	b.n	800c4fc <USBD_StdEPReq+0x1c8>
              break;
 800c4fa:	bf00      	nop
          }
          break;
 800c4fc:	e0ab      	b.n	800c656 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b02      	cmp	r3, #2
 800c508:	d002      	beq.n	800c510 <USBD_StdEPReq+0x1dc>
 800c50a:	2b03      	cmp	r3, #3
 800c50c:	d032      	beq.n	800c574 <USBD_StdEPReq+0x240>
 800c50e:	e097      	b.n	800c640 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d007      	beq.n	800c526 <USBD_StdEPReq+0x1f2>
 800c516:	7bbb      	ldrb	r3, [r7, #14]
 800c518:	2b80      	cmp	r3, #128	@ 0x80
 800c51a:	d004      	beq.n	800c526 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c51c:	6839      	ldr	r1, [r7, #0]
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fc17 	bl	800cd52 <USBD_CtlError>
                break;
 800c524:	e091      	b.n	800c64a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c526:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	da0b      	bge.n	800c546 <USBD_StdEPReq+0x212>
 800c52e:	7bbb      	ldrb	r3, [r7, #14]
 800c530:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c534:	4613      	mov	r3, r2
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	4413      	add	r3, r2
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	3310      	adds	r3, #16
 800c53e:	687a      	ldr	r2, [r7, #4]
 800c540:	4413      	add	r3, r2
 800c542:	3304      	adds	r3, #4
 800c544:	e00b      	b.n	800c55e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c546:	7bbb      	ldrb	r3, [r7, #14]
 800c548:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c54c:	4613      	mov	r3, r2
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	4413      	add	r3, r2
 800c552:	009b      	lsls	r3, r3, #2
 800c554:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	4413      	add	r3, r2
 800c55c:	3304      	adds	r3, #4
 800c55e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	2200      	movs	r2, #0
 800c564:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	2202      	movs	r2, #2
 800c56a:	4619      	mov	r1, r3
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 fc61 	bl	800ce34 <USBD_CtlSendData>
              break;
 800c572:	e06a      	b.n	800c64a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	da11      	bge.n	800c5a0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c57c:	7bbb      	ldrb	r3, [r7, #14]
 800c57e:	f003 020f 	and.w	r2, r3, #15
 800c582:	6879      	ldr	r1, [r7, #4]
 800c584:	4613      	mov	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	440b      	add	r3, r1
 800c58e:	3324      	adds	r3, #36	@ 0x24
 800c590:	881b      	ldrh	r3, [r3, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d117      	bne.n	800c5c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c596:	6839      	ldr	r1, [r7, #0]
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 fbda 	bl	800cd52 <USBD_CtlError>
                  break;
 800c59e:	e054      	b.n	800c64a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c5a0:	7bbb      	ldrb	r3, [r7, #14]
 800c5a2:	f003 020f 	and.w	r2, r3, #15
 800c5a6:	6879      	ldr	r1, [r7, #4]
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	009b      	lsls	r3, r3, #2
 800c5ac:	4413      	add	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	440b      	add	r3, r1
 800c5b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c5b6:	881b      	ldrh	r3, [r3, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d104      	bne.n	800c5c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c5bc:	6839      	ldr	r1, [r7, #0]
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fbc7 	bl	800cd52 <USBD_CtlError>
                  break;
 800c5c4:	e041      	b.n	800c64a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	da0b      	bge.n	800c5e6 <USBD_StdEPReq+0x2b2>
 800c5ce:	7bbb      	ldrb	r3, [r7, #14]
 800c5d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	3310      	adds	r3, #16
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	3304      	adds	r3, #4
 800c5e4:	e00b      	b.n	800c5fe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c5e6:	7bbb      	ldrb	r3, [r7, #14]
 800c5e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	4413      	add	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	3304      	adds	r3, #4
 800c5fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c600:	7bbb      	ldrb	r3, [r7, #14]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d002      	beq.n	800c60c <USBD_StdEPReq+0x2d8>
 800c606:	7bbb      	ldrb	r3, [r7, #14]
 800c608:	2b80      	cmp	r3, #128	@ 0x80
 800c60a:	d103      	bne.n	800c614 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	2200      	movs	r2, #0
 800c610:	601a      	str	r2, [r3, #0]
 800c612:	e00e      	b.n	800c632 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c614:	7bbb      	ldrb	r3, [r7, #14]
 800c616:	4619      	mov	r1, r3
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f001 f99d 	bl	800d958 <USBD_LL_IsStallEP>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d003      	beq.n	800c62c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2201      	movs	r2, #1
 800c628:	601a      	str	r2, [r3, #0]
 800c62a:	e002      	b.n	800c632 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2200      	movs	r2, #0
 800c630:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	2202      	movs	r2, #2
 800c636:	4619      	mov	r1, r3
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 fbfb 	bl	800ce34 <USBD_CtlSendData>
              break;
 800c63e:	e004      	b.n	800c64a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c640:	6839      	ldr	r1, [r7, #0]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fb85 	bl	800cd52 <USBD_CtlError>
              break;
 800c648:	bf00      	nop
          }
          break;
 800c64a:	e004      	b.n	800c656 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c64c:	6839      	ldr	r1, [r7, #0]
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 fb7f 	bl	800cd52 <USBD_CtlError>
          break;
 800c654:	bf00      	nop
      }
      break;
 800c656:	e005      	b.n	800c664 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c658:	6839      	ldr	r1, [r7, #0]
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 fb79 	bl	800cd52 <USBD_CtlError>
      break;
 800c660:	e000      	b.n	800c664 <USBD_StdEPReq+0x330>
      break;
 800c662:	bf00      	nop
  }

  return ret;
 800c664:	7bfb      	ldrb	r3, [r7, #15]
}
 800c666:	4618      	mov	r0, r3
 800c668:	3710      	adds	r7, #16
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
	...

0800c670 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c67a:	2300      	movs	r3, #0
 800c67c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c67e:	2300      	movs	r3, #0
 800c680:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c682:	2300      	movs	r3, #0
 800c684:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	885b      	ldrh	r3, [r3, #2]
 800c68a:	0a1b      	lsrs	r3, r3, #8
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	3b01      	subs	r3, #1
 800c690:	2b0e      	cmp	r3, #14
 800c692:	f200 8152 	bhi.w	800c93a <USBD_GetDescriptor+0x2ca>
 800c696:	a201      	add	r2, pc, #4	@ (adr r2, 800c69c <USBD_GetDescriptor+0x2c>)
 800c698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c69c:	0800c70d 	.word	0x0800c70d
 800c6a0:	0800c725 	.word	0x0800c725
 800c6a4:	0800c765 	.word	0x0800c765
 800c6a8:	0800c93b 	.word	0x0800c93b
 800c6ac:	0800c93b 	.word	0x0800c93b
 800c6b0:	0800c8db 	.word	0x0800c8db
 800c6b4:	0800c907 	.word	0x0800c907
 800c6b8:	0800c93b 	.word	0x0800c93b
 800c6bc:	0800c93b 	.word	0x0800c93b
 800c6c0:	0800c93b 	.word	0x0800c93b
 800c6c4:	0800c93b 	.word	0x0800c93b
 800c6c8:	0800c93b 	.word	0x0800c93b
 800c6cc:	0800c93b 	.word	0x0800c93b
 800c6d0:	0800c93b 	.word	0x0800c93b
 800c6d4:	0800c6d9 	.word	0x0800c6d9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6de:	69db      	ldr	r3, [r3, #28]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00b      	beq.n	800c6fc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c6ea:	69db      	ldr	r3, [r3, #28]
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	7c12      	ldrb	r2, [r2, #16]
 800c6f0:	f107 0108 	add.w	r1, r7, #8
 800c6f4:	4610      	mov	r0, r2
 800c6f6:	4798      	blx	r3
 800c6f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6fa:	e126      	b.n	800c94a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c6fc:	6839      	ldr	r1, [r7, #0]
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fb27 	bl	800cd52 <USBD_CtlError>
        err++;
 800c704:	7afb      	ldrb	r3, [r7, #11]
 800c706:	3301      	adds	r3, #1
 800c708:	72fb      	strb	r3, [r7, #11]
      break;
 800c70a:	e11e      	b.n	800c94a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	7c12      	ldrb	r2, [r2, #16]
 800c718:	f107 0108 	add.w	r1, r7, #8
 800c71c:	4610      	mov	r0, r2
 800c71e:	4798      	blx	r3
 800c720:	60f8      	str	r0, [r7, #12]
      break;
 800c722:	e112      	b.n	800c94a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	7c1b      	ldrb	r3, [r3, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10d      	bne.n	800c748 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c734:	f107 0208 	add.w	r2, r7, #8
 800c738:	4610      	mov	r0, r2
 800c73a:	4798      	blx	r3
 800c73c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3301      	adds	r3, #1
 800c742:	2202      	movs	r2, #2
 800c744:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c746:	e100      	b.n	800c94a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c74e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c750:	f107 0208 	add.w	r2, r7, #8
 800c754:	4610      	mov	r0, r2
 800c756:	4798      	blx	r3
 800c758:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	3301      	adds	r3, #1
 800c75e:	2202      	movs	r2, #2
 800c760:	701a      	strb	r2, [r3, #0]
      break;
 800c762:	e0f2      	b.n	800c94a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	885b      	ldrh	r3, [r3, #2]
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b05      	cmp	r3, #5
 800c76c:	f200 80ac 	bhi.w	800c8c8 <USBD_GetDescriptor+0x258>
 800c770:	a201      	add	r2, pc, #4	@ (adr r2, 800c778 <USBD_GetDescriptor+0x108>)
 800c772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c776:	bf00      	nop
 800c778:	0800c791 	.word	0x0800c791
 800c77c:	0800c7c5 	.word	0x0800c7c5
 800c780:	0800c7f9 	.word	0x0800c7f9
 800c784:	0800c82d 	.word	0x0800c82d
 800c788:	0800c861 	.word	0x0800c861
 800c78c:	0800c895 	.word	0x0800c895
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00b      	beq.n	800c7b4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	7c12      	ldrb	r2, [r2, #16]
 800c7a8:	f107 0108 	add.w	r1, r7, #8
 800c7ac:	4610      	mov	r0, r2
 800c7ae:	4798      	blx	r3
 800c7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7b2:	e091      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7b4:	6839      	ldr	r1, [r7, #0]
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 facb 	bl	800cd52 <USBD_CtlError>
            err++;
 800c7bc:	7afb      	ldrb	r3, [r7, #11]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c7c2:	e089      	b.n	800c8d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00b      	beq.n	800c7e8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	7c12      	ldrb	r2, [r2, #16]
 800c7dc:	f107 0108 	add.w	r1, r7, #8
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	4798      	blx	r3
 800c7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7e6:	e077      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fab1 	bl	800cd52 <USBD_CtlError>
            err++;
 800c7f0:	7afb      	ldrb	r3, [r7, #11]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7f6:	e06f      	b.n	800c8d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d00b      	beq.n	800c81c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	7c12      	ldrb	r2, [r2, #16]
 800c810:	f107 0108 	add.w	r1, r7, #8
 800c814:	4610      	mov	r0, r2
 800c816:	4798      	blx	r3
 800c818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c81a:	e05d      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fa97 	bl	800cd52 <USBD_CtlError>
            err++;
 800c824:	7afb      	ldrb	r3, [r7, #11]
 800c826:	3301      	adds	r3, #1
 800c828:	72fb      	strb	r3, [r7, #11]
          break;
 800c82a:	e055      	b.n	800c8d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00b      	beq.n	800c850 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	7c12      	ldrb	r2, [r2, #16]
 800c844:	f107 0108 	add.w	r1, r7, #8
 800c848:	4610      	mov	r0, r2
 800c84a:	4798      	blx	r3
 800c84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c84e:	e043      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 fa7d 	bl	800cd52 <USBD_CtlError>
            err++;
 800c858:	7afb      	ldrb	r3, [r7, #11]
 800c85a:	3301      	adds	r3, #1
 800c85c:	72fb      	strb	r3, [r7, #11]
          break;
 800c85e:	e03b      	b.n	800c8d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00b      	beq.n	800c884 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c872:	695b      	ldr	r3, [r3, #20]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	7c12      	ldrb	r2, [r2, #16]
 800c878:	f107 0108 	add.w	r1, r7, #8
 800c87c:	4610      	mov	r0, r2
 800c87e:	4798      	blx	r3
 800c880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c882:	e029      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c884:	6839      	ldr	r1, [r7, #0]
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 fa63 	bl	800cd52 <USBD_CtlError>
            err++;
 800c88c:	7afb      	ldrb	r3, [r7, #11]
 800c88e:	3301      	adds	r3, #1
 800c890:	72fb      	strb	r3, [r7, #11]
          break;
 800c892:	e021      	b.n	800c8d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c89a:	699b      	ldr	r3, [r3, #24]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d00b      	beq.n	800c8b8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8a6:	699b      	ldr	r3, [r3, #24]
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	7c12      	ldrb	r2, [r2, #16]
 800c8ac:	f107 0108 	add.w	r1, r7, #8
 800c8b0:	4610      	mov	r0, r2
 800c8b2:	4798      	blx	r3
 800c8b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8b6:	e00f      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 fa49 	bl	800cd52 <USBD_CtlError>
            err++;
 800c8c0:	7afb      	ldrb	r3, [r7, #11]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c8c6:	e007      	b.n	800c8d8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c8c8:	6839      	ldr	r1, [r7, #0]
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f000 fa41 	bl	800cd52 <USBD_CtlError>
          err++;
 800c8d0:	7afb      	ldrb	r3, [r7, #11]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c8d6:	bf00      	nop
      }
      break;
 800c8d8:	e037      	b.n	800c94a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	7c1b      	ldrb	r3, [r3, #16]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d109      	bne.n	800c8f6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8ea:	f107 0208 	add.w	r2, r7, #8
 800c8ee:	4610      	mov	r0, r2
 800c8f0:	4798      	blx	r3
 800c8f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c8f4:	e029      	b.n	800c94a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c8f6:	6839      	ldr	r1, [r7, #0]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 fa2a 	bl	800cd52 <USBD_CtlError>
        err++;
 800c8fe:	7afb      	ldrb	r3, [r7, #11]
 800c900:	3301      	adds	r3, #1
 800c902:	72fb      	strb	r3, [r7, #11]
      break;
 800c904:	e021      	b.n	800c94a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	7c1b      	ldrb	r3, [r3, #16]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10d      	bne.n	800c92a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c916:	f107 0208 	add.w	r2, r7, #8
 800c91a:	4610      	mov	r0, r2
 800c91c:	4798      	blx	r3
 800c91e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3301      	adds	r3, #1
 800c924:	2207      	movs	r2, #7
 800c926:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c928:	e00f      	b.n	800c94a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c92a:	6839      	ldr	r1, [r7, #0]
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fa10 	bl	800cd52 <USBD_CtlError>
        err++;
 800c932:	7afb      	ldrb	r3, [r7, #11]
 800c934:	3301      	adds	r3, #1
 800c936:	72fb      	strb	r3, [r7, #11]
      break;
 800c938:	e007      	b.n	800c94a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c93a:	6839      	ldr	r1, [r7, #0]
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f000 fa08 	bl	800cd52 <USBD_CtlError>
      err++;
 800c942:	7afb      	ldrb	r3, [r7, #11]
 800c944:	3301      	adds	r3, #1
 800c946:	72fb      	strb	r3, [r7, #11]
      break;
 800c948:	bf00      	nop
  }

  if (err != 0U)
 800c94a:	7afb      	ldrb	r3, [r7, #11]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d11e      	bne.n	800c98e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	88db      	ldrh	r3, [r3, #6]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d016      	beq.n	800c986 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c958:	893b      	ldrh	r3, [r7, #8]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00e      	beq.n	800c97c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	88da      	ldrh	r2, [r3, #6]
 800c962:	893b      	ldrh	r3, [r7, #8]
 800c964:	4293      	cmp	r3, r2
 800c966:	bf28      	it	cs
 800c968:	4613      	movcs	r3, r2
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c96e:	893b      	ldrh	r3, [r7, #8]
 800c970:	461a      	mov	r2, r3
 800c972:	68f9      	ldr	r1, [r7, #12]
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 fa5d 	bl	800ce34 <USBD_CtlSendData>
 800c97a:	e009      	b.n	800c990 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c97c:	6839      	ldr	r1, [r7, #0]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 f9e7 	bl	800cd52 <USBD_CtlError>
 800c984:	e004      	b.n	800c990 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 faae 	bl	800cee8 <USBD_CtlSendStatus>
 800c98c:	e000      	b.n	800c990 <USBD_GetDescriptor+0x320>
    return;
 800c98e:	bf00      	nop
  }
}
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop

0800c998 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	889b      	ldrh	r3, [r3, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d131      	bne.n	800ca0e <USBD_SetAddress+0x76>
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	88db      	ldrh	r3, [r3, #6]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d12d      	bne.n	800ca0e <USBD_SetAddress+0x76>
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	885b      	ldrh	r3, [r3, #2]
 800c9b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9b8:	d829      	bhi.n	800ca0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	885b      	ldrh	r3, [r3, #2]
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9cc:	b2db      	uxtb	r3, r3
 800c9ce:	2b03      	cmp	r3, #3
 800c9d0:	d104      	bne.n	800c9dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c9d2:	6839      	ldr	r1, [r7, #0]
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 f9bc 	bl	800cd52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9da:	e01d      	b.n	800ca18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7bfa      	ldrb	r2, [r7, #15]
 800c9e0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 ffe1 	bl	800d9b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 fa7a 	bl	800cee8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d004      	beq.n	800ca04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca02:	e009      	b.n	800ca18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2201      	movs	r2, #1
 800ca08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca0c:	e004      	b.n	800ca18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca0e:	6839      	ldr	r1, [r7, #0]
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 f99e 	bl	800cd52 <USBD_CtlError>
  }
}
 800ca16:	bf00      	nop
 800ca18:	bf00      	nop
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	885b      	ldrh	r3, [r3, #2]
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	4b4e      	ldr	r3, [pc, #312]	@ (800cb70 <USBD_SetConfig+0x150>)
 800ca36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ca38:	4b4d      	ldr	r3, [pc, #308]	@ (800cb70 <USBD_SetConfig+0x150>)
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d905      	bls.n	800ca4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ca40:	6839      	ldr	r1, [r7, #0]
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f985 	bl	800cd52 <USBD_CtlError>
    return USBD_FAIL;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	e08c      	b.n	800cb66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d002      	beq.n	800ca5e <USBD_SetConfig+0x3e>
 800ca58:	2b03      	cmp	r3, #3
 800ca5a:	d029      	beq.n	800cab0 <USBD_SetConfig+0x90>
 800ca5c:	e075      	b.n	800cb4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ca5e:	4b44      	ldr	r3, [pc, #272]	@ (800cb70 <USBD_SetConfig+0x150>)
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d020      	beq.n	800caa8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ca66:	4b42      	ldr	r3, [pc, #264]	@ (800cb70 <USBD_SetConfig+0x150>)
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca70:	4b3f      	ldr	r3, [pc, #252]	@ (800cb70 <USBD_SetConfig+0x150>)
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	4619      	mov	r1, r3
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7fe ffb9 	bl	800b9ee <USBD_SetClassConfig>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d008      	beq.n	800ca98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ca86:	6839      	ldr	r1, [r7, #0]
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 f962 	bl	800cd52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2202      	movs	r2, #2
 800ca92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca96:	e065      	b.n	800cb64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 fa25 	bl	800cee8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2203      	movs	r2, #3
 800caa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800caa6:	e05d      	b.n	800cb64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fa1d 	bl	800cee8 <USBD_CtlSendStatus>
      break;
 800caae:	e059      	b.n	800cb64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cab0:	4b2f      	ldr	r3, [pc, #188]	@ (800cb70 <USBD_SetConfig+0x150>)
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d112      	bne.n	800cade <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2202      	movs	r2, #2
 800cabc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cac0:	4b2b      	ldr	r3, [pc, #172]	@ (800cb70 <USBD_SetConfig+0x150>)
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	461a      	mov	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800caca:	4b29      	ldr	r3, [pc, #164]	@ (800cb70 <USBD_SetConfig+0x150>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	4619      	mov	r1, r3
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7fe ffa8 	bl	800ba26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 fa06 	bl	800cee8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cadc:	e042      	b.n	800cb64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cade:	4b24      	ldr	r3, [pc, #144]	@ (800cb70 <USBD_SetConfig+0x150>)
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	461a      	mov	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d02a      	beq.n	800cb42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	4619      	mov	r1, r3
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f7fe ff96 	bl	800ba26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cafa:	4b1d      	ldr	r3, [pc, #116]	@ (800cb70 <USBD_SetConfig+0x150>)
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	461a      	mov	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb04:	4b1a      	ldr	r3, [pc, #104]	@ (800cb70 <USBD_SetConfig+0x150>)
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7fe ff6f 	bl	800b9ee <USBD_SetClassConfig>
 800cb10:	4603      	mov	r3, r0
 800cb12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb14:	7bfb      	ldrb	r3, [r7, #15]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00f      	beq.n	800cb3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cb1a:	6839      	ldr	r1, [r7, #0]
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 f918 	bl	800cd52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7fe ff7b 	bl	800ba26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2202      	movs	r2, #2
 800cb34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb38:	e014      	b.n	800cb64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f9d4 	bl	800cee8 <USBD_CtlSendStatus>
      break;
 800cb40:	e010      	b.n	800cb64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f9d0 	bl	800cee8 <USBD_CtlSendStatus>
      break;
 800cb48:	e00c      	b.n	800cb64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cb4a:	6839      	ldr	r1, [r7, #0]
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 f900 	bl	800cd52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb52:	4b07      	ldr	r3, [pc, #28]	@ (800cb70 <USBD_SetConfig+0x150>)
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	4619      	mov	r1, r3
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f7fe ff64 	bl	800ba26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cb5e:	2303      	movs	r3, #3
 800cb60:	73fb      	strb	r3, [r7, #15]
      break;
 800cb62:	bf00      	nop
  }

  return ret;
 800cb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	200039a0 	.word	0x200039a0

0800cb74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	88db      	ldrh	r3, [r3, #6]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d004      	beq.n	800cb90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cb86:	6839      	ldr	r1, [r7, #0]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 f8e2 	bl	800cd52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cb8e:	e023      	b.n	800cbd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	2b02      	cmp	r3, #2
 800cb9a:	dc02      	bgt.n	800cba2 <USBD_GetConfig+0x2e>
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	dc03      	bgt.n	800cba8 <USBD_GetConfig+0x34>
 800cba0:	e015      	b.n	800cbce <USBD_GetConfig+0x5a>
 800cba2:	2b03      	cmp	r3, #3
 800cba4:	d00b      	beq.n	800cbbe <USBD_GetConfig+0x4a>
 800cba6:	e012      	b.n	800cbce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	3308      	adds	r3, #8
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 f93c 	bl	800ce34 <USBD_CtlSendData>
        break;
 800cbbc:	e00c      	b.n	800cbd8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	3304      	adds	r3, #4
 800cbc2:	2201      	movs	r2, #1
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 f934 	bl	800ce34 <USBD_CtlSendData>
        break;
 800cbcc:	e004      	b.n	800cbd8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cbce:	6839      	ldr	r1, [r7, #0]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f000 f8be 	bl	800cd52 <USBD_CtlError>
        break;
 800cbd6:	bf00      	nop
}
 800cbd8:	bf00      	nop
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d81e      	bhi.n	800cc36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	88db      	ldrh	r3, [r3, #6]
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d004      	beq.n	800cc0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 f8a5 	bl	800cd52 <USBD_CtlError>
        break;
 800cc08:	e01a      	b.n	800cc40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d005      	beq.n	800cc26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	f043 0202 	orr.w	r2, r3, #2
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	330c      	adds	r3, #12
 800cc2a:	2202      	movs	r2, #2
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 f900 	bl	800ce34 <USBD_CtlSendData>
      break;
 800cc34:	e004      	b.n	800cc40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cc36:	6839      	ldr	r1, [r7, #0]
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 f88a 	bl	800cd52 <USBD_CtlError>
      break;
 800cc3e:	bf00      	nop
  }
}
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	885b      	ldrh	r3, [r3, #2]
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d107      	bne.n	800cc6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f940 	bl	800cee8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cc68:	e013      	b.n	800cc92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	885b      	ldrh	r3, [r3, #2]
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d10b      	bne.n	800cc8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	889b      	ldrh	r3, [r3, #4]
 800cc76:	0a1b      	lsrs	r3, r3, #8
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f930 	bl	800cee8 <USBD_CtlSendStatus>
}
 800cc88:	e003      	b.n	800cc92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cc8a:	6839      	ldr	r1, [r7, #0]
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f860 	bl	800cd52 <USBD_CtlError>
}
 800cc92:	bf00      	nop
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b082      	sub	sp, #8
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccaa:	b2db      	uxtb	r3, r3
 800ccac:	3b01      	subs	r3, #1
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d80b      	bhi.n	800ccca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	885b      	ldrh	r3, [r3, #2]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d10c      	bne.n	800ccd4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 f910 	bl	800cee8 <USBD_CtlSendStatus>
      }
      break;
 800ccc8:	e004      	b.n	800ccd4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ccca:	6839      	ldr	r1, [r7, #0]
 800cccc:	6878      	ldr	r0, [r7, #4]
 800ccce:	f000 f840 	bl	800cd52 <USBD_CtlError>
      break;
 800ccd2:	e000      	b.n	800ccd6 <USBD_ClrFeature+0x3c>
      break;
 800ccd4:	bf00      	nop
  }
}
 800ccd6:	bf00      	nop
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b084      	sub	sp, #16
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	781a      	ldrb	r2, [r3, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	781a      	ldrb	r2, [r3, #0]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	3301      	adds	r3, #1
 800cd06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f7ff fa16 	bl	800c13a <SWAPBYTE>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	461a      	mov	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	3301      	adds	r3, #1
 800cd20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cd22:	68f8      	ldr	r0, [r7, #12]
 800cd24:	f7ff fa09 	bl	800c13a <SWAPBYTE>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	3301      	adds	r3, #1
 800cd34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f7ff f9fc 	bl	800c13a <SWAPBYTE>
 800cd42:	4603      	mov	r3, r0
 800cd44:	461a      	mov	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	80da      	strh	r2, [r3, #6]
}
 800cd4a:	bf00      	nop
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b082      	sub	sp, #8
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd5c:	2180      	movs	r1, #128	@ 0x80
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 fd8e 	bl	800d880 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cd64:	2100      	movs	r1, #0
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fd8a 	bl	800d880 <USBD_LL_StallEP>
}
 800cd6c:	bf00      	nop
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b086      	sub	sp, #24
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cd80:	2300      	movs	r3, #0
 800cd82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d036      	beq.n	800cdf8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cd8e:	6938      	ldr	r0, [r7, #16]
 800cd90:	f000 f836 	bl	800ce00 <USBD_GetLen>
 800cd94:	4603      	mov	r3, r0
 800cd96:	3301      	adds	r3, #1
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	005b      	lsls	r3, r3, #1
 800cd9c:	b29a      	uxth	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cda2:	7dfb      	ldrb	r3, [r7, #23]
 800cda4:	68ba      	ldr	r2, [r7, #8]
 800cda6:	4413      	add	r3, r2
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	7812      	ldrb	r2, [r2, #0]
 800cdac:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	68ba      	ldr	r2, [r7, #8]
 800cdb8:	4413      	add	r3, r2
 800cdba:	2203      	movs	r2, #3
 800cdbc:	701a      	strb	r2, [r3, #0]
  idx++;
 800cdbe:	7dfb      	ldrb	r3, [r7, #23]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cdc4:	e013      	b.n	800cdee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cdc6:	7dfb      	ldrb	r3, [r7, #23]
 800cdc8:	68ba      	ldr	r2, [r7, #8]
 800cdca:	4413      	add	r3, r2
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	7812      	ldrb	r2, [r2, #0]
 800cdd0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	613b      	str	r3, [r7, #16]
    idx++;
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
 800cdda:	3301      	adds	r3, #1
 800cddc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cdde:	7dfb      	ldrb	r3, [r7, #23]
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	4413      	add	r3, r2
 800cde4:	2200      	movs	r2, #0
 800cde6:	701a      	strb	r2, [r3, #0]
    idx++;
 800cde8:	7dfb      	ldrb	r3, [r7, #23]
 800cdea:	3301      	adds	r3, #1
 800cdec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d1e7      	bne.n	800cdc6 <USBD_GetString+0x52>
 800cdf6:	e000      	b.n	800cdfa <USBD_GetString+0x86>
    return;
 800cdf8:	bf00      	nop
  }
}
 800cdfa:	3718      	adds	r7, #24
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ce10:	e005      	b.n	800ce1e <USBD_GetLen+0x1e>
  {
    len++;
 800ce12:	7bfb      	ldrb	r3, [r7, #15]
 800ce14:	3301      	adds	r3, #1
 800ce16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d1f5      	bne.n	800ce12 <USBD_GetLen+0x12>
  }

  return len;
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3714      	adds	r7, #20
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2202      	movs	r2, #2
 800ce44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	687a      	ldr	r2, [r7, #4]
 800ce4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	68ba      	ldr	r2, [r7, #8]
 800ce58:	2100      	movs	r1, #0
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f000 fdde 	bl	800da1c <USBD_LL_Transmit>

  return USBD_OK;
 800ce60:	2300      	movs	r3, #0
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b084      	sub	sp, #16
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	60f8      	str	r0, [r7, #12]
 800ce72:	60b9      	str	r1, [r7, #8]
 800ce74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	68f8      	ldr	r0, [r7, #12]
 800ce7e:	f000 fdcd 	bl	800da1c <USBD_LL_Transmit>

  return USBD_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2203      	movs	r2, #3
 800ce9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	68ba      	ldr	r2, [r7, #8]
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f000 fde8 	bl	800da8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cebc:	2300      	movs	r3, #0
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b084      	sub	sp, #16
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	60f8      	str	r0, [r7, #12]
 800cece:	60b9      	str	r1, [r7, #8]
 800ced0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	2100      	movs	r1, #0
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f000 fdd7 	bl	800da8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cede:	2300      	movs	r3, #0
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3710      	adds	r7, #16
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2204      	movs	r2, #4
 800cef4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cef8:	2300      	movs	r3, #0
 800cefa:	2200      	movs	r2, #0
 800cefc:	2100      	movs	r1, #0
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fd8c 	bl	800da1c <USBD_LL_Transmit>

  return USBD_OK;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b082      	sub	sp, #8
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2205      	movs	r2, #5
 800cf1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cf1e:	2300      	movs	r3, #0
 800cf20:	2200      	movs	r2, #0
 800cf22:	2100      	movs	r1, #0
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f000 fdb1 	bl	800da8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	4912      	ldr	r1, [pc, #72]	@ (800cf84 <MX_USB_DEVICE_Init+0x50>)
 800cf3c:	4812      	ldr	r0, [pc, #72]	@ (800cf88 <MX_USB_DEVICE_Init+0x54>)
 800cf3e:	f7fe fcd9 	bl	800b8f4 <USBD_Init>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d001      	beq.n	800cf4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf48:	f7f4 facf 	bl	80014ea <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cf4c:	490f      	ldr	r1, [pc, #60]	@ (800cf8c <MX_USB_DEVICE_Init+0x58>)
 800cf4e:	480e      	ldr	r0, [pc, #56]	@ (800cf88 <MX_USB_DEVICE_Init+0x54>)
 800cf50:	f7fe fd00 	bl	800b954 <USBD_RegisterClass>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf5a:	f7f4 fac6 	bl	80014ea <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cf5e:	490c      	ldr	r1, [pc, #48]	@ (800cf90 <MX_USB_DEVICE_Init+0x5c>)
 800cf60:	4809      	ldr	r0, [pc, #36]	@ (800cf88 <MX_USB_DEVICE_Init+0x54>)
 800cf62:	f7fe fbf7 	bl	800b754 <USBD_CDC_RegisterInterface>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cf6c:	f7f4 fabd 	bl	80014ea <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cf70:	4805      	ldr	r0, [pc, #20]	@ (800cf88 <MX_USB_DEVICE_Init+0x54>)
 800cf72:	f7fe fd25 	bl	800b9c0 <USBD_Start>
 800cf76:	4603      	mov	r3, r0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d001      	beq.n	800cf80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cf7c:	f7f4 fab5 	bl	80014ea <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cf80:	bf00      	nop
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	200000ac 	.word	0x200000ac
 800cf88:	200039a4 	.word	0x200039a4
 800cf8c:	20000018 	.word	0x20000018
 800cf90:	20000098 	.word	0x20000098

0800cf94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cf98:	2200      	movs	r2, #0
 800cf9a:	4905      	ldr	r1, [pc, #20]	@ (800cfb0 <CDC_Init_FS+0x1c>)
 800cf9c:	4805      	ldr	r0, [pc, #20]	@ (800cfb4 <CDC_Init_FS+0x20>)
 800cf9e:	f7fe fbf3 	bl	800b788 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cfa2:	4905      	ldr	r1, [pc, #20]	@ (800cfb8 <CDC_Init_FS+0x24>)
 800cfa4:	4803      	ldr	r0, [pc, #12]	@ (800cfb4 <CDC_Init_FS+0x20>)
 800cfa6:	f7fe fc11 	bl	800b7cc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cfaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	20004480 	.word	0x20004480
 800cfb4:	200039a4 	.word	0x200039a4
 800cfb8:	20003c80 	.word	0x20003c80

0800cfbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cfc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	6039      	str	r1, [r7, #0]
 800cfd6:	71fb      	strb	r3, [r7, #7]
 800cfd8:	4613      	mov	r3, r2
 800cfda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cfdc:	79fb      	ldrb	r3, [r7, #7]
 800cfde:	2b23      	cmp	r3, #35	@ 0x23
 800cfe0:	d84a      	bhi.n	800d078 <CDC_Control_FS+0xac>
 800cfe2:	a201      	add	r2, pc, #4	@ (adr r2, 800cfe8 <CDC_Control_FS+0x1c>)
 800cfe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe8:	0800d079 	.word	0x0800d079
 800cfec:	0800d079 	.word	0x0800d079
 800cff0:	0800d079 	.word	0x0800d079
 800cff4:	0800d079 	.word	0x0800d079
 800cff8:	0800d079 	.word	0x0800d079
 800cffc:	0800d079 	.word	0x0800d079
 800d000:	0800d079 	.word	0x0800d079
 800d004:	0800d079 	.word	0x0800d079
 800d008:	0800d079 	.word	0x0800d079
 800d00c:	0800d079 	.word	0x0800d079
 800d010:	0800d079 	.word	0x0800d079
 800d014:	0800d079 	.word	0x0800d079
 800d018:	0800d079 	.word	0x0800d079
 800d01c:	0800d079 	.word	0x0800d079
 800d020:	0800d079 	.word	0x0800d079
 800d024:	0800d079 	.word	0x0800d079
 800d028:	0800d079 	.word	0x0800d079
 800d02c:	0800d079 	.word	0x0800d079
 800d030:	0800d079 	.word	0x0800d079
 800d034:	0800d079 	.word	0x0800d079
 800d038:	0800d079 	.word	0x0800d079
 800d03c:	0800d079 	.word	0x0800d079
 800d040:	0800d079 	.word	0x0800d079
 800d044:	0800d079 	.word	0x0800d079
 800d048:	0800d079 	.word	0x0800d079
 800d04c:	0800d079 	.word	0x0800d079
 800d050:	0800d079 	.word	0x0800d079
 800d054:	0800d079 	.word	0x0800d079
 800d058:	0800d079 	.word	0x0800d079
 800d05c:	0800d079 	.word	0x0800d079
 800d060:	0800d079 	.word	0x0800d079
 800d064:	0800d079 	.word	0x0800d079
 800d068:	0800d079 	.word	0x0800d079
 800d06c:	0800d079 	.word	0x0800d079
 800d070:	0800d079 	.word	0x0800d079
 800d074:	0800d079 	.word	0x0800d079
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d078:	bf00      	nop
  }

  return (USBD_OK);
 800d07a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d092:	6879      	ldr	r1, [r7, #4]
 800d094:	4808      	ldr	r0, [pc, #32]	@ (800d0b8 <CDC_Receive_FS+0x30>)
 800d096:	f7fe fb99 	bl	800b7cc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d09a:	4807      	ldr	r0, [pc, #28]	@ (800d0b8 <CDC_Receive_FS+0x30>)
 800d09c:	f7fe fbf4 	bl	800b888 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  //USB_My_Receive(Buf, *Len);
  comms_cdc_rx_callback(Buf, *Len);
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f7f3 fe6c 	bl	8000d84 <comms_cdc_rx_callback>

  return (USBD_OK);
 800d0ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3708      	adds	r7, #8
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	200039a4 	.word	0x200039a4

0800d0bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d0cc:	4b0d      	ldr	r3, [pc, #52]	@ (800d104 <CDC_Transmit_FS+0x48>)
 800d0ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d0d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d001      	beq.n	800d0e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e00b      	b.n	800d0fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d0e2:	887b      	ldrh	r3, [r7, #2]
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	6879      	ldr	r1, [r7, #4]
 800d0e8:	4806      	ldr	r0, [pc, #24]	@ (800d104 <CDC_Transmit_FS+0x48>)
 800d0ea:	f7fe fb4d 	bl	800b788 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d0ee:	4805      	ldr	r0, [pc, #20]	@ (800d104 <CDC_Transmit_FS+0x48>)
 800d0f0:	f7fe fb8a 	bl	800b808 <USBD_CDC_TransmitPacket>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	200039a4 	.word	0x200039a4

0800d108 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d108:	b480      	push	{r7}
 800d10a:	b087      	sub	sp, #28
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	4613      	mov	r3, r2
 800d114:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d11a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d11e:	4618      	mov	r0, r3
 800d120:	371c      	adds	r7, #28
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
	...

0800d12c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	4603      	mov	r3, r0
 800d134:	6039      	str	r1, [r7, #0]
 800d136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	2212      	movs	r2, #18
 800d13c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d13e:	4b03      	ldr	r3, [pc, #12]	@ (800d14c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d140:	4618      	mov	r0, r3
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	200000cc 	.word	0x200000cc

0800d150 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	4603      	mov	r3, r0
 800d158:	6039      	str	r1, [r7, #0]
 800d15a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	2204      	movs	r2, #4
 800d160:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d162:	4b03      	ldr	r3, [pc, #12]	@ (800d170 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d164:	4618      	mov	r0, r3
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr
 800d170:	200000ec 	.word	0x200000ec

0800d174 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	4603      	mov	r3, r0
 800d17c:	6039      	str	r1, [r7, #0]
 800d17e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d180:	79fb      	ldrb	r3, [r7, #7]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d105      	bne.n	800d192 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d186:	683a      	ldr	r2, [r7, #0]
 800d188:	4907      	ldr	r1, [pc, #28]	@ (800d1a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d18a:	4808      	ldr	r0, [pc, #32]	@ (800d1ac <USBD_FS_ProductStrDescriptor+0x38>)
 800d18c:	f7ff fdf2 	bl	800cd74 <USBD_GetString>
 800d190:	e004      	b.n	800d19c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d192:	683a      	ldr	r2, [r7, #0]
 800d194:	4904      	ldr	r1, [pc, #16]	@ (800d1a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d196:	4805      	ldr	r0, [pc, #20]	@ (800d1ac <USBD_FS_ProductStrDescriptor+0x38>)
 800d198:	f7ff fdec 	bl	800cd74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d19c:	4b02      	ldr	r3, [pc, #8]	@ (800d1a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	20004c80 	.word	0x20004c80
 800d1ac:	0800dc88 	.word	0x0800dc88

0800d1b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	6039      	str	r1, [r7, #0]
 800d1ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d1bc:	683a      	ldr	r2, [r7, #0]
 800d1be:	4904      	ldr	r1, [pc, #16]	@ (800d1d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d1c0:	4804      	ldr	r0, [pc, #16]	@ (800d1d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d1c2:	f7ff fdd7 	bl	800cd74 <USBD_GetString>
  return USBD_StrDesc;
 800d1c6:	4b02      	ldr	r3, [pc, #8]	@ (800d1d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	20004c80 	.word	0x20004c80
 800d1d4:	0800dca0 	.word	0x0800dca0

0800d1d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	4603      	mov	r3, r0
 800d1e0:	6039      	str	r1, [r7, #0]
 800d1e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	221a      	movs	r2, #26
 800d1e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d1ea:	f000 f855 	bl	800d298 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d1ee:	4b02      	ldr	r3, [pc, #8]	@ (800d1f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	200000f0 	.word	0x200000f0

0800d1fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	4603      	mov	r3, r0
 800d204:	6039      	str	r1, [r7, #0]
 800d206:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d208:	79fb      	ldrb	r3, [r7, #7]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d105      	bne.n	800d21a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d20e:	683a      	ldr	r2, [r7, #0]
 800d210:	4907      	ldr	r1, [pc, #28]	@ (800d230 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d212:	4808      	ldr	r0, [pc, #32]	@ (800d234 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d214:	f7ff fdae 	bl	800cd74 <USBD_GetString>
 800d218:	e004      	b.n	800d224 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	4904      	ldr	r1, [pc, #16]	@ (800d230 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d21e:	4805      	ldr	r0, [pc, #20]	@ (800d234 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d220:	f7ff fda8 	bl	800cd74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d224:	4b02      	ldr	r3, [pc, #8]	@ (800d230 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d226:	4618      	mov	r0, r3
 800d228:	3708      	adds	r7, #8
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	20004c80 	.word	0x20004c80
 800d234:	0800dcb4 	.word	0x0800dcb4

0800d238 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	4603      	mov	r3, r0
 800d240:	6039      	str	r1, [r7, #0]
 800d242:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d244:	79fb      	ldrb	r3, [r7, #7]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d105      	bne.n	800d256 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d24a:	683a      	ldr	r2, [r7, #0]
 800d24c:	4907      	ldr	r1, [pc, #28]	@ (800d26c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d24e:	4808      	ldr	r0, [pc, #32]	@ (800d270 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d250:	f7ff fd90 	bl	800cd74 <USBD_GetString>
 800d254:	e004      	b.n	800d260 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	4904      	ldr	r1, [pc, #16]	@ (800d26c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d25a:	4805      	ldr	r0, [pc, #20]	@ (800d270 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d25c:	f7ff fd8a 	bl	800cd74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d260:	4b02      	ldr	r3, [pc, #8]	@ (800d26c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d262:	4618      	mov	r0, r3
 800d264:	3708      	adds	r7, #8
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	20004c80 	.word	0x20004c80
 800d270:	0800dcc0 	.word	0x0800dcc0

0800d274 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d274:	b480      	push	{r7}
 800d276:	b083      	sub	sp, #12
 800d278:	af00      	add	r7, sp, #0
 800d27a:	4603      	mov	r3, r0
 800d27c:	6039      	str	r1, [r7, #0]
 800d27e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	220c      	movs	r2, #12
 800d284:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d286:	4b03      	ldr	r3, [pc, #12]	@ (800d294 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d288:	4618      	mov	r0, r3
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr
 800d294:	200000e0 	.word	0x200000e0

0800d298 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d29e:	4b0f      	ldr	r3, [pc, #60]	@ (800d2dc <Get_SerialNum+0x44>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d2a4:	4b0e      	ldr	r3, [pc, #56]	@ (800d2e0 <Get_SerialNum+0x48>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d2aa:	4b0e      	ldr	r3, [pc, #56]	@ (800d2e4 <Get_SerialNum+0x4c>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d2b0:	68fa      	ldr	r2, [r7, #12]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	4413      	add	r3, r2
 800d2b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d009      	beq.n	800d2d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d2be:	2208      	movs	r2, #8
 800d2c0:	4909      	ldr	r1, [pc, #36]	@ (800d2e8 <Get_SerialNum+0x50>)
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f000 f814 	bl	800d2f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d2c8:	2204      	movs	r2, #4
 800d2ca:	4908      	ldr	r1, [pc, #32]	@ (800d2ec <Get_SerialNum+0x54>)
 800d2cc:	68b8      	ldr	r0, [r7, #8]
 800d2ce:	f000 f80f 	bl	800d2f0 <IntToUnicode>
  }
}
 800d2d2:	bf00      	nop
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	1fff7590 	.word	0x1fff7590
 800d2e0:	1fff7594 	.word	0x1fff7594
 800d2e4:	1fff7598 	.word	0x1fff7598
 800d2e8:	200000f2 	.word	0x200000f2
 800d2ec:	20000102 	.word	0x20000102

0800d2f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b087      	sub	sp, #28
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	4613      	mov	r3, r2
 800d2fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d2fe:	2300      	movs	r3, #0
 800d300:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d302:	2300      	movs	r3, #0
 800d304:	75fb      	strb	r3, [r7, #23]
 800d306:	e027      	b.n	800d358 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	0f1b      	lsrs	r3, r3, #28
 800d30c:	2b09      	cmp	r3, #9
 800d30e:	d80b      	bhi.n	800d328 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	0f1b      	lsrs	r3, r3, #28
 800d314:	b2da      	uxtb	r2, r3
 800d316:	7dfb      	ldrb	r3, [r7, #23]
 800d318:	005b      	lsls	r3, r3, #1
 800d31a:	4619      	mov	r1, r3
 800d31c:	68bb      	ldr	r3, [r7, #8]
 800d31e:	440b      	add	r3, r1
 800d320:	3230      	adds	r2, #48	@ 0x30
 800d322:	b2d2      	uxtb	r2, r2
 800d324:	701a      	strb	r2, [r3, #0]
 800d326:	e00a      	b.n	800d33e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	0f1b      	lsrs	r3, r3, #28
 800d32c:	b2da      	uxtb	r2, r3
 800d32e:	7dfb      	ldrb	r3, [r7, #23]
 800d330:	005b      	lsls	r3, r3, #1
 800d332:	4619      	mov	r1, r3
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	440b      	add	r3, r1
 800d338:	3237      	adds	r2, #55	@ 0x37
 800d33a:	b2d2      	uxtb	r2, r2
 800d33c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	011b      	lsls	r3, r3, #4
 800d342:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d344:	7dfb      	ldrb	r3, [r7, #23]
 800d346:	005b      	lsls	r3, r3, #1
 800d348:	3301      	adds	r3, #1
 800d34a:	68ba      	ldr	r2, [r7, #8]
 800d34c:	4413      	add	r3, r2
 800d34e:	2200      	movs	r2, #0
 800d350:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d352:	7dfb      	ldrb	r3, [r7, #23]
 800d354:	3301      	adds	r3, #1
 800d356:	75fb      	strb	r3, [r7, #23]
 800d358:	7dfa      	ldrb	r2, [r7, #23]
 800d35a:	79fb      	ldrb	r3, [r7, #7]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d3d3      	bcc.n	800d308 <IntToUnicode+0x18>
  }
}
 800d360:	bf00      	nop
 800d362:	bf00      	nop
 800d364:	371c      	adds	r7, #28
 800d366:	46bd      	mov	sp, r7
 800d368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36c:	4770      	bx	lr
	...

0800d370 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b0b0      	sub	sp, #192	@ 0xc0
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d378:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d37c:	2200      	movs	r2, #0
 800d37e:	601a      	str	r2, [r3, #0]
 800d380:	605a      	str	r2, [r3, #4]
 800d382:	609a      	str	r2, [r3, #8]
 800d384:	60da      	str	r2, [r3, #12]
 800d386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d388:	f107 0318 	add.w	r3, r7, #24
 800d38c:	2294      	movs	r2, #148	@ 0x94
 800d38e:	2100      	movs	r1, #0
 800d390:	4618      	mov	r0, r3
 800d392:	f000 fc33 	bl	800dbfc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d39e:	d174      	bne.n	800d48a <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d3a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d3a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d3ac:	f107 0318 	add.w	r3, r7, #24
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7f9 f829 	bl	8006408 <HAL_RCCEx_PeriphCLKConfig>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d001      	beq.n	800d3c0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d3bc:	f7f4 f895 	bl	80014ea <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d3c0:	4b34      	ldr	r3, [pc, #208]	@ (800d494 <HAL_PCD_MspInit+0x124>)
 800d3c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3c4:	4a33      	ldr	r2, [pc, #204]	@ (800d494 <HAL_PCD_MspInit+0x124>)
 800d3c6:	f043 0301 	orr.w	r3, r3, #1
 800d3ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d3cc:	4b31      	ldr	r3, [pc, #196]	@ (800d494 <HAL_PCD_MspInit+0x124>)
 800d3ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	617b      	str	r3, [r7, #20]
 800d3d6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d3d8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800d3dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3e0:	2302      	movs	r3, #2
 800d3e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3ec:	2303      	movs	r3, #3
 800d3ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d3f2:	230a      	movs	r3, #10
 800d3f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3f8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d402:	f7f6 fcc1 	bl	8003d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d406:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d40a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d40e:	2300      	movs	r3, #0
 800d410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d414:	2300      	movs	r3, #0
 800d416:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d41a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d41e:	4619      	mov	r1, r3
 800d420:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d424:	f7f6 fcb0 	bl	8003d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d428:	4b1a      	ldr	r3, [pc, #104]	@ (800d494 <HAL_PCD_MspInit+0x124>)
 800d42a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d42c:	4a19      	ldr	r2, [pc, #100]	@ (800d494 <HAL_PCD_MspInit+0x124>)
 800d42e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d434:	4b17      	ldr	r3, [pc, #92]	@ (800d494 <HAL_PCD_MspInit+0x124>)
 800d436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d438:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d43c:	613b      	str	r3, [r7, #16]
 800d43e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d440:	4b14      	ldr	r3, [pc, #80]	@ (800d494 <HAL_PCD_MspInit+0x124>)
 800d442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d114      	bne.n	800d476 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d44c:	4b11      	ldr	r3, [pc, #68]	@ (800d494 <HAL_PCD_MspInit+0x124>)
 800d44e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d450:	4a10      	ldr	r2, [pc, #64]	@ (800d494 <HAL_PCD_MspInit+0x124>)
 800d452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d456:	6593      	str	r3, [r2, #88]	@ 0x58
 800d458:	4b0e      	ldr	r3, [pc, #56]	@ (800d494 <HAL_PCD_MspInit+0x124>)
 800d45a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d45c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d460:	60fb      	str	r3, [r7, #12]
 800d462:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d464:	f7f8 f8d8 	bl	8005618 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d468:	4b0a      	ldr	r3, [pc, #40]	@ (800d494 <HAL_PCD_MspInit+0x124>)
 800d46a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d46c:	4a09      	ldr	r2, [pc, #36]	@ (800d494 <HAL_PCD_MspInit+0x124>)
 800d46e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d472:	6593      	str	r3, [r2, #88]	@ 0x58
 800d474:	e001      	b.n	800d47a <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d476:	f7f8 f8cf 	bl	8005618 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d47a:	2200      	movs	r2, #0
 800d47c:	2100      	movs	r1, #0
 800d47e:	2043      	movs	r0, #67	@ 0x43
 800d480:	f7f6 f8d5 	bl	800362e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d484:	2043      	movs	r0, #67	@ 0x43
 800d486:	f7f6 f8ee 	bl	8003666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d48a:	bf00      	nop
 800d48c:	37c0      	adds	r7, #192	@ 0xc0
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	40021000 	.word	0x40021000

0800d498 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800d4ac:	4619      	mov	r1, r3
 800d4ae:	4610      	mov	r0, r2
 800d4b0:	f7fe fad3 	bl	800ba5a <USBD_LL_SetupStage>
}
 800d4b4:	bf00      	nop
 800d4b6:	3708      	adds	r7, #8
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d4ce:	78fa      	ldrb	r2, [r7, #3]
 800d4d0:	6879      	ldr	r1, [r7, #4]
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	00db      	lsls	r3, r3, #3
 800d4d6:	4413      	add	r3, r2
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	440b      	add	r3, r1
 800d4dc:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	78fb      	ldrb	r3, [r7, #3]
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	f7fe fb0d 	bl	800bb04 <USBD_LL_DataOutStage>
}
 800d4ea:	bf00      	nop
 800d4ec:	3708      	adds	r7, #8
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4f2:	b580      	push	{r7, lr}
 800d4f4:	b082      	sub	sp, #8
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d504:	78fa      	ldrb	r2, [r7, #3]
 800d506:	6879      	ldr	r1, [r7, #4]
 800d508:	4613      	mov	r3, r2
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	4413      	add	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	440b      	add	r3, r1
 800d512:	3348      	adds	r3, #72	@ 0x48
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	78fb      	ldrb	r3, [r7, #3]
 800d518:	4619      	mov	r1, r3
 800d51a:	f7fe fba6 	bl	800bc6a <USBD_LL_DataInStage>
}
 800d51e:	bf00      	nop
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b082      	sub	sp, #8
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d534:	4618      	mov	r0, r3
 800d536:	f7fe fce0 	bl	800befa <USBD_LL_SOF>
}
 800d53a:	bf00      	nop
 800d53c:	3708      	adds	r7, #8
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b084      	sub	sp, #16
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d54a:	2301      	movs	r3, #1
 800d54c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	2b02      	cmp	r3, #2
 800d554:	d001      	beq.n	800d55a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d556:	f7f3 ffc8 	bl	80014ea <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d560:	7bfa      	ldrb	r2, [r7, #15]
 800d562:	4611      	mov	r1, r2
 800d564:	4618      	mov	r0, r3
 800d566:	f7fe fc84 	bl	800be72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d570:	4618      	mov	r0, r3
 800d572:	f7fe fc2c 	bl	800bdce <USBD_LL_Reset>
}
 800d576:	bf00      	nop
 800d578:	3710      	adds	r7, #16
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
	...

0800d580 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	687a      	ldr	r2, [r7, #4]
 800d594:	6812      	ldr	r2, [r2, #0]
 800d596:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d59a:	f043 0301 	orr.w	r3, r3, #1
 800d59e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7fe fc73 	bl	800be92 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6a1b      	ldr	r3, [r3, #32]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d005      	beq.n	800d5c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5b4:	4b04      	ldr	r3, [pc, #16]	@ (800d5c8 <HAL_PCD_SuspendCallback+0x48>)
 800d5b6:	691b      	ldr	r3, [r3, #16]
 800d5b8:	4a03      	ldr	r2, [pc, #12]	@ (800d5c8 <HAL_PCD_SuspendCallback+0x48>)
 800d5ba:	f043 0306 	orr.w	r3, r3, #6
 800d5be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	e000ed00 	.word	0xe000ed00

0800d5cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	6812      	ldr	r2, [r2, #0]
 800d5e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d5e6:	f023 0301 	bic.w	r3, r3, #1
 800d5ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6a1b      	ldr	r3, [r3, #32]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d007      	beq.n	800d604 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5f4:	4b08      	ldr	r3, [pc, #32]	@ (800d618 <HAL_PCD_ResumeCallback+0x4c>)
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	4a07      	ldr	r2, [pc, #28]	@ (800d618 <HAL_PCD_ResumeCallback+0x4c>)
 800d5fa:	f023 0306 	bic.w	r3, r3, #6
 800d5fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d600:	f000 faf6 	bl	800dbf0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fe fc5d 	bl	800beca <USBD_LL_Resume>
}
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	e000ed00 	.word	0xe000ed00

0800d61c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	460b      	mov	r3, r1
 800d626:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d62e:	78fa      	ldrb	r2, [r7, #3]
 800d630:	4611      	mov	r1, r2
 800d632:	4618      	mov	r0, r3
 800d634:	f7fe fcb3 	bl	800bf9e <USBD_LL_IsoOUTIncomplete>
}
 800d638:	bf00      	nop
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	460b      	mov	r3, r1
 800d64a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d652:	78fa      	ldrb	r2, [r7, #3]
 800d654:	4611      	mov	r1, r2
 800d656:	4618      	mov	r0, r3
 800d658:	f7fe fc6f 	bl	800bf3a <USBD_LL_IsoINIncomplete>
}
 800d65c:	bf00      	nop
 800d65e:	3708      	adds	r7, #8
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d672:	4618      	mov	r0, r3
 800d674:	f7fe fcc5 	bl	800c002 <USBD_LL_DevConnected>
}
 800d678:	bf00      	nop
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b082      	sub	sp, #8
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fe fcc2 	bl	800c018 <USBD_LL_DevDisconnected>
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d13c      	bne.n	800d726 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d6ac:	4a20      	ldr	r2, [pc, #128]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	4a1e      	ldr	r2, [pc, #120]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6b8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d6bc:	4b1c      	ldr	r3, [pc, #112]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d6c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d6c4:	4b1a      	ldr	r3, [pc, #104]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6c6:	2206      	movs	r2, #6
 800d6c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d6ca:	4b19      	ldr	r3, [pc, #100]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6cc:	2202      	movs	r2, #2
 800d6ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d6d0:	4b17      	ldr	r3, [pc, #92]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6d2:	2202      	movs	r2, #2
 800d6d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d6d6:	4b16      	ldr	r3, [pc, #88]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6d8:	2200      	movs	r2, #0
 800d6da:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d6dc:	4b14      	ldr	r3, [pc, #80]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d6e2:	4b13      	ldr	r3, [pc, #76]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d6e8:	4b11      	ldr	r3, [pc, #68]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d6ee:	4b10      	ldr	r3, [pc, #64]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d6f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d6fa:	480d      	ldr	r0, [pc, #52]	@ (800d730 <USBD_LL_Init+0x94>)
 800d6fc:	f7f6 fd20 	bl	8004140 <HAL_PCD_Init>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d001      	beq.n	800d70a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d706:	f7f3 fef0 	bl	80014ea <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d70a:	2180      	movs	r1, #128	@ 0x80
 800d70c:	4808      	ldr	r0, [pc, #32]	@ (800d730 <USBD_LL_Init+0x94>)
 800d70e:	f7f7 fe8a 	bl	8005426 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d712:	2240      	movs	r2, #64	@ 0x40
 800d714:	2100      	movs	r1, #0
 800d716:	4806      	ldr	r0, [pc, #24]	@ (800d730 <USBD_LL_Init+0x94>)
 800d718:	f7f7 fe3e 	bl	8005398 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d71c:	2280      	movs	r2, #128	@ 0x80
 800d71e:	2101      	movs	r1, #1
 800d720:	4803      	ldr	r0, [pc, #12]	@ (800d730 <USBD_LL_Init+0x94>)
 800d722:	f7f7 fe39 	bl	8005398 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d726:	2300      	movs	r3, #0
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3708      	adds	r7, #8
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	20004e80 	.word	0x20004e80

0800d734 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d73c:	2300      	movs	r3, #0
 800d73e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d740:	2300      	movs	r3, #0
 800d742:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7f6 fe1c 	bl	8004388 <HAL_PCD_Start>
 800d750:	4603      	mov	r3, r0
 800d752:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d754:	7bbb      	ldrb	r3, [r7, #14]
 800d756:	2b03      	cmp	r3, #3
 800d758:	d816      	bhi.n	800d788 <USBD_LL_Start+0x54>
 800d75a:	a201      	add	r2, pc, #4	@ (adr r2, 800d760 <USBD_LL_Start+0x2c>)
 800d75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d760:	0800d771 	.word	0x0800d771
 800d764:	0800d777 	.word	0x0800d777
 800d768:	0800d77d 	.word	0x0800d77d
 800d76c:	0800d783 	.word	0x0800d783
    case HAL_OK :
      usb_status = USBD_OK;
 800d770:	2300      	movs	r3, #0
 800d772:	73fb      	strb	r3, [r7, #15]
    break;
 800d774:	e00b      	b.n	800d78e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d776:	2303      	movs	r3, #3
 800d778:	73fb      	strb	r3, [r7, #15]
    break;
 800d77a:	e008      	b.n	800d78e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d77c:	2301      	movs	r3, #1
 800d77e:	73fb      	strb	r3, [r7, #15]
    break;
 800d780:	e005      	b.n	800d78e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d782:	2303      	movs	r3, #3
 800d784:	73fb      	strb	r3, [r7, #15]
    break;
 800d786:	e002      	b.n	800d78e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d788:	2303      	movs	r3, #3
 800d78a:	73fb      	strb	r3, [r7, #15]
    break;
 800d78c:	bf00      	nop
  }
  return usb_status;
 800d78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d790:	4618      	mov	r0, r3
 800d792:	3710      	adds	r7, #16
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
 800d7a0:	4608      	mov	r0, r1
 800d7a2:	4611      	mov	r1, r2
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	70fb      	strb	r3, [r7, #3]
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	70bb      	strb	r3, [r7, #2]
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d7c0:	78bb      	ldrb	r3, [r7, #2]
 800d7c2:	883a      	ldrh	r2, [r7, #0]
 800d7c4:	78f9      	ldrb	r1, [r7, #3]
 800d7c6:	f7f7 fac6 	bl	8004d56 <HAL_PCD_EP_Open>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d7ce:	7bbb      	ldrb	r3, [r7, #14]
 800d7d0:	2b03      	cmp	r3, #3
 800d7d2:	d817      	bhi.n	800d804 <USBD_LL_OpenEP+0x6c>
 800d7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800d7dc <USBD_LL_OpenEP+0x44>)
 800d7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7da:	bf00      	nop
 800d7dc:	0800d7ed 	.word	0x0800d7ed
 800d7e0:	0800d7f3 	.word	0x0800d7f3
 800d7e4:	0800d7f9 	.word	0x0800d7f9
 800d7e8:	0800d7ff 	.word	0x0800d7ff
    case HAL_OK :
      usb_status = USBD_OK;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d7f0:	e00b      	b.n	800d80a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d7f2:	2303      	movs	r3, #3
 800d7f4:	73fb      	strb	r3, [r7, #15]
    break;
 800d7f6:	e008      	b.n	800d80a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d7fc:	e005      	b.n	800d80a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d7fe:	2303      	movs	r3, #3
 800d800:	73fb      	strb	r3, [r7, #15]
    break;
 800d802:	e002      	b.n	800d80a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d804:	2303      	movs	r3, #3
 800d806:	73fb      	strb	r3, [r7, #15]
    break;
 800d808:	bf00      	nop
  }
  return usb_status;
 800d80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	460b      	mov	r3, r1
 800d81e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d824:	2300      	movs	r3, #0
 800d826:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d82e:	78fa      	ldrb	r2, [r7, #3]
 800d830:	4611      	mov	r1, r2
 800d832:	4618      	mov	r0, r3
 800d834:	f7f7 faf7 	bl	8004e26 <HAL_PCD_EP_Close>
 800d838:	4603      	mov	r3, r0
 800d83a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d83c:	7bbb      	ldrb	r3, [r7, #14]
 800d83e:	2b03      	cmp	r3, #3
 800d840:	d816      	bhi.n	800d870 <USBD_LL_CloseEP+0x5c>
 800d842:	a201      	add	r2, pc, #4	@ (adr r2, 800d848 <USBD_LL_CloseEP+0x34>)
 800d844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d848:	0800d859 	.word	0x0800d859
 800d84c:	0800d85f 	.word	0x0800d85f
 800d850:	0800d865 	.word	0x0800d865
 800d854:	0800d86b 	.word	0x0800d86b
    case HAL_OK :
      usb_status = USBD_OK;
 800d858:	2300      	movs	r3, #0
 800d85a:	73fb      	strb	r3, [r7, #15]
    break;
 800d85c:	e00b      	b.n	800d876 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d85e:	2303      	movs	r3, #3
 800d860:	73fb      	strb	r3, [r7, #15]
    break;
 800d862:	e008      	b.n	800d876 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d864:	2301      	movs	r3, #1
 800d866:	73fb      	strb	r3, [r7, #15]
    break;
 800d868:	e005      	b.n	800d876 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d86a:	2303      	movs	r3, #3
 800d86c:	73fb      	strb	r3, [r7, #15]
    break;
 800d86e:	e002      	b.n	800d876 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d870:	2303      	movs	r3, #3
 800d872:	73fb      	strb	r3, [r7, #15]
    break;
 800d874:	bf00      	nop
  }
  return usb_status;
 800d876:	7bfb      	ldrb	r3, [r7, #15]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	460b      	mov	r3, r1
 800d88a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d88c:	2300      	movs	r3, #0
 800d88e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d890:	2300      	movs	r3, #0
 800d892:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d89a:	78fa      	ldrb	r2, [r7, #3]
 800d89c:	4611      	mov	r1, r2
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7f7 fb86 	bl	8004fb0 <HAL_PCD_EP_SetStall>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d8a8:	7bbb      	ldrb	r3, [r7, #14]
 800d8aa:	2b03      	cmp	r3, #3
 800d8ac:	d816      	bhi.n	800d8dc <USBD_LL_StallEP+0x5c>
 800d8ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d8b4 <USBD_LL_StallEP+0x34>)
 800d8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b4:	0800d8c5 	.word	0x0800d8c5
 800d8b8:	0800d8cb 	.word	0x0800d8cb
 800d8bc:	0800d8d1 	.word	0x0800d8d1
 800d8c0:	0800d8d7 	.word	0x0800d8d7
    case HAL_OK :
      usb_status = USBD_OK;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d8c8:	e00b      	b.n	800d8e2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	73fb      	strb	r3, [r7, #15]
    break;
 800d8ce:	e008      	b.n	800d8e2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8d4:	e005      	b.n	800d8e2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8d6:	2303      	movs	r3, #3
 800d8d8:	73fb      	strb	r3, [r7, #15]
    break;
 800d8da:	e002      	b.n	800d8e2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d8dc:	2303      	movs	r3, #3
 800d8de:	73fb      	strb	r3, [r7, #15]
    break;
 800d8e0:	bf00      	nop
  }
  return usb_status;
 800d8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d906:	78fa      	ldrb	r2, [r7, #3]
 800d908:	4611      	mov	r1, r2
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7f7 fbb2 	bl	8005074 <HAL_PCD_EP_ClrStall>
 800d910:	4603      	mov	r3, r0
 800d912:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d914:	7bbb      	ldrb	r3, [r7, #14]
 800d916:	2b03      	cmp	r3, #3
 800d918:	d816      	bhi.n	800d948 <USBD_LL_ClearStallEP+0x5c>
 800d91a:	a201      	add	r2, pc, #4	@ (adr r2, 800d920 <USBD_LL_ClearStallEP+0x34>)
 800d91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d920:	0800d931 	.word	0x0800d931
 800d924:	0800d937 	.word	0x0800d937
 800d928:	0800d93d 	.word	0x0800d93d
 800d92c:	0800d943 	.word	0x0800d943
    case HAL_OK :
      usb_status = USBD_OK;
 800d930:	2300      	movs	r3, #0
 800d932:	73fb      	strb	r3, [r7, #15]
    break;
 800d934:	e00b      	b.n	800d94e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d936:	2303      	movs	r3, #3
 800d938:	73fb      	strb	r3, [r7, #15]
    break;
 800d93a:	e008      	b.n	800d94e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d93c:	2301      	movs	r3, #1
 800d93e:	73fb      	strb	r3, [r7, #15]
    break;
 800d940:	e005      	b.n	800d94e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d942:	2303      	movs	r3, #3
 800d944:	73fb      	strb	r3, [r7, #15]
    break;
 800d946:	e002      	b.n	800d94e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d948:	2303      	movs	r3, #3
 800d94a:	73fb      	strb	r3, [r7, #15]
    break;
 800d94c:	bf00      	nop
  }
  return usb_status;
 800d94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3710      	adds	r7, #16
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	460b      	mov	r3, r1
 800d962:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d96a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d96c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d970:	2b00      	cmp	r3, #0
 800d972:	da0b      	bge.n	800d98c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d974:	78fb      	ldrb	r3, [r7, #3]
 800d976:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d97a:	68f9      	ldr	r1, [r7, #12]
 800d97c:	4613      	mov	r3, r2
 800d97e:	00db      	lsls	r3, r3, #3
 800d980:	4413      	add	r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	440b      	add	r3, r1
 800d986:	333e      	adds	r3, #62	@ 0x3e
 800d988:	781b      	ldrb	r3, [r3, #0]
 800d98a:	e00b      	b.n	800d9a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d98c:	78fb      	ldrb	r3, [r7, #3]
 800d98e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d992:	68f9      	ldr	r1, [r7, #12]
 800d994:	4613      	mov	r3, r2
 800d996:	00db      	lsls	r3, r3, #3
 800d998:	4413      	add	r3, r2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	440b      	add	r3, r1
 800d99e:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800d9a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3714      	adds	r7, #20
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr

0800d9b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9ca:	78fa      	ldrb	r2, [r7, #3]
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7f7 f99c 	bl	8004d0c <HAL_PCD_SetAddress>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d9d8:	7bbb      	ldrb	r3, [r7, #14]
 800d9da:	2b03      	cmp	r3, #3
 800d9dc:	d816      	bhi.n	800da0c <USBD_LL_SetUSBAddress+0x5c>
 800d9de:	a201      	add	r2, pc, #4	@ (adr r2, 800d9e4 <USBD_LL_SetUSBAddress+0x34>)
 800d9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e4:	0800d9f5 	.word	0x0800d9f5
 800d9e8:	0800d9fb 	.word	0x0800d9fb
 800d9ec:	0800da01 	.word	0x0800da01
 800d9f0:	0800da07 	.word	0x0800da07
    case HAL_OK :
      usb_status = USBD_OK;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d9f8:	e00b      	b.n	800da12 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9fa:	2303      	movs	r3, #3
 800d9fc:	73fb      	strb	r3, [r7, #15]
    break;
 800d9fe:	e008      	b.n	800da12 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da00:	2301      	movs	r3, #1
 800da02:	73fb      	strb	r3, [r7, #15]
    break;
 800da04:	e005      	b.n	800da12 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da06:	2303      	movs	r3, #3
 800da08:	73fb      	strb	r3, [r7, #15]
    break;
 800da0a:	e002      	b.n	800da12 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800da0c:	2303      	movs	r3, #3
 800da0e:	73fb      	strb	r3, [r7, #15]
    break;
 800da10:	bf00      	nop
  }
  return usb_status;
 800da12:	7bfb      	ldrb	r3, [r7, #15]
}
 800da14:	4618      	mov	r0, r3
 800da16:	3710      	adds	r7, #16
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b086      	sub	sp, #24
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	607a      	str	r2, [r7, #4]
 800da26:	603b      	str	r3, [r7, #0]
 800da28:	460b      	mov	r3, r1
 800da2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da2c:	2300      	movs	r3, #0
 800da2e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da30:	2300      	movs	r3, #0
 800da32:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da3a:	7af9      	ldrb	r1, [r7, #11]
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	f7f7 fa85 	bl	8004f4e <HAL_PCD_EP_Transmit>
 800da44:	4603      	mov	r3, r0
 800da46:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800da48:	7dbb      	ldrb	r3, [r7, #22]
 800da4a:	2b03      	cmp	r3, #3
 800da4c:	d816      	bhi.n	800da7c <USBD_LL_Transmit+0x60>
 800da4e:	a201      	add	r2, pc, #4	@ (adr r2, 800da54 <USBD_LL_Transmit+0x38>)
 800da50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da54:	0800da65 	.word	0x0800da65
 800da58:	0800da6b 	.word	0x0800da6b
 800da5c:	0800da71 	.word	0x0800da71
 800da60:	0800da77 	.word	0x0800da77
    case HAL_OK :
      usb_status = USBD_OK;
 800da64:	2300      	movs	r3, #0
 800da66:	75fb      	strb	r3, [r7, #23]
    break;
 800da68:	e00b      	b.n	800da82 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800da6a:	2303      	movs	r3, #3
 800da6c:	75fb      	strb	r3, [r7, #23]
    break;
 800da6e:	e008      	b.n	800da82 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da70:	2301      	movs	r3, #1
 800da72:	75fb      	strb	r3, [r7, #23]
    break;
 800da74:	e005      	b.n	800da82 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da76:	2303      	movs	r3, #3
 800da78:	75fb      	strb	r3, [r7, #23]
    break;
 800da7a:	e002      	b.n	800da82 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800da7c:	2303      	movs	r3, #3
 800da7e:	75fb      	strb	r3, [r7, #23]
    break;
 800da80:	bf00      	nop
  }
  return usb_status;
 800da82:	7dfb      	ldrb	r3, [r7, #23]
}
 800da84:	4618      	mov	r0, r3
 800da86:	3718      	adds	r7, #24
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	607a      	str	r2, [r7, #4]
 800da96:	603b      	str	r3, [r7, #0]
 800da98:	460b      	mov	r3, r1
 800da9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da9c:	2300      	movs	r3, #0
 800da9e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daa0:	2300      	movs	r3, #0
 800daa2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800daaa:	7af9      	ldrb	r1, [r7, #11]
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	f7f7 fa03 	bl	8004eba <HAL_PCD_EP_Receive>
 800dab4:	4603      	mov	r3, r0
 800dab6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800dab8:	7dbb      	ldrb	r3, [r7, #22]
 800daba:	2b03      	cmp	r3, #3
 800dabc:	d816      	bhi.n	800daec <USBD_LL_PrepareReceive+0x60>
 800dabe:	a201      	add	r2, pc, #4	@ (adr r2, 800dac4 <USBD_LL_PrepareReceive+0x38>)
 800dac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac4:	0800dad5 	.word	0x0800dad5
 800dac8:	0800dadb 	.word	0x0800dadb
 800dacc:	0800dae1 	.word	0x0800dae1
 800dad0:	0800dae7 	.word	0x0800dae7
    case HAL_OK :
      usb_status = USBD_OK;
 800dad4:	2300      	movs	r3, #0
 800dad6:	75fb      	strb	r3, [r7, #23]
    break;
 800dad8:	e00b      	b.n	800daf2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dada:	2303      	movs	r3, #3
 800dadc:	75fb      	strb	r3, [r7, #23]
    break;
 800dade:	e008      	b.n	800daf2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dae0:	2301      	movs	r3, #1
 800dae2:	75fb      	strb	r3, [r7, #23]
    break;
 800dae4:	e005      	b.n	800daf2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dae6:	2303      	movs	r3, #3
 800dae8:	75fb      	strb	r3, [r7, #23]
    break;
 800daea:	e002      	b.n	800daf2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800daec:	2303      	movs	r3, #3
 800daee:	75fb      	strb	r3, [r7, #23]
    break;
 800daf0:	bf00      	nop
  }
  return usb_status;
 800daf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3718      	adds	r7, #24
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b082      	sub	sp, #8
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	460b      	mov	r3, r1
 800db06:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db0e:	78fa      	ldrb	r2, [r7, #3]
 800db10:	4611      	mov	r1, r2
 800db12:	4618      	mov	r0, r3
 800db14:	f7f7 fa03 	bl	8004f1e <HAL_PCD_EP_GetRxCount>
 800db18:	4603      	mov	r3, r0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
	...

0800db24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800db30:	78fb      	ldrb	r3, [r7, #3]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d002      	beq.n	800db3c <HAL_PCDEx_LPM_Callback+0x18>
 800db36:	2b01      	cmp	r3, #1
 800db38:	d01f      	beq.n	800db7a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800db3a:	e03b      	b.n	800dbb4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6a1b      	ldr	r3, [r3, #32]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d007      	beq.n	800db54 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800db44:	f000 f854 	bl	800dbf0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db48:	4b1c      	ldr	r3, [pc, #112]	@ (800dbbc <HAL_PCDEx_LPM_Callback+0x98>)
 800db4a:	691b      	ldr	r3, [r3, #16]
 800db4c:	4a1b      	ldr	r2, [pc, #108]	@ (800dbbc <HAL_PCDEx_LPM_Callback+0x98>)
 800db4e:	f023 0306 	bic.w	r3, r3, #6
 800db52:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	6812      	ldr	r2, [r2, #0]
 800db62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db66:	f023 0301 	bic.w	r3, r3, #1
 800db6a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800db72:	4618      	mov	r0, r3
 800db74:	f7fe f9a9 	bl	800beca <USBD_LL_Resume>
    break;
 800db78:	e01c      	b.n	800dbb4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	6812      	ldr	r2, [r2, #0]
 800db88:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db8c:	f043 0301 	orr.w	r3, r3, #1
 800db90:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fe f97a 	bl	800be92 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6a1b      	ldr	r3, [r3, #32]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d005      	beq.n	800dbb2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dba6:	4b05      	ldr	r3, [pc, #20]	@ (800dbbc <HAL_PCDEx_LPM_Callback+0x98>)
 800dba8:	691b      	ldr	r3, [r3, #16]
 800dbaa:	4a04      	ldr	r2, [pc, #16]	@ (800dbbc <HAL_PCDEx_LPM_Callback+0x98>)
 800dbac:	f043 0306 	orr.w	r3, r3, #6
 800dbb0:	6113      	str	r3, [r2, #16]
    break;
 800dbb2:	bf00      	nop
}
 800dbb4:	bf00      	nop
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	e000ed00 	.word	0xe000ed00

0800dbc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dbc8:	4b03      	ldr	r3, [pc, #12]	@ (800dbd8 <USBD_static_malloc+0x18>)
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	370c      	adds	r7, #12
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop
 800dbd8:	2000538c 	.word	0x2000538c

0800dbdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b083      	sub	sp, #12
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]

}
 800dbe4:	bf00      	nop
 800dbe6:	370c      	adds	r7, #12
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr

0800dbf0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dbf4:	f7f3 fc26 	bl	8001444 <SystemClock_Config>
}
 800dbf8:	bf00      	nop
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <memset>:
 800dbfc:	4402      	add	r2, r0
 800dbfe:	4603      	mov	r3, r0
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d100      	bne.n	800dc06 <memset+0xa>
 800dc04:	4770      	bx	lr
 800dc06:	f803 1b01 	strb.w	r1, [r3], #1
 800dc0a:	e7f9      	b.n	800dc00 <memset+0x4>

0800dc0c <__libc_init_array>:
 800dc0c:	b570      	push	{r4, r5, r6, lr}
 800dc0e:	4d0d      	ldr	r5, [pc, #52]	@ (800dc44 <__libc_init_array+0x38>)
 800dc10:	4c0d      	ldr	r4, [pc, #52]	@ (800dc48 <__libc_init_array+0x3c>)
 800dc12:	1b64      	subs	r4, r4, r5
 800dc14:	10a4      	asrs	r4, r4, #2
 800dc16:	2600      	movs	r6, #0
 800dc18:	42a6      	cmp	r6, r4
 800dc1a:	d109      	bne.n	800dc30 <__libc_init_array+0x24>
 800dc1c:	4d0b      	ldr	r5, [pc, #44]	@ (800dc4c <__libc_init_array+0x40>)
 800dc1e:	4c0c      	ldr	r4, [pc, #48]	@ (800dc50 <__libc_init_array+0x44>)
 800dc20:	f000 f826 	bl	800dc70 <_init>
 800dc24:	1b64      	subs	r4, r4, r5
 800dc26:	10a4      	asrs	r4, r4, #2
 800dc28:	2600      	movs	r6, #0
 800dc2a:	42a6      	cmp	r6, r4
 800dc2c:	d105      	bne.n	800dc3a <__libc_init_array+0x2e>
 800dc2e:	bd70      	pop	{r4, r5, r6, pc}
 800dc30:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc34:	4798      	blx	r3
 800dc36:	3601      	adds	r6, #1
 800dc38:	e7ee      	b.n	800dc18 <__libc_init_array+0xc>
 800dc3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc3e:	4798      	blx	r3
 800dc40:	3601      	adds	r6, #1
 800dc42:	e7f2      	b.n	800dc2a <__libc_init_array+0x1e>
 800dc44:	0800dd48 	.word	0x0800dd48
 800dc48:	0800dd48 	.word	0x0800dd48
 800dc4c:	0800dd48 	.word	0x0800dd48
 800dc50:	0800dd4c 	.word	0x0800dd4c

0800dc54 <memcpy>:
 800dc54:	440a      	add	r2, r1
 800dc56:	4291      	cmp	r1, r2
 800dc58:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dc5c:	d100      	bne.n	800dc60 <memcpy+0xc>
 800dc5e:	4770      	bx	lr
 800dc60:	b510      	push	{r4, lr}
 800dc62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc6a:	4291      	cmp	r1, r2
 800dc6c:	d1f9      	bne.n	800dc62 <memcpy+0xe>
 800dc6e:	bd10      	pop	{r4, pc}

0800dc70 <_init>:
 800dc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc72:	bf00      	nop
 800dc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc76:	bc08      	pop	{r3}
 800dc78:	469e      	mov	lr, r3
 800dc7a:	4770      	bx	lr

0800dc7c <_fini>:
 800dc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7e:	bf00      	nop
 800dc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc82:	bc08      	pop	{r3}
 800dc84:	469e      	mov	lr, r3
 800dc86:	4770      	bx	lr
