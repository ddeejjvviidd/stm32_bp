
stm32_bp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db94  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800dd50  0800dd50  0000ed50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de08  0800de08  0000f10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800de08  0800de08  0000ee08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de10  0800de10  0000f10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de10  0800de10  0000ee10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de14  0800de14  0000ee14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800de18  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054a0  2000010c  0800df24  0000f10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200055ac  0800df24  0000f5ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e65  00000000  00000000  0000f13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050d8  00000000  00000000  00033fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c80  00000000  00000000  00039080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001622  00000000  00000000  0003ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030325  00000000  00000000  0003c322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023947  00000000  00000000  0006c647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011db68  00000000  00000000  0008ff8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001adaf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077cc  00000000  00000000  001adb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  001b5308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800dd38 	.word	0x0800dd38

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800dd38 	.word	0x0800dd38

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800052e:	463b      	mov	r3, r7
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
 800053c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800053e:	4b31      	ldr	r3, [pc, #196]	@ (8000604 <MX_ADC1_Init+0xdc>)
 8000540:	4a31      	ldr	r2, [pc, #196]	@ (8000608 <MX_ADC1_Init+0xe0>)
 8000542:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000544:	4b2f      	ldr	r3, [pc, #188]	@ (8000604 <MX_ADC1_Init+0xdc>)
 8000546:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800054a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800054c:	4b2d      	ldr	r3, [pc, #180]	@ (8000604 <MX_ADC1_Init+0xdc>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000552:	4b2c      	ldr	r3, [pc, #176]	@ (8000604 <MX_ADC1_Init+0xdc>)
 8000554:	2200      	movs	r2, #0
 8000556:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000558:	4b2a      	ldr	r3, [pc, #168]	@ (8000604 <MX_ADC1_Init+0xdc>)
 800055a:	2201      	movs	r2, #1
 800055c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055e:	4b29      	ldr	r3, [pc, #164]	@ (8000604 <MX_ADC1_Init+0xdc>)
 8000560:	2204      	movs	r2, #4
 8000562:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000564:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <MX_ADC1_Init+0xdc>)
 8000566:	2200      	movs	r2, #0
 8000568:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056a:	4b26      	ldr	r3, [pc, #152]	@ (8000604 <MX_ADC1_Init+0xdc>)
 800056c:	2200      	movs	r2, #0
 800056e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000570:	4b24      	ldr	r3, [pc, #144]	@ (8000604 <MX_ADC1_Init+0xdc>)
 8000572:	2202      	movs	r2, #2
 8000574:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000576:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <MX_ADC1_Init+0xdc>)
 8000578:	2200      	movs	r2, #0
 800057a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800057e:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <MX_ADC1_Init+0xdc>)
 8000580:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000584:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000586:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <MX_ADC1_Init+0xdc>)
 8000588:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800058c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800058e:	4b1d      	ldr	r3, [pc, #116]	@ (8000604 <MX_ADC1_Init+0xdc>)
 8000590:	2201      	movs	r2, #1
 8000592:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000596:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <MX_ADC1_Init+0xdc>)
 8000598:	2200      	movs	r2, #0
 800059a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800059c:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <MX_ADC1_Init+0xdc>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a4:	4817      	ldr	r0, [pc, #92]	@ (8000604 <MX_ADC1_Init+0xdc>)
 80005a6:	f001 fded 	bl	8002184 <HAL_ADC_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80005b0:	f000 ffe7 	bl	8001582 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005b4:	4b15      	ldr	r3, [pc, #84]	@ (800060c <MX_ADC1_Init+0xe4>)
 80005b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b8:	2306      	movs	r3, #6
 80005ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80005bc:	2306      	movs	r3, #6
 80005be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c0:	237f      	movs	r3, #127	@ 0x7f
 80005c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005c4:	2304      	movs	r3, #4
 80005c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	4619      	mov	r1, r3
 80005d0:	480c      	ldr	r0, [pc, #48]	@ (8000604 <MX_ADC1_Init+0xdc>)
 80005d2:	f002 f969 	bl	80028a8 <HAL_ADC_ConfigChannel>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80005dc:	f000 ffd1 	bl	8001582 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <MX_ADC1_Init+0xe8>)
 80005e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005e4:	230c      	movs	r3, #12
 80005e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	@ (8000604 <MX_ADC1_Init+0xdc>)
 80005ee:	f002 f95b 	bl	80028a8 <HAL_ADC_ConfigChannel>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80005f8:	f000 ffc3 	bl	8001582 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000128 	.word	0x20000128
 8000608:	50040000 	.word	0x50040000
 800060c:	c7520000 	.word	0xc7520000
 8000610:	04300002 	.word	0x04300002

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b0ae      	sub	sp, #184	@ 0xb8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	2294      	movs	r2, #148	@ 0x94
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f00d fb45 	bl	800dcc4 <memset>
  if(adcHandle->Instance==ADC1)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a40      	ldr	r2, [pc, #256]	@ (8000740 <HAL_ADC_MspInit+0x12c>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d179      	bne.n	8000738 <HAL_ADC_MspInit+0x124>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000644:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000648:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800064a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800064e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000652:	2302      	movs	r3, #2
 8000654:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800065a:	230c      	movs	r3, #12
 800065c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000662:	2302      	movs	r3, #2
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800066a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4618      	mov	r0, r3
 8000676:	f005 ff2b 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000680:	f000 ff7f 	bl	8001582 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000684:	4b2f      	ldr	r3, [pc, #188]	@ (8000744 <HAL_ADC_MspInit+0x130>)
 8000686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000688:	4a2e      	ldr	r2, [pc, #184]	@ (8000744 <HAL_ADC_MspInit+0x130>)
 800068a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800068e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000690:	4b2c      	ldr	r3, [pc, #176]	@ (8000744 <HAL_ADC_MspInit+0x130>)
 8000692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800069c:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <HAL_ADC_MspInit+0x130>)
 800069e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a0:	4a28      	ldr	r2, [pc, #160]	@ (8000744 <HAL_ADC_MspInit+0x130>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a8:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <HAL_ADC_MspInit+0x130>)
 80006aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006b4:	2301      	movs	r3, #1
 80006b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006ba:	230b      	movs	r3, #11
 80006bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80006ca:	4619      	mov	r1, r3
 80006cc:	481e      	ldr	r0, [pc, #120]	@ (8000748 <HAL_ADC_MspInit+0x134>)
 80006ce:	f003 fba7 	bl	8003e20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	@ (800074c <HAL_ADC_MspInit+0x138>)
 80006d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000750 <HAL_ADC_MspInit+0x13c>)
 80006d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	@ (800074c <HAL_ADC_MspInit+0x138>)
 80006da:	2205      	movs	r2, #5
 80006dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006de:	4b1b      	ldr	r3, [pc, #108]	@ (800074c <HAL_ADC_MspInit+0x138>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e4:	4b19      	ldr	r3, [pc, #100]	@ (800074c <HAL_ADC_MspInit+0x138>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006ea:	4b18      	ldr	r3, [pc, #96]	@ (800074c <HAL_ADC_MspInit+0x138>)
 80006ec:	2280      	movs	r2, #128	@ 0x80
 80006ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006f0:	4b16      	ldr	r3, [pc, #88]	@ (800074c <HAL_ADC_MspInit+0x138>)
 80006f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <HAL_ADC_MspInit+0x138>)
 80006fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <HAL_ADC_MspInit+0x138>)
 8000702:	2220      	movs	r2, #32
 8000704:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <HAL_ADC_MspInit+0x138>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800070c:	480f      	ldr	r0, [pc, #60]	@ (800074c <HAL_ADC_MspInit+0x138>)
 800070e:	f003 f811 	bl	8003734 <HAL_DMA_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 8000718:	f000 ff33 	bl	8001582 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a0b      	ldr	r2, [pc, #44]	@ (800074c <HAL_ADC_MspInit+0x138>)
 8000720:	651a      	str	r2, [r3, #80]	@ 0x50
 8000722:	4a0a      	ldr	r2, [pc, #40]	@ (800074c <HAL_ADC_MspInit+0x138>)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	2012      	movs	r0, #18
 800072e:	f002 ffca 	bl	80036c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000732:	2012      	movs	r0, #18
 8000734:	f002 ffe3 	bl	80036fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000738:	bf00      	nop
 800073a:	37b8      	adds	r7, #184	@ 0xb8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	50040000 	.word	0x50040000
 8000744:	40021000 	.word	0x40021000
 8000748:	48000800 	.word	0x48000800
 800074c:	20000190 	.word	0x20000190
 8000750:	40020008 	.word	0x40020008

08000754 <comms_reset_active_tx_buffer>:


extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);


void comms_reset_active_tx_buffer() {
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
	// write start bytes
	*((uint16_t*) (comms_tx_active_buffer)) = START_HEADER;
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <comms_reset_active_tx_buffer+0x38>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 8000760:	801a      	strh	r2, [r3, #0]
	// reset buffer id
	comms_tx_active_buffer[2] = 0;
 8000762:	4b0a      	ldr	r3, [pc, #40]	@ (800078c <comms_reset_active_tx_buffer+0x38>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3302      	adds	r3, #2
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
	//reset number of elements
	*((uint16_t*) (comms_tx_active_buffer + 3)) = 0;
 800076c:	4b07      	ldr	r3, [pc, #28]	@ (800078c <comms_reset_active_tx_buffer+0x38>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	3303      	adds	r3, #3
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]
	// set pointer to first position where data elements can be writen to
	comms_tx_active_wr_pointer = comms_tx_active_buffer + 5;
 8000776:	4b05      	ldr	r3, [pc, #20]	@ (800078c <comms_reset_active_tx_buffer+0x38>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3305      	adds	r3, #5
 800077c:	4a04      	ldr	r2, [pc, #16]	@ (8000790 <comms_reset_active_tx_buffer+0x3c>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	200009f0 	.word	0x200009f0
 8000790:	200009f4 	.word	0x200009f4

08000794 <comms_reset_active_rx_buffer>:


void comms_reset_active_rx_buffer() {
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
	//reset whole head to correctly detect next incoming buffer
	comms_rx_active_buffer[0] = 0;
 8000798:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <comms_reset_active_rx_buffer+0x3c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	comms_rx_active_buffer[1] = 0;
 80007a0:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <comms_reset_active_rx_buffer+0x3c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	2200      	movs	r2, #0
 80007a8:	701a      	strb	r2, [r3, #0]
	comms_rx_active_buffer[2] = 0;
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <comms_reset_active_rx_buffer+0x3c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3302      	adds	r3, #2
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
	*((uint16_t*) (comms_rx_active_buffer + 3)) = 0; // reset number of data packets inside the buffer
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <comms_reset_active_rx_buffer+0x3c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	3303      	adds	r3, #3
 80007ba:	2200      	movs	r2, #0
 80007bc:	801a      	strh	r2, [r3, #0]
	comms_rx_active_rd_pointer = comms_rx_active_buffer; // reset the active pointer
 80007be:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <comms_reset_active_rx_buffer+0x3c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <comms_reset_active_rx_buffer+0x40>)
 80007c4:	6013      	str	r3, [r2, #0]
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	20001600 	.word	0x20001600
 80007d4:	20001604 	.word	0x20001604

080007d8 <comms_uart_init>:


void comms_uart_init() {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
	// reset the state
	uart_rx_state = COMMS_UART_HEAD;
 80007de:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <comms_uart_init+0x28>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
	// set callback for incoming data buffer head
	HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_buffer,
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <comms_uart_init+0x2c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2205      	movs	r2, #5
 80007ea:	4619      	mov	r1, r3
 80007ec:	4806      	ldr	r0, [pc, #24]	@ (8000808 <comms_uart_init+0x30>)
 80007ee:	f007 f963 	bl	8007ab8 <HAL_UART_Receive_IT>
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
			5);
	UNUSED(rcode);
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20001614 	.word	0x20001614
 8000804:	20001600 	.word	0x20001600
 8000808:	20003874 	.word	0x20003874

0800080c <comms_init>:


void comms_init() {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	// init TX
	comms_tx_active_buffer = comms_tx_buffer1;
 8000810:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <comms_init+0x48>)
 8000812:	4a11      	ldr	r2, [pc, #68]	@ (8000858 <comms_init+0x4c>)
 8000814:	601a      	str	r2, [r3, #0]
	comms_tx_prepared_buffer = comms_tx_buffer2;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <comms_init+0x50>)
 8000818:	4a11      	ldr	r2, [pc, #68]	@ (8000860 <comms_init+0x54>)
 800081a:	601a      	str	r2, [r3, #0]

	comms_reset_active_tx_buffer();
 800081c:	f7ff ff9a 	bl	8000754 <comms_reset_active_tx_buffer>
	comms_tx_prepared_wr_pointer = comms_tx_prepared_buffer + 5; // set pointer to first position of data elements ready for transfer
 8000820:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <comms_init+0x50>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3305      	adds	r3, #5
 8000826:	4a0f      	ldr	r2, [pc, #60]	@ (8000864 <comms_init+0x58>)
 8000828:	6013      	str	r3, [r2, #0]

	// init RX
	if (comms_selected_interface == COMMS_UART){
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <comms_init+0x5c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d101      	bne.n	8000836 <comms_init+0x2a>
		comms_uart_init();
 8000832:	f7ff ffd1 	bl	80007d8 <comms_uart_init>
	}

	comms_rx_active_buffer = comms_rx_buffer1;
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <comms_init+0x60>)
 8000838:	4a0d      	ldr	r2, [pc, #52]	@ (8000870 <comms_init+0x64>)
 800083a:	601a      	str	r2, [r3, #0]
	comms_rx_prepared_buffer = comms_rx_buffer2;
 800083c:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <comms_init+0x68>)
 800083e:	4a0e      	ldr	r2, [pc, #56]	@ (8000878 <comms_init+0x6c>)
 8000840:	601a      	str	r2, [r3, #0]

	comms_reset_active_rx_buffer();
 8000842:	f7ff ffa7 	bl	8000794 <comms_reset_active_rx_buffer>
	comms_rx_prepared_rd_pointer = comms_rx_prepared_buffer + 5; // set pointer to first position of readable data elements
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <comms_init+0x68>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3305      	adds	r3, #5
 800084c:	4a0b      	ldr	r2, [pc, #44]	@ (800087c <comms_init+0x70>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200009f0 	.word	0x200009f0
 8000858:	200001f0 	.word	0x200001f0
 800085c:	200009f8 	.word	0x200009f8
 8000860:	200005f0 	.word	0x200005f0
 8000864:	200009fc 	.word	0x200009fc
 8000868:	20001610 	.word	0x20001610
 800086c:	20001600 	.word	0x20001600
 8000870:	20000e00 	.word	0x20000e00
 8000874:	20001608 	.word	0x20001608
 8000878:	20001200 	.word	0x20001200
 800087c:	2000160c 	.word	0x2000160c

08000880 <comms_purge_id_register>:


void comms_purge_id_register() {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	// reset the evidence of existing data packets in tx buffer
	memset(comms_tx_data_id_register, 0x0, sizeof(comms_tx_data_id_register));
 8000884:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000888:	2100      	movs	r1, #0
 800088a:	4802      	ldr	r0, [pc, #8]	@ (8000894 <comms_purge_id_register+0x14>)
 800088c:	f00d fa1a 	bl	800dcc4 <memset>
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000a00 	.word	0x20000a00

08000898 <comms_find_existing_data>:


void* comms_find_existing_data(uint8_t data_id) {
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	// returns pointer to existing data packet with this data_id, or NULL
	if (comms_tx_data_id_register[data_id] != NULL) {
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4a08      	ldr	r2, [pc, #32]	@ (80008c8 <comms_find_existing_data+0x30>)
 80008a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d004      	beq.n	80008b8 <comms_find_existing_data+0x20>
		return comms_tx_data_id_register[data_id];
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a05      	ldr	r2, [pc, #20]	@ (80008c8 <comms_find_existing_data+0x30>)
 80008b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b6:	e000      	b.n	80008ba <comms_find_existing_data+0x22>
	}
	return NULL;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	20000a00 	.word	0x20000a00

080008cc <comms_increment_active_buffer_data>:


void comms_increment_active_buffer_data() {
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
	// increments total number of data elements in active tx buffer.
	*((uint16_t*) (comms_tx_active_buffer + 3)) += 1;
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <comms_increment_active_buffer_data+0x24>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3303      	adds	r3, #3
 80008d6:	881a      	ldrh	r2, [r3, #0]
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <comms_increment_active_buffer_data+0x24>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3303      	adds	r3, #3
 80008de:	3201      	adds	r2, #1
 80008e0:	b292      	uxth	r2, r2
 80008e2:	801a      	strh	r2, [r3, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	200009f0 	.word	0x200009f0

080008f4 <comms_append_int32>:


int comms_append_int32(uint8_t data_id, uint8_t data_count, int *data) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	603a      	str	r2, [r7, #0]
 80008fe:	71fb      	strb	r3, [r7, #7]
 8000900:	460b      	mov	r3, r1
 8000902:	71bb      	strb	r3, [r7, #6]
	//check tx_register for same data id, return if existing
	if (comms_find_existing_data(data_id) != NULL && !ALLOW_TX_APPEND_DUPLICITE_DATA_ID) {
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ffc6 	bl	8000898 <comms_find_existing_data>
		return COMMS_DATA_ID_EXISTS;
	}

	//check bounds
	if ((comms_tx_active_wr_pointer + (3 + (data_count * sizeof(*data))) - comms_tx_active_buffer) > MAX_TX_BUFFER_SIZE) {
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <comms_append_int32+0x98>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	79bb      	ldrb	r3, [r7, #6]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	3303      	adds	r3, #3
 8000916:	441a      	add	r2, r3
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <comms_append_int32+0x9c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000922:	dd01      	ble.n	8000928 <comms_append_int32+0x34>
		return COMMS_TX_BUFFER_FULL;
 8000924:	2309      	movs	r3, #9
 8000926:	e02d      	b.n	8000984 <comms_append_int32+0x90>
	}

	if (tx_wr_status) {
 8000928:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <comms_append_int32+0xa0>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <comms_append_int32+0x40>
		return COMMS_WR_LOCKED;
 8000930:	2305      	movs	r3, #5
 8000932:	e027      	b.n	8000984 <comms_append_int32+0x90>
	}
	else {
		tx_wr_status = COMMS_INPROGRESS;
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <comms_append_int32+0xa0>)
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
	}

	// save the pointer to new data to register
	comms_tx_data_id_register[data_id] = (void*) comms_tx_active_wr_pointer;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4a13      	ldr	r2, [pc, #76]	@ (800098c <comms_append_int32+0x98>)
 800093e:	6812      	ldr	r2, [r2, #0]
 8000940:	4915      	ldr	r1, [pc, #84]	@ (8000998 <comms_append_int32+0xa4>)
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// increment total data in buffer
	comms_increment_active_buffer_data();
 8000946:	f7ff ffc1 	bl	80008cc <comms_increment_active_buffer_data>

	// write id, bytes and count
	*comms_tx_active_wr_pointer = data_id;
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <comms_append_int32+0x98>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	79fa      	ldrb	r2, [r7, #7]
 8000950:	701a      	strb	r2, [r3, #0]
	*(comms_tx_active_wr_pointer + 1) = (uint8_t) sizeof(*data);
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <comms_append_int32+0x98>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	2204      	movs	r2, #4
 800095a:	701a      	strb	r2, [r3, #0]
	*(comms_tx_active_wr_pointer + 2) = data_count;
 800095c:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <comms_append_int32+0x98>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	3302      	adds	r3, #2
 8000962:	79ba      	ldrb	r2, [r7, #6]
 8000964:	701a      	strb	r2, [r3, #0]

	// write integer as 4 uint8_t to tx_buffer
	*((int*) (comms_tx_active_wr_pointer + 3)) = *data;
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <comms_append_int32+0x98>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3303      	adds	r3, #3
 800096c:	683a      	ldr	r2, [r7, #0]
 800096e:	6812      	ldr	r2, [r2, #0]
 8000970:	601a      	str	r2, [r3, #0]

	// move pointer comms_tx_buffer_wr_pointer
	comms_tx_active_wr_pointer = (comms_tx_active_wr_pointer + 3 + sizeof(*data));
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <comms_append_int32+0x98>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3307      	adds	r3, #7
 8000978:	4a04      	ldr	r2, [pc, #16]	@ (800098c <comms_append_int32+0x98>)
 800097a:	6013      	str	r3, [r2, #0]

	tx_wr_status = COMMS_READY;
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <comms_append_int32+0xa0>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]

	return COMMS_SUCCESS;
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	200009f4 	.word	0x200009f4
 8000990:	200009f0 	.word	0x200009f0
 8000994:	20001611 	.word	0x20001611
 8000998:	20000a00 	.word	0x20000a00

0800099c <comms_switch_tx_buffers>:


void comms_switch_tx_buffers() {
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80009a2:	f3ef 8310 	mrs	r3, PRIMASK
 80009a6:	603b      	str	r3, [r7, #0]
  return(result);
 80009a8:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 80009aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
	__disable_irq();

	// switch buffers
	uint8_t *_temp = comms_tx_prepared_buffer;
 80009b0:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <comms_switch_tx_buffers+0x4c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	60bb      	str	r3, [r7, #8]
	comms_tx_prepared_buffer = comms_tx_active_buffer;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <comms_switch_tx_buffers+0x50>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a0b      	ldr	r2, [pc, #44]	@ (80009e8 <comms_switch_tx_buffers+0x4c>)
 80009bc:	6013      	str	r3, [r2, #0]
	comms_tx_active_buffer = _temp;
 80009be:	4a0b      	ldr	r2, [pc, #44]	@ (80009ec <comms_switch_tx_buffers+0x50>)
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	6013      	str	r3, [r2, #0]

	// set pointer to the end of prepared buffer data
	comms_tx_prepared_wr_pointer = comms_tx_active_wr_pointer;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	@ (80009f0 <comms_switch_tx_buffers+0x54>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	@ (80009f4 <comms_switch_tx_buffers+0x58>)
 80009ca:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_tx_buffer();
 80009cc:	f7ff fec2 	bl	8000754 <comms_reset_active_tx_buffer>
	comms_purge_id_register();
 80009d0:	f7ff ff56 	bl	8000880 <comms_purge_id_register>
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f383 8810 	msr	PRIMASK, r3
}
 80009de:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200009f8 	.word	0x200009f8
 80009ec:	200009f0 	.word	0x200009f0
 80009f0:	200009f4 	.word	0x200009f4
 80009f4:	200009fc 	.word	0x200009fc

080009f8 <comms_send>:


int comms_send() {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0

	if (tx_status > 0) {
 80009fe:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab4 <comms_send+0xbc>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <comms_send+0x12>
		return COMMS_TX_LOCKED;
 8000a06:	2304      	movs	r3, #4
 8000a08:	e050      	b.n	8000aac <comms_send+0xb4>
	}

	tx_status = COMMS_INPROGRESS;
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ab4 <comms_send+0xbc>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]

	// need to switch buffers
	comms_switch_tx_buffers();
 8000a10:	f7ff ffc4 	bl	800099c <comms_switch_tx_buffers>

	// terminator at the end
	*comms_tx_prepared_wr_pointer = END_CR;
 8000a14:	4b28      	ldr	r3, [pc, #160]	@ (8000ab8 <comms_send+0xc0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	220d      	movs	r2, #13
 8000a1a:	701a      	strb	r2, [r3, #0]
	*(comms_tx_prepared_wr_pointer + 1) = END_LF;
 8000a1c:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <comms_send+0xc0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	220a      	movs	r2, #10
 8000a24:	701a      	strb	r2, [r3, #0]
	comms_tx_prepared_wr_pointer += 2;
 8000a26:	4b24      	ldr	r3, [pc, #144]	@ (8000ab8 <comms_send+0xc0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	3302      	adds	r3, #2
 8000a2c:	4a22      	ldr	r2, [pc, #136]	@ (8000ab8 <comms_send+0xc0>)
 8000a2e:	6013      	str	r3, [r2, #0]

	// buffer is empty
	if (comms_tx_prepared_buffer[3] == 0) {
 8000a30:	4b22      	ldr	r3, [pc, #136]	@ (8000abc <comms_send+0xc4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	3303      	adds	r3, #3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d104      	bne.n	8000a46 <comms_send+0x4e>
		tx_status = COMMS_READY;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <comms_send+0xbc>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
		return COMMS_TX_BUFFER_EMPTY;
 8000a42:	2303      	movs	r3, #3
 8000a44:	e032      	b.n	8000aac <comms_send+0xb4>
	}

	// send data
	USBD_StatusTypeDef cdc_return = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef uart_return = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71bb      	strb	r3, [r7, #6]

	if(comms_selected_interface == COMMS_USB_OTG){
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac0 <comms_send+0xc8>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d10d      	bne.n	8000a72 <comms_send+0x7a>
		cdc_return = CDC_Transmit_FS(comms_tx_prepared_buffer,
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <comms_send+0xc4>)
 8000a58:	6818      	ldr	r0, [r3, #0]
				comms_tx_prepared_wr_pointer - comms_tx_prepared_buffer);
 8000a5a:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <comms_send+0xc0>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <comms_send+0xc4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	1ad3      	subs	r3, r2, r3
		cdc_return = CDC_Transmit_FS(comms_tx_prepared_buffer,
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	4619      	mov	r1, r3
 8000a68:	f00c fb8c 	bl	800d184 <CDC_Transmit_FS>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	e00e      	b.n	8000a90 <comms_send+0x98>
	} else {
		uart_return = HAL_UART_Transmit(&hlpuart1, comms_tx_prepared_buffer,
 8000a72:	4b12      	ldr	r3, [pc, #72]	@ (8000abc <comms_send+0xc4>)
 8000a74:	6819      	ldr	r1, [r3, #0]
				comms_tx_prepared_wr_pointer - comms_tx_prepared_buffer, 10000);
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <comms_send+0xc0>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	@ (8000abc <comms_send+0xc4>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	1ad3      	subs	r3, r2, r3
		uart_return = HAL_UART_Transmit(&hlpuart1, comms_tx_prepared_buffer,
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000a86:	480f      	ldr	r0, [pc, #60]	@ (8000ac4 <comms_send+0xcc>)
 8000a88:	f006 ff88 	bl	800799c <HAL_UART_Transmit>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	71bb      	strb	r3, [r7, #6]
	}

	tx_status = COMMS_READY;
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <comms_send+0xbc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]

	if (cdc_return) {
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <comms_send+0xa8>
		return COMMS_TX_CDC_FAIL;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	e005      	b.n	8000aac <comms_send+0xb4>
	}

	if (uart_return) {
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <comms_send+0xb2>
		return COMMS_TX_UART_FAIL;
 8000aa6:	2306      	movs	r3, #6
 8000aa8:	e000      	b.n	8000aac <comms_send+0xb4>
	}

	return COMMS_SUCCESS;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20001612 	.word	0x20001612
 8000ab8:	200009fc 	.word	0x200009fc
 8000abc:	200009f8 	.word	0x200009f8
 8000ac0:	20001610 	.word	0x20001610
 8000ac4:	20003874 	.word	0x20003874

08000ac8 <comms_switch_rx_buffers>:


void comms_switch_rx_buffers(){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000ace:	f3ef 8310 	mrs	r3, PRIMASK
 8000ad2:	603b      	str	r3, [r7, #0]
  return(result);
 8000ad4:	683b      	ldr	r3, [r7, #0]
	// dissable interrupts
	uint32_t primask = __get_PRIMASK();
 8000ad6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
	__disable_irq();

	// set read pointer to first data packet head
	comms_rx_active_rd_pointer = comms_rx_active_buffer + 5;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <comms_switch_rx_buffers+0x54>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3305      	adds	r3, #5
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	@ (8000b20 <comms_switch_rx_buffers+0x58>)
 8000ae4:	6013      	str	r3, [r2, #0]

	// switch rx buffers
	uint8_t *_temp = comms_rx_prepared_buffer;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <comms_switch_rx_buffers+0x5c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	60bb      	str	r3, [r7, #8]
	comms_rx_prepared_buffer = comms_rx_active_buffer;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <comms_switch_rx_buffers+0x54>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <comms_switch_rx_buffers+0x5c>)
 8000af2:	6013      	str	r3, [r2, #0]
	comms_rx_active_buffer = _temp;
 8000af4:	4a09      	ldr	r2, [pc, #36]	@ (8000b1c <comms_switch_rx_buffers+0x54>)
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	6013      	str	r3, [r2, #0]

	// switch pointers
	comms_rx_prepared_rd_pointer = comms_rx_active_rd_pointer;
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <comms_switch_rx_buffers+0x58>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a0a      	ldr	r2, [pc, #40]	@ (8000b28 <comms_switch_rx_buffers+0x60>)
 8000b00:	6013      	str	r3, [r2, #0]

	// prepare the new active buffer and pointers
	comms_reset_active_rx_buffer();
 8000b02:	f7ff fe47 	bl	8000794 <comms_reset_active_rx_buffer>
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f383 8810 	msr	PRIMASK, r3
}
 8000b10:	bf00      	nop

	// restore interrupts
	__set_PRIMASK(primask);
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20001600 	.word	0x20001600
 8000b20:	20001604 	.word	0x20001604
 8000b24:	20001608 	.word	0x20001608
 8000b28:	2000160c 	.word	0x2000160c

08000b2c <comms_cdc_rx_callback>:


void comms_cdc_rx_callback(uint8_t *buffer, uint32_t length) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	// call this func inside of usbd_cdc_if.c in CDC_Receive_FS()

	if (comms_selected_interface != COMMS_USB_OTG){
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <comms_cdc_rx_callback+0x50>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d116      	bne.n	8000b6c <comms_cdc_rx_callback+0x40>
		// quit if UART is in use
		return;
	}

	if (rx_status) {
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <comms_cdc_rx_callback+0x54>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d114      	bne.n	8000b70 <comms_cdc_rx_callback+0x44>
		// not ready yet
		return;
	}

	if (length < 3) {
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d913      	bls.n	8000b74 <comms_cdc_rx_callback+0x48>
		// invalid buffer
		return;
	}

	rx_status = COMMS_INPROGRESS;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <comms_cdc_rx_callback+0x54>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]

	//copy to the active buffer
	memcpy(comms_rx_active_buffer, buffer, length);
 8000b52:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <comms_cdc_rx_callback+0x58>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f00d f8de 	bl	800dd1c <memcpy>
	comms_switch_rx_buffers();
 8000b60:	f7ff ffb2 	bl	8000ac8 <comms_switch_rx_buffers>

	rx_status = COMMS_RECEIVED;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <comms_cdc_rx_callback+0x54>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	e004      	b.n	8000b76 <comms_cdc_rx_callback+0x4a>
		return;
 8000b6c:	bf00      	nop
 8000b6e:	e002      	b.n	8000b76 <comms_cdc_rx_callback+0x4a>
		return;
 8000b70:	bf00      	nop
 8000b72:	e000      	b.n	8000b76 <comms_cdc_rx_callback+0x4a>
		return;
 8000b74:	bf00      	nop
}
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20001610 	.word	0x20001610
 8000b80:	20001613 	.word	0x20001613
 8000b84:	20001600 	.word	0x20001600

08000b88 <comms_data_handler>:


__weak void comms_data_handler(CommsData *data) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

	if (data == NULL) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d02c      	beq.n	8000bf0 <comms_data_handler+0x68>
		return;
	}

	switch (data->data_id) {
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b05      	cmp	r3, #5
 8000b9c:	d002      	beq.n	8000ba4 <comms_data_handler+0x1c>
 8000b9e:	2b14      	cmp	r3, #20
 8000ba0:	d014      	beq.n	8000bcc <comms_data_handler+0x44>
		int value = (int)(data->data[0].u32);

		comms_append_int32(id, total, &value);
		break;
	default:
		return COMMS_RX_DATA_ID_NOT_IMPLEMENTED;
 8000ba2:	e026      	b.n	8000bf2 <comms_data_handler+0x6a>
		GPIO_PinState currentState = HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000ba4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ba8:	4813      	ldr	r0, [pc, #76]	@ (8000bf8 <comms_data_handler+0x70>)
 8000baa:	f003 facb 	bl	8004144 <HAL_GPIO_ReadPin>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	bf14      	ite	ne
 8000bb8:	2301      	movne	r3, #1
 8000bba:	2300      	moveq	r3, #0
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <comms_data_handler+0x70>)
 8000bc6:	f003 fad5 	bl	8004174 <HAL_GPIO_WritePin>
		break;
 8000bca:	e012      	b.n	8000bf2 <comms_data_handler+0x6a>
		int id = 20;
 8000bcc:	2314      	movs	r3, #20
 8000bce:	617b      	str	r3, [r7, #20]
		int total = data->data_count;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	789b      	ldrb	r3, [r3, #2]
 8000bd4:	613b      	str	r3, [r7, #16]
		int value = (int)(data->data[0].u32);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	60bb      	str	r3, [r7, #8]
		comms_append_int32(id, total, &value);
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	b2d1      	uxtb	r1, r2
 8000be4:	f107 0208 	add.w	r2, r7, #8
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fe83 	bl	80008f4 <comms_append_int32>
		break;
 8000bee:	e000      	b.n	8000bf2 <comms_data_handler+0x6a>
		return;
 8000bf0:	bf00      	nop
		break;
	}

}
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	48000400 	.word	0x48000400

08000bfc <comms_rx_process>:


void comms_rx_process() {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8000c02:	af00      	add	r7, sp, #0
	if (!rx_status) {
 8000c04:	4b50      	ldr	r3, [pc, #320]	@ (8000d48 <comms_rx_process+0x14c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	f000 8096 	beq.w	8000d3a <comms_rx_process+0x13e>
		// no data yet
		return;
	}

	if (comms_rx_prepared_buffer[2] == 0) {
 8000c0e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d4c <comms_rx_process+0x150>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	3302      	adds	r3, #2
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 808b 	bne.w	8000d32 <comms_rx_process+0x136>
		uint16_t elements = *((uint16_t*) (comms_rx_prepared_buffer + 3));
 8000c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8000d4c <comms_rx_process+0x150>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8000c24:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406

		for (; elements > 0; --elements) {
 8000c28:	e07e      	b.n	8000d28 <comms_rx_process+0x12c>
			CommsData data;
			data.data_id = *comms_rx_prepared_rd_pointer;
 8000c2a:	4b49      	ldr	r3, [pc, #292]	@ (8000d50 <comms_rx_process+0x154>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000c34:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000c38:	701a      	strb	r2, [r3, #0]
			data.data_size = *(comms_rx_prepared_rd_pointer + 1);
 8000c3a:	4b45      	ldr	r3, [pc, #276]	@ (8000d50 <comms_rx_process+0x154>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	785a      	ldrb	r2, [r3, #1]
 8000c40:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000c44:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000c48:	705a      	strb	r2, [r3, #1]
			data.data_count = *(comms_rx_prepared_rd_pointer + 2);
 8000c4a:	4b41      	ldr	r3, [pc, #260]	@ (8000d50 <comms_rx_process+0x154>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	789a      	ldrb	r2, [r3, #2]
 8000c50:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000c54:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000c58:	709a      	strb	r2, [r3, #2]

			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000c60:	e03d      	b.n	8000cde <comms_rx_process+0xe2>
				switch (data.data_size) {
 8000c62:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000c66:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000c6a:	785b      	ldrb	r3, [r3, #1]
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d023      	beq.n	8000cb8 <comms_rx_process+0xbc>
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	dc64      	bgt.n	8000d3e <comms_rx_process+0x142>
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d002      	beq.n	8000c7e <comms_rx_process+0x82>
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d00e      	beq.n	8000c9a <comms_rx_process+0x9e>
				case 4:
					data.data[x].u32 =
							*((uint32_t*) (comms_rx_prepared_rd_pointer + 3));
					break;
				default:
					return;
 8000c7c:	e05f      	b.n	8000d3e <comms_rx_process+0x142>
					data.data[x].u8 = *(comms_rx_prepared_rd_pointer + 3);
 8000c7e:	4b34      	ldr	r3, [pc, #208]	@ (8000d50 <comms_rx_process+0x154>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000c86:	78d1      	ldrb	r1, [r2, #3]
 8000c88:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000c8c:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	460a      	mov	r2, r1
 8000c96:	711a      	strb	r2, [r3, #4]
					break;
 8000c98:	e01c      	b.n	8000cd4 <comms_rx_process+0xd8>
					data.data[x].u16 =
 8000c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d50 <comms_rx_process+0x154>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000ca2:	f8b2 1003 	ldrh.w	r1, [r2, #3]
 8000ca6:	f507 6281 	add.w	r2, r7, #1032	@ 0x408
 8000caa:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	460a      	mov	r2, r1
 8000cb4:	809a      	strh	r2, [r3, #4]
					break;
 8000cb6:	e00d      	b.n	8000cd4 <comms_rx_process+0xd8>
					data.data[x].u32 =
 8000cb8:	4b25      	ldr	r3, [pc, #148]	@ (8000d50 <comms_rx_process+0x154>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000cc0:	f8d2 2003 	ldr.w	r2, [r2, #3]
 8000cc4:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 8000cc8:	f2a1 4104 	subw	r1, r1, #1028	@ 0x404
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	605a      	str	r2, [r3, #4]
					break;
 8000cd2:	bf00      	nop
			for (uint8_t x = 0; x < data.data_count; ++x) {
 8000cd4:	f897 3405 	ldrb.w	r3, [r7, #1029]	@ 0x405
 8000cd8:	3301      	adds	r3, #1
 8000cda:	f887 3405 	strb.w	r3, [r7, #1029]	@ 0x405
 8000cde:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000ce2:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000ce6:	789b      	ldrb	r3, [r3, #2]
 8000ce8:	f897 2405 	ldrb.w	r2, [r7, #1029]	@ 0x405
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d3b8      	bcc.n	8000c62 <comms_rx_process+0x66>
				}
			}

			comms_data_handler(&data);
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff ff48 	bl	8000b88 <comms_data_handler>

			comms_rx_prepared_rd_pointer = (comms_rx_prepared_rd_pointer + 3
					+ (data.data_size * data.data_count));
 8000cf8:	4b15      	ldr	r3, [pc, #84]	@ (8000d50 <comms_rx_process+0x154>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d00:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d04:	785b      	ldrb	r3, [r3, #1]
 8000d06:	4619      	mov	r1, r3
 8000d08:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8000d0c:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 8000d10:	789b      	ldrb	r3, [r3, #2]
 8000d12:	fb01 f303 	mul.w	r3, r1, r3
 8000d16:	3303      	adds	r3, #3
 8000d18:	4413      	add	r3, r2
			comms_rx_prepared_rd_pointer = (comms_rx_prepared_rd_pointer + 3
 8000d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <comms_rx_process+0x154>)
 8000d1c:	6013      	str	r3, [r2, #0]
		for (; elements > 0; --elements) {
 8000d1e:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f8a7 3406 	strh.w	r3, [r7, #1030]	@ 0x406
 8000d28:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	@ 0x406
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	f47f af7c 	bne.w	8000c2a <comms_rx_process+0x2e>
		}
	}

	rx_status = COMMS_READY;
 8000d32:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <comms_rx_process+0x14c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	e002      	b.n	8000d40 <comms_rx_process+0x144>
		return;
 8000d3a:	bf00      	nop
 8000d3c:	e000      	b.n	8000d40 <comms_rx_process+0x144>
					return;
 8000d3e:	bf00      	nop
}
 8000d40:	f507 6781 	add.w	r7, r7, #1032	@ 0x408
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20001613 	.word	0x20001613
 8000d4c:	20001608 	.word	0x20001608
 8000d50:	2000160c 	.word	0x2000160c

08000d54 <comms_lpuart_rx_callback>:


void comms_lpuart_rx_callback(UART_HandleTypeDef *huart) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	static int uart_elements;
	static int data_total_length;
	static HAL_StatusTypeDef rcode;
	UNUSED(rcode);

	if (comms_selected_interface != COMMS_UART){
 8000d5c:	4b48      	ldr	r3, [pc, #288]	@ (8000e80 <comms_lpuart_rx_callback+0x12c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f040 8086 	bne.w	8000e72 <comms_lpuart_rx_callback+0x11e>
		// quit if USB OTG is in use
		return;
	}

	switch (uart_rx_state) {
 8000d66:	4b47      	ldr	r3, [pc, #284]	@ (8000e84 <comms_lpuart_rx_callback+0x130>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d04f      	beq.n	8000e0e <comms_lpuart_rx_callback+0xba>
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	f300 8081 	bgt.w	8000e76 <comms_lpuart_rx_callback+0x122>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d002      	beq.n	8000d7e <comms_lpuart_rx_callback+0x2a>
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d025      	beq.n	8000dc8 <comms_lpuart_rx_callback+0x74>
			UNUSED(rcode);

			break;

		default:
			break;
 8000d7c:	e07b      	b.n	8000e76 <comms_lpuart_rx_callback+0x122>
			if (*((uint16_t*) (comms_rx_active_buffer)) != START_HEADER) {
 8000d7e:	4b42      	ldr	r3, [pc, #264]	@ (8000e88 <comms_lpuart_rx_callback+0x134>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	f64a 32cd 	movw	r2, #43981	@ 0xabcd
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d002      	beq.n	8000d92 <comms_lpuart_rx_callback+0x3e>
				comms_uart_init();
 8000d8c:	f7ff fd24 	bl	80007d8 <comms_uart_init>
				break;
 8000d90:	e072      	b.n	8000e78 <comms_lpuart_rx_callback+0x124>
			uart_elements = *((uint16_t*) (comms_rx_active_buffer + 3));
 8000d92:	4b3d      	ldr	r3, [pc, #244]	@ (8000e88 <comms_lpuart_rx_callback+0x134>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3303      	adds	r3, #3
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e8c <comms_lpuart_rx_callback+0x138>)
 8000d9e:	601a      	str	r2, [r3, #0]
			comms_rx_active_rd_pointer = comms_rx_active_buffer + 5;
 8000da0:	4b39      	ldr	r3, [pc, #228]	@ (8000e88 <comms_lpuart_rx_callback+0x134>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3305      	adds	r3, #5
 8000da6:	4a3a      	ldr	r2, [pc, #232]	@ (8000e90 <comms_lpuart_rx_callback+0x13c>)
 8000da8:	6013      	str	r3, [r2, #0]
			rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_rd_pointer, 3);
 8000daa:	4b39      	ldr	r3, [pc, #228]	@ (8000e90 <comms_lpuart_rx_callback+0x13c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2203      	movs	r2, #3
 8000db0:	4619      	mov	r1, r3
 8000db2:	4838      	ldr	r0, [pc, #224]	@ (8000e94 <comms_lpuart_rx_callback+0x140>)
 8000db4:	f006 fe80 	bl	8007ab8 <HAL_UART_Receive_IT>
 8000db8:	4603      	mov	r3, r0
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b36      	ldr	r3, [pc, #216]	@ (8000e98 <comms_lpuart_rx_callback+0x144>)
 8000dbe:	701a      	strb	r2, [r3, #0]
			uart_rx_state = COMMS_UART_PACKET_HEAD;
 8000dc0:	4b30      	ldr	r3, [pc, #192]	@ (8000e84 <comms_lpuart_rx_callback+0x130>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
			break;
 8000dc6:	e057      	b.n	8000e78 <comms_lpuart_rx_callback+0x124>
			data_total_length = (*(comms_rx_active_rd_pointer + 1)) * (*(comms_rx_active_rd_pointer + 2));
 8000dc8:	4b31      	ldr	r3, [pc, #196]	@ (8000e90 <comms_lpuart_rx_callback+0x13c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e90 <comms_lpuart_rx_callback+0x13c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	fb02 f303 	mul.w	r3, r2, r3
 8000dde:	4a2f      	ldr	r2, [pc, #188]	@ (8000e9c <comms_lpuart_rx_callback+0x148>)
 8000de0:	6013      	str	r3, [r2, #0]
			comms_rx_active_rd_pointer = comms_rx_active_rd_pointer + 3;
 8000de2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e90 <comms_lpuart_rx_callback+0x13c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3303      	adds	r3, #3
 8000de8:	4a29      	ldr	r2, [pc, #164]	@ (8000e90 <comms_lpuart_rx_callback+0x13c>)
 8000dea:	6013      	str	r3, [r2, #0]
			rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_rd_pointer, data_total_length);
 8000dec:	4b28      	ldr	r3, [pc, #160]	@ (8000e90 <comms_lpuart_rx_callback+0x13c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e9c <comms_lpuart_rx_callback+0x148>)
 8000df2:	6812      	ldr	r2, [r2, #0]
 8000df4:	b292      	uxth	r2, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	4826      	ldr	r0, [pc, #152]	@ (8000e94 <comms_lpuart_rx_callback+0x140>)
 8000dfa:	f006 fe5d 	bl	8007ab8 <HAL_UART_Receive_IT>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	461a      	mov	r2, r3
 8000e02:	4b25      	ldr	r3, [pc, #148]	@ (8000e98 <comms_lpuart_rx_callback+0x144>)
 8000e04:	701a      	strb	r2, [r3, #0]
			uart_rx_state = COMMS_UART_PACKET_DATA;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	@ (8000e84 <comms_lpuart_rx_callback+0x130>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	701a      	strb	r2, [r3, #0]
			break;
 8000e0c:	e034      	b.n	8000e78 <comms_lpuart_rx_callback+0x124>
			comms_rx_active_rd_pointer = comms_rx_active_rd_pointer + data_total_length;
 8000e0e:	4b20      	ldr	r3, [pc, #128]	@ (8000e90 <comms_lpuart_rx_callback+0x13c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a22      	ldr	r2, [pc, #136]	@ (8000e9c <comms_lpuart_rx_callback+0x148>)
 8000e14:	6812      	ldr	r2, [r2, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a1d      	ldr	r2, [pc, #116]	@ (8000e90 <comms_lpuart_rx_callback+0x13c>)
 8000e1a:	6013      	str	r3, [r2, #0]
			if(uart_elements > 0) {
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <comms_lpuart_rx_callback+0x138>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dd07      	ble.n	8000e34 <comms_lpuart_rx_callback+0xe0>
				uart_rx_state = COMMS_UART_PACKET_HEAD;
 8000e24:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <comms_lpuart_rx_callback+0x130>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
				--uart_elements;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <comms_lpuart_rx_callback+0x138>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	4a16      	ldr	r2, [pc, #88]	@ (8000e8c <comms_lpuart_rx_callback+0x138>)
 8000e32:	6013      	str	r3, [r2, #0]
			if (uart_elements == 0) {
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <comms_lpuart_rx_callback+0x138>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d110      	bne.n	8000e5e <comms_lpuart_rx_callback+0x10a>
				comms_switch_rx_buffers();
 8000e3c:	f7ff fe44 	bl	8000ac8 <comms_switch_rx_buffers>
				rx_status = COMMS_RECEIVED;
 8000e40:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <comms_lpuart_rx_callback+0x14c>)
 8000e42:	2202      	movs	r2, #2
 8000e44:	701a      	strb	r2, [r3, #0]
				uart_rx_state = COMMS_UART_HEAD;
 8000e46:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <comms_lpuart_rx_callback+0x130>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
				uart_elements = 0;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <comms_lpuart_rx_callback+0x138>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
				data_total_length = 0;
 8000e52:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <comms_lpuart_rx_callback+0x148>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
				comms_uart_init();
 8000e58:	f7ff fcbe 	bl	80007d8 <comms_uart_init>
				break;
 8000e5c:	e00c      	b.n	8000e78 <comms_lpuart_rx_callback+0x124>
			HAL_StatusTypeDef rcode = HAL_UART_Receive_IT(&hlpuart1, comms_rx_active_rd_pointer, 3);
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <comms_lpuart_rx_callback+0x13c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2203      	movs	r2, #3
 8000e64:	4619      	mov	r1, r3
 8000e66:	480b      	ldr	r0, [pc, #44]	@ (8000e94 <comms_lpuart_rx_callback+0x140>)
 8000e68:	f006 fe26 	bl	8007ab8 <HAL_UART_Receive_IT>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73fb      	strb	r3, [r7, #15]
			break;
 8000e70:	e002      	b.n	8000e78 <comms_lpuart_rx_callback+0x124>
		return;
 8000e72:	bf00      	nop
 8000e74:	e000      	b.n	8000e78 <comms_lpuart_rx_callback+0x124>
			break;
 8000e76:	bf00      	nop
	}

}
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20001610 	.word	0x20001610
 8000e84:	20001614 	.word	0x20001614
 8000e88:	20001600 	.word	0x20001600
 8000e8c:	20001618 	.word	0x20001618
 8000e90:	20001604 	.word	0x20001604
 8000e94:	20003874 	.word	0x20003874
 8000e98:	2000161c 	.word	0x2000161c
 8000e9c:	20001620 	.word	0x20001620
 8000ea0:	20001613 	.word	0x20001613

08000ea4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	// user defined __weak callback from stm32l4xx_hal_uart.c
	// uart loaded data
	if (huart == &hlpuart1) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x20>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d102      	bne.n	8000eba <HAL_UART_RxCpltCallback+0x16>
		comms_lpuart_rx_callback(huart);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff4d 	bl	8000d54 <comms_lpuart_rx_callback>
	}
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20003874 	.word	0x20003874

08000ec8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
void MX_DMA_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ece:	4b29      	ldr	r3, [pc, #164]	@ (8000f74 <MX_DMA_Init+0xac>)
 8000ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed2:	4a28      	ldr	r2, [pc, #160]	@ (8000f74 <MX_DMA_Init+0xac>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000eda:	4b26      	ldr	r3, [pc, #152]	@ (8000f74 <MX_DMA_Init+0xac>)
 8000edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ee6:	4b23      	ldr	r3, [pc, #140]	@ (8000f74 <MX_DMA_Init+0xac>)
 8000ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eea:	4a22      	ldr	r2, [pc, #136]	@ (8000f74 <MX_DMA_Init+0xac>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ef2:	4b20      	ldr	r3, [pc, #128]	@ (8000f74 <MX_DMA_Init+0xac>)
 8000ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8000efe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <MX_DMA_Init+0xb0>)
 8000f00:	4a1e      	ldr	r2, [pc, #120]	@ (8000f7c <MX_DMA_Init+0xb4>)
 8000f02:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000f04:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <MX_DMA_Init+0xb0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <MX_DMA_Init+0xb0>)
 8000f0c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f10:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000f12:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <MX_DMA_Init+0xb0>)
 8000f14:	2240      	movs	r2, #64	@ 0x40
 8000f16:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000f18:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <MX_DMA_Init+0xb0>)
 8000f1a:	2280      	movs	r2, #128	@ 0x80
 8000f1c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f1e:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <MX_DMA_Init+0xb0>)
 8000f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f24:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f26:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <MX_DMA_Init+0xb0>)
 8000f28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f2c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <MX_DMA_Init+0xb0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000f34:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <MX_DMA_Init+0xb0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8000f3a:	480f      	ldr	r0, [pc, #60]	@ (8000f78 <MX_DMA_Init+0xb0>)
 8000f3c:	f002 fbfa 	bl	8003734 <HAL_DMA_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_DMA_Init+0x82>
  {
    Error_Handler();
 8000f46:	f000 fb1c 	bl	8001582 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	200b      	movs	r0, #11
 8000f50:	f002 fbb9 	bl	80036c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f54:	200b      	movs	r0, #11
 8000f56:	f002 fbd2 	bl	80036fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	200c      	movs	r0, #12
 8000f60:	f002 fbb1 	bl	80036c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f64:	200c      	movs	r0, #12
 8000f66:	f002 fbca 	bl	80036fe <HAL_NVIC_EnableIRQ>

}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	20001624 	.word	0x20001624
 8000f7c:	4002001c 	.word	0x4002001c

08000f80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08c      	sub	sp, #48	@ 0x30
 8000f84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4b55      	ldr	r3, [pc, #340]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a54      	ldr	r2, [pc, #336]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b52      	ldr	r3, [pc, #328]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	61bb      	str	r3, [r7, #24]
 8000fac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	4b4f      	ldr	r3, [pc, #316]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb2:	4a4e      	ldr	r2, [pc, #312]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fba:	4b4c      	ldr	r3, [pc, #304]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b49      	ldr	r3, [pc, #292]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	4a48      	ldr	r2, [pc, #288]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd2:	4b46      	ldr	r3, [pc, #280]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	4b43      	ldr	r3, [pc, #268]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	4a42      	ldr	r2, [pc, #264]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fea:	4b40      	ldr	r3, [pc, #256]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	4a3c      	ldr	r2, [pc, #240]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001002:	4b3a      	ldr	r3, [pc, #232]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800100e:	f004 fb77 	bl	8005700 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	4b36      	ldr	r3, [pc, #216]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a35      	ldr	r2, [pc, #212]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b33      	ldr	r3, [pc, #204]	@ (80010ec <MX_GPIO_Init+0x16c>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001030:	482f      	ldr	r0, [pc, #188]	@ (80010f0 <MX_GPIO_Init+0x170>)
 8001032:	f003 f89f 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2140      	movs	r1, #64	@ 0x40
 800103a:	482e      	ldr	r0, [pc, #184]	@ (80010f4 <MX_GPIO_Init+0x174>)
 800103c:	f003 f89a 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2180      	movs	r1, #128	@ 0x80
 8001044:	482c      	ldr	r0, [pc, #176]	@ (80010f8 <MX_GPIO_Init+0x178>)
 8001046:	f003 f895 	bl	8004174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800104a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001050:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 031c 	add.w	r3, r7, #28
 800105e:	4619      	mov	r1, r3
 8001060:	4825      	ldr	r0, [pc, #148]	@ (80010f8 <MX_GPIO_Init+0x178>)
 8001062:	f002 fedd 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001066:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	481c      	ldr	r0, [pc, #112]	@ (80010f0 <MX_GPIO_Init+0x170>)
 8001080:	f002 fece 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001084:	2320      	movs	r3, #32
 8001086:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001090:	f107 031c 	add.w	r3, r7, #28
 8001094:	4619      	mov	r1, r3
 8001096:	4817      	ldr	r0, [pc, #92]	@ (80010f4 <MX_GPIO_Init+0x174>)
 8001098:	f002 fec2 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800109c:	2340      	movs	r3, #64	@ 0x40
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4810      	ldr	r0, [pc, #64]	@ (80010f4 <MX_GPIO_Init+0x174>)
 80010b4:	f002 feb4 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80010b8:	2380      	movs	r3, #128	@ 0x80
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 031c 	add.w	r3, r7, #28
 80010cc:	4619      	mov	r1, r3
 80010ce:	480a      	ldr	r0, [pc, #40]	@ (80010f8 <MX_GPIO_Init+0x178>)
 80010d0:	f002 fea6 	bl	8003e20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2100      	movs	r1, #0
 80010d8:	2028      	movs	r0, #40	@ 0x28
 80010da:	f002 faf4 	bl	80036c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010de:	2028      	movs	r0, #40	@ 0x28
 80010e0:	f002 fb0d 	bl	80036fe <HAL_NVIC_EnableIRQ>

}
 80010e4:	bf00      	nop
 80010e6:	3730      	adds	r7, #48	@ 0x30
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40021000 	.word	0x40021000
 80010f0:	48000400 	.word	0x48000400
 80010f4:	48001800 	.word	0x48001800
 80010f8:	48000800 	.word	0x48000800

080010fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800110c:	d125      	bne.n	800115a <HAL_GPIO_EXTI_Callback+0x5e>
		static bool previous;
		if(previous == false){
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x68>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	f083 0301 	eor.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d009      	beq.n	8001130 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001122:	4811      	ldr	r0, [pc, #68]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001124:	f003 f826 	bl	8004174 <HAL_GPIO_WritePin>
			previous = true;
 8001128:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x68>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
 800112e:	e008      	b.n	8001142 <HAL_GPIO_EXTI_Callback+0x46>
		} else {
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001136:	480c      	ldr	r0, [pc, #48]	@ (8001168 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001138:	f003 f81c 	bl	8004174 <HAL_GPIO_WritePin>
			previous = false;
 800113c:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_GPIO_EXTI_Callback+0x68>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
		}

		int test = 1984;
 8001142:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8001146:	60fb      	str	r3, [r7, #12]
		comms_append_int32(10, 1, &test);
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	461a      	mov	r2, r3
 800114e:	2101      	movs	r1, #1
 8001150:	200a      	movs	r0, #10
 8001152:	f7ff fbcf 	bl	80008f4 <comms_append_int32>
		comms_send();
 8001156:	f7ff fc4f 	bl	80009f8 <comms_send>
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20001684 	.word	0x20001684
 8001168:	48000400 	.word	0x48000400

0800116c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	//callback pro casovac
	UNUSED(htim);

	if (htim == &htim6) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d10d      	bne.n	8001198 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800117c:	2180      	movs	r1, #128	@ 0x80
 800117e:	4809      	ldr	r0, [pc, #36]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001180:	f003 f810 	bl	80041a4 <HAL_GPIO_TogglePin>

		// zvysovani promenne periodical
		periodical += 1;
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	4a07      	ldr	r2, [pc, #28]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800118c:	6013      	str	r3, [r2, #0]

		//odeslani do matlabu
		comms_append_int32(1, 1, &periodical);
 800118e:	4a06      	ldr	r2, [pc, #24]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001190:	2101      	movs	r1, #1
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff fbae 	bl	80008f4 <comms_append_int32>
	}

	if (htim == &htim3) {
			//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		}
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20003828 	.word	0x20003828
 80011a4:	48000400 	.word	0x48000400
 80011a8:	20001688 	.word	0x20001688

080011ac <myDmaFunction>:

char testdata[10];

/* ------------------ DMA FUNKCE A CALLBACKY ------------------ */
void myDmaFunction(DMA_HandleTypeDef *_hdma) {
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	dma_tic = htim5.Instance->CNT;
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <myDmaFunction+0x28>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ba:	4a07      	ldr	r2, [pc, #28]	@ (80011d8 <myDmaFunction+0x2c>)
 80011bc:	6013      	str	r3, [r2, #0]
	dma_toc = htim5.Instance->CNT;
 80011be:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <myDmaFunction+0x28>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c4:	4a05      	ldr	r2, [pc, #20]	@ (80011dc <myDmaFunction+0x30>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	200037dc 	.word	0x200037dc
 80011d8:	20001694 	.word	0x20001694
 80011dc:	20001698 	.word	0x20001698

080011e0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
    UNUSED(hadc);
    //HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);

    ++call_count;
 80011e8:	4b5c      	ldr	r3, [pc, #368]	@ (800135c <HAL_ADC_ConvCpltCallback+0x17c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a5b      	ldr	r2, [pc, #364]	@ (800135c <HAL_ADC_ConvCpltCallback+0x17c>)
 80011f0:	6013      	str	r3, [r2, #0]

    // Průměrování ADC hodnot
    adcValue = 0.0f;
 80011f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001360 <HAL_ADC_ConvCpltCallback+0x180>)
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
    adcIn1 = 0.0f;
 80011fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001364 <HAL_ADC_ConvCpltCallback+0x184>)
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < 10; i++) {
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
 8001206:	e027      	b.n	8001258 <HAL_ADC_ConvCpltCallback+0x78>
        adcValue += dma_data_buffer[i + 10]; // Použití druhé poloviny DMA bufferu
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	330a      	adds	r3, #10
 800120c:	4a56      	ldr	r2, [pc, #344]	@ (8001368 <HAL_ADC_ConvCpltCallback+0x188>)
 800120e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	4b51      	ldr	r3, [pc, #324]	@ (8001360 <HAL_ADC_ConvCpltCallback+0x180>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001224:	4b4e      	ldr	r3, [pc, #312]	@ (8001360 <HAL_ADC_ConvCpltCallback+0x180>)
 8001226:	edc3 7a00 	vstr	s15, [r3]
        adcIn1 += dma_data_buffer[i + 1 + 10];
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	330b      	adds	r3, #11
 800122e:	4a4e      	ldr	r2, [pc, #312]	@ (8001368 <HAL_ADC_ConvCpltCallback+0x188>)
 8001230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123c:	4b49      	ldr	r3, [pc, #292]	@ (8001364 <HAL_ADC_ConvCpltCallback+0x184>)
 800123e:	edd3 7a00 	vldr	s15, [r3]
 8001242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001246:	4b47      	ldr	r3, [pc, #284]	@ (8001364 <HAL_ADC_ConvCpltCallback+0x184>)
 8001248:	edc3 7a00 	vstr	s15, [r3]
        i++;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 10; i++) {
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2b09      	cmp	r3, #9
 800125c:	ddd4      	ble.n	8001208 <HAL_ADC_ConvCpltCallback+0x28>
    }
    adcValue /= 50.0f;
 800125e:	4b40      	ldr	r3, [pc, #256]	@ (8001360 <HAL_ADC_ConvCpltCallback+0x180>)
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800136c <HAL_ADC_ConvCpltCallback+0x18c>
 8001268:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800126c:	4b3c      	ldr	r3, [pc, #240]	@ (8001360 <HAL_ADC_ConvCpltCallback+0x180>)
 800126e:	edc3 7a00 	vstr	s15, [r3]
    adcIn1 /= 50.0f;
 8001272:	4b3c      	ldr	r3, [pc, #240]	@ (8001364 <HAL_ADC_ConvCpltCallback+0x184>)
 8001274:	ed93 7a00 	vldr	s14, [r3]
 8001278:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800136c <HAL_ADC_ConvCpltCallback+0x18c>
 800127c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001280:	4b38      	ldr	r3, [pc, #224]	@ (8001364 <HAL_ADC_ConvCpltCallback+0x184>)
 8001282:	edc3 7a00 	vstr	s15, [r3]

    // Převod ADC hodnoty na napětí
    float adcVoltage = (adcValue / ADC_RESOLUTION) * VREF;
 8001286:	4b36      	ldr	r3, [pc, #216]	@ (8001360 <HAL_ADC_ConvCpltCallback+0x180>)
 8001288:	ed93 7a00 	vldr	s14, [r3]
 800128c:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001370 <HAL_ADC_ConvCpltCallback+0x190>
 8001290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001294:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001374 <HAL_ADC_ConvCpltCallback+0x194>
 8001298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129c:	edc7 7a04 	vstr	s15, [r7, #16]
    //float adcVoltage = 1.21;

    // Výpočet teploty
    float temp30 = ((float)TEMP30_CAL_V / ADC_RESOLUTION) * VREF;
 80012a0:	4b35      	ldr	r3, [pc, #212]	@ (8001378 <HAL_ADC_ConvCpltCallback+0x198>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012ac:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001370 <HAL_ADC_ConvCpltCallback+0x190>
 80012b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001374 <HAL_ADC_ConvCpltCallback+0x194>
 80012b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012bc:	edc7 7a03 	vstr	s15, [r7, #12]
    float temp110 = ((float)TEMP110_CAL_V / ADC_RESOLUTION) * VREF;
 80012c0:	4b2e      	ldr	r3, [pc, #184]	@ (800137c <HAL_ADC_ConvCpltCallback+0x19c>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012cc:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8001370 <HAL_ADC_ConvCpltCallback+0x190>
 80012d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001374 <HAL_ADC_ConvCpltCallback+0x194>
 80012d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012dc:	edc7 7a02 	vstr	s15, [r7, #8]
    //temperature = ((adcVoltage - temp30) * TEMP_DIFF / (temp110 - temp30)) + 30.0f;
    temperature = ((adcVoltage - temp30) * TEMP_DIFF) + 30.0f;
 80012e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80012e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ec:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001380 <HAL_ADC_ConvCpltCallback+0x1a0>
 80012f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80012f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012fc:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80012fe:	edc3 7a00 	vstr	s15, [r3]
    //temperature = ((110.0 - 30.0)/(TEMP110_CAL_V - TEMP30_CAL_V)) * (adcValue - TEMP30_CAL_V) + 30.0;
    numOfCalling++;
 8001302:	4b21      	ldr	r3, [pc, #132]	@ (8001388 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	4a1f      	ldr	r2, [pc, #124]	@ (8001388 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800130a:	6013      	str	r3, [r2, #0]

    // Odeslání teploty jako integer
    temperatureInt = (int)temperature;
 800130c:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <HAL_ADC_ConvCpltCallback+0x1a4>)
 800130e:	edd3 7a00 	vldr	s15, [r3]
 8001312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001316:	ee17 2a90 	vmov	r2, s15
 800131a:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <HAL_ADC_ConvCpltCallback+0x1ac>)
 800131c:	601a      	str	r2, [r3, #0]
    temperatureInt = 23;
 800131e:	4b1b      	ldr	r3, [pc, #108]	@ (800138c <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001320:	2217      	movs	r2, #23
 8001322:	601a      	str	r2, [r3, #0]

    adcIn1Int = (int)adcIn1;
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <HAL_ADC_ConvCpltCallback+0x184>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800132e:	ee17 2a90 	vmov	r2, s15
 8001332:	4b17      	ldr	r3, [pc, #92]	@ (8001390 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001334:	601a      	str	r2, [r3, #0]

    full_adc++;
 8001336:	4b17      	ldr	r3, [pc, #92]	@ (8001394 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	4a15      	ldr	r2, [pc, #84]	@ (8001394 <HAL_ADC_ConvCpltCallback+0x1b4>)
 800133e:	6013      	str	r3, [r2, #0]

    comms_append_int32(2, 1, &temperatureInt);
 8001340:	4a12      	ldr	r2, [pc, #72]	@ (800138c <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001342:	2101      	movs	r1, #1
 8001344:	2002      	movs	r0, #2
 8001346:	f7ff fad5 	bl	80008f4 <comms_append_int32>
    comms_append_int32(23, 1, &adcIn1Int);
 800134a:	4a11      	ldr	r2, [pc, #68]	@ (8001390 <HAL_ADC_ConvCpltCallback+0x1b0>)
 800134c:	2101      	movs	r1, #1
 800134e:	2017      	movs	r0, #23
 8001350:	f7ff fad0 	bl	80008f4 <comms_append_int32>
}
 8001354:	bf00      	nop
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20003784 	.word	0x20003784
 8001360:	2000376c 	.word	0x2000376c
 8001364:	20003774 	.word	0x20003774
 8001368:	200035dc 	.word	0x200035dc
 800136c:	42480000 	.word	0x42480000
 8001370:	45800000 	.word	0x45800000
 8001374:	40533333 	.word	0x40533333
 8001378:	1fff75a8 	.word	0x1fff75a8
 800137c:	1fff75ca 	.word	0x1fff75ca
 8001380:	42a00000 	.word	0x42a00000
 8001384:	20003770 	.word	0x20003770
 8001388:	20003778 	.word	0x20003778
 800138c:	2000377c 	.word	0x2000377c
 8001390:	20003780 	.word	0x20003780
 8001394:	20003788 	.word	0x20003788

08001398 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
//		adcValue = adcValue + dma_data_buffer[i];
//	}
//	adcValue = adcValue / 100;
//	adcValueInt = (int) adcValue;

}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b2:	f000 fc3a 	bl	8001c2a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b6:	f000 f891 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ba:	f7ff fde1 	bl	8000f80 <MX_GPIO_Init>
  MX_DMA_Init();
 80013be:	f7ff fd83 	bl	8000ec8 <MX_DMA_Init>
  MX_TIM6_Init();
 80013c2:	f000 fa35 	bl	8001830 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 80013c6:	f00b fe19 	bl	800cffc <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 80013ca:	f000 f9e3 	bl	8001794 <MX_TIM5_Init>
  MX_ADC1_Init();
 80013ce:	f7ff f8ab 	bl	8000528 <MX_ADC1_Init>
  MX_TIM3_Init();
 80013d2:	f000 f991 	bl	80016f8 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80013d6:	f000 fb05 	bl	80019e4 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 80013da:	f000 fab7 	bl	800194c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

	// zapnuti zelene ledky
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80013de:	2201      	movs	r2, #1
 80013e0:	2180      	movs	r1, #128	@ 0x80
 80013e2:	4830      	ldr	r0, [pc, #192]	@ (80014a4 <main+0xf8>)
 80013e4:	f002 fec6 	bl	8004174 <HAL_GPIO_WritePin>

	// volani casovace
	HAL_TIM_Base_Start_IT(&htim6);
 80013e8:	482f      	ldr	r0, [pc, #188]	@ (80014a8 <main+0xfc>)
 80013ea:	f005 fe49 	bl	8007080 <HAL_TIM_Base_Start_IT>

	//zjistovani casu potrebneho pro kopirovani mezi poli
	HAL_TIM_Base_Start(&htim5);
 80013ee:	482f      	ldr	r0, [pc, #188]	@ (80014ac <main+0x100>)
 80013f0:	f005 fdde 	bl	8006fb0 <HAL_TIM_Base_Start>

	for (int i = 0; i < 1000; i++) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e00d      	b.n	8001416 <main+0x6a>
		dma[i] = i;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	ee07 3a90 	vmov	s15, r3
 8001400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001404:	4a2a      	ldr	r2, [pc, #168]	@ (80014b0 <main+0x104>)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 1000; i++) {
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3301      	adds	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800141c:	dbed      	blt.n	80013fa <main+0x4e>

	//tic = htim5.Instance->CNT;
	//memcpy(cpy, dma, 500*sizeof(float));
	//toc = htim5.Instance->CNT;

	HAL_StatusTypeDef status = HAL_DMA_RegisterCallback(
 800141e:	4a25      	ldr	r2, [pc, #148]	@ (80014b4 <main+0x108>)
 8001420:	2100      	movs	r1, #0
 8001422:	4825      	ldr	r0, [pc, #148]	@ (80014b8 <main+0x10c>)
 8001424:	f002 fc14 	bl	8003c50 <HAL_DMA_RegisterCallback>
 8001428:	4603      	mov	r3, r0
 800142a:	72fb      	strb	r3, [r7, #11]
			&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID,
			&myDmaFunction);
	UNUSED(status);

	tic = htim5.Instance->CNT;
 800142c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <main+0x100>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	4a22      	ldr	r2, [pc, #136]	@ (80014bc <main+0x110>)
 8001434:	6013      	str	r3, [r2, #0]
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2, dma, cpy, 1000);
 8001436:	491e      	ldr	r1, [pc, #120]	@ (80014b0 <main+0x104>)
 8001438:	4a21      	ldr	r2, [pc, #132]	@ (80014c0 <main+0x114>)
 800143a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800143e:	481e      	ldr	r0, [pc, #120]	@ (80014b8 <main+0x10c>)
 8001440:	f002 fa20 	bl	8003884 <HAL_DMA_Start_IT>
	dma_toc = htim5.Instance->CNT;
 8001444:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <main+0x100>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144a:	4a1e      	ldr	r2, [pc, #120]	@ (80014c4 <main+0x118>)
 800144c:	6013      	str	r3, [r2, #0]
	toc = htim5.Instance->CNT;
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <main+0x100>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <main+0x11c>)
 8001456:	6013      	str	r3, [r2, #0]

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001458:	217f      	movs	r1, #127	@ 0x7f
 800145a:	481c      	ldr	r0, [pc, #112]	@ (80014cc <main+0x120>)
 800145c:	f001 ffc6 	bl	80033ec <HAL_ADCEx_Calibration_Start>

	HAL_Delay(50);
 8001460:	2032      	movs	r0, #50	@ 0x32
 8001462:	f000 fc57 	bl	8001d14 <HAL_Delay>


	HAL_StatusTypeDef adc_status = HAL_ADC_Start_DMA(&hadc1, dma_data_buffer, 20);
 8001466:	2214      	movs	r2, #20
 8001468:	4919      	ldr	r1, [pc, #100]	@ (80014d0 <main+0x124>)
 800146a:	4818      	ldr	r0, [pc, #96]	@ (80014cc <main+0x120>)
 800146c:	f000 ffd0 	bl	8002410 <HAL_ADC_Start_DMA>
 8001470:	4603      	mov	r3, r0
 8001472:	72bb      	strb	r3, [r7, #10]

	HAL_TIM_Base_Start_IT(&htim3);
 8001474:	4817      	ldr	r0, [pc, #92]	@ (80014d4 <main+0x128>)
 8001476:	f005 fe03 	bl	8007080 <HAL_TIM_Base_Start_IT>

	comms_init();
 800147a:	f7ff f9c7 	bl	800080c <comms_init>
	comms_uart_init();
 800147e:	f7ff f9ab 	bl	80007d8 <comms_uart_init>

    /* USER CODE BEGIN 3 */

		//load_CPU();

		int returnStatus = comms_send();
 8001482:	f7ff fab9 	bl	80009f8 <comms_send>
 8001486:	6078      	str	r0, [r7, #4]
		if (returnStatus == COMMS_TX_UART_FAIL || returnStatus == COMMS_TX_CDC_FAIL){
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b06      	cmp	r3, #6
 800148c:	d002      	beq.n	8001494 <main+0xe8>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d104      	bne.n	800149e <main+0xf2>
			fails++;
 8001494:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <main+0x12c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	4a0f      	ldr	r2, [pc, #60]	@ (80014d8 <main+0x12c>)
 800149c:	6013      	str	r3, [r2, #0]
		}

		//zprocesovani prijmu dat
		comms_rx_process();
 800149e:	f7ff fbad 	bl	8000bfc <comms_rx_process>
	while (1) {
 80014a2:	e7ee      	b.n	8001482 <main+0xd6>
 80014a4:	48000800 	.word	0x48000800
 80014a8:	20003828 	.word	0x20003828
 80014ac:	200037dc 	.word	0x200037dc
 80014b0:	2000169c 	.word	0x2000169c
 80014b4:	080011ad 	.word	0x080011ad
 80014b8:	20001624 	.word	0x20001624
 80014bc:	2000168c 	.word	0x2000168c
 80014c0:	2000263c 	.word	0x2000263c
 80014c4:	20001698 	.word	0x20001698
 80014c8:	20001690 	.word	0x20001690
 80014cc:	20000128 	.word	0x20000128
 80014d0:	200035dc 	.word	0x200035dc
 80014d4:	20003790 	.word	0x20003790
 80014d8:	2000378c 	.word	0x2000378c

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b096      	sub	sp, #88	@ 0x58
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	2244      	movs	r2, #68	@ 0x44
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f00c fbea 	bl	800dcc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	463b      	mov	r3, r7
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80014fe:	2000      	movs	r0, #0
 8001500:	f004 f84a 	bl	8005598 <HAL_PWREx_ControlVoltageScaling>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800150a:	f000 f83a 	bl	8001582 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800150e:	2322      	movs	r3, #34	@ 0x22
 8001510:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001512:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001516:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001518:	2301      	movs	r3, #1
 800151a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151c:	2340      	movs	r3, #64	@ 0x40
 800151e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001520:	2302      	movs	r3, #2
 8001522:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001524:	2302      	movs	r3, #2
 8001526:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001528:	2302      	movs	r3, #2
 800152a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800152c:	231e      	movs	r3, #30
 800152e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001530:	2302      	movs	r3, #2
 8001532:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001534:	2302      	movs	r3, #2
 8001536:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001538:	2302      	movs	r3, #2
 800153a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4618      	mov	r0, r3
 8001542:	f004 f8ed 	bl	8005720 <HAL_RCC_OscConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800154c:	f000 f819 	bl	8001582 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001550:	230f      	movs	r3, #15
 8001552:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001554:	2303      	movs	r3, #3
 8001556:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001566:	463b      	mov	r3, r7
 8001568:	2105      	movs	r1, #5
 800156a:	4618      	mov	r0, r3
 800156c:	f004 fcf2 	bl	8005f54 <HAL_RCC_ClockConfig>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001576:	f000 f804 	bl	8001582 <Error_Handler>
  }
}
 800157a:	bf00      	nop
 800157c:	3758      	adds	r7, #88	@ 0x58
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001586:	b672      	cpsid	i
}
 8001588:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800158a:	bf00      	nop
 800158c:	e7fd      	b.n	800158a <Error_Handler+0x8>
	...

08001590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <HAL_MspInit+0x44>)
 8001598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800159a:	4a0e      	ldr	r2, [pc, #56]	@ (80015d4 <HAL_MspInit+0x44>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015a2:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <HAL_MspInit+0x44>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_MspInit+0x44>)
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <HAL_MspInit+0x44>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_MspInit+0x44>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <NMI_Handler+0x4>

080015e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <MemManage_Handler+0x4>

080015f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <UsageFault_Handler+0x4>

08001600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162e:	f000 fb51 	bl	8001cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <DMA1_Channel1_IRQHandler+0x10>)
 800163e:	f002 fa57 	bl	8003af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000190 	.word	0x20000190

0800164c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <DMA1_Channel2_IRQHandler+0x10>)
 8001652:	f002 fa4d 	bl	8003af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20001624 	.word	0x20001624

08001660 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001664:	4802      	ldr	r0, [pc, #8]	@ (8001670 <ADC1_IRQHandler+0x10>)
 8001666:	f000 ff57 	bl	8002518 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000128 	.word	0x20000128

08001674 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <TIM3_IRQHandler+0x10>)
 800167a:	f005 fd71 	bl	8007160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20003790 	.word	0x20003790

08001688 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800168c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001690:	f002 fda2 	bl	80041d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <TIM6_DAC_IRQHandler+0x10>)
 800169e:	f005 fd5f 	bl	8007160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20003828 	.word	0x20003828

080016ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <OTG_FS_IRQHandler+0x10>)
 80016b2:	f002 fefc 	bl	80044ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20004e80 	.word	0x20004e80

080016c0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <LPUART1_IRQHandler+0x10>)
 80016c6:	f006 fa43 	bl	8007b50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20003874 	.word	0x20003874

080016d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <SystemInit+0x20>)
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <SystemInit+0x20>)
 80016e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0310 	add.w	r3, r7, #16
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001716:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <MX_TIM3_Init+0x94>)
 8001718:	4a1d      	ldr	r2, [pc, #116]	@ (8001790 <MX_TIM3_Init+0x98>)
 800171a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 800171c:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <MX_TIM3_Init+0x94>)
 800171e:	22c7      	movs	r2, #199	@ 0xc7
 8001720:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001722:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <MX_TIM3_Init+0x94>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8001728:	4b18      	ldr	r3, [pc, #96]	@ (800178c <MX_TIM3_Init+0x94>)
 800172a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800172e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001730:	4b16      	ldr	r3, [pc, #88]	@ (800178c <MX_TIM3_Init+0x94>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <MX_TIM3_Init+0x94>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800173c:	4813      	ldr	r0, [pc, #76]	@ (800178c <MX_TIM3_Init+0x94>)
 800173e:	f005 fbdf 	bl	8006f00 <HAL_TIM_Base_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001748:	f7ff ff1b 	bl	8001582 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	4619      	mov	r1, r3
 8001758:	480c      	ldr	r0, [pc, #48]	@ (800178c <MX_TIM3_Init+0x94>)
 800175a:	f005 fe03 	bl	8007364 <HAL_TIM_ConfigClockSource>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001764:	f7ff ff0d 	bl	8001582 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001768:	2320      	movs	r3, #32
 800176a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	4619      	mov	r1, r3
 8001774:	4805      	ldr	r0, [pc, #20]	@ (800178c <MX_TIM3_Init+0x94>)
 8001776:	f006 f81b 	bl	80077b0 <HAL_TIMEx_MasterConfigSynchronization>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001780:	f7ff feff 	bl	8001582 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  // tady tady tady tady
  /* USER CODE END TIM3_Init 2 */

}
 8001784:	bf00      	nop
 8001786:	3720      	adds	r7, #32
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20003790 	.word	0x20003790
 8001790:	40000400 	.word	0x40000400

08001794 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <MX_TIM5_Init+0x94>)
 80017b4:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <MX_TIM5_Init+0x98>)
 80017b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <MX_TIM5_Init+0x94>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <MX_TIM5_Init+0x94>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80017c4:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <MX_TIM5_Init+0x94>)
 80017c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017ca:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017cc:	4b16      	ldr	r3, [pc, #88]	@ (8001828 <MX_TIM5_Init+0x94>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <MX_TIM5_Init+0x94>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017d8:	4813      	ldr	r0, [pc, #76]	@ (8001828 <MX_TIM5_Init+0x94>)
 80017da:	f005 fb91 	bl	8006f00 <HAL_TIM_Base_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80017e4:	f7ff fecd 	bl	8001582 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017ee:	f107 0310 	add.w	r3, r7, #16
 80017f2:	4619      	mov	r1, r3
 80017f4:	480c      	ldr	r0, [pc, #48]	@ (8001828 <MX_TIM5_Init+0x94>)
 80017f6:	f005 fdb5 	bl	8007364 <HAL_TIM_ConfigClockSource>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001800:	f7ff febf 	bl	8001582 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	4619      	mov	r1, r3
 8001810:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_TIM5_Init+0x94>)
 8001812:	f005 ffcd 	bl	80077b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800181c:	f7ff feb1 	bl	8001582 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200037dc 	.word	0x200037dc
 800182c:	40000c00 	.word	0x40000c00

08001830 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001840:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <MX_TIM6_Init+0x68>)
 8001842:	4a16      	ldr	r2, [pc, #88]	@ (800189c <MX_TIM6_Init+0x6c>)
 8001844:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8001846:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_TIM6_Init+0x68>)
 8001848:	f242 7210 	movw	r2, #10000	@ 0x2710
 800184c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184e:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <MX_TIM6_Init+0x68>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <MX_TIM6_Init+0x68>)
 8001856:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 800185a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <MX_TIM6_Init+0x68>)
 800185e:	2200      	movs	r2, #0
 8001860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001862:	480d      	ldr	r0, [pc, #52]	@ (8001898 <MX_TIM6_Init+0x68>)
 8001864:	f005 fb4c 	bl	8006f00 <HAL_TIM_Base_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800186e:	f7ff fe88 	bl	8001582 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001872:	2320      	movs	r3, #32
 8001874:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	4619      	mov	r1, r3
 800187e:	4806      	ldr	r0, [pc, #24]	@ (8001898 <MX_TIM6_Init+0x68>)
 8001880:	f005 ff96 	bl	80077b0 <HAL_TIMEx_MasterConfigSynchronization>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800188a:	f7ff fe7a 	bl	8001582 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20003828 	.word	0x20003828
 800189c:	40001000 	.word	0x40001000

080018a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a23      	ldr	r2, [pc, #140]	@ (800193c <HAL_TIM_Base_MspInit+0x9c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d114      	bne.n	80018dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018b2:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <HAL_TIM_Base_MspInit+0xa0>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b6:	4a22      	ldr	r2, [pc, #136]	@ (8001940 <HAL_TIM_Base_MspInit+0xa0>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018be:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <HAL_TIM_Base_MspInit+0xa0>)
 80018c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	201d      	movs	r0, #29
 80018d0:	f001 fef9 	bl	80036c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018d4:	201d      	movs	r0, #29
 80018d6:	f001 ff12 	bl	80036fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80018da:	e02a      	b.n	8001932 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a18      	ldr	r2, [pc, #96]	@ (8001944 <HAL_TIM_Base_MspInit+0xa4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d10c      	bne.n	8001900 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018e6:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <HAL_TIM_Base_MspInit+0xa0>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ea:	4a15      	ldr	r2, [pc, #84]	@ (8001940 <HAL_TIM_Base_MspInit+0xa0>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f2:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <HAL_TIM_Base_MspInit+0xa0>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	693b      	ldr	r3, [r7, #16]
}
 80018fe:	e018      	b.n	8001932 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a10      	ldr	r2, [pc, #64]	@ (8001948 <HAL_TIM_Base_MspInit+0xa8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d113      	bne.n	8001932 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800190a:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <HAL_TIM_Base_MspInit+0xa0>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190e:	4a0c      	ldr	r2, [pc, #48]	@ (8001940 <HAL_TIM_Base_MspInit+0xa0>)
 8001910:	f043 0310 	orr.w	r3, r3, #16
 8001914:	6593      	str	r3, [r2, #88]	@ 0x58
 8001916:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <HAL_TIM_Base_MspInit+0xa0>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191a:	f003 0310 	and.w	r3, r3, #16
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	2036      	movs	r0, #54	@ 0x36
 8001928:	f001 fecd 	bl	80036c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800192c:	2036      	movs	r0, #54	@ 0x36
 800192e:	f001 fee6 	bl	80036fe <HAL_NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40000400 	.word	0x40000400
 8001940:	40021000 	.word	0x40021000
 8001944:	40000c00 	.word	0x40000c00
 8001948:	40001000 	.word	0x40001000

0800194c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart3;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001950:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 8001952:	4a23      	ldr	r2, [pc, #140]	@ (80019e0 <MX_LPUART1_UART_Init+0x94>)
 8001954:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001956:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 8001958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800195c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197c:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 800197e:	2200      	movs	r2, #0
 8001980:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001982:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 8001984:	2200      	movs	r2, #0
 8001986:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 800198a:	2200      	movs	r2, #0
 800198c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800198e:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 8001990:	2200      	movs	r2, #0
 8001992:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001994:	4811      	ldr	r0, [pc, #68]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 8001996:	f005 ffb1 	bl	80078fc <HAL_UART_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80019a0:	f7ff fdef 	bl	8001582 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019a4:	2100      	movs	r1, #0
 80019a6:	480d      	ldr	r0, [pc, #52]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 80019a8:	f008 f80b 	bl	80099c2 <HAL_UARTEx_SetTxFifoThreshold>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019b2:	f7ff fde6 	bl	8001582 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019b6:	2100      	movs	r1, #0
 80019b8:	4808      	ldr	r0, [pc, #32]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 80019ba:	f008 f840 	bl	8009a3e <HAL_UARTEx_SetRxFifoThreshold>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80019c4:	f7ff fddd 	bl	8001582 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80019c8:	4804      	ldr	r0, [pc, #16]	@ (80019dc <MX_LPUART1_UART_Init+0x90>)
 80019ca:	f007 ffc1 	bl	8009950 <HAL_UARTEx_DisableFifoMode>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80019d4:	f7ff fdd5 	bl	8001582 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20003874 	.word	0x20003874
 80019e0:	40008000 	.word	0x40008000

080019e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80019e8:	4b22      	ldr	r3, [pc, #136]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 80019ea:	4a23      	ldr	r2, [pc, #140]	@ (8001a78 <MX_USART3_UART_Init+0x94>)
 80019ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019ee:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 80019f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a02:	4b1c      	ldr	r3, [pc, #112]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a14:	4b17      	ldr	r3, [pc, #92]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a1a:	4b16      	ldr	r3, [pc, #88]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a20:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a26:	4b13      	ldr	r3, [pc, #76]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a2c:	4811      	ldr	r0, [pc, #68]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a2e:	f005 ff65 	bl	80078fc <HAL_UART_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a38:	f7ff fda3 	bl	8001582 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	480d      	ldr	r0, [pc, #52]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a40:	f007 ffbf 	bl	80099c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a4a:	f7ff fd9a 	bl	8001582 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4808      	ldr	r0, [pc, #32]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a52:	f007 fff4 	bl	8009a3e <HAL_UARTEx_SetRxFifoThreshold>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a5c:	f7ff fd91 	bl	8001582 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	@ (8001a74 <MX_USART3_UART_Init+0x90>)
 8001a62:	f007 ff75 	bl	8009950 <HAL_UARTEx_DisableFifoMode>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a6c:	f7ff fd89 	bl	8001582 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20003908 	.word	0x20003908
 8001a78:	40004800 	.word	0x40004800

08001a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b0b0      	sub	sp, #192	@ 0xc0
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a94:	f107 0318 	add.w	r3, r7, #24
 8001a98:	2294      	movs	r2, #148	@ 0x94
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00c f911 	bl	800dcc4 <memset>
  if(uartHandle->Instance==LPUART1)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a47      	ldr	r2, [pc, #284]	@ (8001bc4 <HAL_UART_MspInit+0x148>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d146      	bne.n	8001b3a <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001aac:	2320      	movs	r3, #32
 8001aae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab4:	f107 0318 	add.w	r3, r7, #24
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f004 fd09 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ac4:	f7ff fd5d 	bl	8001582 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001acc:	4a3e      	ldr	r2, [pc, #248]	@ (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001ad4:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae0:	4b39      	ldr	r3, [pc, #228]	@ (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae4:	4a38      	ldr	r2, [pc, #224]	@ (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001aea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aec:	4b36      	ldr	r3, [pc, #216]	@ (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001af8:	f003 fe02 	bl	8005700 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001afc:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001b00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b16:	2308      	movs	r3, #8
 8001b18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b1c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b20:	4619      	mov	r1, r3
 8001b22:	482a      	ldr	r0, [pc, #168]	@ (8001bcc <HAL_UART_MspInit+0x150>)
 8001b24:	f002 f97c 	bl	8003e20 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2046      	movs	r0, #70	@ 0x46
 8001b2e:	f001 fdca 	bl	80036c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001b32:	2046      	movs	r0, #70	@ 0x46
 8001b34:	f001 fde3 	bl	80036fe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b38:	e040      	b.n	8001bbc <HAL_UART_MspInit+0x140>
  else if(uartHandle->Instance==USART3)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a24      	ldr	r2, [pc, #144]	@ (8001bd0 <HAL_UART_MspInit+0x154>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d13b      	bne.n	8001bbc <HAL_UART_MspInit+0x140>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b44:	2304      	movs	r3, #4
 8001b46:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4c:	f107 0318 	add.w	r3, r7, #24
 8001b50:	4618      	mov	r0, r3
 8001b52:	f004 fcbd 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001b5c:	f7ff fd11 	bl	8001582 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b64:	4a18      	ldr	r2, [pc, #96]	@ (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001b66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b6c:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b78:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7c:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001b7e:	f043 0308 	orr.w	r3, r3, #8
 8001b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b84:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <HAL_UART_MspInit+0x14c>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001baa:	2307      	movs	r3, #7
 8001bac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <HAL_UART_MspInit+0x158>)
 8001bb8:	f002 f932 	bl	8003e20 <HAL_GPIO_Init>
}
 8001bbc:	bf00      	nop
 8001bbe:	37c0      	adds	r7, #192	@ 0xc0
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40008000 	.word	0x40008000
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	48001800 	.word	0x48001800
 8001bd0:	40004800 	.word	0x40004800
 8001bd4:	48000c00 	.word	0x48000c00

08001bd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bdc:	f7ff fd7a 	bl	80016d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001be0:	480c      	ldr	r0, [pc, #48]	@ (8001c14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001be2:	490d      	ldr	r1, [pc, #52]	@ (8001c18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001be4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c1c <LoopForever+0xe>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be8:	e002      	b.n	8001bf0 <LoopCopyDataInit>

08001bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bee:	3304      	adds	r3, #4

08001bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf4:	d3f9      	bcc.n	8001bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c24 <LoopForever+0x16>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bfc:	e001      	b.n	8001c02 <LoopFillZerobss>

08001bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c00:	3204      	adds	r2, #4

08001c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c04:	d3fb      	bcc.n	8001bfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c06:	f00c f865 	bl	800dcd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c0a:	f7ff fbcf 	bl	80013ac <main>

08001c0e <LoopForever>:

LoopForever:
    b LoopForever
 8001c0e:	e7fe      	b.n	8001c0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c10:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c18:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001c1c:	0800de18 	.word	0x0800de18
  ldr r2, =_sbss
 8001c20:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001c24:	200055ac 	.word	0x200055ac

08001c28 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c28:	e7fe      	b.n	8001c28 <CAN1_RX0_IRQHandler>

08001c2a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c34:	2003      	movs	r0, #3
 8001c36:	f001 fd3b 	bl	80036b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f000 f80e 	bl	8001c5c <HAL_InitTick>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	e001      	b.n	8001c50 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c4c:	f7ff fca0 	bl	8001590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c50:	79fb      	ldrb	r3, [r7, #7]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c68:	4b17      	ldr	r3, [pc, #92]	@ (8001cc8 <HAL_InitTick+0x6c>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d023      	beq.n	8001cb8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c70:	4b16      	ldr	r3, [pc, #88]	@ (8001ccc <HAL_InitTick+0x70>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <HAL_InitTick+0x6c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f001 fd47 	bl	800371a <HAL_SYSTICK_Config>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b0f      	cmp	r3, #15
 8001c96:	d809      	bhi.n	8001cac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ca0:	f001 fd11 	bl	80036c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd0 <HAL_InitTick+0x74>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e007      	b.n	8001cbc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	e004      	b.n	8001cbc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	e001      	b.n	8001cbc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000004 	.word	0x20000004

08001cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <HAL_IncTick+0x20>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <HAL_IncTick+0x24>)
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000008 	.word	0x20000008
 8001cf8:	2000399c 	.word	0x2000399c

08001cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_GetTick+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	2000399c 	.word	0x2000399c

08001d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d1c:	f7ff ffee 	bl	8001cfc <HAL_GetTick>
 8001d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d2c:	d005      	beq.n	8001d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <HAL_Delay+0x44>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4413      	add	r3, r2
 8001d38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d3a:	bf00      	nop
 8001d3c:	f7ff ffde 	bl	8001cfc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d8f7      	bhi.n	8001d3c <HAL_Delay+0x28>
  {
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008

08001d5c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	609a      	str	r2, [r3, #8]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3360      	adds	r3, #96	@ 0x60
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <LL_ADC_SetOffset+0x44>)
 8001de6:	4013      	ands	r3, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001dfc:	bf00      	nop
 8001dfe:	371c      	adds	r7, #28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	03fff000 	.word	0x03fff000

08001e0c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3360      	adds	r3, #96	@ 0x60
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	4413      	add	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3360      	adds	r3, #96	@ 0x60
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	615a      	str	r2, [r3, #20]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b087      	sub	sp, #28
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	3330      	adds	r3, #48	@ 0x30
 8001eca:	461a      	mov	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	f003 030c 	and.w	r3, r3, #12
 8001ed6:	4413      	add	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	211f      	movs	r1, #31
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	401a      	ands	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	0e9b      	lsrs	r3, r3, #26
 8001ef2:	f003 011f 	and.w	r1, r3, #31
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f06:	bf00      	nop
 8001f08:	371c      	adds	r7, #28
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3314      	adds	r3, #20
 8001f48:	461a      	mov	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	0e5b      	lsrs	r3, r3, #25
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	4413      	add	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	0d1b      	lsrs	r3, r3, #20
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	2107      	movs	r1, #7
 8001f66:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	0d1b      	lsrs	r3, r3, #20
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f82:	bf00      	nop
 8001f84:	371c      	adds	r7, #28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0318 	and.w	r3, r3, #24
 8001fb2:	4908      	ldr	r1, [pc, #32]	@ (8001fd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fb4:	40d9      	lsrs	r1, r3
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	400b      	ands	r3, r1
 8001fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fc6:	bf00      	nop
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	0007ffff 	.word	0x0007ffff

08001fd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001fe8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6093      	str	r3, [r2, #8]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800200c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002010:	d101      	bne.n	8002016 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002034:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002038:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002060:	d101      	bne.n	8002066 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002084:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002088:	f043 0201 	orr.w	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020b0:	f043 0202 	orr.w	r2, r3, #2
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <LL_ADC_IsEnabled+0x18>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <LL_ADC_IsEnabled+0x1a>
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d101      	bne.n	8002102 <LL_ADC_IsDisableOngoing+0x18>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <LL_ADC_IsDisableOngoing+0x1a>
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002120:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002124:	f043 0204 	orr.w	r2, r3, #4
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b04      	cmp	r3, #4
 800214a:	d101      	bne.n	8002150 <LL_ADC_REG_IsConversionOngoing+0x18>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b08      	cmp	r3, #8
 8002170:	d101      	bne.n	8002176 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e129      	b.n	80023f2 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7fe fa31 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff19 	bl	8001ffc <LL_ADC_IsDeepPowerDownEnabled>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d004      	beq.n	80021da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff feff 	bl	8001fd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff34 	bl	800204c <LL_ADC_IsInternalRegulatorEnabled>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d115      	bne.n	8002216 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff18 	bl	8002024 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021f4:	4b81      	ldr	r3, [pc, #516]	@ (80023fc <HAL_ADC_Init+0x278>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	4a81      	ldr	r2, [pc, #516]	@ (8002400 <HAL_ADC_Init+0x27c>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	099b      	lsrs	r3, r3, #6
 8002202:	3301      	adds	r3, #1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002208:	e002      	b.n	8002210 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3b01      	subs	r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f9      	bne.n	800220a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff16 	bl	800204c <LL_ADC_IsInternalRegulatorEnabled>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10d      	bne.n	8002242 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800222a:	f043 0210 	orr.w	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff ff76 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 800224c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	f040 80c2 	bne.w	80023e0 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f040 80be 	bne.w	80023e0 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002268:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800226c:	f043 0202 	orr.w	r2, r3, #2
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff23 	bl	80020c4 <LL_ADC_IsEnabled>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10b      	bne.n	800229c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002284:	485f      	ldr	r0, [pc, #380]	@ (8002404 <HAL_ADC_Init+0x280>)
 8002286:	f7ff ff1d 	bl	80020c4 <LL_ADC_IsEnabled>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	4619      	mov	r1, r3
 8002296:	485c      	ldr	r0, [pc, #368]	@ (8002408 <HAL_ADC_Init+0x284>)
 8002298:	f7ff fd60 	bl	8001d5c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7e5b      	ldrb	r3, [r3, #25]
 80022a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80022ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80022b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d106      	bne.n	80022d8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	3b01      	subs	r3, #1
 80022d0:	045b      	lsls	r3, r3, #17
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	4b44      	ldr	r3, [pc, #272]	@ (800240c <HAL_ADC_Init+0x288>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	430b      	orrs	r3, r1
 8002306:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff26 	bl	800215e <LL_ADC_INJ_IsConversionOngoing>
 8002312:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d140      	bne.n	800239c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d13d      	bne.n	800239c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7e1b      	ldrb	r3, [r3, #24]
 8002328:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800232a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002332:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002342:	f023 0306 	bic.w	r3, r3, #6
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	69b9      	ldr	r1, [r7, #24]
 800234c:	430b      	orrs	r3, r1
 800234e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002356:	2b01      	cmp	r3, #1
 8002358:	d118      	bne.n	800238c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002364:	f023 0304 	bic.w	r3, r3, #4
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002370:	4311      	orrs	r1, r2
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002376:	4311      	orrs	r1, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800237c:	430a      	orrs	r2, r1
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	611a      	str	r2, [r3, #16]
 800238a:	e007      	b.n	800239c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691a      	ldr	r2, [r3, #16]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 0201 	bic.w	r2, r2, #1
 800239a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d10c      	bne.n	80023be <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f023 010f 	bic.w	r1, r3, #15
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	1e5a      	subs	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80023bc:	e007      	b.n	80023ce <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 020f 	bic.w	r2, r2, #15
 80023cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d2:	f023 0303 	bic.w	r3, r3, #3
 80023d6:	f043 0201 	orr.w	r2, r3, #1
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80023de:	e007      	b.n	80023f0 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e4:	f043 0210 	orr.w	r2, r3, #16
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3720      	adds	r7, #32
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000000 	.word	0x20000000
 8002400:	053e2d63 	.word	0x053e2d63
 8002404:	50040000 	.word	0x50040000
 8002408:	50040300 	.word	0x50040300
 800240c:	fff0c007 	.word	0xfff0c007

08002410 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fe89 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d167      	bne.n	80024fc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_ADC_Start_DMA+0x2a>
 8002436:	2302      	movs	r3, #2
 8002438:	e063      	b.n	8002502 <HAL_ADC_Start_DMA+0xf2>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fe2c 	bl	80030a0 <ADC_Enable>
 8002448:	4603      	mov	r3, r0
 800244a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d14f      	bne.n	80024f2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002456:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	659a      	str	r2, [r3, #88]	@ 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002476:	f023 0206 	bic.w	r2, r3, #6
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800247e:	e002      	b.n	8002486 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800248a:	4a20      	ldr	r2, [pc, #128]	@ (800250c <HAL_ADC_Start_DMA+0xfc>)
 800248c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002492:	4a1f      	ldr	r2, [pc, #124]	@ (8002510 <HAL_ADC_Start_DMA+0x100>)
 8002494:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249a:	4a1e      	ldr	r2, [pc, #120]	@ (8002514 <HAL_ADC_Start_DMA+0x104>)
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	221c      	movs	r2, #28
 80024a4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0210 	orr.w	r2, r2, #16
 80024bc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0201 	orr.w	r2, r2, #1
 80024cc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3340      	adds	r3, #64	@ 0x40
 80024d8:	4619      	mov	r1, r3
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f001 f9d1 	bl	8003884 <HAL_DMA_Start_IT>
 80024e2:	4603      	mov	r3, r0
 80024e4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fe10 	bl	8002110 <LL_ADC_REG_StartConversion>
 80024f0:	e006      	b.n	8002500 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80024fa:	e001      	b.n	8002500 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024fc:	2302      	movs	r3, #2
 80024fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002500:	7dfb      	ldrb	r3, [r7, #23]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	0800326b 	.word	0x0800326b
 8002510:	08003343 	.word	0x08003343
 8002514:	0800335f 	.word	0x0800335f

08002518 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002520:	2300      	movs	r3, #0
 8002522:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d017      	beq.n	800256e <HAL_ADC_IRQHandler+0x56>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d012      	beq.n	800256e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d105      	bne.n	8002560 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002558:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 ffcb 	bl	80034fc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2202      	movs	r2, #2
 800256c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <HAL_ADC_IRQHandler+0x6a>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002588:	2b00      	cmp	r3, #0
 800258a:	d05e      	beq.n	800264a <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d059      	beq.n	800264a <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fc6e 	bl	8001e94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d03e      	beq.n	800263c <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d135      	bne.n	800263c <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d12e      	bne.n	800263c <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fda8 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d11a      	bne.n	8002624 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 020c 	bic.w	r2, r2, #12
 80025fc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002602:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d112      	bne.n	800263c <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	659a      	str	r2, [r3, #88]	@ 0x58
 8002622:	e00b      	b.n	800263c <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002628:	f043 0210 	orr.w	r2, r3, #16
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7fe fdcf 	bl	80011e0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	220c      	movs	r2, #12
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d004      	beq.n	800265e <HAL_ADC_IRQHandler+0x146>
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002664:	2b00      	cmp	r3, #0
 8002666:	d072      	beq.n	800274e <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d06d      	beq.n	800274e <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fc3f 	bl	8001f12 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002694:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fbfa 	bl	8001e94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026a0:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d047      	beq.n	8002740 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_ADC_IRQHandler+0x1b2>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d03f      	beq.n	8002740 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d13a      	bne.n	8002740 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d4:	2b40      	cmp	r3, #64	@ 0x40
 80026d6:	d133      	bne.n	8002740 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d12e      	bne.n	8002740 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fd39 	bl	800215e <LL_ADC_INJ_IsConversionOngoing>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d11a      	bne.n	8002728 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002700:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002706:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002716:	2b00      	cmp	r3, #0
 8002718:	d112      	bne.n	8002740 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	659a      	str	r2, [r3, #88]	@ 0x58
 8002726:	e00b      	b.n	8002740 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	f043 0210 	orr.w	r2, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 feb3 	bl	80034ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2260      	movs	r2, #96	@ 0x60
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002754:	2b00      	cmp	r3, #0
 8002756:	d011      	beq.n	800277c <HAL_ADC_IRQHandler+0x264>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00c      	beq.n	800277c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002766:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f886 	bl	8002880 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2280      	movs	r2, #128	@ 0x80
 800277a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d012      	beq.n	80027ac <HAL_ADC_IRQHandler+0x294>
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00d      	beq.n	80027ac <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002794:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 fe99 	bl	80034d4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d012      	beq.n	80027dc <HAL_ADC_IRQHandler+0x2c4>
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00d      	beq.n	80027dc <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fe8b 	bl	80034e8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d02a      	beq.n	800283c <HAL_ADC_IRQHandler+0x324>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d025      	beq.n	800283c <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80027f8:	2301      	movs	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	e008      	b.n	8002810 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 800280c:	2301      	movs	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10e      	bne.n	8002834 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002826:	f043 0202 	orr.w	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f830 	bl	8002894 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2210      	movs	r2, #16
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002842:	2b00      	cmp	r3, #0
 8002844:	d018      	beq.n	8002878 <HAL_ADC_IRQHandler+0x360>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002860:	f043 0208 	orr.w	r2, r3, #8
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002870:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fe24 	bl	80034c0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002878:	bf00      	nop
 800287a:	3720      	adds	r7, #32
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b0b6      	sub	sp, #216	@ 0xd8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x22>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e3d5      	b.n	8003076 <HAL_ADC_ConfigChannel+0x7ce>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fc2e 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 83ba 	bne.w	8003058 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d824      	bhi.n	800293e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	3b02      	subs	r3, #2
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d81b      	bhi.n	8002936 <HAL_ADC_ConfigChannel+0x8e>
 80028fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002904 <HAL_ADC_ConfigChannel+0x5c>)
 8002900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002904:	08002915 	.word	0x08002915
 8002908:	0800291d 	.word	0x0800291d
 800290c:	08002925 	.word	0x08002925
 8002910:	0800292d 	.word	0x0800292d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002914:	230c      	movs	r3, #12
 8002916:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800291a:	e010      	b.n	800293e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800291c:	2312      	movs	r3, #18
 800291e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002922:	e00c      	b.n	800293e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002924:	2318      	movs	r3, #24
 8002926:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800292a:	e008      	b.n	800293e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800292c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002934:	e003      	b.n	800293e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002936:	2306      	movs	r3, #6
 8002938:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800293c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800294c:	f7ff fab5 	bl	8001eba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fbef 	bl	8002138 <LL_ADC_REG_IsConversionOngoing>
 800295a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fbfb 	bl	800215e <LL_ADC_INJ_IsConversionOngoing>
 8002968:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800296c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002970:	2b00      	cmp	r3, #0
 8002972:	f040 81bf 	bne.w	8002cf4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002976:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800297a:	2b00      	cmp	r3, #0
 800297c:	f040 81ba 	bne.w	8002cf4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002988:	d10f      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2200      	movs	r2, #0
 8002994:	4619      	mov	r1, r3
 8002996:	f7ff facf 	bl	8001f38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fa63 	bl	8001e6e <LL_ADC_SetSamplingTimeCommonConfig>
 80029a8:	e00e      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	6819      	ldr	r1, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	461a      	mov	r2, r3
 80029b8:	f7ff fabe 	bl	8001f38 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2100      	movs	r1, #0
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff fa53 	bl	8001e6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	08db      	lsrs	r3, r3, #3
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d00a      	beq.n	8002a00 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6919      	ldr	r1, [r3, #16]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029fa:	f7ff f9e3 	bl	8001dc4 <LL_ADC_SetOffset>
 80029fe:	e179      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fa00 	bl	8001e0c <LL_ADC_GetOffsetChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10a      	bne.n	8002a2c <HAL_ADC_ConfigChannel+0x184>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff f9f5 	bl	8001e0c <LL_ADC_GetOffsetChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	f003 021f 	and.w	r2, r3, #31
 8002a2a:	e01e      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x1c2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f9ea 	bl	8001e0c <LL_ADC_GetOffsetChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	e004      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002a5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x1da>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	0e9b      	lsrs	r3, r3, #26
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	e018      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x20c>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002a96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002a9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	e004      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002aaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002aae:	fab3 f383 	clz	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d106      	bne.n	8002ac6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2200      	movs	r2, #0
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff f9b9 	bl	8001e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff f99d 	bl	8001e0c <LL_ADC_GetOffsetChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10a      	bne.n	8002af2 <HAL_ADC_ConfigChannel+0x24a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff f992 	bl	8001e0c <LL_ADC_GetOffsetChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	0e9b      	lsrs	r3, r3, #26
 8002aec:	f003 021f 	and.w	r2, r3, #31
 8002af0:	e01e      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x288>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2101      	movs	r1, #1
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff f987 	bl	8001e0c <LL_ADC_GetOffsetChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002b18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002b20:	2320      	movs	r3, #32
 8002b22:	e004      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002b24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x2a0>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	0e9b      	lsrs	r3, r3, #26
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	e018      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x2d2>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e004      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b74:	fab3 f383 	clz	r3, r3
 8002b78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d106      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2200      	movs	r2, #0
 8002b84:	2101      	movs	r1, #1
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff f956 	bl	8001e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2102      	movs	r1, #2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f93a 	bl	8001e0c <LL_ADC_GetOffsetChannel>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10a      	bne.n	8002bb8 <HAL_ADC_ConfigChannel+0x310>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff f92f 	bl	8001e0c <LL_ADC_GetOffsetChannel>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	0e9b      	lsrs	r3, r3, #26
 8002bb2:	f003 021f 	and.w	r2, r3, #31
 8002bb6:	e01e      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x34e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff f924 	bl	8001e0c <LL_ADC_GetOffsetChannel>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002be6:	2320      	movs	r3, #32
 8002be8:	e004      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002bee:	fab3 f383 	clz	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x366>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0e9b      	lsrs	r3, r3, #26
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	e014      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x390>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002c1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002c2a:	2320      	movs	r3, #32
 8002c2c:	e004      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002c2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d106      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2200      	movs	r2, #0
 8002c42:	2102      	movs	r1, #2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f8f7 	bl	8001e38 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2103      	movs	r1, #3
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f8db 	bl	8001e0c <LL_ADC_GetOffsetChannel>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x3ce>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2103      	movs	r1, #3
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff f8d0 	bl	8001e0c <LL_ADC_GetOffsetChannel>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	e017      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x3fe>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff f8c5 	bl	8001e0c <LL_ADC_GetOffsetChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c90:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002c92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002c98:	2320      	movs	r3, #32
 8002c9a:	e003      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002c9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x416>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	0e9b      	lsrs	r3, r3, #26
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	e011      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x43a>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002ccc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cce:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002cd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002cd6:	2320      	movs	r3, #32
 8002cd8:	e003      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002cda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cdc:	fab3 f383 	clz	r3, r3
 8002ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d106      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2200      	movs	r2, #0
 8002cec:	2103      	movs	r1, #3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff f8a2 	bl	8001e38 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f9e3 	bl	80020c4 <LL_ADC_IsEnabled>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f040 813f 	bne.w	8002f84 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f7ff f93c 	bl	8001f90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a8e      	ldr	r2, [pc, #568]	@ (8002f58 <HAL_ADC_ConfigChannel+0x6b0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	f040 8130 	bne.w	8002f84 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x4a4>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	2b09      	cmp	r3, #9
 8002d42:	bf94      	ite	ls
 8002d44:	2301      	movls	r3, #1
 8002d46:	2300      	movhi	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e019      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x4d8>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002d64:	2320      	movs	r3, #32
 8002d66:	e003      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	2b09      	cmp	r3, #9
 8002d78:	bf94      	ite	ls
 8002d7a:	2301      	movls	r3, #1
 8002d7c:	2300      	movhi	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d079      	beq.n	8002e78 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d107      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x4f8>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0e9b      	lsrs	r3, r3, #26
 8002d96:	3301      	adds	r3, #1
 8002d98:	069b      	lsls	r3, r3, #26
 8002d9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d9e:	e015      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x524>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002db0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002db2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002db8:	2320      	movs	r3, #32
 8002dba:	e003      	b.n	8002dc4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	069b      	lsls	r3, r3, #26
 8002dc8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x544>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	0e9b      	lsrs	r3, r3, #26
 8002dde:	3301      	adds	r3, #1
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	e017      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x574>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dfc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002dfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002e04:	2320      	movs	r3, #32
 8002e06:	e003      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	3301      	adds	r3, #1
 8002e12:	f003 031f 	and.w	r3, r3, #31
 8002e16:	2101      	movs	r1, #1
 8002e18:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1c:	ea42 0103 	orr.w	r1, r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x59a>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	0e9b      	lsrs	r3, r3, #26
 8002e32:	3301      	adds	r3, #1
 8002e34:	f003 021f 	and.w	r2, r3, #31
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	051b      	lsls	r3, r3, #20
 8002e40:	e018      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x5cc>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e003      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e74:	430b      	orrs	r3, r1
 8002e76:	e080      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d107      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x5ec>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0e9b      	lsrs	r3, r3, #26
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	069b      	lsls	r3, r3, #26
 8002e8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e92:	e015      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x618>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002eac:	2320      	movs	r3, #32
 8002eae:	e003      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	069b      	lsls	r3, r3, #26
 8002ebc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d109      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x638>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2101      	movs	r1, #1
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	e017      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x668>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	61bb      	str	r3, [r7, #24]
  return result;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e003      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002efc:	6a3b      	ldr	r3, [r7, #32]
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	ea42 0103 	orr.w	r1, r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10d      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x694>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	3301      	adds	r3, #1
 8002f28:	f003 021f 	and.w	r2, r3, #31
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4413      	add	r3, r2
 8002f32:	3b1e      	subs	r3, #30
 8002f34:	051b      	lsls	r3, r3, #20
 8002f36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f3a:	e01d      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x6d0>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	fa93 f3a3 	rbit	r3, r3
 8002f48:	60fb      	str	r3, [r7, #12]
  return result;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d103      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002f54:	2320      	movs	r3, #32
 8002f56:	e005      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x6bc>
 8002f58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f003 021f 	and.w	r2, r3, #31
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	3b1e      	subs	r3, #30
 8002f72:	051b      	lsls	r3, r3, #20
 8002f74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f78:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f7fe ffda 	bl	8001f38 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b3d      	ldr	r3, [pc, #244]	@ (8003080 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d06c      	beq.n	800306a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f90:	483c      	ldr	r0, [pc, #240]	@ (8003084 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f92:	f7fe ff09 	bl	8001da8 <LL_ADC_GetCommonPathInternalCh>
 8002f96:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a3a      	ldr	r2, [pc, #232]	@ (8003088 <HAL_ADC_ConfigChannel+0x7e0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d127      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fa8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d121      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a35      	ldr	r2, [pc, #212]	@ (800308c <HAL_ADC_ConfigChannel+0x7e4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d157      	bne.n	800306a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fbe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	482f      	ldr	r0, [pc, #188]	@ (8003084 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fc6:	f7fe fedc 	bl	8001d82 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fca:	4b31      	ldr	r3, [pc, #196]	@ (8003090 <HAL_ADC_ConfigChannel+0x7e8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	4a30      	ldr	r2, [pc, #192]	@ (8003094 <HAL_ADC_ConfigChannel+0x7ec>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	099b      	lsrs	r3, r3, #6
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fe4:	e002      	b.n	8002fec <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f9      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ff2:	e03a      	b.n	800306a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a27      	ldr	r2, [pc, #156]	@ (8003098 <HAL_ADC_ConfigChannel+0x7f0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d113      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ffe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003002:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10d      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1f      	ldr	r2, [pc, #124]	@ (800308c <HAL_ADC_ConfigChannel+0x7e4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d12a      	bne.n	800306a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003018:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800301c:	4619      	mov	r1, r3
 800301e:	4819      	ldr	r0, [pc, #100]	@ (8003084 <HAL_ADC_ConfigChannel+0x7dc>)
 8003020:	f7fe feaf 	bl	8001d82 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003024:	e021      	b.n	800306a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1c      	ldr	r2, [pc, #112]	@ (800309c <HAL_ADC_ConfigChannel+0x7f4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d11c      	bne.n	800306a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003030:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d116      	bne.n	800306a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a12      	ldr	r2, [pc, #72]	@ (800308c <HAL_ADC_ConfigChannel+0x7e4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d111      	bne.n	800306a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003046:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800304a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800304e:	4619      	mov	r1, r3
 8003050:	480c      	ldr	r0, [pc, #48]	@ (8003084 <HAL_ADC_ConfigChannel+0x7dc>)
 8003052:	f7fe fe96 	bl	8001d82 <LL_ADC_SetCommonPathInternalCh>
 8003056:	e008      	b.n	800306a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003072:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003076:	4618      	mov	r0, r3
 8003078:	37d8      	adds	r7, #216	@ 0xd8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	80080000 	.word	0x80080000
 8003084:	50040300 	.word	0x50040300
 8003088:	c7520000 	.word	0xc7520000
 800308c:	50040000 	.word	0x50040000
 8003090:	20000000 	.word	0x20000000
 8003094:	053e2d63 	.word	0x053e2d63
 8003098:	cb840000 	.word	0xcb840000
 800309c:	80000001 	.word	0x80000001

080030a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f807 	bl	80020c4 <LL_ADC_IsEnabled>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d169      	bne.n	8003190 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	4b36      	ldr	r3, [pc, #216]	@ (800319c <ADC_Enable+0xfc>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ce:	f043 0210 	orr.w	r2, r3, #16
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030da:	f043 0201 	orr.w	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e055      	b.n	8003192 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe ffc2 	bl	8002074 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030f0:	482b      	ldr	r0, [pc, #172]	@ (80031a0 <ADC_Enable+0x100>)
 80030f2:	f7fe fe59 	bl	8001da8 <LL_ADC_GetCommonPathInternalCh>
 80030f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d013      	beq.n	8003128 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003100:	4b28      	ldr	r3, [pc, #160]	@ (80031a4 <ADC_Enable+0x104>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	4a28      	ldr	r2, [pc, #160]	@ (80031a8 <ADC_Enable+0x108>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	099b      	lsrs	r3, r3, #6
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800311a:	e002      	b.n	8003122 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	3b01      	subs	r3, #1
 8003120:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f9      	bne.n	800311c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003128:	f7fe fde8 	bl	8001cfc <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800312e:	e028      	b.n	8003182 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fe ffc5 	bl	80020c4 <LL_ADC_IsEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d104      	bne.n	800314a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe ff95 	bl	8002074 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800314a:	f7fe fdd7 	bl	8001cfc <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d914      	bls.n	8003182 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b01      	cmp	r3, #1
 8003164:	d00d      	beq.n	8003182 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316a:	f043 0210 	orr.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	f043 0201 	orr.w	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e007      	b.n	8003192 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d1cf      	bne.n	8003130 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	8000003f 	.word	0x8000003f
 80031a0:	50040300 	.word	0x50040300
 80031a4:	20000000 	.word	0x20000000
 80031a8:	053e2d63 	.word	0x053e2d63

080031ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe ff96 	bl	80020ea <LL_ADC_IsDisableOngoing>
 80031be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe ff7d 	bl	80020c4 <LL_ADC_IsEnabled>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d047      	beq.n	8003260 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d144      	bne.n	8003260 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 030d 	and.w	r3, r3, #13
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d10c      	bne.n	80031fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe ff57 	bl	800209c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2203      	movs	r2, #3
 80031f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031f6:	f7fe fd81 	bl	8001cfc <HAL_GetTick>
 80031fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031fc:	e029      	b.n	8003252 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003202:	f043 0210 	orr.w	r2, r3, #16
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320e:	f043 0201 	orr.w	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e023      	b.n	8003262 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800321a:	f7fe fd6f 	bl	8001cfc <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d914      	bls.n	8003252 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00d      	beq.n	8003252 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323a:	f043 0210 	orr.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e007      	b.n	8003262 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1dc      	bne.n	800321a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003276:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003280:	2b00      	cmp	r3, #0
 8003282:	d14b      	bne.n	800331c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003288:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d021      	beq.n	80032e2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe fdf6 	bl	8001e94 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d032      	beq.n	8003314 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d12b      	bne.n	8003314 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	659a      	str	r2, [r3, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d11f      	bne.n	8003314 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	659a      	str	r2, [r3, #88]	@ 0x58
 80032e0:	e018      	b.n	8003314 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d111      	bne.n	8003314 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330c:	f043 0201 	orr.w	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f7fd ff63 	bl	80011e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800331a:	e00e      	b.n	800333a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7ff fab3 	bl	8002894 <HAL_ADC_ErrorCallback>
}
 800332e:	e004      	b.n	800333a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
}
 800333a:	bf00      	nop
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7fe f821 	bl	8001398 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003370:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337c:	f043 0204 	orr.w	r2, r3, #4
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f7ff fa85 	bl	8002894 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <LL_ADC_StartCalibration>:
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80033a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	609a      	str	r2, [r3, #8]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_ADC_IsCalibrationOnGoing>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80033d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033d8:	d101      	bne.n	80033de <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_ADCEx_Calibration_Start+0x1c>
 8003404:	2302      	movs	r3, #2
 8003406:	e04d      	b.n	80034a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff fecb 	bl	80031ac <ADC_Disable>
 8003416:	4603      	mov	r3, r0
 8003418:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d136      	bne.n	800348e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003424:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003428:	f023 0302 	bic.w	r3, r3, #2
 800342c:	f043 0202 	orr.w	r2, r3, #2
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6839      	ldr	r1, [r7, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff ffa9 	bl	8003392 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003440:	e014      	b.n	800346c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800344e:	d30d      	bcc.n	800346c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003454:	f023 0312 	bic.w	r3, r3, #18
 8003458:	f043 0210 	orr.w	r2, r3, #16
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e01b      	b.n	80034a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ffa7 	bl	80033c4 <LL_ADC_IsCalibrationOnGoing>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1e2      	bne.n	8003442 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003480:	f023 0303 	bic.w	r3, r3, #3
 8003484:	f043 0201 	orr.w	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	659a      	str	r2, [r3, #88]	@ 0x58
 800348c:	e005      	b.n	800349a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	f043 0210 	orr.w	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003520:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <__NVIC_SetPriorityGrouping+0x44>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800352c:	4013      	ands	r3, r2
 800352e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003538:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800353c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003542:	4a04      	ldr	r2, [pc, #16]	@ (8003554 <__NVIC_SetPriorityGrouping+0x44>)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	60d3      	str	r3, [r2, #12]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000ed00 	.word	0xe000ed00

08003558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800355c:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <__NVIC_GetPriorityGrouping+0x18>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	f003 0307 	and.w	r3, r3, #7
}
 8003566:	4618      	mov	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	2b00      	cmp	r3, #0
 8003584:	db0b      	blt.n	800359e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	f003 021f 	and.w	r2, r3, #31
 800358c:	4907      	ldr	r1, [pc, #28]	@ (80035ac <__NVIC_EnableIRQ+0x38>)
 800358e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	2001      	movs	r0, #1
 8003596:	fa00 f202 	lsl.w	r2, r0, r2
 800359a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000e100 	.word	0xe000e100

080035b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	6039      	str	r1, [r7, #0]
 80035ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	db0a      	blt.n	80035da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	490c      	ldr	r1, [pc, #48]	@ (80035fc <__NVIC_SetPriority+0x4c>)
 80035ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ce:	0112      	lsls	r2, r2, #4
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	440b      	add	r3, r1
 80035d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d8:	e00a      	b.n	80035f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4908      	ldr	r1, [pc, #32]	@ (8003600 <__NVIC_SetPriority+0x50>)
 80035e0:	79fb      	ldrb	r3, [r7, #7]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	3b04      	subs	r3, #4
 80035e8:	0112      	lsls	r2, r2, #4
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	440b      	add	r3, r1
 80035ee:	761a      	strb	r2, [r3, #24]
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	e000e100 	.word	0xe000e100
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003604:	b480      	push	{r7}
 8003606:	b089      	sub	sp, #36	@ 0x24
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f1c3 0307 	rsb	r3, r3, #7
 800361e:	2b04      	cmp	r3, #4
 8003620:	bf28      	it	cs
 8003622:	2304      	movcs	r3, #4
 8003624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3304      	adds	r3, #4
 800362a:	2b06      	cmp	r3, #6
 800362c:	d902      	bls.n	8003634 <NVIC_EncodePriority+0x30>
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	3b03      	subs	r3, #3
 8003632:	e000      	b.n	8003636 <NVIC_EncodePriority+0x32>
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003638:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43da      	mvns	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	401a      	ands	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800364c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	fa01 f303 	lsl.w	r3, r1, r3
 8003656:	43d9      	mvns	r1, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800365c:	4313      	orrs	r3, r2
         );
}
 800365e:	4618      	mov	r0, r3
 8003660:	3724      	adds	r7, #36	@ 0x24
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3b01      	subs	r3, #1
 8003678:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800367c:	d301      	bcc.n	8003682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800367e:	2301      	movs	r3, #1
 8003680:	e00f      	b.n	80036a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003682:	4a0a      	ldr	r2, [pc, #40]	@ (80036ac <SysTick_Config+0x40>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3b01      	subs	r3, #1
 8003688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800368a:	210f      	movs	r1, #15
 800368c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003690:	f7ff ff8e 	bl	80035b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <SysTick_Config+0x40>)
 8003696:	2200      	movs	r2, #0
 8003698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800369a:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <SysTick_Config+0x40>)
 800369c:	2207      	movs	r2, #7
 800369e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	e000e010 	.word	0xe000e010

080036b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff29 	bl	8003510 <__NVIC_SetPriorityGrouping>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036d8:	f7ff ff3e 	bl	8003558 <__NVIC_GetPriorityGrouping>
 80036dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f7ff ff8e 	bl	8003604 <NVIC_EncodePriority>
 80036e8:	4602      	mov	r2, r0
 80036ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff5d 	bl	80035b0 <__NVIC_SetPriority>
}
 80036f6:	bf00      	nop
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	4603      	mov	r3, r0
 8003706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ff31 	bl	8003574 <__NVIC_EnableIRQ>
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff ffa2 	bl	800366c <SysTick_Config>
 8003728:	4603      	mov	r3, r0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e08d      	b.n	8003862 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	4b47      	ldr	r3, [pc, #284]	@ (800386c <HAL_DMA_Init+0x138>)
 800374e:	429a      	cmp	r2, r3
 8003750:	d80f      	bhi.n	8003772 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	4b45      	ldr	r3, [pc, #276]	@ (8003870 <HAL_DMA_Init+0x13c>)
 800375a:	4413      	add	r3, r2
 800375c:	4a45      	ldr	r2, [pc, #276]	@ (8003874 <HAL_DMA_Init+0x140>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	009a      	lsls	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a42      	ldr	r2, [pc, #264]	@ (8003878 <HAL_DMA_Init+0x144>)
 800376e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003770:	e00e      	b.n	8003790 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	4b40      	ldr	r3, [pc, #256]	@ (800387c <HAL_DMA_Init+0x148>)
 800377a:	4413      	add	r3, r2
 800377c:	4a3d      	ldr	r2, [pc, #244]	@ (8003874 <HAL_DMA_Init+0x140>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	009a      	lsls	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a3c      	ldr	r2, [pc, #240]	@ (8003880 <HAL_DMA_Init+0x14c>)
 800378e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80037a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 faba 	bl	8003d5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037f0:	d102      	bne.n	80037f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800380c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d010      	beq.n	8003838 <HAL_DMA_Init+0x104>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b04      	cmp	r3, #4
 800381c:	d80c      	bhi.n	8003838 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fada 	bl	8003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	e008      	b.n	800384a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	65da      	str	r2, [r3, #92]	@ 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	40020407 	.word	0x40020407
 8003870:	bffdfff8 	.word	0xbffdfff8
 8003874:	cccccccd 	.word	0xcccccccd
 8003878:	40020000 	.word	0x40020000
 800387c:	bffdfbf8 	.word	0xbffdfbf8
 8003880:	40020400 	.word	0x40020400

08003884 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_DMA_Start_IT+0x20>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e066      	b.n	8003972 <HAL_DMA_Start_IT+0xee>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d155      	bne.n	8003964 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f9ff 	bl	8003ce0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 020e 	orr.w	r2, r2, #14
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e00f      	b.n	800391c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0204 	bic.w	r2, r2, #4
 800390a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 020a 	orr.w	r2, r2, #10
 800391a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003934:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003938:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003950:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0201 	orr.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e005      	b.n	8003970 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800396c:	2302      	movs	r3, #2
 800396e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003970:	7dfb      	ldrb	r3, [r7, #23]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800397a:	b480      	push	{r7}
 800397c:	b085      	sub	sp, #20
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d008      	beq.n	80039a4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2204      	movs	r2, #4
 8003996:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e040      	b.n	8003a26 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 020e 	bic.w	r2, r2, #14
 80039b2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039c2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0201 	bic.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d8:	f003 021c 	and.w	r2, r3, #28
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	2101      	movs	r1, #1
 80039e2:	fa01 f202 	lsl.w	r2, r1, r2
 80039e6:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80039f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00c      	beq.n	8003a14 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a08:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a12:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d005      	beq.n	8003a56 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e047      	b.n	8003ae6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 020e 	bic.w	r2, r2, #14
 8003a64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0201 	bic.w	r2, r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8a:	f003 021c 	and.w	r2, r3, #28
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	2101      	movs	r1, #1
 8003a94:	fa01 f202 	lsl.w	r2, r1, r2
 8003a98:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aa2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00c      	beq.n	8003ac6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ac4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
    }
  }
  return status;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0c:	f003 031c 	and.w	r3, r3, #28
 8003b10:	2204      	movs	r2, #4
 8003b12:	409a      	lsls	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d026      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x7a>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d021      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d107      	bne.n	8003b44 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0204 	bic.w	r2, r2, #4
 8003b42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	f003 021c 	and.w	r2, r3, #28
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	2104      	movs	r1, #4
 8003b52:	fa01 f202 	lsl.w	r2, r1, r2
 8003b56:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d071      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b68:	e06c      	b.n	8003c44 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	f003 031c 	and.w	r3, r3, #28
 8003b72:	2202      	movs	r2, #2
 8003b74:	409a      	lsls	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d02e      	beq.n	8003bdc <HAL_DMA_IRQHandler+0xec>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d029      	beq.n	8003bdc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 020a 	bic.w	r2, r2, #10
 8003ba4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	f003 021c 	and.w	r2, r3, #28
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	2102      	movs	r1, #2
 8003bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d038      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003bda:	e033      	b.n	8003c44 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be0:	f003 031c 	and.w	r3, r3, #28
 8003be4:	2208      	movs	r2, #8
 8003be6:	409a      	lsls	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d02a      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x156>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d025      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 020e 	bic.w	r2, r2, #14
 8003c08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	f003 021c 	and.w	r2, r3, #28
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	2101      	movs	r1, #1
 8003c18:	fa01 f202 	lsl.w	r2, r1, r2
 8003c1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d004      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
}
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_DMA_RegisterCallback+0x20>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e031      	b.n	8003cd4 <HAL_DMA_RegisterCallback+0x84>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d120      	bne.n	8003cc6 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 8003c84:	7afb      	ldrb	r3, [r7, #11]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d81a      	bhi.n	8003cc0 <HAL_DMA_RegisterCallback+0x70>
 8003c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c90 <HAL_DMA_RegisterCallback+0x40>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003ca1 	.word	0x08003ca1
 8003c94:	08003ca9 	.word	0x08003ca9
 8003c98:	08003cb1 	.word	0x08003cb1
 8003c9c:	08003cb9 	.word	0x08003cb9
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 8003ca6:	e010      	b.n	8003cca <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8003cae:	e00c      	b.n	8003cca <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 8003cb6:	e008      	b.n	8003cca <HAL_DMA_RegisterCallback+0x7a>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8003cbe:	e004      	b.n	8003cca <HAL_DMA_RegisterCallback+0x7a>

      default:
        status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	75fb      	strb	r3, [r7, #23]
        break;
 8003cc4:	e001      	b.n	8003cca <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003cf6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d004      	beq.n	8003d0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d08:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	f003 021c 	and.w	r2, r3, #28
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	2101      	movs	r1, #1
 8003d18:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b10      	cmp	r3, #16
 8003d2c:	d108      	bne.n	8003d40 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d3e:	e007      	b.n	8003d50 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	60da      	str	r2, [r3, #12]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b17      	ldr	r3, [pc, #92]	@ (8003dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d80a      	bhi.n	8003d86 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d7c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6493      	str	r3, [r2, #72]	@ 0x48
 8003d84:	e007      	b.n	8003d96 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	009a      	lsls	r2, r3, #2
 8003d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8003dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d90:	4413      	add	r3, r2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6493      	str	r3, [r2, #72]	@ 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	3b08      	subs	r3, #8
 8003d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003dac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2201      	movs	r2, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	40020407 	.word	0x40020407
 8003dcc:	4002081c 	.word	0x4002081c
 8003dd0:	cccccccd 	.word	0xcccccccd
 8003dd4:	40020880 	.word	0x40020880

08003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4b0b      	ldr	r3, [pc, #44]	@ (8003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	461a      	mov	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a08      	ldr	r2, [pc, #32]	@ (8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003dfa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	2201      	movs	r2, #1
 8003e06:	409a      	lsls	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003e0c:	bf00      	nop
 8003e0e:	3714      	adds	r7, #20
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	1000823f 	.word	0x1000823f
 8003e1c:	40020940 	.word	0x40020940

08003e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2e:	e166      	b.n	80040fe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	2101      	movs	r1, #1
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8158 	beq.w	80040f8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d005      	beq.n	8003e60 <HAL_GPIO_Init+0x40>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d130      	bne.n	8003ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4013      	ands	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e96:	2201      	movs	r2, #1
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	f003 0201 	and.w	r2, r3, #1
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d017      	beq.n	8003efe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d123      	bne.n	8003f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	08da      	lsrs	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3208      	adds	r2, #8
 8003f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	220f      	movs	r2, #15
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	08da      	lsrs	r2, r3, #3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3208      	adds	r2, #8
 8003f4c:	6939      	ldr	r1, [r7, #16]
 8003f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0203 	and.w	r2, r3, #3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80b2 	beq.w	80040f8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f94:	4b61      	ldr	r3, [pc, #388]	@ (800411c <HAL_GPIO_Init+0x2fc>)
 8003f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f98:	4a60      	ldr	r2, [pc, #384]	@ (800411c <HAL_GPIO_Init+0x2fc>)
 8003f9a:	f043 0301 	orr.w	r3, r3, #1
 8003f9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fa0:	4b5e      	ldr	r3, [pc, #376]	@ (800411c <HAL_GPIO_Init+0x2fc>)
 8003fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fac:	4a5c      	ldr	r2, [pc, #368]	@ (8004120 <HAL_GPIO_Init+0x300>)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	089b      	lsrs	r3, r3, #2
 8003fb2:	3302      	adds	r3, #2
 8003fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	220f      	movs	r2, #15
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003fd6:	d02b      	beq.n	8004030 <HAL_GPIO_Init+0x210>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a52      	ldr	r2, [pc, #328]	@ (8004124 <HAL_GPIO_Init+0x304>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d025      	beq.n	800402c <HAL_GPIO_Init+0x20c>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a51      	ldr	r2, [pc, #324]	@ (8004128 <HAL_GPIO_Init+0x308>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d01f      	beq.n	8004028 <HAL_GPIO_Init+0x208>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a50      	ldr	r2, [pc, #320]	@ (800412c <HAL_GPIO_Init+0x30c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d019      	beq.n	8004024 <HAL_GPIO_Init+0x204>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a4f      	ldr	r2, [pc, #316]	@ (8004130 <HAL_GPIO_Init+0x310>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <HAL_GPIO_Init+0x200>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a4e      	ldr	r2, [pc, #312]	@ (8004134 <HAL_GPIO_Init+0x314>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d00d      	beq.n	800401c <HAL_GPIO_Init+0x1fc>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a4d      	ldr	r2, [pc, #308]	@ (8004138 <HAL_GPIO_Init+0x318>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <HAL_GPIO_Init+0x1f8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a4c      	ldr	r2, [pc, #304]	@ (800413c <HAL_GPIO_Init+0x31c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <HAL_GPIO_Init+0x1f4>
 8004010:	2307      	movs	r3, #7
 8004012:	e00e      	b.n	8004032 <HAL_GPIO_Init+0x212>
 8004014:	2308      	movs	r3, #8
 8004016:	e00c      	b.n	8004032 <HAL_GPIO_Init+0x212>
 8004018:	2306      	movs	r3, #6
 800401a:	e00a      	b.n	8004032 <HAL_GPIO_Init+0x212>
 800401c:	2305      	movs	r3, #5
 800401e:	e008      	b.n	8004032 <HAL_GPIO_Init+0x212>
 8004020:	2304      	movs	r3, #4
 8004022:	e006      	b.n	8004032 <HAL_GPIO_Init+0x212>
 8004024:	2303      	movs	r3, #3
 8004026:	e004      	b.n	8004032 <HAL_GPIO_Init+0x212>
 8004028:	2302      	movs	r3, #2
 800402a:	e002      	b.n	8004032 <HAL_GPIO_Init+0x212>
 800402c:	2301      	movs	r3, #1
 800402e:	e000      	b.n	8004032 <HAL_GPIO_Init+0x212>
 8004030:	2300      	movs	r3, #0
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	f002 0203 	and.w	r2, r2, #3
 8004038:	0092      	lsls	r2, r2, #2
 800403a:	4093      	lsls	r3, r2
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004042:	4937      	ldr	r1, [pc, #220]	@ (8004120 <HAL_GPIO_Init+0x300>)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	3302      	adds	r3, #2
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004050:	4b3b      	ldr	r3, [pc, #236]	@ (8004140 <HAL_GPIO_Init+0x320>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	43db      	mvns	r3, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4013      	ands	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004074:	4a32      	ldr	r2, [pc, #200]	@ (8004140 <HAL_GPIO_Init+0x320>)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800407a:	4b31      	ldr	r3, [pc, #196]	@ (8004140 <HAL_GPIO_Init+0x320>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	43db      	mvns	r3, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4013      	ands	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800409e:	4a28      	ldr	r2, [pc, #160]	@ (8004140 <HAL_GPIO_Init+0x320>)
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040a4:	4b26      	ldr	r3, [pc, #152]	@ (8004140 <HAL_GPIO_Init+0x320>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	4013      	ands	r3, r2
 80040b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004140 <HAL_GPIO_Init+0x320>)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004140 <HAL_GPIO_Init+0x320>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040f2:	4a13      	ldr	r2, [pc, #76]	@ (8004140 <HAL_GPIO_Init+0x320>)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	3301      	adds	r3, #1
 80040fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	f47f ae91 	bne.w	8003e30 <HAL_GPIO_Init+0x10>
  }
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	40021000 	.word	0x40021000
 8004120:	40010000 	.word	0x40010000
 8004124:	48000400 	.word	0x48000400
 8004128:	48000800 	.word	0x48000800
 800412c:	48000c00 	.word	0x48000c00
 8004130:	48001000 	.word	0x48001000
 8004134:	48001400 	.word	0x48001400
 8004138:	48001800 	.word	0x48001800
 800413c:	48001c00 	.word	0x48001c00
 8004140:	40010400 	.word	0x40010400

08004144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	887b      	ldrh	r3, [r7, #2]
 8004156:	4013      	ands	r3, r2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d002      	beq.n	8004162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e001      	b.n	8004166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
 8004180:	4613      	mov	r3, r2
 8004182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004184:	787b      	ldrb	r3, [r7, #1]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800418a:	887a      	ldrh	r2, [r7, #2]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004190:	e002      	b.n	8004198 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041b6:	887a      	ldrh	r2, [r7, #2]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4013      	ands	r3, r2
 80041bc:	041a      	lsls	r2, r3, #16
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	43d9      	mvns	r1, r3
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	400b      	ands	r3, r1
 80041c6:	431a      	orrs	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	619a      	str	r2, [r3, #24]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041e2:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d006      	beq.n	80041fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041ee:	4a05      	ldr	r2, [pc, #20]	@ (8004204 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041f0:	88fb      	ldrh	r3, [r7, #6]
 80041f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fc ff80 	bl	80010fc <HAL_GPIO_EXTI_Callback>
  }
}
 80041fc:	bf00      	nop
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	40010400 	.word	0x40010400

08004208 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800420a:	b08f      	sub	sp, #60	@ 0x3c
 800420c:	af0a      	add	r7, sp, #40	@ 0x28
 800420e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e116      	b.n	8004448 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f009 f8ff 	bl	800d438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2203      	movs	r2, #3
 800423e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f005 fd56 	bl	8009d0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	687e      	ldr	r6, [r7, #4]
 8004266:	466d      	mov	r5, sp
 8004268:	f106 0410 	add.w	r4, r6, #16
 800426c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800426e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004274:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004278:	e885 0003 	stmia.w	r5, {r0, r1}
 800427c:	1d33      	adds	r3, r6, #4
 800427e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004280:	6838      	ldr	r0, [r7, #0]
 8004282:	f005 fc69 	bl	8009b58 <USB_CoreInit>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0d7      	b.n	8004448 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f005 fd44 	bl	8009d2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]
 80042a8:	e04a      	b.n	8004340 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042aa:	7bfa      	ldrb	r2, [r7, #15]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	333d      	adds	r3, #61	@ 0x3d
 80042ba:	2201      	movs	r2, #1
 80042bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042be:	7bfa      	ldrb	r2, [r7, #15]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	333c      	adds	r3, #60	@ 0x3c
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	b298      	uxth	r0, r3
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4413      	add	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	3356      	adds	r3, #86	@ 0x56
 80042e6:	4602      	mov	r2, r0
 80042e8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042ea:	7bfa      	ldrb	r2, [r7, #15]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	3340      	adds	r3, #64	@ 0x40
 80042fa:	2200      	movs	r2, #0
 80042fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042fe:	7bfa      	ldrb	r2, [r7, #15]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	3344      	adds	r3, #68	@ 0x44
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004312:	7bfa      	ldrb	r2, [r7, #15]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	4413      	add	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	3348      	adds	r3, #72	@ 0x48
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	334c      	adds	r3, #76	@ 0x4c
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	3301      	adds	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]
 8004340:	7bfa      	ldrb	r2, [r7, #15]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d3af      	bcc.n	80042aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800434a:	2300      	movs	r3, #0
 800434c:	73fb      	strb	r3, [r7, #15]
 800434e:	e044      	b.n	80043da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004350:	7bfa      	ldrb	r2, [r7, #15]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004362:	2200      	movs	r2, #0
 8004364:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4613      	mov	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004378:	7bfa      	ldrb	r2, [r7, #15]
 800437a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800437c:	7bfa      	ldrb	r2, [r7, #15]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	4413      	add	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	440b      	add	r3, r1
 80043a0:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043a8:	7bfa      	ldrb	r2, [r7, #15]
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	4613      	mov	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043be:	7bfa      	ldrb	r2, [r7, #15]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	3301      	adds	r3, #1
 80043d8:	73fb      	strb	r3, [r7, #15]
 80043da:	7bfa      	ldrb	r2, [r7, #15]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d3b5      	bcc.n	8004350 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	687e      	ldr	r6, [r7, #4]
 80043ec:	466d      	mov	r5, sp
 80043ee:	f106 0410 	add.w	r4, r6, #16
 80043f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004402:	1d33      	adds	r3, r6, #4
 8004404:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004406:	6838      	ldr	r0, [r7, #0]
 8004408:	f005 fcdc 	bl	8009dc4 <USB_DevInit>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2202      	movs	r2, #2
 8004416:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e014      	b.n	8004448 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	2b01      	cmp	r3, #1
 8004434:	d102      	bne.n	800443c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f001 f86a 	bl	8005510 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f006 fc8a 	bl	800ad5a <USB_DevDisconnect>

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004450 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_PCD_Start+0x1c>
 8004468:	2302      	movs	r3, #2
 800446a:	e01c      	b.n	80044a6 <HAL_PCD_Start+0x56>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	2b01      	cmp	r3, #1
 800447a:	d105      	bne.n	8004488 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004480:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f005 fc2b 	bl	8009ce8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4618      	mov	r0, r3
 8004498:	f006 fc3e 	bl	800ad18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80044ae:	b590      	push	{r4, r7, lr}
 80044b0:	b08d      	sub	sp, #52	@ 0x34
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f006 fcfc 	bl	800aec2 <USB_GetMode>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f040 847e 	bne.w	8004dce <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f006 fc60 	bl	800ad9c <USB_ReadInterrupts>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8474 	beq.w	8004dcc <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	0a1b      	lsrs	r3, r3, #8
 80044ee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f006 fc4d 	bl	800ad9c <USB_ReadInterrupts>
 8004502:	4603      	mov	r3, r0
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b02      	cmp	r3, #2
 800450a:	d107      	bne.n	800451c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f002 0202 	and.w	r2, r2, #2
 800451a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f006 fc3b 	bl	800ad9c <USB_ReadInterrupts>
 8004526:	4603      	mov	r3, r0
 8004528:	f003 0310 	and.w	r3, r3, #16
 800452c:	2b10      	cmp	r3, #16
 800452e:	d161      	bne.n	80045f4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0210 	bic.w	r2, r2, #16
 800453e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f003 020f 	and.w	r2, r3, #15
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	4413      	add	r3, r2
 800455c:	3304      	adds	r3, #4
 800455e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004566:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800456a:	d124      	bne.n	80045b6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004572:	4013      	ands	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d035      	beq.n	80045e4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004582:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004586:	b29b      	uxth	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	6a38      	ldr	r0, [r7, #32]
 800458c:	f006 fa72 	bl	800aa74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	091b      	lsrs	r3, r3, #4
 8004598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800459c:	441a      	add	r2, r3
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045ae:	441a      	add	r2, r3
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	615a      	str	r2, [r3, #20]
 80045b4:	e016      	b.n	80045e4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80045bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80045c0:	d110      	bne.n	80045e4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80045c8:	2208      	movs	r2, #8
 80045ca:	4619      	mov	r1, r3
 80045cc:	6a38      	ldr	r0, [r7, #32]
 80045ce:	f006 fa51 	bl	800aa74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	695a      	ldr	r2, [r3, #20]
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80045de:	441a      	add	r2, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0210 	orr.w	r2, r2, #16
 80045f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f006 fbcf 	bl	800ad9c <USB_ReadInterrupts>
 80045fe:	4603      	mov	r3, r0
 8004600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004604:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004608:	f040 80a7 	bne.w	800475a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f006 fbd4 	bl	800adc2 <USB_ReadDevAllOutEpInterrupt>
 800461a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800461c:	e099      	b.n	8004752 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800461e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 808e 	beq.w	8004746 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f006 fbf8 	bl	800ae2a <USB_ReadDevOutEPInterrupt>
 800463a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004652:	461a      	mov	r2, r3
 8004654:	2301      	movs	r3, #1
 8004656:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004658:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fe7e 	bl	800535c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00c      	beq.n	8004684 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	015a      	lsls	r2, r3, #5
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	4413      	add	r3, r2
 8004672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004676:	461a      	mov	r2, r3
 8004678:	2308      	movs	r3, #8
 800467a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800467c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 feba 	bl	80053f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	015a      	lsls	r2, r3, #5
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	4413      	add	r3, r2
 8004696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800469a:	461a      	mov	r2, r3
 800469c:	2310      	movs	r3, #16
 800469e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d030      	beq.n	800470c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b2:	2b80      	cmp	r3, #128	@ 0x80
 80046b4:	d109      	bne.n	80046ca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046c8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80046ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	4413      	add	r3, r2
 80046dc:	3304      	adds	r3, #4
 80046de:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	78db      	ldrb	r3, [r3, #3]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d108      	bne.n	80046fa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2200      	movs	r2, #0
 80046ec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	4619      	mov	r1, r3
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f008 fff5 	bl	800d6e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004706:	461a      	mov	r2, r3
 8004708:	2302      	movs	r3, #2
 800470a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b00      	cmp	r3, #0
 8004714:	d008      	beq.n	8004728 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004722:	461a      	mov	r2, r3
 8004724:	2320      	movs	r3, #32
 8004726:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800473e:	461a      	mov	r2, r3
 8004740:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004744:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	3301      	adds	r3, #1
 800474a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	2b00      	cmp	r3, #0
 8004756:	f47f af62 	bne.w	800461e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f006 fb1c 	bl	800ad9c <USB_ReadInterrupts>
 8004764:	4603      	mov	r3, r0
 8004766:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800476a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800476e:	f040 80a4 	bne.w	80048ba <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f006 fb3d 	bl	800adf6 <USB_ReadDevAllInEpInterrupt>
 800477c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004782:	e096      	b.n	80048b2 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 808b 	beq.w	80048a6 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f006 fb63 	bl	800ae66 <USB_ReadDevInEPInterrupt>
 80047a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d020      	beq.n	80047ee <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ae:	f003 030f 	and.w	r3, r3, #15
 80047b2:	2201      	movs	r2, #1
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69f9      	ldr	r1, [r7, #28]
 80047c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047cc:	4013      	ands	r3, r2
 80047ce:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047dc:	461a      	mov	r2, r3
 80047de:	2301      	movs	r3, #1
 80047e0:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f008 fee6 	bl	800d5ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004804:	461a      	mov	r2, r3
 8004806:	2308      	movs	r3, #8
 8004808:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004820:	461a      	mov	r2, r3
 8004822:	2310      	movs	r3, #16
 8004824:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800483c:	461a      	mov	r2, r3
 800483e:	2340      	movs	r3, #64	@ 0x40
 8004840:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d023      	beq.n	8004894 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800484c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800484e:	6a38      	ldr	r0, [r7, #32]
 8004850:	f005 fbfa 	bl	800a048 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004856:	4613      	mov	r3, r2
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	3338      	adds	r3, #56	@ 0x38
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	4413      	add	r3, r2
 8004864:	3304      	adds	r3, #4
 8004866:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	78db      	ldrb	r3, [r3, #3]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d108      	bne.n	8004882 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	2200      	movs	r2, #0
 8004874:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	b2db      	uxtb	r3, r3
 800487a:	4619      	mov	r1, r3
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f008 ff43 	bl	800d708 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800488e:	461a      	mov	r2, r3
 8004890:	2302      	movs	r3, #2
 8004892:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800489e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fcd2 	bl	800524a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	3301      	adds	r3, #1
 80048aa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80048ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f47f af65 	bne.w	8004784 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f006 fa6c 	bl	800ad9c <USB_ReadInterrupts>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048ce:	d122      	bne.n	8004916 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d108      	bne.n	8004900 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80048f6:	2100      	movs	r1, #0
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f009 f977 	bl	800dbec <HAL_PCDEx_LPM_Callback>
 80048fe:	e002      	b.n	8004906 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f008 fec7 	bl	800d694 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695a      	ldr	r2, [r3, #20]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f006 fa3e 	bl	800ad9c <USB_ReadInterrupts>
 8004920:	4603      	mov	r3, r0
 8004922:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004926:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800492a:	d112      	bne.n	8004952 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b01      	cmp	r3, #1
 800493a:	d102      	bne.n	8004942 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f008 fe83 	bl	800d648 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004950:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f006 fa20 	bl	800ad9c <USB_ReadInterrupts>
 800495c:	4603      	mov	r3, r0
 800495e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004962:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004966:	d121      	bne.n	80049ac <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695a      	ldr	r2, [r3, #20]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004976:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d111      	bne.n	80049a6 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004990:	089b      	lsrs	r3, r3, #2
 8004992:	f003 020f 	and.w	r2, r3, #15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8c3 24f8 	str.w	r2, [r3, #1272]	@ 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800499c:	2101      	movs	r1, #1
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f009 f924 	bl	800dbec <HAL_PCDEx_LPM_Callback>
 80049a4:	e002      	b.n	80049ac <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f008 fe4e 	bl	800d648 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f006 f9f3 	bl	800ad9c <USB_ReadInterrupts>
 80049b6:	4603      	mov	r3, r0
 80049b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c0:	f040 80b5 	bne.w	8004b2e <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	69fa      	ldr	r2, [r7, #28]
 80049ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2110      	movs	r1, #16
 80049de:	4618      	mov	r0, r3
 80049e0:	f005 fb32 	bl	800a048 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049e4:	2300      	movs	r3, #0
 80049e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e8:	e046      	b.n	8004a78 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80049ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f6:	461a      	mov	r2, r3
 80049f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049fc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a0e:	0151      	lsls	r1, r2, #5
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	440a      	add	r2, r1
 8004a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a1c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004a30:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a42:	0151      	lsls	r1, r2, #5
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	440a      	add	r2, r1
 8004a48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a50:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a62:	0151      	lsls	r1, r2, #5
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	440a      	add	r2, r1
 8004a68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a70:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a74:	3301      	adds	r3, #1
 8004a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d3b3      	bcc.n	80049ea <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	69fa      	ldr	r2, [r7, #28]
 8004a8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a90:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004a94:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d016      	beq.n	8004acc <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aa8:	69fa      	ldr	r2, [r7, #28]
 8004aaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aae:	f043 030b 	orr.w	r3, r3, #11
 8004ab2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ac4:	f043 030b 	orr.w	r3, r3, #11
 8004ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aca:	e015      	b.n	8004af8 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ada:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004ade:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004ae2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004af2:	f043 030b 	orr.w	r3, r3, #11
 8004af6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b06:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004b0a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f006 fa03 	bl	800af24 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f006 f932 	bl	800ad9c <USB_ReadInterrupts>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b42:	d124      	bne.n	8004b8e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f006 f9c8 	bl	800aede <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f005 faf5 	bl	800a142 <USB_GetDevSpeed>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681c      	ldr	r4, [r3, #0]
 8004b64:	f001 fbbc 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8004b68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	4620      	mov	r0, r4
 8004b74:	f005 f81c 	bl	8009bb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f008 fd46 	bl	800d60a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695a      	ldr	r2, [r3, #20]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f006 f902 	bl	800ad9c <USB_ReadInterrupts>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d10a      	bne.n	8004bb8 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f008 fd23 	bl	800d5ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695a      	ldr	r2, [r3, #20]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f002 0208 	and.w	r2, r2, #8
 8004bb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f006 f8ed 	bl	800ad9c <USB_ReadInterrupts>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc8:	2b80      	cmp	r3, #128	@ 0x80
 8004bca:	d122      	bne.n	8004c12 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bd8:	2301      	movs	r3, #1
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bdc:	e014      	b.n	8004c08 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be2:	4613      	mov	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d105      	bne.n	8004c02 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 faf3 	bl	80051e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	3301      	adds	r3, #1
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d3e5      	bcc.n	8004bde <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f006 f8c0 	bl	800ad9c <USB_ReadInterrupts>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c26:	d13b      	bne.n	8004ca0 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c28:	2301      	movs	r3, #1
 8004c2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c2c:	e02b      	b.n	8004c86 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	015a      	lsls	r2, r3, #5
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c42:	4613      	mov	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	3340      	adds	r3, #64	@ 0x40
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d115      	bne.n	8004c80 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004c54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da12      	bge.n	8004c80 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c5e:	4613      	mov	r3, r2
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	4413      	add	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	333f      	adds	r3, #63	@ 0x3f
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fab4 	bl	80051e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	3301      	adds	r3, #1
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d3ce      	bcc.n	8004c2e <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695a      	ldr	r2, [r3, #20]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f006 f879 	bl	800ad9c <USB_ReadInterrupts>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cb4:	d155      	bne.n	8004d62 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cba:	e045      	b.n	8004d48 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	69fb      	ldr	r3, [r7, #28]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	440b      	add	r3, r1
 8004cda:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d12e      	bne.n	8004d42 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ce4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	da2b      	bge.n	8004d42 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8004cf6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d121      	bne.n	8004d42 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d02:	4613      	mov	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004d10:	2201      	movs	r2, #1
 8004d12:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10a      	bne.n	8004d42 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d3e:	6053      	str	r3, [r2, #4]
            break;
 8004d40:	e007      	b.n	8004d52 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d44:	3301      	adds	r3, #1
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d3b4      	bcc.n	8004cbc <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695a      	ldr	r2, [r3, #20]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004d60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f006 f818 	bl	800ad9c <USB_ReadInterrupts>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d76:	d10a      	bne.n	8004d8e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f008 fcd7 	bl	800d72c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695a      	ldr	r2, [r3, #20]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004d8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f006 f802 	bl	800ad9c <USB_ReadInterrupts>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d115      	bne.n	8004dce <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f008 fcc7 	bl	800d748 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6859      	ldr	r1, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	605a      	str	r2, [r3, #4]
 8004dca:	e000      	b.n	8004dce <HAL_PCD_IRQHandler+0x920>
      return;
 8004dcc:	bf00      	nop
    }
  }
}
 8004dce:	3734      	adds	r7, #52	@ 0x34
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd90      	pop	{r4, r7, pc}

08004dd4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_PCD_SetAddress+0x1a>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e013      	b.n	8004e16 <HAL_PCD_SetAddress+0x42>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f005 ff60 	bl	800accc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b084      	sub	sp, #16
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	4608      	mov	r0, r1
 8004e28:	4611      	mov	r1, r2
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	70fb      	strb	r3, [r7, #3]
 8004e30:	460b      	mov	r3, r1
 8004e32:	803b      	strh	r3, [r7, #0]
 8004e34:	4613      	mov	r3, r2
 8004e36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	da0f      	bge.n	8004e64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	f003 020f 	and.w	r2, r3, #15
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	3338      	adds	r3, #56	@ 0x38
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	4413      	add	r3, r2
 8004e58:	3304      	adds	r3, #4
 8004e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	705a      	strb	r2, [r3, #1]
 8004e62:	e00f      	b.n	8004e84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	f003 020f 	and.w	r2, r3, #15
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	4413      	add	r3, r2
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e90:	883a      	ldrh	r2, [r7, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	78ba      	ldrb	r2, [r7, #2]
 8004e9a:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	785b      	ldrb	r3, [r3, #1]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004eae:	78bb      	ldrb	r3, [r7, #2]
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d102      	bne.n	8004eba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_PCD_EP_Open+0xaa>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e00e      	b.n	8004ee6 <HAL_PCD_EP_Open+0xc8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68f9      	ldr	r1, [r7, #12]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f005 f952 	bl	800a180 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8004ee4:	7afb      	ldrb	r3, [r7, #11]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	da0f      	bge.n	8004f22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	f003 020f 	and.w	r2, r3, #15
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	3338      	adds	r3, #56	@ 0x38
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	4413      	add	r3, r2
 8004f16:	3304      	adds	r3, #4
 8004f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	705a      	strb	r2, [r3, #1]
 8004f20:	e00f      	b.n	8004f42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f22:	78fb      	ldrb	r3, [r7, #3]
 8004f24:	f003 020f 	and.w	r2, r3, #15
 8004f28:	4613      	mov	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	4413      	add	r3, r2
 8004f38:	3304      	adds	r3, #4
 8004f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	f003 030f 	and.w	r3, r3, #15
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_PCD_EP_Close+0x6e>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e00e      	b.n	8004f7a <HAL_PCD_EP_Close+0x8c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68f9      	ldr	r1, [r7, #12]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f005 f990 	bl	800a290 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b086      	sub	sp, #24
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f92:	7afb      	ldrb	r3, [r7, #11]
 8004f94:	f003 020f 	and.w	r2, r3, #15
 8004f98:	4613      	mov	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3304      	adds	r3, #4
 8004faa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fc4:	7afb      	ldrb	r3, [r7, #11]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6979      	ldr	r1, [r7, #20]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f005 fa36 	bl	800a448 <USB_EPStartXfer>

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	f003 020f 	and.w	r2, r3, #15
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8005008:	681b      	ldr	r3, [r3, #0]
}
 800500a:	4618      	mov	r0, r3
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b086      	sub	sp, #24
 800501a:	af00      	add	r7, sp, #0
 800501c:	60f8      	str	r0, [r7, #12]
 800501e:	607a      	str	r2, [r7, #4]
 8005020:	603b      	str	r3, [r7, #0]
 8005022:	460b      	mov	r3, r1
 8005024:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005026:	7afb      	ldrb	r3, [r7, #11]
 8005028:	f003 020f 	and.w	r2, r3, #15
 800502c:	4613      	mov	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	3338      	adds	r3, #56	@ 0x38
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4413      	add	r3, r2
 800503a:	3304      	adds	r3, #4
 800503c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2200      	movs	r2, #0
 800504e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2201      	movs	r2, #1
 8005054:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005056:	7afb      	ldrb	r3, [r7, #11]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	b2da      	uxtb	r2, r3
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6979      	ldr	r1, [r7, #20]
 8005068:	4618      	mov	r0, r3
 800506a:	f005 f9ed 	bl	800a448 <USB_EPStartXfer>

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	f003 020f 	and.w	r2, r3, #15
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	429a      	cmp	r2, r3
 8005090:	d901      	bls.n	8005096 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e04e      	b.n	8005134 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800509a:	2b00      	cmp	r3, #0
 800509c:	da0f      	bge.n	80050be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	f003 020f 	and.w	r2, r3, #15
 80050a4:	4613      	mov	r3, r2
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	3338      	adds	r3, #56	@ 0x38
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	4413      	add	r3, r2
 80050b2:	3304      	adds	r3, #4
 80050b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	705a      	strb	r2, [r3, #1]
 80050bc:	e00d      	b.n	80050da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	4613      	mov	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	4413      	add	r3, r2
 80050d0:	3304      	adds	r3, #4
 80050d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_PCD_EP_SetStall+0x82>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e01c      	b.n	8005134 <HAL_PCD_EP_SetStall+0xbc>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	4618      	mov	r0, r3
 800510a:	f005 fd0b 	bl	800ab24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	2b00      	cmp	r3, #0
 8005116:	d108      	bne.n	800512a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f005 fefd 	bl	800af24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	f003 020f 	and.w	r2, r3, #15
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	429a      	cmp	r2, r3
 8005154:	d901      	bls.n	800515a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e042      	b.n	80051e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800515a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800515e:	2b00      	cmp	r3, #0
 8005160:	da0f      	bge.n	8005182 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	f003 020f 	and.w	r2, r3, #15
 8005168:	4613      	mov	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	3338      	adds	r3, #56	@ 0x38
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	4413      	add	r3, r2
 8005176:	3304      	adds	r3, #4
 8005178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	705a      	strb	r2, [r3, #1]
 8005180:	e00f      	b.n	80051a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005182:	78fb      	ldrb	r3, [r7, #3]
 8005184:	f003 020f 	and.w	r2, r3, #15
 8005188:	4613      	mov	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	4413      	add	r3, r2
 8005198:	3304      	adds	r3, #4
 800519a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_PCD_EP_ClrStall+0x86>
 80051be:	2302      	movs	r3, #2
 80051c0:	e00e      	b.n	80051e0 <HAL_PCD_EP_ClrStall+0xa4>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f005 fd15 	bl	800ac00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80051f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	da0c      	bge.n	8005216 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	f003 020f 	and.w	r2, r3, #15
 8005202:	4613      	mov	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	3338      	adds	r3, #56	@ 0x38
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	4413      	add	r3, r2
 8005210:	3304      	adds	r3, #4
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	e00c      	b.n	8005230 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	f003 020f 	and.w	r2, r3, #15
 800521c:	4613      	mov	r3, r2
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	4413      	add	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	4413      	add	r3, r2
 800522c:	3304      	adds	r3, #4
 800522e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68f9      	ldr	r1, [r7, #12]
 8005236:	4618      	mov	r0, r3
 8005238:	f005 fb38 	bl	800a8ac <USB_EPStopXfer>
 800523c:	4603      	mov	r3, r0
 800523e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005240:	7afb      	ldrb	r3, [r7, #11]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b088      	sub	sp, #32
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	4613      	mov	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	3338      	adds	r3, #56	@ 0x38
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4413      	add	r3, r2
 800526e:	3304      	adds	r3, #4
 8005270:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	429a      	cmp	r2, r3
 800527c:	d901      	bls.n	8005282 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e067      	b.n	8005352 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	691a      	ldr	r2, [r3, #16]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	1ad3      	subs	r3, r2, r3
 800528c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	429a      	cmp	r2, r3
 8005296:	d902      	bls.n	800529e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3303      	adds	r3, #3
 80052a2:	089b      	lsrs	r3, r3, #2
 80052a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052a6:	e026      	b.n	80052f6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	69fa      	ldr	r2, [r7, #28]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d902      	bls.n	80052c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	3303      	adds	r3, #3
 80052c8:	089b      	lsrs	r3, r3, #2
 80052ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	68d9      	ldr	r1, [r3, #12]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	6978      	ldr	r0, [r7, #20]
 80052da:	f005 fb91 	bl	800aa00 <USB_WritePacket>

    ep->xfer_buff  += len;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	441a      	add	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	441a      	add	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	429a      	cmp	r2, r3
 800530a:	d809      	bhi.n	8005320 <PCD_WriteEmptyTxFifo+0xd6>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	695a      	ldr	r2, [r3, #20]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005314:	429a      	cmp	r2, r3
 8005316:	d203      	bcs.n	8005320 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1c3      	bne.n	80052a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	429a      	cmp	r2, r3
 800532a:	d811      	bhi.n	8005350 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	2201      	movs	r2, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005340:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	43db      	mvns	r3, r3
 8005346:	6939      	ldr	r1, [r7, #16]
 8005348:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800534c:	4013      	ands	r3, r2
 800534e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3720      	adds	r7, #32
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	333c      	adds	r3, #60	@ 0x3c
 8005374:	3304      	adds	r3, #4
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4a19      	ldr	r2, [pc, #100]	@ (80053f4 <PCD_EP_OutXfrComplete_int+0x98>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d124      	bne.n	80053dc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a8:	461a      	mov	r2, r3
 80053aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ae:	6093      	str	r3, [r2, #8]
 80053b0:	e01a      	b.n	80053e8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f003 0320 	and.w	r3, r3, #32
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d008      	beq.n	80053ce <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c8:	461a      	mov	r2, r3
 80053ca:	2320      	movs	r3, #32
 80053cc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f008 f8d5 	bl	800d584 <HAL_PCD_DataOutStageCallback>
 80053da:	e005      	b.n	80053e8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	4619      	mov	r1, r3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f008 f8ce 	bl	800d584 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	4f54310a 	.word	0x4f54310a

080053f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	333c      	adds	r3, #60	@ 0x3c
 8005410:	3304      	adds	r3, #4
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4a0c      	ldr	r2, [pc, #48]	@ (800545c <PCD_EP_OutSetupPacket_int+0x64>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d90e      	bls.n	800544c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005434:	2b00      	cmp	r3, #0
 8005436:	d009      	beq.n	800544c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005444:	461a      	mov	r2, r3
 8005446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800544a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f008 f887 	bl	800d560 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	4f54300a 	.word	0x4f54300a

08005460 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
 800546c:	4613      	mov	r3, r2
 800546e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005476:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d107      	bne.n	800548e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800547e:	883b      	ldrh	r3, [r7, #0]
 8005480:	0419      	lsls	r1, r3, #16
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	430a      	orrs	r2, r1
 800548a:	629a      	str	r2, [r3, #40]	@ 0x28
 800548c:	e028      	b.n	80054e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	0c1b      	lsrs	r3, r3, #16
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	4413      	add	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800549c:	2300      	movs	r3, #0
 800549e:	73fb      	strb	r3, [r7, #15]
 80054a0:	e00d      	b.n	80054be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	7bfb      	ldrb	r3, [r7, #15]
 80054a8:	3340      	adds	r3, #64	@ 0x40
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	0c1b      	lsrs	r3, r3, #16
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	4413      	add	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	3301      	adds	r3, #1
 80054bc:	73fb      	strb	r3, [r7, #15]
 80054be:	7bfa      	ldrb	r2, [r7, #15]
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d3ec      	bcc.n	80054a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80054c8:	883b      	ldrh	r3, [r7, #0]
 80054ca:	0418      	lsls	r0, r3, #16
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6819      	ldr	r1, [r3, #0]
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	3b01      	subs	r3, #1
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	4302      	orrs	r2, r0
 80054d8:	3340      	adds	r3, #64	@ 0x40
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	887a      	ldrh	r2, [r7, #2]
 8005500:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005510:	b480      	push	{r7}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005542:	f043 0303 	orr.w	r3, r3, #3
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3714      	adds	r7, #20
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005558:	b480      	push	{r7}
 800555a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800555c:	4b0d      	ldr	r3, [pc, #52]	@ (8005594 <HAL_PWREx_GetVoltageRange+0x3c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005568:	d102      	bne.n	8005570 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800556a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800556e:	e00b      	b.n	8005588 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005570:	4b08      	ldr	r3, [pc, #32]	@ (8005594 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800557a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800557e:	d102      	bne.n	8005586 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005580:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005584:	e000      	b.n	8005588 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005586:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005588:	4618      	mov	r0, r3
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	40007000 	.word	0x40007000

08005598 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d141      	bne.n	800562a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80055a6:	4b4b      	ldr	r3, [pc, #300]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80055ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055b2:	d131      	bne.n	8005618 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80055b4:	4b47      	ldr	r3, [pc, #284]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ba:	4a46      	ldr	r2, [pc, #280]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80055c4:	4b43      	ldr	r3, [pc, #268]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80055cc:	4a41      	ldr	r2, [pc, #260]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80055d4:	4b40      	ldr	r3, [pc, #256]	@ (80056d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2232      	movs	r2, #50	@ 0x32
 80055da:	fb02 f303 	mul.w	r3, r2, r3
 80055de:	4a3f      	ldr	r2, [pc, #252]	@ (80056dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80055e0:	fba2 2303 	umull	r2, r3, r2, r3
 80055e4:	0c9b      	lsrs	r3, r3, #18
 80055e6:	3301      	adds	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055ea:	e002      	b.n	80055f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80055f2:	4b38      	ldr	r3, [pc, #224]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055fe:	d102      	bne.n	8005606 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f2      	bne.n	80055ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005606:	4b33      	ldr	r3, [pc, #204]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800560e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005612:	d158      	bne.n	80056c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e057      	b.n	80056c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005618:	4b2e      	ldr	r3, [pc, #184]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800561a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800561e:	4a2d      	ldr	r2, [pc, #180]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005624:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005628:	e04d      	b.n	80056c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005630:	d141      	bne.n	80056b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005632:	4b28      	ldr	r3, [pc, #160]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800563a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800563e:	d131      	bne.n	80056a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005640:	4b24      	ldr	r3, [pc, #144]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005646:	4a23      	ldr	r2, [pc, #140]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800564c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005650:	4b20      	ldr	r3, [pc, #128]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005658:	4a1e      	ldr	r2, [pc, #120]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800565a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800565e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005660:	4b1d      	ldr	r3, [pc, #116]	@ (80056d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2232      	movs	r2, #50	@ 0x32
 8005666:	fb02 f303 	mul.w	r3, r2, r3
 800566a:	4a1c      	ldr	r2, [pc, #112]	@ (80056dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800566c:	fba2 2303 	umull	r2, r3, r2, r3
 8005670:	0c9b      	lsrs	r3, r3, #18
 8005672:	3301      	adds	r3, #1
 8005674:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005676:	e002      	b.n	800567e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3b01      	subs	r3, #1
 800567c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800567e:	4b15      	ldr	r3, [pc, #84]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800568a:	d102      	bne.n	8005692 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f2      	bne.n	8005678 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005692:	4b10      	ldr	r3, [pc, #64]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800569a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800569e:	d112      	bne.n	80056c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e011      	b.n	80056c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80056a4:	4b0b      	ldr	r3, [pc, #44]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056aa:	4a0a      	ldr	r2, [pc, #40]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80056b4:	e007      	b.n	80056c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80056b6:	4b07      	ldr	r3, [pc, #28]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80056be:	4a05      	ldr	r2, [pc, #20]	@ (80056d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80056c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80056c4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40007000 	.word	0x40007000
 80056d8:	20000000 	.word	0x20000000
 80056dc:	431bde83 	.word	0x431bde83

080056e0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80056e4:	4b05      	ldr	r3, [pc, #20]	@ (80056fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	4a04      	ldr	r2, [pc, #16]	@ (80056fc <HAL_PWREx_EnableVddUSB+0x1c>)
 80056ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80056ee:	6053      	str	r3, [r2, #4]
}
 80056f0:	bf00      	nop
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40007000 	.word	0x40007000

08005700 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005704:	4b05      	ldr	r3, [pc, #20]	@ (800571c <HAL_PWREx_EnableVddIO2+0x1c>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	4a04      	ldr	r2, [pc, #16]	@ (800571c <HAL_PWREx_EnableVddIO2+0x1c>)
 800570a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800570e:	6053      	str	r3, [r2, #4]
}
 8005710:	bf00      	nop
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40007000 	.word	0x40007000

08005720 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d102      	bne.n	8005734 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f000 bc08 	b.w	8005f44 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005734:	4b96      	ldr	r3, [pc, #600]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 030c 	and.w	r3, r3, #12
 800573c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800573e:	4b94      	ldr	r3, [pc, #592]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80e4 	beq.w	800591e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <HAL_RCC_OscConfig+0x4c>
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	2b0c      	cmp	r3, #12
 8005760:	f040 808b 	bne.w	800587a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2b01      	cmp	r3, #1
 8005768:	f040 8087 	bne.w	800587a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800576c:	4b88      	ldr	r3, [pc, #544]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <HAL_RCC_OscConfig+0x64>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e3df      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1a      	ldr	r2, [r3, #32]
 8005788:	4b81      	ldr	r3, [pc, #516]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <HAL_RCC_OscConfig+0x7e>
 8005794:	4b7e      	ldr	r3, [pc, #504]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800579c:	e005      	b.n	80057aa <HAL_RCC_OscConfig+0x8a>
 800579e:	4b7c      	ldr	r3, [pc, #496]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80057a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057a4:	091b      	lsrs	r3, r3, #4
 80057a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d223      	bcs.n	80057f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fdcc 	bl	8006350 <RCC_SetFlashLatencyFromMSIRange>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e3c0      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057c2:	4b73      	ldr	r3, [pc, #460]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a72      	ldr	r2, [pc, #456]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80057c8:	f043 0308 	orr.w	r3, r3, #8
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	4b70      	ldr	r3, [pc, #448]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	496d      	ldr	r1, [pc, #436]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057e0:	4b6b      	ldr	r3, [pc, #428]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	021b      	lsls	r3, r3, #8
 80057ee:	4968      	ldr	r1, [pc, #416]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	604b      	str	r3, [r1, #4]
 80057f4:	e025      	b.n	8005842 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057f6:	4b66      	ldr	r3, [pc, #408]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a65      	ldr	r2, [pc, #404]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80057fc:	f043 0308 	orr.w	r3, r3, #8
 8005800:	6013      	str	r3, [r2, #0]
 8005802:	4b63      	ldr	r3, [pc, #396]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	4960      	ldr	r1, [pc, #384]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005810:	4313      	orrs	r3, r2
 8005812:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005814:	4b5e      	ldr	r3, [pc, #376]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	021b      	lsls	r3, r3, #8
 8005822:	495b      	ldr	r1, [pc, #364]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005824:	4313      	orrs	r3, r2
 8005826:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d109      	bne.n	8005842 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fd8c 	bl	8006350 <RCC_SetFlashLatencyFromMSIRange>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e380      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005842:	f000 fcc1 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 8005846:	4602      	mov	r2, r0
 8005848:	4b51      	ldr	r3, [pc, #324]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	f003 030f 	and.w	r3, r3, #15
 8005852:	4950      	ldr	r1, [pc, #320]	@ (8005994 <HAL_RCC_OscConfig+0x274>)
 8005854:	5ccb      	ldrb	r3, [r1, r3]
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	fa22 f303 	lsr.w	r3, r2, r3
 800585e:	4a4e      	ldr	r2, [pc, #312]	@ (8005998 <HAL_RCC_OscConfig+0x278>)
 8005860:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005862:	4b4e      	ldr	r3, [pc, #312]	@ (800599c <HAL_RCC_OscConfig+0x27c>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f7fc f9f8 	bl	8001c5c <HAL_InitTick>
 800586c:	4603      	mov	r3, r0
 800586e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d052      	beq.n	800591c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	e364      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d032      	beq.n	80058e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005882:	4b43      	ldr	r3, [pc, #268]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a42      	ldr	r2, [pc, #264]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800588e:	f7fc fa35 	bl	8001cfc <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005896:	f7fc fa31 	bl	8001cfc <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e34d      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058a8:	4b39      	ldr	r3, [pc, #228]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d0f0      	beq.n	8005896 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058b4:	4b36      	ldr	r3, [pc, #216]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a35      	ldr	r2, [pc, #212]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80058ba:	f043 0308 	orr.w	r3, r3, #8
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	4b33      	ldr	r3, [pc, #204]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	4930      	ldr	r1, [pc, #192]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058d2:	4b2f      	ldr	r3, [pc, #188]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	492b      	ldr	r1, [pc, #172]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	604b      	str	r3, [r1, #4]
 80058e6:	e01a      	b.n	800591e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80058e8:	4b29      	ldr	r3, [pc, #164]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a28      	ldr	r2, [pc, #160]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058f4:	f7fc fa02 	bl	8001cfc <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058fc:	f7fc f9fe 	bl	8001cfc <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e31a      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800590e:	4b20      	ldr	r3, [pc, #128]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1f0      	bne.n	80058fc <HAL_RCC_OscConfig+0x1dc>
 800591a:	e000      	b.n	800591e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800591c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d073      	beq.n	8005a12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d005      	beq.n	800593c <HAL_RCC_OscConfig+0x21c>
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	2b0c      	cmp	r3, #12
 8005934:	d10e      	bne.n	8005954 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2b03      	cmp	r3, #3
 800593a:	d10b      	bne.n	8005954 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800593c:	4b14      	ldr	r3, [pc, #80]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d063      	beq.n	8005a10 <HAL_RCC_OscConfig+0x2f0>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d15f      	bne.n	8005a10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e2f7      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800595c:	d106      	bne.n	800596c <HAL_RCC_OscConfig+0x24c>
 800595e:	4b0c      	ldr	r3, [pc, #48]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a0b      	ldr	r2, [pc, #44]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e025      	b.n	80059b8 <HAL_RCC_OscConfig+0x298>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005974:	d114      	bne.n	80059a0 <HAL_RCC_OscConfig+0x280>
 8005976:	4b06      	ldr	r3, [pc, #24]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a05      	ldr	r2, [pc, #20]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 800597c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	4b03      	ldr	r3, [pc, #12]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a02      	ldr	r2, [pc, #8]	@ (8005990 <HAL_RCC_OscConfig+0x270>)
 8005988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e013      	b.n	80059b8 <HAL_RCC_OscConfig+0x298>
 8005990:	40021000 	.word	0x40021000
 8005994:	0800dd98 	.word	0x0800dd98
 8005998:	20000000 	.word	0x20000000
 800599c:	20000004 	.word	0x20000004
 80059a0:	4ba0      	ldr	r3, [pc, #640]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a9f      	ldr	r2, [pc, #636]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 80059a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	4b9d      	ldr	r3, [pc, #628]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a9c      	ldr	r2, [pc, #624]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 80059b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d013      	beq.n	80059e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fc f99c 	bl	8001cfc <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c8:	f7fc f998 	bl	8001cfc <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b64      	cmp	r3, #100	@ 0x64
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e2b4      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059da:	4b92      	ldr	r3, [pc, #584]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0x2a8>
 80059e6:	e014      	b.n	8005a12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e8:	f7fc f988 	bl	8001cfc <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f0:	f7fc f984 	bl	8001cfc <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	@ 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e2a0      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a02:	4b88      	ldr	r3, [pc, #544]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0x2d0>
 8005a0e:	e000      	b.n	8005a12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d060      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d005      	beq.n	8005a30 <HAL_RCC_OscConfig+0x310>
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	2b0c      	cmp	r3, #12
 8005a28:	d119      	bne.n	8005a5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d116      	bne.n	8005a5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a30:	4b7c      	ldr	r3, [pc, #496]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_RCC_OscConfig+0x328>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e27d      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a48:	4b76      	ldr	r3, [pc, #472]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	061b      	lsls	r3, r3, #24
 8005a56:	4973      	ldr	r1, [pc, #460]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a5c:	e040      	b.n	8005ae0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d023      	beq.n	8005aae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a66:	4b6f      	ldr	r3, [pc, #444]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a6e      	ldr	r2, [pc, #440]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a72:	f7fc f943 	bl	8001cfc <HAL_GetTick>
 8005a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a78:	e008      	b.n	8005a8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a7a:	f7fc f93f 	bl	8001cfc <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e25b      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a8c:	4b65      	ldr	r3, [pc, #404]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a98:	4b62      	ldr	r3, [pc, #392]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	061b      	lsls	r3, r3, #24
 8005aa6:	495f      	ldr	r1, [pc, #380]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	604b      	str	r3, [r1, #4]
 8005aac:	e018      	b.n	8005ae0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aae:	4b5d      	ldr	r3, [pc, #372]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a5c      	ldr	r2, [pc, #368]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aba:	f7fc f91f 	bl	8001cfc <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac2:	f7fc f91b 	bl	8001cfc <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e237      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ad4:	4b53      	ldr	r3, [pc, #332]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f0      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d03c      	beq.n	8005b66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d01c      	beq.n	8005b2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005af4:	4b4b      	ldr	r3, [pc, #300]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005afa:	4a4a      	ldr	r2, [pc, #296]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005afc:	f043 0301 	orr.w	r3, r3, #1
 8005b00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b04:	f7fc f8fa 	bl	8001cfc <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b0c:	f7fc f8f6 	bl	8001cfc <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e212      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b1e:	4b41      	ldr	r3, [pc, #260]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0ef      	beq.n	8005b0c <HAL_RCC_OscConfig+0x3ec>
 8005b2c:	e01b      	b.n	8005b66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b34:	4a3b      	ldr	r2, [pc, #236]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b36:	f023 0301 	bic.w	r3, r3, #1
 8005b3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3e:	f7fc f8dd 	bl	8001cfc <HAL_GetTick>
 8005b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b46:	f7fc f8d9 	bl	8001cfc <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e1f5      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b58:	4b32      	ldr	r3, [pc, #200]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1ef      	bne.n	8005b46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 80a6 	beq.w	8005cc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b74:	2300      	movs	r3, #0
 8005b76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b78:	4b2a      	ldr	r3, [pc, #168]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d10d      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b84:	4b27      	ldr	r3, [pc, #156]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b88:	4a26      	ldr	r2, [pc, #152]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b90:	4b24      	ldr	r3, [pc, #144]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ba0:	4b21      	ldr	r3, [pc, #132]	@ (8005c28 <HAL_RCC_OscConfig+0x508>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d118      	bne.n	8005bde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bac:	4b1e      	ldr	r3, [pc, #120]	@ (8005c28 <HAL_RCC_OscConfig+0x508>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c28 <HAL_RCC_OscConfig+0x508>)
 8005bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb8:	f7fc f8a0 	bl	8001cfc <HAL_GetTick>
 8005bbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bbe:	e008      	b.n	8005bd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc0:	f7fc f89c 	bl	8001cfc <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d901      	bls.n	8005bd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e1b8      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd2:	4b15      	ldr	r3, [pc, #84]	@ (8005c28 <HAL_RCC_OscConfig+0x508>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d108      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x4d8>
 8005be6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bec:	4a0d      	ldr	r2, [pc, #52]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bf6:	e029      	b.n	8005c4c <HAL_RCC_OscConfig+0x52c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b05      	cmp	r3, #5
 8005bfe:	d115      	bne.n	8005c2c <HAL_RCC_OscConfig+0x50c>
 8005c00:	4b08      	ldr	r3, [pc, #32]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c06:	4a07      	ldr	r2, [pc, #28]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005c08:	f043 0304 	orr.w	r3, r3, #4
 8005c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c10:	4b04      	ldr	r3, [pc, #16]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c16:	4a03      	ldr	r2, [pc, #12]	@ (8005c24 <HAL_RCC_OscConfig+0x504>)
 8005c18:	f043 0301 	orr.w	r3, r3, #1
 8005c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c20:	e014      	b.n	8005c4c <HAL_RCC_OscConfig+0x52c>
 8005c22:	bf00      	nop
 8005c24:	40021000 	.word	0x40021000
 8005c28:	40007000 	.word	0x40007000
 8005c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c32:	4a9c      	ldr	r2, [pc, #624]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005c34:	f023 0301 	bic.w	r3, r3, #1
 8005c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c3c:	4b99      	ldr	r3, [pc, #612]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c42:	4a98      	ldr	r2, [pc, #608]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005c44:	f023 0304 	bic.w	r3, r3, #4
 8005c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d016      	beq.n	8005c82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c54:	f7fc f852 	bl	8001cfc <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c5a:	e00a      	b.n	8005c72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5c:	f7fc f84e 	bl	8001cfc <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e168      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c72:	4b8c      	ldr	r3, [pc, #560]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0ed      	beq.n	8005c5c <HAL_RCC_OscConfig+0x53c>
 8005c80:	e015      	b.n	8005cae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c82:	f7fc f83b 	bl	8001cfc <HAL_GetTick>
 8005c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c88:	e00a      	b.n	8005ca0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c8a:	f7fc f837 	bl	8001cfc <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e151      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ca0:	4b80      	ldr	r3, [pc, #512]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1ed      	bne.n	8005c8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cae:	7ffb      	ldrb	r3, [r7, #31]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d105      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb4:	4b7b      	ldr	r3, [pc, #492]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb8:	4a7a      	ldr	r2, [pc, #488]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cbe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d03c      	beq.n	8005d46 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01c      	beq.n	8005d0e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cd4:	4b73      	ldr	r3, [pc, #460]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005cda:	4a72      	ldr	r2, [pc, #456]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce4:	f7fc f80a 	bl	8001cfc <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cec:	f7fc f806 	bl	8001cfc <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e122      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cfe:	4b69      	ldr	r3, [pc, #420]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0ef      	beq.n	8005cec <HAL_RCC_OscConfig+0x5cc>
 8005d0c:	e01b      	b.n	8005d46 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d0e:	4b65      	ldr	r3, [pc, #404]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d14:	4a63      	ldr	r2, [pc, #396]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d1e:	f7fb ffed 	bl	8001cfc <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d26:	f7fb ffe9 	bl	8001cfc <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e105      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d38:	4b5a      	ldr	r3, [pc, #360]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ef      	bne.n	8005d26 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80f9 	beq.w	8005f42 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	f040 80cf 	bne.w	8005ef8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005d5a:	4b52      	ldr	r3, [pc, #328]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f003 0203 	and.w	r2, r3, #3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d12c      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d123      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d11b      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d113      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005daa:	085b      	lsrs	r3, r3, #1
 8005dac:	3b01      	subs	r3, #1
 8005dae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d109      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbe:	085b      	lsrs	r3, r3, #1
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d071      	beq.n	8005eac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b0c      	cmp	r3, #12
 8005dcc:	d068      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005dce:	4b35      	ldr	r3, [pc, #212]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d105      	bne.n	8005de6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005dda:	4b32      	ldr	r3, [pc, #200]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e0ac      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005dea:	4b2e      	ldr	r3, [pc, #184]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005df0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005df4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005df6:	f7fb ff81 	bl	8001cfc <HAL_GetTick>
 8005dfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dfe:	f7fb ff7d 	bl	8001cfc <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e099      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e10:	4b24      	ldr	r3, [pc, #144]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f0      	bne.n	8005dfe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e1c:	4b21      	ldr	r3, [pc, #132]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	4b21      	ldr	r3, [pc, #132]	@ (8005ea8 <HAL_RCC_OscConfig+0x788>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e2c:	3a01      	subs	r2, #1
 8005e2e:	0112      	lsls	r2, r2, #4
 8005e30:	4311      	orrs	r1, r2
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e36:	0212      	lsls	r2, r2, #8
 8005e38:	4311      	orrs	r1, r2
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e3e:	0852      	lsrs	r2, r2, #1
 8005e40:	3a01      	subs	r2, #1
 8005e42:	0552      	lsls	r2, r2, #21
 8005e44:	4311      	orrs	r1, r2
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005e4a:	0852      	lsrs	r2, r2, #1
 8005e4c:	3a01      	subs	r2, #1
 8005e4e:	0652      	lsls	r2, r2, #25
 8005e50:	4311      	orrs	r1, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005e56:	06d2      	lsls	r2, r2, #27
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	4912      	ldr	r1, [pc, #72]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005e60:	4b10      	ldr	r3, [pc, #64]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a0f      	ldr	r2, [pc, #60]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	4a0c      	ldr	r2, [pc, #48]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e78:	f7fb ff40 	bl	8001cfc <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e80:	f7fb ff3c 	bl	8001cfc <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e058      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e92:	4b04      	ldr	r3, [pc, #16]	@ (8005ea4 <HAL_RCC_OscConfig+0x784>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f0      	beq.n	8005e80 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e9e:	e050      	b.n	8005f42 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e04f      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eac:	4b27      	ldr	r3, [pc, #156]	@ (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d144      	bne.n	8005f42 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005eb8:	4b24      	ldr	r3, [pc, #144]	@ (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a23      	ldr	r2, [pc, #140]	@ (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ec2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ec4:	4b21      	ldr	r3, [pc, #132]	@ (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	4a20      	ldr	r2, [pc, #128]	@ (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ece:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ed0:	f7fb ff14 	bl	8001cfc <HAL_GetTick>
 8005ed4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ed8:	f7fb ff10 	bl	8001cfc <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e02c      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eea:	4b18      	ldr	r3, [pc, #96]	@ (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0f0      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x7b8>
 8005ef6:	e024      	b.n	8005f42 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	d01f      	beq.n	8005f3e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efe:	4b13      	ldr	r3, [pc, #76]	@ (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a12      	ldr	r2, [pc, #72]	@ (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0a:	f7fb fef7 	bl	8001cfc <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f12:	f7fb fef3 	bl	8001cfc <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e00f      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f24:	4b09      	ldr	r3, [pc, #36]	@ (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1f0      	bne.n	8005f12 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f30:	4b06      	ldr	r3, [pc, #24]	@ (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	4905      	ldr	r1, [pc, #20]	@ (8005f4c <HAL_RCC_OscConfig+0x82c>)
 8005f36:	4b06      	ldr	r3, [pc, #24]	@ (8005f50 <HAL_RCC_OscConfig+0x830>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60cb      	str	r3, [r1, #12]
 8005f3c:	e001      	b.n	8005f42 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40021000 	.word	0x40021000
 8005f50:	feeefffc 	.word	0xfeeefffc

08005f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e11d      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f6c:	4b90      	ldr	r3, [pc, #576]	@ (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 030f 	and.w	r3, r3, #15
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d910      	bls.n	8005f9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7a:	4b8d      	ldr	r3, [pc, #564]	@ (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f023 020f 	bic.w	r2, r3, #15
 8005f82:	498b      	ldr	r1, [pc, #556]	@ (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f8a:	4b89      	ldr	r3, [pc, #548]	@ (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 030f 	and.w	r3, r3, #15
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d001      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e105      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d010      	beq.n	8005fca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	4b81      	ldr	r3, [pc, #516]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d908      	bls.n	8005fca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fb8:	4b7e      	ldr	r3, [pc, #504]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	497b      	ldr	r1, [pc, #492]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d079      	beq.n	80060ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d11e      	bne.n	800601c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fde:	4b75      	ldr	r3, [pc, #468]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d101      	bne.n	8005fee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e0dc      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005fee:	f000 fa09 	bl	8006404 <RCC_GetSysClockFreqFromPLLSource>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4a70      	ldr	r2, [pc, #448]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d946      	bls.n	8006088 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005ffa:	4b6e      	ldr	r3, [pc, #440]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d140      	bne.n	8006088 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006006:	4b6b      	ldr	r3, [pc, #428]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800600e:	4a69      	ldr	r2, [pc, #420]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006014:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006016:	2380      	movs	r3, #128	@ 0x80
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	e035      	b.n	8006088 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d107      	bne.n	8006034 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006024:	4b63      	ldr	r3, [pc, #396]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d115      	bne.n	800605c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e0b9      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d107      	bne.n	800604c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800603c:	4b5d      	ldr	r3, [pc, #372]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d109      	bne.n	800605c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0ad      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800604c:	4b59      	ldr	r3, [pc, #356]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0a5      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800605c:	f000 f8b4 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 8006060:	4603      	mov	r3, r0
 8006062:	4a55      	ldr	r2, [pc, #340]	@ (80061b8 <HAL_RCC_ClockConfig+0x264>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d90f      	bls.n	8006088 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006068:	4b52      	ldr	r3, [pc, #328]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d109      	bne.n	8006088 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006074:	4b4f      	ldr	r3, [pc, #316]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800607c:	4a4d      	ldr	r2, [pc, #308]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 800607e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006082:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006084:	2380      	movs	r3, #128	@ 0x80
 8006086:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006088:	4b4a      	ldr	r3, [pc, #296]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f023 0203 	bic.w	r2, r3, #3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	4947      	ldr	r1, [pc, #284]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006096:	4313      	orrs	r3, r2
 8006098:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800609a:	f7fb fe2f 	bl	8001cfc <HAL_GetTick>
 800609e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a0:	e00a      	b.n	80060b8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a2:	f7fb fe2b 	bl	8001cfc <HAL_GetTick>
 80060a6:	4602      	mov	r2, r0
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1ad3      	subs	r3, r2, r3
 80060ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e077      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b8:	4b3e      	ldr	r3, [pc, #248]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 020c 	and.w	r2, r3, #12
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d1eb      	bne.n	80060a2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b80      	cmp	r3, #128	@ 0x80
 80060ce:	d105      	bne.n	80060dc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060d0:	4b38      	ldr	r3, [pc, #224]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	4a37      	ldr	r2, [pc, #220]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 80060d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060da:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d010      	beq.n	800610a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	4b31      	ldr	r3, [pc, #196]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d208      	bcs.n	800610a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060f8:	4b2e      	ldr	r3, [pc, #184]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	492b      	ldr	r1, [pc, #172]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006106:	4313      	orrs	r3, r2
 8006108:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800610a:	4b29      	ldr	r3, [pc, #164]	@ (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 030f 	and.w	r3, r3, #15
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d210      	bcs.n	800613a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006118:	4b25      	ldr	r3, [pc, #148]	@ (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f023 020f 	bic.w	r2, r3, #15
 8006120:	4923      	ldr	r1, [pc, #140]	@ (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006128:	4b21      	ldr	r3, [pc, #132]	@ (80061b0 <HAL_RCC_ClockConfig+0x25c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d001      	beq.n	800613a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e036      	b.n	80061a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006146:	4b1b      	ldr	r3, [pc, #108]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	4918      	ldr	r1, [pc, #96]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006154:	4313      	orrs	r3, r2
 8006156:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006164:	4b13      	ldr	r3, [pc, #76]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	4910      	ldr	r1, [pc, #64]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006174:	4313      	orrs	r3, r2
 8006176:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006178:	f000 f826 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b0d      	ldr	r3, [pc, #52]	@ (80061b4 <HAL_RCC_ClockConfig+0x260>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	091b      	lsrs	r3, r3, #4
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	490c      	ldr	r1, [pc, #48]	@ (80061bc <HAL_RCC_ClockConfig+0x268>)
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	f003 031f 	and.w	r3, r3, #31
 8006190:	fa22 f303 	lsr.w	r3, r2, r3
 8006194:	4a0a      	ldr	r2, [pc, #40]	@ (80061c0 <HAL_RCC_ClockConfig+0x26c>)
 8006196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006198:	4b0a      	ldr	r3, [pc, #40]	@ (80061c4 <HAL_RCC_ClockConfig+0x270>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f7fb fd5d 	bl	8001c5c <HAL_InitTick>
 80061a2:	4603      	mov	r3, r0
 80061a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	40022000 	.word	0x40022000
 80061b4:	40021000 	.word	0x40021000
 80061b8:	04c4b400 	.word	0x04c4b400
 80061bc:	0800dd98 	.word	0x0800dd98
 80061c0:	20000000 	.word	0x20000000
 80061c4:	20000004 	.word	0x20000004

080061c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b089      	sub	sp, #36	@ 0x24
 80061cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61fb      	str	r3, [r7, #28]
 80061d2:	2300      	movs	r3, #0
 80061d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061d6:	4b3e      	ldr	r3, [pc, #248]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f003 030c 	and.w	r3, r3, #12
 80061de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061e0:	4b3b      	ldr	r3, [pc, #236]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_RCC_GetSysClockFreq+0x34>
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b0c      	cmp	r3, #12
 80061f4:	d121      	bne.n	800623a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d11e      	bne.n	800623a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061fc:	4b34      	ldr	r3, [pc, #208]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b00      	cmp	r3, #0
 8006206:	d107      	bne.n	8006218 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006208:	4b31      	ldr	r3, [pc, #196]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800620a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800620e:	0a1b      	lsrs	r3, r3, #8
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	61fb      	str	r3, [r7, #28]
 8006216:	e005      	b.n	8006224 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006218:	4b2d      	ldr	r3, [pc, #180]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	091b      	lsrs	r3, r3, #4
 800621e:	f003 030f 	and.w	r3, r3, #15
 8006222:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006224:	4a2b      	ldr	r2, [pc, #172]	@ (80062d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800622c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10d      	bne.n	8006250 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006238:	e00a      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b04      	cmp	r3, #4
 800623e:	d102      	bne.n	8006246 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006240:	4b25      	ldr	r3, [pc, #148]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	e004      	b.n	8006250 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b08      	cmp	r3, #8
 800624a:	d101      	bne.n	8006250 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800624c:	4b23      	ldr	r3, [pc, #140]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x114>)
 800624e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2b0c      	cmp	r3, #12
 8006254:	d134      	bne.n	80062c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006256:	4b1e      	ldr	r3, [pc, #120]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d003      	beq.n	800626e <HAL_RCC_GetSysClockFreq+0xa6>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2b03      	cmp	r3, #3
 800626a:	d003      	beq.n	8006274 <HAL_RCC_GetSysClockFreq+0xac>
 800626c:	e005      	b.n	800627a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800626e:	4b1a      	ldr	r3, [pc, #104]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006270:	617b      	str	r3, [r7, #20]
      break;
 8006272:	e005      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006274:	4b19      	ldr	r3, [pc, #100]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x114>)
 8006276:	617b      	str	r3, [r7, #20]
      break;
 8006278:	e002      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	617b      	str	r3, [r7, #20]
      break;
 800627e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006280:	4b13      	ldr	r3, [pc, #76]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	091b      	lsrs	r3, r3, #4
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	3301      	adds	r3, #1
 800628c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800628e:	4b10      	ldr	r3, [pc, #64]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	fb03 f202 	mul.w	r2, r3, r2
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80062a6:	4b0a      	ldr	r3, [pc, #40]	@ (80062d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	0e5b      	lsrs	r3, r3, #25
 80062ac:	f003 0303 	and.w	r3, r3, #3
 80062b0:	3301      	adds	r3, #1
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80062c0:	69bb      	ldr	r3, [r7, #24]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3724      	adds	r7, #36	@ 0x24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40021000 	.word	0x40021000
 80062d4:	0800ddb0 	.word	0x0800ddb0
 80062d8:	00f42400 	.word	0x00f42400
 80062dc:	007a1200 	.word	0x007a1200

080062e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e4:	4b03      	ldr	r3, [pc, #12]	@ (80062f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80062e6:	681b      	ldr	r3, [r3, #0]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000000 	.word	0x20000000

080062f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062fc:	f7ff fff0 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 8006300:	4602      	mov	r2, r0
 8006302:	4b06      	ldr	r3, [pc, #24]	@ (800631c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	4904      	ldr	r1, [pc, #16]	@ (8006320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800630e:	5ccb      	ldrb	r3, [r1, r3]
 8006310:	f003 031f 	and.w	r3, r3, #31
 8006314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006318:	4618      	mov	r0, r3
 800631a:	bd80      	pop	{r7, pc}
 800631c:	40021000 	.word	0x40021000
 8006320:	0800dda8 	.word	0x0800dda8

08006324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006328:	f7ff ffda 	bl	80062e0 <HAL_RCC_GetHCLKFreq>
 800632c:	4602      	mov	r2, r0
 800632e:	4b06      	ldr	r3, [pc, #24]	@ (8006348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	0adb      	lsrs	r3, r3, #11
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	4904      	ldr	r1, [pc, #16]	@ (800634c <HAL_RCC_GetPCLK2Freq+0x28>)
 800633a:	5ccb      	ldrb	r3, [r1, r3]
 800633c:	f003 031f 	and.w	r3, r3, #31
 8006340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006344:	4618      	mov	r0, r3
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40021000 	.word	0x40021000
 800634c:	0800dda8 	.word	0x0800dda8

08006350 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800635c:	4b27      	ldr	r3, [pc, #156]	@ (80063fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800635e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006368:	f7ff f8f6 	bl	8005558 <HAL_PWREx_GetVoltageRange>
 800636c:	6178      	str	r0, [r7, #20]
 800636e:	e014      	b.n	800639a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006370:	4b22      	ldr	r3, [pc, #136]	@ (80063fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006374:	4a21      	ldr	r2, [pc, #132]	@ (80063fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800637a:	6593      	str	r3, [r2, #88]	@ 0x58
 800637c:	4b1f      	ldr	r3, [pc, #124]	@ (80063fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800637e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006388:	f7ff f8e6 	bl	8005558 <HAL_PWREx_GetVoltageRange>
 800638c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800638e:	4b1b      	ldr	r3, [pc, #108]	@ (80063fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006392:	4a1a      	ldr	r2, [pc, #104]	@ (80063fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006394:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006398:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063a0:	d10b      	bne.n	80063ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b80      	cmp	r3, #128	@ 0x80
 80063a6:	d913      	bls.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80063ac:	d902      	bls.n	80063b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80063ae:	2302      	movs	r3, #2
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	e00d      	b.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063b4:	2301      	movs	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]
 80063b8:	e00a      	b.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80063be:	d902      	bls.n	80063c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80063c0:	2302      	movs	r3, #2
 80063c2:	613b      	str	r3, [r7, #16]
 80063c4:	e004      	b.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b70      	cmp	r3, #112	@ 0x70
 80063ca:	d101      	bne.n	80063d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063cc:	2301      	movs	r3, #1
 80063ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f023 020f 	bic.w	r2, r3, #15
 80063d8:	4909      	ldr	r1, [pc, #36]	@ (8006400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4313      	orrs	r3, r2
 80063de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063e0:	4b07      	ldr	r3, [pc, #28]	@ (8006400 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d001      	beq.n	80063f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	40021000 	.word	0x40021000
 8006400:	40022000 	.word	0x40022000

08006404 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800640a:	4b2d      	ldr	r3, [pc, #180]	@ (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b03      	cmp	r3, #3
 8006418:	d00b      	beq.n	8006432 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b03      	cmp	r3, #3
 800641e:	d825      	bhi.n	800646c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d008      	beq.n	8006438 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d11f      	bne.n	800646c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800642c:	4b25      	ldr	r3, [pc, #148]	@ (80064c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800642e:	613b      	str	r3, [r7, #16]
    break;
 8006430:	e01f      	b.n	8006472 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006432:	4b25      	ldr	r3, [pc, #148]	@ (80064c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006434:	613b      	str	r3, [r7, #16]
    break;
 8006436:	e01c      	b.n	8006472 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006438:	4b21      	ldr	r3, [pc, #132]	@ (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b00      	cmp	r3, #0
 8006442:	d107      	bne.n	8006454 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006444:	4b1e      	ldr	r3, [pc, #120]	@ (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	e005      	b.n	8006460 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006454:	4b1a      	ldr	r3, [pc, #104]	@ (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006460:	4a1a      	ldr	r2, [pc, #104]	@ (80064cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006468:	613b      	str	r3, [r7, #16]
    break;
 800646a:	e002      	b.n	8006472 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	613b      	str	r3, [r7, #16]
    break;
 8006470:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006472:	4b13      	ldr	r3, [pc, #76]	@ (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	3301      	adds	r3, #1
 800647e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006480:	4b0f      	ldr	r3, [pc, #60]	@ (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	0a1b      	lsrs	r3, r3, #8
 8006486:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	fb03 f202 	mul.w	r2, r3, r2
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	fbb2 f3f3 	udiv	r3, r2, r3
 8006496:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006498:	4b09      	ldr	r3, [pc, #36]	@ (80064c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	0e5b      	lsrs	r3, r3, #25
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	3301      	adds	r3, #1
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80064b2:	683b      	ldr	r3, [r7, #0]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	40021000 	.word	0x40021000
 80064c4:	00f42400 	.word	0x00f42400
 80064c8:	007a1200 	.word	0x007a1200
 80064cc:	0800ddb0 	.word	0x0800ddb0

080064d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064d8:	2300      	movs	r3, #0
 80064da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064dc:	2300      	movs	r3, #0
 80064de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d040      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064f0:	2b80      	cmp	r3, #128	@ 0x80
 80064f2:	d02a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064f4:	2b80      	cmp	r3, #128	@ 0x80
 80064f6:	d825      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80064f8:	2b60      	cmp	r3, #96	@ 0x60
 80064fa:	d026      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80064fc:	2b60      	cmp	r3, #96	@ 0x60
 80064fe:	d821      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006500:	2b40      	cmp	r3, #64	@ 0x40
 8006502:	d006      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006504:	2b40      	cmp	r3, #64	@ 0x40
 8006506:	d81d      	bhi.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d009      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800650c:	2b20      	cmp	r3, #32
 800650e:	d010      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006510:	e018      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006512:	4b89      	ldr	r3, [pc, #548]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	4a88      	ldr	r2, [pc, #544]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800651c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800651e:	e015      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fb02 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 800652c:	4603      	mov	r3, r0
 800652e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006530:	e00c      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	3320      	adds	r3, #32
 8006536:	2100      	movs	r1, #0
 8006538:	4618      	mov	r0, r3
 800653a:	f000 fbed 	bl	8006d18 <RCCEx_PLLSAI2_Config>
 800653e:	4603      	mov	r3, r0
 8006540:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006542:	e003      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	74fb      	strb	r3, [r7, #19]
      break;
 8006548:	e000      	b.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800654a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800654c:	7cfb      	ldrb	r3, [r7, #19]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10b      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006552:	4b79      	ldr	r3, [pc, #484]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006554:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006558:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006560:	4975      	ldr	r1, [pc, #468]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006568:	e001      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656a:	7cfb      	ldrb	r3, [r7, #19]
 800656c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d047      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006582:	d030      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006588:	d82a      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800658a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800658e:	d02a      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006590:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006594:	d824      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800659a:	d008      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xde>
 800659c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065a0:	d81e      	bhi.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80065a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065aa:	d010      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80065ac:	e018      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065ae:	4b62      	ldr	r3, [pc, #392]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	4a61      	ldr	r2, [pc, #388]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065b8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065ba:	e015      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	2100      	movs	r1, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fab4 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 80065c8:	4603      	mov	r3, r0
 80065ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065cc:	e00c      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3320      	adds	r3, #32
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 fb9f 	bl	8006d18 <RCCEx_PLLSAI2_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80065de:	e003      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	74fb      	strb	r3, [r7, #19]
      break;
 80065e4:	e000      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80065e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065e8:	7cfb      	ldrb	r3, [r7, #19]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80065ee:	4b52      	ldr	r3, [pc, #328]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80065f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065fc:	494e      	ldr	r1, [pc, #312]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8006604:	e001      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006606:	7cfb      	ldrb	r3, [r7, #19]
 8006608:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 809f 	beq.w	8006756 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006618:	2300      	movs	r3, #0
 800661a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800661c:	4b46      	ldr	r3, [pc, #280]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800661e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006628:	2301      	movs	r3, #1
 800662a:	e000      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800662c:	2300      	movs	r3, #0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00d      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006632:	4b41      	ldr	r3, [pc, #260]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006636:	4a40      	ldr	r2, [pc, #256]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800663c:	6593      	str	r3, [r2, #88]	@ 0x58
 800663e:	4b3e      	ldr	r3, [pc, #248]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006646:	60bb      	str	r3, [r7, #8]
 8006648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800664a:	2301      	movs	r3, #1
 800664c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800664e:	4b3b      	ldr	r3, [pc, #236]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a3a      	ldr	r2, [pc, #232]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006658:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800665a:	f7fb fb4f 	bl	8001cfc <HAL_GetTick>
 800665e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006660:	e009      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006662:	f7fb fb4b 	bl	8001cfc <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d902      	bls.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	74fb      	strb	r3, [r7, #19]
        break;
 8006674:	e005      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006676:	4b31      	ldr	r3, [pc, #196]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0ef      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006682:	7cfb      	ldrb	r3, [r7, #19]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d15b      	bne.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006688:	4b2b      	ldr	r3, [pc, #172]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800668a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800668e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006692:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01f      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d019      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066a6:	4b24      	ldr	r3, [pc, #144]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066b2:	4b21      	ldr	r3, [pc, #132]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066c8:	4a1b      	ldr	r2, [pc, #108]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066d2:	4a19      	ldr	r2, [pc, #100]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d016      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fb fb0a 	bl	8001cfc <HAL_GetTick>
 80066e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066ea:	e00b      	b.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ec:	f7fb fb06 	bl	8001cfc <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d902      	bls.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	74fb      	strb	r3, [r7, #19]
            break;
 8006702:	e006      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006704:	4b0c      	ldr	r3, [pc, #48]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0ec      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006712:	7cfb      	ldrb	r3, [r7, #19]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10c      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006718:	4b07      	ldr	r3, [pc, #28]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800671a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800671e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006728:	4903      	ldr	r1, [pc, #12]	@ (8006738 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006730:	e008      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006732:	7cfb      	ldrb	r3, [r7, #19]
 8006734:	74bb      	strb	r3, [r7, #18]
 8006736:	e005      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006738:	40021000 	.word	0x40021000
 800673c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006740:	7cfb      	ldrb	r3, [r7, #19]
 8006742:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006744:	7c7b      	ldrb	r3, [r7, #17]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d105      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800674a:	4ba0      	ldr	r3, [pc, #640]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800674c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800674e:	4a9f      	ldr	r2, [pc, #636]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006750:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006754:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006762:	4b9a      	ldr	r3, [pc, #616]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006768:	f023 0203 	bic.w	r2, r3, #3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006770:	4996      	ldr	r1, [pc, #600]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006784:	4b91      	ldr	r3, [pc, #580]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678a:	f023 020c 	bic.w	r2, r3, #12
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006792:	498e      	ldr	r1, [pc, #568]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006794:	4313      	orrs	r3, r2
 8006796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0304 	and.w	r3, r3, #4
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067a6:	4b89      	ldr	r3, [pc, #548]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067b4:	4985      	ldr	r1, [pc, #532]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00a      	beq.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067c8:	4b80      	ldr	r3, [pc, #512]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067d6:	497d      	ldr	r1, [pc, #500]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80067ea:	4b78      	ldr	r3, [pc, #480]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067f8:	4974      	ldr	r1, [pc, #464]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0320 	and.w	r3, r3, #32
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00a      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800680c:	4b6f      	ldr	r3, [pc, #444]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006812:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800681a:	496c      	ldr	r1, [pc, #432]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800681c:	4313      	orrs	r3, r2
 800681e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800682e:	4b67      	ldr	r3, [pc, #412]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006834:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800683c:	4963      	ldr	r1, [pc, #396]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800683e:	4313      	orrs	r3, r2
 8006840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006850:	4b5e      	ldr	r3, [pc, #376]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006856:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800685e:	495b      	ldr	r1, [pc, #364]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00a      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006872:	4b56      	ldr	r3, [pc, #344]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006878:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006880:	4952      	ldr	r1, [pc, #328]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006882:	4313      	orrs	r3, r2
 8006884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006894:	4b4d      	ldr	r3, [pc, #308]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800689a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a2:	494a      	ldr	r1, [pc, #296]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068b6:	4b45      	ldr	r3, [pc, #276]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068c4:	4941      	ldr	r1, [pc, #260]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068c6:	4313      	orrs	r3, r2
 80068c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00a      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80068d8:	4b3c      	ldr	r3, [pc, #240]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068de:	f023 0203 	bic.w	r2, r3, #3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068e6:	4939      	ldr	r1, [pc, #228]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d028      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068fa:	4b34      	ldr	r3, [pc, #208]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80068fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006900:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006908:	4930      	ldr	r1, [pc, #192]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006914:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006918:	d106      	bne.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800691a:	4b2c      	ldr	r3, [pc, #176]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	4a2b      	ldr	r2, [pc, #172]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006920:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006924:	60d3      	str	r3, [r2, #12]
 8006926:	e011      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800692c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006930:	d10c      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3304      	adds	r3, #4
 8006936:	2101      	movs	r1, #1
 8006938:	4618      	mov	r0, r3
 800693a:	f000 f8f9 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 800693e:	4603      	mov	r3, r0
 8006940:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006942:	7cfb      	ldrb	r3, [r7, #19]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006948:	7cfb      	ldrb	r3, [r7, #19]
 800694a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d04d      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800695c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006960:	d108      	bne.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006962:	4b1a      	ldr	r3, [pc, #104]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006964:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006968:	4a18      	ldr	r2, [pc, #96]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800696a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800696e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006972:	e012      	b.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006974:	4b15      	ldr	r3, [pc, #84]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006976:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800697a:	4a14      	ldr	r2, [pc, #80]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800697c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006980:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8006984:	4b11      	ldr	r3, [pc, #68]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800698a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006992:	490e      	ldr	r1, [pc, #56]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006994:	4313      	orrs	r3, r2
 8006996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800699e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069a2:	d106      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069a4:	4b09      	ldr	r3, [pc, #36]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	4a08      	ldr	r2, [pc, #32]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ae:	60d3      	str	r3, [r2, #12]
 80069b0:	e020      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ba:	d109      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80069bc:	4b03      	ldr	r3, [pc, #12]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	4a02      	ldr	r2, [pc, #8]	@ (80069cc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80069c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069c6:	60d3      	str	r3, [r2, #12]
 80069c8:	e014      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80069ca:	bf00      	nop
 80069cc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069d8:	d10c      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3304      	adds	r3, #4
 80069de:	2101      	movs	r1, #1
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 f8a5 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 80069e6:	4603      	mov	r3, r0
 80069e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069ea:	7cfb      	ldrb	r3, [r7, #19]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80069f0:	7cfb      	ldrb	r3, [r7, #19]
 80069f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d028      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a00:	4b4a      	ldr	r3, [pc, #296]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a0e:	4947      	ldr	r1, [pc, #284]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a1e:	d106      	bne.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a20:	4b42      	ldr	r3, [pc, #264]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4a41      	ldr	r2, [pc, #260]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a2a:	60d3      	str	r3, [r2, #12]
 8006a2c:	e011      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a36:	d10c      	bne.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f876 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 8006a44:	4603      	mov	r3, r0
 8006a46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a48:	7cfb      	ldrb	r3, [r7, #19]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8006a4e:	7cfb      	ldrb	r3, [r7, #19]
 8006a50:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d01e      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a5e:	4b33      	ldr	r3, [pc, #204]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a64:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a6e:	492f      	ldr	r1, [pc, #188]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a80:	d10c      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3304      	adds	r3, #4
 8006a86:	2102      	movs	r1, #2
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 f851 	bl	8006b30 <RCCEx_PLLSAI1_Config>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a92:	7cfb      	ldrb	r3, [r7, #19]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006a98:	7cfb      	ldrb	r3, [r7, #19]
 8006a9a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006aa8:	4b20      	ldr	r3, [pc, #128]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006aae:	f023 0204 	bic.w	r2, r3, #4
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ab8:	491c      	ldr	r1, [pc, #112]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006acc:	4b17      	ldr	r3, [pc, #92]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ad2:	f023 0218 	bic.w	r2, r3, #24
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006adc:	4913      	ldr	r1, [pc, #76]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d017      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006af0:	4b0e      	ldr	r3, [pc, #56]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006af6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b00:	490a      	ldr	r1, [pc, #40]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b12:	d105      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b14:	4b05      	ldr	r3, [pc, #20]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	4a04      	ldr	r2, [pc, #16]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006b20:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40021000 	.word	0x40021000

08006b30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b3e:	4b72      	ldr	r3, [pc, #456]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00e      	beq.n	8006b68 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b4a:	4b6f      	ldr	r3, [pc, #444]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f003 0203 	and.w	r2, r3, #3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d103      	bne.n	8006b62 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
       ||
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d142      	bne.n	8006be8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	73fb      	strb	r3, [r7, #15]
 8006b66:	e03f      	b.n	8006be8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2b03      	cmp	r3, #3
 8006b6e:	d018      	beq.n	8006ba2 <RCCEx_PLLSAI1_Config+0x72>
 8006b70:	2b03      	cmp	r3, #3
 8006b72:	d825      	bhi.n	8006bc0 <RCCEx_PLLSAI1_Config+0x90>
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d002      	beq.n	8006b7e <RCCEx_PLLSAI1_Config+0x4e>
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d009      	beq.n	8006b90 <RCCEx_PLLSAI1_Config+0x60>
 8006b7c:	e020      	b.n	8006bc0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b7e:	4b62      	ldr	r3, [pc, #392]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d11d      	bne.n	8006bc6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b8e:	e01a      	b.n	8006bc6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b90:	4b5d      	ldr	r3, [pc, #372]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d116      	bne.n	8006bca <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ba0:	e013      	b.n	8006bca <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ba2:	4b59      	ldr	r3, [pc, #356]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10f      	bne.n	8006bce <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bae:	4b56      	ldr	r3, [pc, #344]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d109      	bne.n	8006bce <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bbe:	e006      	b.n	8006bce <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc4:	e004      	b.n	8006bd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006bc6:	bf00      	nop
 8006bc8:	e002      	b.n	8006bd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006bca:	bf00      	nop
 8006bcc:	e000      	b.n	8006bd0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006bce:	bf00      	nop
    }

    if(status == HAL_OK)
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d108      	bne.n	8006be8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006bd6:	4b4c      	ldr	r3, [pc, #304]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f023 0203 	bic.w	r2, r3, #3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4949      	ldr	r1, [pc, #292]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f040 8086 	bne.w	8006cfc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006bf0:	4b45      	ldr	r3, [pc, #276]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a44      	ldr	r2, [pc, #272]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006bf6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bfc:	f7fb f87e 	bl	8001cfc <HAL_GetTick>
 8006c00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c02:	e009      	b.n	8006c18 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c04:	f7fb f87a 	bl	8001cfc <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d902      	bls.n	8006c18 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	73fb      	strb	r3, [r7, #15]
        break;
 8006c16:	e005      	b.n	8006c24 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c18:	4b3b      	ldr	r3, [pc, #236]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1ef      	bne.n	8006c04 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d168      	bne.n	8006cfc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d113      	bne.n	8006c58 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c30:	4b35      	ldr	r3, [pc, #212]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c32:	691a      	ldr	r2, [r3, #16]
 8006c34:	4b35      	ldr	r3, [pc, #212]	@ (8006d0c <RCCEx_PLLSAI1_Config+0x1dc>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6892      	ldr	r2, [r2, #8]
 8006c3c:	0211      	lsls	r1, r2, #8
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	68d2      	ldr	r2, [r2, #12]
 8006c42:	06d2      	lsls	r2, r2, #27
 8006c44:	4311      	orrs	r1, r2
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6852      	ldr	r2, [r2, #4]
 8006c4a:	3a01      	subs	r2, #1
 8006c4c:	0112      	lsls	r2, r2, #4
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	492d      	ldr	r1, [pc, #180]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	610b      	str	r3, [r1, #16]
 8006c56:	e02d      	b.n	8006cb4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d115      	bne.n	8006c8a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	4b2b      	ldr	r3, [pc, #172]	@ (8006d10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	6892      	ldr	r2, [r2, #8]
 8006c6a:	0211      	lsls	r1, r2, #8
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6912      	ldr	r2, [r2, #16]
 8006c70:	0852      	lsrs	r2, r2, #1
 8006c72:	3a01      	subs	r2, #1
 8006c74:	0552      	lsls	r2, r2, #21
 8006c76:	4311      	orrs	r1, r2
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	6852      	ldr	r2, [r2, #4]
 8006c7c:	3a01      	subs	r2, #1
 8006c7e:	0112      	lsls	r2, r2, #4
 8006c80:	430a      	orrs	r2, r1
 8006c82:	4921      	ldr	r1, [pc, #132]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	610b      	str	r3, [r1, #16]
 8006c88:	e014      	b.n	8006cb4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	4b21      	ldr	r3, [pc, #132]	@ (8006d14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6892      	ldr	r2, [r2, #8]
 8006c96:	0211      	lsls	r1, r2, #8
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6952      	ldr	r2, [r2, #20]
 8006c9c:	0852      	lsrs	r2, r2, #1
 8006c9e:	3a01      	subs	r2, #1
 8006ca0:	0652      	lsls	r2, r2, #25
 8006ca2:	4311      	orrs	r1, r2
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6852      	ldr	r2, [r2, #4]
 8006ca8:	3a01      	subs	r2, #1
 8006caa:	0112      	lsls	r2, r2, #4
 8006cac:	430a      	orrs	r2, r1
 8006cae:	4916      	ldr	r1, [pc, #88]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006cb4:	4b14      	ldr	r3, [pc, #80]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a13      	ldr	r2, [pc, #76]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc0:	f7fb f81c 	bl	8001cfc <HAL_GetTick>
 8006cc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cc6:	e009      	b.n	8006cdc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006cc8:	f7fb f818 	bl	8001cfc <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d902      	bls.n	8006cdc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	73fb      	strb	r3, [r7, #15]
          break;
 8006cda:	e005      	b.n	8006ce8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0ef      	beq.n	8006cc8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006ce8:	7bfb      	ldrb	r3, [r7, #15]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006cee:	4b06      	ldr	r3, [pc, #24]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cf0:	691a      	ldr	r2, [r3, #16]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	4904      	ldr	r1, [pc, #16]	@ (8006d08 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	40021000 	.word	0x40021000
 8006d0c:	07ff800f 	.word	0x07ff800f
 8006d10:	ff9f800f 	.word	0xff9f800f
 8006d14:	f9ff800f 	.word	0xf9ff800f

08006d18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d26:	4b72      	ldr	r3, [pc, #456]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f003 0303 	and.w	r3, r3, #3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00e      	beq.n	8006d50 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d32:	4b6f      	ldr	r3, [pc, #444]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f003 0203 	and.w	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d103      	bne.n	8006d4a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
       ||
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d142      	bne.n	8006dd0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	73fb      	strb	r3, [r7, #15]
 8006d4e:	e03f      	b.n	8006dd0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	d018      	beq.n	8006d8a <RCCEx_PLLSAI2_Config+0x72>
 8006d58:	2b03      	cmp	r3, #3
 8006d5a:	d825      	bhi.n	8006da8 <RCCEx_PLLSAI2_Config+0x90>
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d002      	beq.n	8006d66 <RCCEx_PLLSAI2_Config+0x4e>
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d009      	beq.n	8006d78 <RCCEx_PLLSAI2_Config+0x60>
 8006d64:	e020      	b.n	8006da8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006d66:	4b62      	ldr	r3, [pc, #392]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d11d      	bne.n	8006dae <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d76:	e01a      	b.n	8006dae <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d78:	4b5d      	ldr	r3, [pc, #372]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d116      	bne.n	8006db2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d88:	e013      	b.n	8006db2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d8a:	4b59      	ldr	r3, [pc, #356]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d10f      	bne.n	8006db6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d96:	4b56      	ldr	r3, [pc, #344]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006da6:	e006      	b.n	8006db6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	73fb      	strb	r3, [r7, #15]
      break;
 8006dac:	e004      	b.n	8006db8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006dae:	bf00      	nop
 8006db0:	e002      	b.n	8006db8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006db2:	bf00      	nop
 8006db4:	e000      	b.n	8006db8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006db6:	bf00      	nop
    }

    if(status == HAL_OK)
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d108      	bne.n	8006dd0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8006dbe:	4b4c      	ldr	r3, [pc, #304]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f023 0203 	bic.w	r2, r3, #3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4949      	ldr	r1, [pc, #292]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f040 8086 	bne.w	8006ee4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006dd8:	4b45      	ldr	r3, [pc, #276]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a44      	ldr	r2, [pc, #272]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006dde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006de4:	f7fa ff8a 	bl	8001cfc <HAL_GetTick>
 8006de8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006dea:	e009      	b.n	8006e00 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006dec:	f7fa ff86 	bl	8001cfc <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d902      	bls.n	8006e00 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	73fb      	strb	r3, [r7, #15]
        break;
 8006dfe:	e005      	b.n	8006e0c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e00:	4b3b      	ldr	r3, [pc, #236]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1ef      	bne.n	8006dec <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d168      	bne.n	8006ee4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d113      	bne.n	8006e40 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e18:	4b35      	ldr	r3, [pc, #212]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e1a:	695a      	ldr	r2, [r3, #20]
 8006e1c:	4b35      	ldr	r3, [pc, #212]	@ (8006ef4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8006e1e:	4013      	ands	r3, r2
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6892      	ldr	r2, [r2, #8]
 8006e24:	0211      	lsls	r1, r2, #8
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	68d2      	ldr	r2, [r2, #12]
 8006e2a:	06d2      	lsls	r2, r2, #27
 8006e2c:	4311      	orrs	r1, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6852      	ldr	r2, [r2, #4]
 8006e32:	3a01      	subs	r2, #1
 8006e34:	0112      	lsls	r2, r2, #4
 8006e36:	430a      	orrs	r2, r1
 8006e38:	492d      	ldr	r1, [pc, #180]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	614b      	str	r3, [r1, #20]
 8006e3e:	e02d      	b.n	8006e9c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d115      	bne.n	8006e72 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e46:	4b2a      	ldr	r3, [pc, #168]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e48:	695a      	ldr	r2, [r3, #20]
 8006e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8006ef8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6892      	ldr	r2, [r2, #8]
 8006e52:	0211      	lsls	r1, r2, #8
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6912      	ldr	r2, [r2, #16]
 8006e58:	0852      	lsrs	r2, r2, #1
 8006e5a:	3a01      	subs	r2, #1
 8006e5c:	0552      	lsls	r2, r2, #21
 8006e5e:	4311      	orrs	r1, r2
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6852      	ldr	r2, [r2, #4]
 8006e64:	3a01      	subs	r2, #1
 8006e66:	0112      	lsls	r2, r2, #4
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	4921      	ldr	r1, [pc, #132]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	614b      	str	r3, [r1, #20]
 8006e70:	e014      	b.n	8006e9c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e72:	4b1f      	ldr	r3, [pc, #124]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e74:	695a      	ldr	r2, [r3, #20]
 8006e76:	4b21      	ldr	r3, [pc, #132]	@ (8006efc <RCCEx_PLLSAI2_Config+0x1e4>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	6892      	ldr	r2, [r2, #8]
 8006e7e:	0211      	lsls	r1, r2, #8
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6952      	ldr	r2, [r2, #20]
 8006e84:	0852      	lsrs	r2, r2, #1
 8006e86:	3a01      	subs	r2, #1
 8006e88:	0652      	lsls	r2, r2, #25
 8006e8a:	4311      	orrs	r1, r2
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6852      	ldr	r2, [r2, #4]
 8006e90:	3a01      	subs	r2, #1
 8006e92:	0112      	lsls	r2, r2, #4
 8006e94:	430a      	orrs	r2, r1
 8006e96:	4916      	ldr	r1, [pc, #88]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006e9c:	4b14      	ldr	r3, [pc, #80]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a13      	ldr	r2, [pc, #76]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ea6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea8:	f7fa ff28 	bl	8001cfc <HAL_GetTick>
 8006eac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006eae:	e009      	b.n	8006ec4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006eb0:	f7fa ff24 	bl	8001cfc <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d902      	bls.n	8006ec4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	73fb      	strb	r3, [r7, #15]
          break;
 8006ec2:	e005      	b.n	8006ed0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0ef      	beq.n	8006eb0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d106      	bne.n	8006ee4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ed6:	4b06      	ldr	r3, [pc, #24]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ed8:	695a      	ldr	r2, [r3, #20]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	4904      	ldr	r1, [pc, #16]	@ (8006ef0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	40021000 	.word	0x40021000
 8006ef4:	07ff800f 	.word	0x07ff800f
 8006ef8:	ff9f800f 	.word	0xff9f800f
 8006efc:	f9ff800f 	.word	0xf9ff800f

08006f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e049      	b.n	8006fa6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fa fcba 	bl	80018a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	f000 fb02 	bl	8007548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
	...

08006fb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b085      	sub	sp, #20
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d001      	beq.n	8006fc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e047      	b.n	8007058 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a23      	ldr	r2, [pc, #140]	@ (8007064 <HAL_TIM_Base_Start+0xb4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d01d      	beq.n	8007016 <HAL_TIM_Base_Start+0x66>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fe2:	d018      	beq.n	8007016 <HAL_TIM_Base_Start+0x66>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8007068 <HAL_TIM_Base_Start+0xb8>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d013      	beq.n	8007016 <HAL_TIM_Base_Start+0x66>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800706c <HAL_TIM_Base_Start+0xbc>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00e      	beq.n	8007016 <HAL_TIM_Base_Start+0x66>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8007070 <HAL_TIM_Base_Start+0xc0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d009      	beq.n	8007016 <HAL_TIM_Base_Start+0x66>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1b      	ldr	r2, [pc, #108]	@ (8007074 <HAL_TIM_Base_Start+0xc4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d004      	beq.n	8007016 <HAL_TIM_Base_Start+0x66>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a19      	ldr	r2, [pc, #100]	@ (8007078 <HAL_TIM_Base_Start+0xc8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d115      	bne.n	8007042 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	4b17      	ldr	r3, [pc, #92]	@ (800707c <HAL_TIM_Base_Start+0xcc>)
 800701e:	4013      	ands	r3, r2
 8007020:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b06      	cmp	r3, #6
 8007026:	d015      	beq.n	8007054 <HAL_TIM_Base_Start+0xa4>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800702e:	d011      	beq.n	8007054 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0201 	orr.w	r2, r2, #1
 800703e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007040:	e008      	b.n	8007054 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f042 0201 	orr.w	r2, r2, #1
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	e000      	b.n	8007056 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007054:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	40012c00 	.word	0x40012c00
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40000c00 	.word	0x40000c00
 8007074:	40013400 	.word	0x40013400
 8007078:	40014000 	.word	0x40014000
 800707c:	00010007 	.word	0x00010007

08007080 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	d001      	beq.n	8007098 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e04f      	b.n	8007138 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f042 0201 	orr.w	r2, r2, #1
 80070ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a23      	ldr	r2, [pc, #140]	@ (8007144 <HAL_TIM_Base_Start_IT+0xc4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d01d      	beq.n	80070f6 <HAL_TIM_Base_Start_IT+0x76>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070c2:	d018      	beq.n	80070f6 <HAL_TIM_Base_Start_IT+0x76>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007148 <HAL_TIM_Base_Start_IT+0xc8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d013      	beq.n	80070f6 <HAL_TIM_Base_Start_IT+0x76>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a1e      	ldr	r2, [pc, #120]	@ (800714c <HAL_TIM_Base_Start_IT+0xcc>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d00e      	beq.n	80070f6 <HAL_TIM_Base_Start_IT+0x76>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1c      	ldr	r2, [pc, #112]	@ (8007150 <HAL_TIM_Base_Start_IT+0xd0>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d009      	beq.n	80070f6 <HAL_TIM_Base_Start_IT+0x76>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1b      	ldr	r2, [pc, #108]	@ (8007154 <HAL_TIM_Base_Start_IT+0xd4>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d004      	beq.n	80070f6 <HAL_TIM_Base_Start_IT+0x76>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a19      	ldr	r2, [pc, #100]	@ (8007158 <HAL_TIM_Base_Start_IT+0xd8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d115      	bne.n	8007122 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	4b17      	ldr	r3, [pc, #92]	@ (800715c <HAL_TIM_Base_Start_IT+0xdc>)
 80070fe:	4013      	ands	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b06      	cmp	r3, #6
 8007106:	d015      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0xb4>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800710e:	d011      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0201 	orr.w	r2, r2, #1
 800711e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007120:	e008      	b.n	8007134 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f042 0201 	orr.w	r2, r2, #1
 8007130:	601a      	str	r2, [r3, #0]
 8007132:	e000      	b.n	8007136 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007134:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr
 8007144:	40012c00 	.word	0x40012c00
 8007148:	40000400 	.word	0x40000400
 800714c:	40000800 	.word	0x40000800
 8007150:	40000c00 	.word	0x40000c00
 8007154:	40013400 	.word	0x40013400
 8007158:	40014000 	.word	0x40014000
 800715c:	00010007 	.word	0x00010007

08007160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d020      	beq.n	80071c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01b      	beq.n	80071c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f06f 0202 	mvn.w	r2, #2
 8007194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	f003 0303 	and.w	r3, r3, #3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f9ad 	bl	800750a <HAL_TIM_IC_CaptureCallback>
 80071b0:	e005      	b.n	80071be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f99f 	bl	80074f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f9b0 	bl	800751e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d020      	beq.n	8007210 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01b      	beq.n	8007210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0204 	mvn.w	r2, #4
 80071e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2202      	movs	r2, #2
 80071e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f987 	bl	800750a <HAL_TIM_IC_CaptureCallback>
 80071fc:	e005      	b.n	800720a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f979 	bl	80074f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f98a 	bl	800751e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d020      	beq.n	800725c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f003 0308 	and.w	r3, r3, #8
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01b      	beq.n	800725c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f06f 0208 	mvn.w	r2, #8
 800722c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2204      	movs	r2, #4
 8007232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	f003 0303 	and.w	r3, r3, #3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f961 	bl	800750a <HAL_TIM_IC_CaptureCallback>
 8007248:	e005      	b.n	8007256 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f953 	bl	80074f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f964 	bl	800751e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f003 0310 	and.w	r3, r3, #16
 8007262:	2b00      	cmp	r3, #0
 8007264:	d020      	beq.n	80072a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f003 0310 	and.w	r3, r3, #16
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01b      	beq.n	80072a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f06f 0210 	mvn.w	r2, #16
 8007278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2208      	movs	r2, #8
 800727e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	69db      	ldr	r3, [r3, #28]
 8007286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f93b 	bl	800750a <HAL_TIM_IC_CaptureCallback>
 8007294:	e005      	b.n	80072a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f92d 	bl	80074f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f93e 	bl	800751e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00c      	beq.n	80072cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d007      	beq.n	80072cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f06f 0201 	mvn.w	r2, #1
 80072c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7f9 ff50 	bl	800116c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00c      	beq.n	80072f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d007      	beq.n	80072f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80072e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 faf2 	bl	80078d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00c      	beq.n	8007314 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007300:	2b00      	cmp	r3, #0
 8007302:	d007      	beq.n	8007314 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800730c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 faea 	bl	80078e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00c      	beq.n	8007338 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d007      	beq.n	8007338 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f8fd 	bl	8007532 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f003 0320 	and.w	r3, r3, #32
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00c      	beq.n	800735c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f003 0320 	and.w	r3, r3, #32
 8007348:	2b00      	cmp	r3, #0
 800734a:	d007      	beq.n	800735c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f06f 0220 	mvn.w	r2, #32
 8007354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fab2 	bl	80078c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800735c:	bf00      	nop
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007378:	2b01      	cmp	r3, #1
 800737a:	d101      	bne.n	8007380 <HAL_TIM_ConfigClockSource+0x1c>
 800737c:	2302      	movs	r3, #2
 800737e:	e0b6      	b.n	80074ee <HAL_TIM_ConfigClockSource+0x18a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800739e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80073a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68ba      	ldr	r2, [r7, #8]
 80073b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073bc:	d03e      	beq.n	800743c <HAL_TIM_ConfigClockSource+0xd8>
 80073be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073c2:	f200 8087 	bhi.w	80074d4 <HAL_TIM_ConfigClockSource+0x170>
 80073c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ca:	f000 8086 	beq.w	80074da <HAL_TIM_ConfigClockSource+0x176>
 80073ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073d2:	d87f      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>
 80073d4:	2b70      	cmp	r3, #112	@ 0x70
 80073d6:	d01a      	beq.n	800740e <HAL_TIM_ConfigClockSource+0xaa>
 80073d8:	2b70      	cmp	r3, #112	@ 0x70
 80073da:	d87b      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>
 80073dc:	2b60      	cmp	r3, #96	@ 0x60
 80073de:	d050      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x11e>
 80073e0:	2b60      	cmp	r3, #96	@ 0x60
 80073e2:	d877      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>
 80073e4:	2b50      	cmp	r3, #80	@ 0x50
 80073e6:	d03c      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0xfe>
 80073e8:	2b50      	cmp	r3, #80	@ 0x50
 80073ea:	d873      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>
 80073ec:	2b40      	cmp	r3, #64	@ 0x40
 80073ee:	d058      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0x13e>
 80073f0:	2b40      	cmp	r3, #64	@ 0x40
 80073f2:	d86f      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>
 80073f4:	2b30      	cmp	r3, #48	@ 0x30
 80073f6:	d064      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x15e>
 80073f8:	2b30      	cmp	r3, #48	@ 0x30
 80073fa:	d86b      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d060      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x15e>
 8007400:	2b20      	cmp	r3, #32
 8007402:	d867      	bhi.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d05c      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x15e>
 8007408:	2b10      	cmp	r3, #16
 800740a:	d05a      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x15e>
 800740c:	e062      	b.n	80074d4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800741e:	f000 f9a7 	bl	8007770 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007430:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	609a      	str	r2, [r3, #8]
      break;
 800743a:	e04f      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800744c:	f000 f990 	bl	8007770 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800745e:	609a      	str	r2, [r3, #8]
      break;
 8007460:	e03c      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800746e:	461a      	mov	r2, r3
 8007470:	f000 f904 	bl	800767c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2150      	movs	r1, #80	@ 0x50
 800747a:	4618      	mov	r0, r3
 800747c:	f000 f95d 	bl	800773a <TIM_ITRx_SetConfig>
      break;
 8007480:	e02c      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800748e:	461a      	mov	r2, r3
 8007490:	f000 f923 	bl	80076da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2160      	movs	r1, #96	@ 0x60
 800749a:	4618      	mov	r0, r3
 800749c:	f000 f94d 	bl	800773a <TIM_ITRx_SetConfig>
      break;
 80074a0:	e01c      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ae:	461a      	mov	r2, r3
 80074b0:	f000 f8e4 	bl	800767c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2140      	movs	r1, #64	@ 0x40
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 f93d 	bl	800773a <TIM_ITRx_SetConfig>
      break;
 80074c0:	e00c      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f000 f934 	bl	800773a <TIM_ITRx_SetConfig>
      break;
 80074d2:	e003      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	73fb      	strb	r3, [r7, #15]
      break;
 80074d8:	e000      	b.n	80074dc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80074da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007512:	bf00      	nop
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr

08007532 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007532:	b480      	push	{r7}
 8007534:	b083      	sub	sp, #12
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800753a:	bf00      	nop
 800753c:	370c      	adds	r7, #12
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
	...

08007548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007548:	b480      	push	{r7}
 800754a:	b085      	sub	sp, #20
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a40      	ldr	r2, [pc, #256]	@ (800765c <TIM_Base_SetConfig+0x114>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d013      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007566:	d00f      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a3d      	ldr	r2, [pc, #244]	@ (8007660 <TIM_Base_SetConfig+0x118>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00b      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a3c      	ldr	r2, [pc, #240]	@ (8007664 <TIM_Base_SetConfig+0x11c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d007      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a3b      	ldr	r2, [pc, #236]	@ (8007668 <TIM_Base_SetConfig+0x120>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d003      	beq.n	8007588 <TIM_Base_SetConfig+0x40>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a3a      	ldr	r2, [pc, #232]	@ (800766c <TIM_Base_SetConfig+0x124>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d108      	bne.n	800759a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2f      	ldr	r2, [pc, #188]	@ (800765c <TIM_Base_SetConfig+0x114>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d01f      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a8:	d01b      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2c      	ldr	r2, [pc, #176]	@ (8007660 <TIM_Base_SetConfig+0x118>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d017      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a2b      	ldr	r2, [pc, #172]	@ (8007664 <TIM_Base_SetConfig+0x11c>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d013      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a2a      	ldr	r2, [pc, #168]	@ (8007668 <TIM_Base_SetConfig+0x120>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00f      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a29      	ldr	r2, [pc, #164]	@ (800766c <TIM_Base_SetConfig+0x124>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00b      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a28      	ldr	r2, [pc, #160]	@ (8007670 <TIM_Base_SetConfig+0x128>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d007      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a27      	ldr	r2, [pc, #156]	@ (8007674 <TIM_Base_SetConfig+0x12c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d003      	beq.n	80075e2 <TIM_Base_SetConfig+0x9a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a26      	ldr	r2, [pc, #152]	@ (8007678 <TIM_Base_SetConfig+0x130>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d108      	bne.n	80075f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a10      	ldr	r2, [pc, #64]	@ (800765c <TIM_Base_SetConfig+0x114>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00f      	beq.n	8007640 <TIM_Base_SetConfig+0xf8>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a12      	ldr	r2, [pc, #72]	@ (800766c <TIM_Base_SetConfig+0x124>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00b      	beq.n	8007640 <TIM_Base_SetConfig+0xf8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a11      	ldr	r2, [pc, #68]	@ (8007670 <TIM_Base_SetConfig+0x128>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d007      	beq.n	8007640 <TIM_Base_SetConfig+0xf8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a10      	ldr	r2, [pc, #64]	@ (8007674 <TIM_Base_SetConfig+0x12c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <TIM_Base_SetConfig+0xf8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a0f      	ldr	r2, [pc, #60]	@ (8007678 <TIM_Base_SetConfig+0x130>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d103      	bne.n	8007648 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	615a      	str	r2, [r3, #20]
}
 800764e:	bf00      	nop
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	40012c00 	.word	0x40012c00
 8007660:	40000400 	.word	0x40000400
 8007664:	40000800 	.word	0x40000800
 8007668:	40000c00 	.word	0x40000c00
 800766c:	40013400 	.word	0x40013400
 8007670:	40014000 	.word	0x40014000
 8007674:	40014400 	.word	0x40014400
 8007678:	40014800 	.word	0x40014800

0800767c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	f023 0201 	bic.w	r2, r3, #1
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f023 030a 	bic.w	r3, r3, #10
 80076b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	4313      	orrs	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	621a      	str	r2, [r3, #32]
}
 80076ce:	bf00      	nop
 80076d0:	371c      	adds	r7, #28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076da:	b480      	push	{r7}
 80076dc:	b087      	sub	sp, #28
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	f023 0210 	bic.w	r2, r3, #16
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	699b      	ldr	r3, [r3, #24]
 80076fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	031b      	lsls	r3, r3, #12
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007716:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	621a      	str	r2, [r3, #32]
}
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800773a:	b480      	push	{r7}
 800773c:	b085      	sub	sp, #20
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007750:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007752:	683a      	ldr	r2, [r7, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4313      	orrs	r3, r2
 8007758:	f043 0307 	orr.w	r3, r3, #7
 800775c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	609a      	str	r2, [r3, #8]
}
 8007764:	bf00      	nop
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007770:	b480      	push	{r7}
 8007772:	b087      	sub	sp, #28
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800778a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	021a      	lsls	r2, r3, #8
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	431a      	orrs	r2, r3
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	4313      	orrs	r3, r2
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	4313      	orrs	r3, r2
 800779c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	609a      	str	r2, [r3, #8]
}
 80077a4:	bf00      	nop
 80077a6:	371c      	adds	r7, #28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077c4:	2302      	movs	r3, #2
 80077c6:	e068      	b.n	800789a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a2e      	ldr	r2, [pc, #184]	@ (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d004      	beq.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a2d      	ldr	r2, [pc, #180]	@ (80078ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d108      	bne.n	800780e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007802:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	4313      	orrs	r3, r2
 800780c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007814:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4313      	orrs	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a1e      	ldr	r2, [pc, #120]	@ (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d01d      	beq.n	800786e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800783a:	d018      	beq.n	800786e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a1b      	ldr	r2, [pc, #108]	@ (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d013      	beq.n	800786e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a1a      	ldr	r2, [pc, #104]	@ (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d00e      	beq.n	800786e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a18      	ldr	r2, [pc, #96]	@ (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d009      	beq.n	800786e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a13      	ldr	r2, [pc, #76]	@ (80078ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d004      	beq.n	800786e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a14      	ldr	r2, [pc, #80]	@ (80078bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d10c      	bne.n	8007888 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	4313      	orrs	r3, r2
 800787e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	40012c00 	.word	0x40012c00
 80078ac:	40013400 	.word	0x40013400
 80078b0:	40000400 	.word	0x40000400
 80078b4:	40000800 	.word	0x40000800
 80078b8:	40000c00 	.word	0x40000c00
 80078bc:	40014000 	.word	0x40014000

080078c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e042      	b.n	8007994 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007914:	2b00      	cmp	r3, #0
 8007916:	d106      	bne.n	8007926 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fa f8ab 	bl	8001a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2224      	movs	r2, #36	@ 0x24
 800792a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0201 	bic.w	r2, r2, #1
 800793c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 ff42 	bl	80087d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fc43 	bl	80081d8 <UART_SetConfig>
 8007952:	4603      	mov	r3, r0
 8007954:	2b01      	cmp	r3, #1
 8007956:	d101      	bne.n	800795c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e01b      	b.n	8007994 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800796a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800797a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0201 	orr.w	r2, r2, #1
 800798a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 ffc1 	bl	8008914 <UART_CheckIdleState>
 8007992:	4603      	mov	r3, r0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08a      	sub	sp, #40	@ 0x28
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	603b      	str	r3, [r7, #0]
 80079a8:	4613      	mov	r3, r2
 80079aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079b2:	2b20      	cmp	r3, #32
 80079b4:	d17b      	bne.n	8007aae <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <HAL_UART_Transmit+0x26>
 80079bc:	88fb      	ldrh	r3, [r7, #6]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e074      	b.n	8007ab0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2221      	movs	r2, #33	@ 0x21
 80079d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079d6:	f7fa f991 	bl	8001cfc <HAL_GetTick>
 80079da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	88fa      	ldrh	r2, [r7, #6]
 80079e0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	88fa      	ldrh	r2, [r7, #6]
 80079e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079f4:	d108      	bne.n	8007a08 <HAL_UART_Transmit+0x6c>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d104      	bne.n	8007a08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80079fe:	2300      	movs	r3, #0
 8007a00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	61bb      	str	r3, [r7, #24]
 8007a06:	e003      	b.n	8007a10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a10:	e030      	b.n	8007a74 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2180      	movs	r1, #128	@ 0x80
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f001 f823 	bl	8008a68 <UART_WaitOnFlagUntilTimeout>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e03d      	b.n	8007ab0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10b      	bne.n	8007a52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	881a      	ldrh	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a46:	b292      	uxth	r2, r2
 8007a48:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	61bb      	str	r3, [r7, #24]
 8007a50:	e007      	b.n	8007a62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a52:	69fb      	ldr	r3, [r7, #28]
 8007a54:	781a      	ldrb	r2, [r3, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1c8      	bne.n	8007a12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2200      	movs	r2, #0
 8007a88:	2140      	movs	r1, #64	@ 0x40
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 ffec 	bl	8008a68 <UART_WaitOnFlagUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e006      	b.n	8007ab0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e000      	b.n	8007ab0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007aae:	2302      	movs	r3, #2
  }
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3720      	adds	r7, #32
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08a      	sub	sp, #40	@ 0x28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007acc:	2b20      	cmp	r3, #32
 8007ace:	d137      	bne.n	8007b40 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <HAL_UART_Receive_IT+0x24>
 8007ad6:	88fb      	ldrh	r3, [r7, #6]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e030      	b.n	8007b42 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a18      	ldr	r2, [pc, #96]	@ (8007b4c <HAL_UART_Receive_IT+0x94>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d01f      	beq.n	8007b30 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d018      	beq.n	8007b30 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1c:	623b      	str	r3, [r7, #32]
 8007b1e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	69f9      	ldr	r1, [r7, #28]
 8007b22:	6a3a      	ldr	r2, [r7, #32]
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e6      	bne.n	8007afe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b30:	88fb      	ldrh	r3, [r7, #6]
 8007b32:	461a      	mov	r2, r3
 8007b34:	68b9      	ldr	r1, [r7, #8]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fffe 	bl	8008b38 <UART_Start_Receive_IT>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	e000      	b.n	8007b42 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b40:	2302      	movs	r3, #2
  }
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3728      	adds	r7, #40	@ 0x28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	40008000 	.word	0x40008000

08007b50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b0ba      	sub	sp, #232	@ 0xe8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007b7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007b7e:	4013      	ands	r3, r2
 8007b80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007b84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d11b      	bne.n	8007bc4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b90:	f003 0320 	and.w	r3, r3, #32
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d015      	beq.n	8007bc4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b9c:	f003 0320 	and.w	r3, r3, #32
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d105      	bne.n	8007bb0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d009      	beq.n	8007bc4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f000 82e3 	beq.w	8008180 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
      }
      return;
 8007bc2:	e2dd      	b.n	8008180 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8007bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 8123 	beq.w	8007e14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007bce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007bd2:	4b8d      	ldr	r3, [pc, #564]	@ (8007e08 <HAL_UART_IRQHandler+0x2b8>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d106      	bne.n	8007be8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007bda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007bde:	4b8b      	ldr	r3, [pc, #556]	@ (8007e0c <HAL_UART_IRQHandler+0x2bc>)
 8007be0:	4013      	ands	r3, r2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 8116 	beq.w	8007e14 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bec:	f003 0301 	and.w	r3, r3, #1
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d011      	beq.n	8007c18 <HAL_UART_IRQHandler+0xc8>
 8007bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00b      	beq.n	8007c18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2201      	movs	r2, #1
 8007c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c0e:	f043 0201 	orr.w	r2, r3, #1
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d011      	beq.n	8007c48 <HAL_UART_IRQHandler+0xf8>
 8007c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2202      	movs	r2, #2
 8007c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c3e:	f043 0204 	orr.w	r2, r3, #4
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c4c:	f003 0304 	and.w	r3, r3, #4
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d011      	beq.n	8007c78 <HAL_UART_IRQHandler+0x128>
 8007c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00b      	beq.n	8007c78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2204      	movs	r2, #4
 8007c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6e:	f043 0202 	orr.w	r2, r3, #2
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d017      	beq.n	8007cb4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d105      	bne.n	8007c9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007c94:	4b5c      	ldr	r3, [pc, #368]	@ (8007e08 <HAL_UART_IRQHandler+0x2b8>)
 8007c96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00b      	beq.n	8007cb4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007caa:	f043 0208 	orr.w	r2, r3, #8
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d012      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x196>
 8007cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00c      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cdc:	f043 0220 	orr.w	r2, r3, #32
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 8249 	beq.w	8008184 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d013      	beq.n	8007d26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d105      	bne.n	8007d16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d007      	beq.n	8007d26 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d3a:	2b40      	cmp	r3, #64	@ 0x40
 8007d3c:	d005      	beq.n	8007d4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007d42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d054      	beq.n	8007df4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f001 f816 	bl	8008d7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d5a:	2b40      	cmp	r3, #64	@ 0x40
 8007d5c:	d146      	bne.n	8007dec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3308      	adds	r3, #8
 8007d64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3308      	adds	r3, #8
 8007d86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d9a:	e841 2300 	strex	r3, r2, [r1]
 8007d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1d9      	bne.n	8007d5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d017      	beq.n	8007de4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dba:	4a15      	ldr	r2, [pc, #84]	@ (8007e10 <HAL_UART_IRQHandler+0x2c0>)
 8007dbc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fb fe34 	bl	8003a32 <HAL_DMA_Abort_IT>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d019      	beq.n	8007e04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007dde:	4610      	mov	r0, r2
 8007de0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de2:	e00f      	b.n	8007e04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f9e1 	bl	80081ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dea:	e00b      	b.n	8007e04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f9dd 	bl	80081ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df2:	e007      	b.n	8007e04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f9d9 	bl	80081ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007e02:	e1bf      	b.n	8008184 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e04:	bf00      	nop
    return;
 8007e06:	e1bd      	b.n	8008184 <HAL_UART_IRQHandler+0x634>
 8007e08:	10000001 	.word	0x10000001
 8007e0c:	04000120 	.word	0x04000120
 8007e10:	08008e49 	.word	0x08008e49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	f040 8153 	bne.w	80080c4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e22:	f003 0310 	and.w	r3, r3, #16
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 814c 	beq.w	80080c4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e30:	f003 0310 	and.w	r3, r3, #16
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 8145 	beq.w	80080c4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2210      	movs	r2, #16
 8007e40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e4c:	2b40      	cmp	r3, #64	@ 0x40
 8007e4e:	f040 80bb 	bne.w	8007fc8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f000 818f 	beq.w	8008188 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e74:	429a      	cmp	r2, r3
 8007e76:	f080 8187 	bcs.w	8008188 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0320 	and.w	r3, r3, #32
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f040 8087 	bne.w	8007fa6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007eb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ec6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1da      	bne.n	8007e98 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ef4:	f023 0301 	bic.w	r3, r3, #1
 8007ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3308      	adds	r3, #8
 8007f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e1      	bne.n	8007ee2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3308      	adds	r3, #8
 8007f24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f28:	e853 3f00 	ldrex	r3, [r3]
 8007f2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3308      	adds	r3, #8
 8007f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007f42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007f44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007f4a:	e841 2300 	strex	r3, r2, [r1]
 8007f4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1e3      	bne.n	8007f1e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f6c:	e853 3f00 	ldrex	r3, [r3]
 8007f70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f74:	f023 0310 	bic.w	r3, r3, #16
 8007f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f8e:	e841 2300 	strex	r3, r2, [r1]
 8007f92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1e4      	bne.n	8007f64 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fb fcea 	bl	800397a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f8fd 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007fc6:	e0df      	b.n	8008188 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 80d1 	beq.w	800818c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007fea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 80cc 	beq.w	800818c <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ffc:	e853 3f00 	ldrex	r3, [r3]
 8008000:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008008:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	461a      	mov	r2, r3
 8008012:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008016:	647b      	str	r3, [r7, #68]	@ 0x44
 8008018:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800801c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800801e:	e841 2300 	strex	r3, r2, [r1]
 8008022:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008026:	2b00      	cmp	r3, #0
 8008028:	d1e4      	bne.n	8007ff4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3308      	adds	r3, #8
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	623b      	str	r3, [r7, #32]
   return(result);
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008040:	f023 0301 	bic.w	r3, r3, #1
 8008044:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3308      	adds	r3, #8
 800804e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008052:	633a      	str	r2, [r7, #48]	@ 0x30
 8008054:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e1      	bne.n	800802a <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2220      	movs	r2, #32
 800806a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	e853 3f00 	ldrex	r3, [r3]
 8008086:	60fb      	str	r3, [r7, #12]
   return(result);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 0310 	bic.w	r3, r3, #16
 800808e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800809c:	61fb      	str	r3, [r7, #28]
 800809e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	69b9      	ldr	r1, [r7, #24]
 80080a2:	69fa      	ldr	r2, [r7, #28]
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	617b      	str	r3, [r7, #20]
   return(result);
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e4      	bne.n	800807a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f87f 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080c2:	e063      	b.n	800818c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00e      	beq.n	80080ee <HAL_UART_IRQHandler+0x59e>
 80080d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d008      	beq.n	80080ee <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80080e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f001 fc14 	bl	8009914 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080ec:	e051      	b.n	8008192 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d014      	beq.n	8008124 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008102:	2b00      	cmp	r3, #0
 8008104:	d105      	bne.n	8008112 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800810a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d008      	beq.n	8008124 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008116:	2b00      	cmp	r3, #0
 8008118:	d03a      	beq.n	8008190 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	4798      	blx	r3
    }
    return;
 8008122:	e035      	b.n	8008190 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800812c:	2b00      	cmp	r3, #0
 800812e:	d009      	beq.n	8008144 <HAL_UART_IRQHandler+0x5f4>
 8008130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fe99 	bl	8008e74 <UART_EndTransmit_IT>
    return;
 8008142:	e026      	b.n	8008192 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008148:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d009      	beq.n	8008164 <HAL_UART_IRQHandler+0x614>
 8008150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008154:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 fbed 	bl	800993c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008162:	e016      	b.n	8008192 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008168:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d010      	beq.n	8008192 <HAL_UART_IRQHandler+0x642>
 8008170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008174:	2b00      	cmp	r3, #0
 8008176:	da0c      	bge.n	8008192 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 fbd5 	bl	8009928 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800817e:	e008      	b.n	8008192 <HAL_UART_IRQHandler+0x642>
      return;
 8008180:	bf00      	nop
 8008182:	e006      	b.n	8008192 <HAL_UART_IRQHandler+0x642>
    return;
 8008184:	bf00      	nop
 8008186:	e004      	b.n	8008192 <HAL_UART_IRQHandler+0x642>
      return;
 8008188:	bf00      	nop
 800818a:	e002      	b.n	8008192 <HAL_UART_IRQHandler+0x642>
      return;
 800818c:	bf00      	nop
 800818e:	e000      	b.n	8008192 <HAL_UART_IRQHandler+0x642>
    return;
 8008190:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8008192:	37e8      	adds	r7, #232	@ 0xe8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081dc:	b08c      	sub	sp, #48	@ 0x30
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	431a      	orrs	r2, r3
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	69db      	ldr	r3, [r3, #28]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	4baa      	ldr	r3, [pc, #680]	@ (80084b0 <UART_SetConfig+0x2d8>)
 8008208:	4013      	ands	r3, r2
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	6812      	ldr	r2, [r2, #0]
 800820e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008210:	430b      	orrs	r3, r1
 8008212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a9f      	ldr	r2, [pc, #636]	@ (80084b4 <UART_SetConfig+0x2dc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d004      	beq.n	8008244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008240:	4313      	orrs	r3, r2
 8008242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800824e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	6812      	ldr	r2, [r2, #0]
 8008256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008258:	430b      	orrs	r3, r1
 800825a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008262:	f023 010f 	bic.w	r1, r3, #15
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a90      	ldr	r2, [pc, #576]	@ (80084b8 <UART_SetConfig+0x2e0>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d125      	bne.n	80082c8 <UART_SetConfig+0xf0>
 800827c:	4b8f      	ldr	r3, [pc, #572]	@ (80084bc <UART_SetConfig+0x2e4>)
 800827e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b03      	cmp	r3, #3
 8008288:	d81a      	bhi.n	80082c0 <UART_SetConfig+0xe8>
 800828a:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <UART_SetConfig+0xb8>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082b1 	.word	0x080082b1
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082b9 	.word	0x080082b9
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a6:	e116      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082a8:	2302      	movs	r3, #2
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ae:	e112      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082b0:	2304      	movs	r3, #4
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082b6:	e10e      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082b8:	2308      	movs	r3, #8
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082be:	e10a      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082c0:	2310      	movs	r3, #16
 80082c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082c6:	e106      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a7c      	ldr	r2, [pc, #496]	@ (80084c0 <UART_SetConfig+0x2e8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d138      	bne.n	8008344 <UART_SetConfig+0x16c>
 80082d2:	4b7a      	ldr	r3, [pc, #488]	@ (80084bc <UART_SetConfig+0x2e4>)
 80082d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082d8:	f003 030c 	and.w	r3, r3, #12
 80082dc:	2b0c      	cmp	r3, #12
 80082de:	d82d      	bhi.n	800833c <UART_SetConfig+0x164>
 80082e0:	a201      	add	r2, pc, #4	@ (adr r2, 80082e8 <UART_SetConfig+0x110>)
 80082e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e6:	bf00      	nop
 80082e8:	0800831d 	.word	0x0800831d
 80082ec:	0800833d 	.word	0x0800833d
 80082f0:	0800833d 	.word	0x0800833d
 80082f4:	0800833d 	.word	0x0800833d
 80082f8:	0800832d 	.word	0x0800832d
 80082fc:	0800833d 	.word	0x0800833d
 8008300:	0800833d 	.word	0x0800833d
 8008304:	0800833d 	.word	0x0800833d
 8008308:	08008325 	.word	0x08008325
 800830c:	0800833d 	.word	0x0800833d
 8008310:	0800833d 	.word	0x0800833d
 8008314:	0800833d 	.word	0x0800833d
 8008318:	08008335 	.word	0x08008335
 800831c:	2300      	movs	r3, #0
 800831e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008322:	e0d8      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008324:	2302      	movs	r3, #2
 8008326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800832a:	e0d4      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800832c:	2304      	movs	r3, #4
 800832e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008332:	e0d0      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008334:	2308      	movs	r3, #8
 8008336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800833a:	e0cc      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800833c:	2310      	movs	r3, #16
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008342:	e0c8      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a5e      	ldr	r2, [pc, #376]	@ (80084c4 <UART_SetConfig+0x2ec>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d125      	bne.n	800839a <UART_SetConfig+0x1c2>
 800834e:	4b5b      	ldr	r3, [pc, #364]	@ (80084bc <UART_SetConfig+0x2e4>)
 8008350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008354:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008358:	2b30      	cmp	r3, #48	@ 0x30
 800835a:	d016      	beq.n	800838a <UART_SetConfig+0x1b2>
 800835c:	2b30      	cmp	r3, #48	@ 0x30
 800835e:	d818      	bhi.n	8008392 <UART_SetConfig+0x1ba>
 8008360:	2b20      	cmp	r3, #32
 8008362:	d00a      	beq.n	800837a <UART_SetConfig+0x1a2>
 8008364:	2b20      	cmp	r3, #32
 8008366:	d814      	bhi.n	8008392 <UART_SetConfig+0x1ba>
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <UART_SetConfig+0x19a>
 800836c:	2b10      	cmp	r3, #16
 800836e:	d008      	beq.n	8008382 <UART_SetConfig+0x1aa>
 8008370:	e00f      	b.n	8008392 <UART_SetConfig+0x1ba>
 8008372:	2300      	movs	r3, #0
 8008374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008378:	e0ad      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800837a:	2302      	movs	r3, #2
 800837c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008380:	e0a9      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008382:	2304      	movs	r3, #4
 8008384:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008388:	e0a5      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800838a:	2308      	movs	r3, #8
 800838c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008390:	e0a1      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008392:	2310      	movs	r3, #16
 8008394:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008398:	e09d      	b.n	80084d6 <UART_SetConfig+0x2fe>
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a4a      	ldr	r2, [pc, #296]	@ (80084c8 <UART_SetConfig+0x2f0>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d125      	bne.n	80083f0 <UART_SetConfig+0x218>
 80083a4:	4b45      	ldr	r3, [pc, #276]	@ (80084bc <UART_SetConfig+0x2e4>)
 80083a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80083ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80083b0:	d016      	beq.n	80083e0 <UART_SetConfig+0x208>
 80083b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80083b4:	d818      	bhi.n	80083e8 <UART_SetConfig+0x210>
 80083b6:	2b80      	cmp	r3, #128	@ 0x80
 80083b8:	d00a      	beq.n	80083d0 <UART_SetConfig+0x1f8>
 80083ba:	2b80      	cmp	r3, #128	@ 0x80
 80083bc:	d814      	bhi.n	80083e8 <UART_SetConfig+0x210>
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d002      	beq.n	80083c8 <UART_SetConfig+0x1f0>
 80083c2:	2b40      	cmp	r3, #64	@ 0x40
 80083c4:	d008      	beq.n	80083d8 <UART_SetConfig+0x200>
 80083c6:	e00f      	b.n	80083e8 <UART_SetConfig+0x210>
 80083c8:	2300      	movs	r3, #0
 80083ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ce:	e082      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083d0:	2302      	movs	r3, #2
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083d6:	e07e      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083d8:	2304      	movs	r3, #4
 80083da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083de:	e07a      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083e0:	2308      	movs	r3, #8
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083e6:	e076      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083e8:	2310      	movs	r3, #16
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ee:	e072      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a35      	ldr	r2, [pc, #212]	@ (80084cc <UART_SetConfig+0x2f4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d12a      	bne.n	8008450 <UART_SetConfig+0x278>
 80083fa:	4b30      	ldr	r3, [pc, #192]	@ (80084bc <UART_SetConfig+0x2e4>)
 80083fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008400:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008408:	d01a      	beq.n	8008440 <UART_SetConfig+0x268>
 800840a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800840e:	d81b      	bhi.n	8008448 <UART_SetConfig+0x270>
 8008410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008414:	d00c      	beq.n	8008430 <UART_SetConfig+0x258>
 8008416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800841a:	d815      	bhi.n	8008448 <UART_SetConfig+0x270>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <UART_SetConfig+0x250>
 8008420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008424:	d008      	beq.n	8008438 <UART_SetConfig+0x260>
 8008426:	e00f      	b.n	8008448 <UART_SetConfig+0x270>
 8008428:	2300      	movs	r3, #0
 800842a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800842e:	e052      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008430:	2302      	movs	r3, #2
 8008432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008436:	e04e      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008438:	2304      	movs	r3, #4
 800843a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800843e:	e04a      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008440:	2308      	movs	r3, #8
 8008442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008446:	e046      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008448:	2310      	movs	r3, #16
 800844a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800844e:	e042      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a17      	ldr	r2, [pc, #92]	@ (80084b4 <UART_SetConfig+0x2dc>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d13a      	bne.n	80084d0 <UART_SetConfig+0x2f8>
 800845a:	4b18      	ldr	r3, [pc, #96]	@ (80084bc <UART_SetConfig+0x2e4>)
 800845c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008460:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008464:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008468:	d01a      	beq.n	80084a0 <UART_SetConfig+0x2c8>
 800846a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800846e:	d81b      	bhi.n	80084a8 <UART_SetConfig+0x2d0>
 8008470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008474:	d00c      	beq.n	8008490 <UART_SetConfig+0x2b8>
 8008476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800847a:	d815      	bhi.n	80084a8 <UART_SetConfig+0x2d0>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <UART_SetConfig+0x2b0>
 8008480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008484:	d008      	beq.n	8008498 <UART_SetConfig+0x2c0>
 8008486:	e00f      	b.n	80084a8 <UART_SetConfig+0x2d0>
 8008488:	2300      	movs	r3, #0
 800848a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800848e:	e022      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008490:	2302      	movs	r3, #2
 8008492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008496:	e01e      	b.n	80084d6 <UART_SetConfig+0x2fe>
 8008498:	2304      	movs	r3, #4
 800849a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800849e:	e01a      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80084a0:	2308      	movs	r3, #8
 80084a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084a6:	e016      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80084a8:	2310      	movs	r3, #16
 80084aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ae:	e012      	b.n	80084d6 <UART_SetConfig+0x2fe>
 80084b0:	cfff69f3 	.word	0xcfff69f3
 80084b4:	40008000 	.word	0x40008000
 80084b8:	40013800 	.word	0x40013800
 80084bc:	40021000 	.word	0x40021000
 80084c0:	40004400 	.word	0x40004400
 80084c4:	40004800 	.word	0x40004800
 80084c8:	40004c00 	.word	0x40004c00
 80084cc:	40005000 	.word	0x40005000
 80084d0:	2310      	movs	r3, #16
 80084d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4aae      	ldr	r2, [pc, #696]	@ (8008794 <UART_SetConfig+0x5bc>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	f040 8097 	bne.w	8008610 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80084e6:	2b08      	cmp	r3, #8
 80084e8:	d823      	bhi.n	8008532 <UART_SetConfig+0x35a>
 80084ea:	a201      	add	r2, pc, #4	@ (adr r2, 80084f0 <UART_SetConfig+0x318>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008515 	.word	0x08008515
 80084f4:	08008533 	.word	0x08008533
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	08008533 	.word	0x08008533
 8008500:	08008523 	.word	0x08008523
 8008504:	08008533 	.word	0x08008533
 8008508:	08008533 	.word	0x08008533
 800850c:	08008533 	.word	0x08008533
 8008510:	0800852b 	.word	0x0800852b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008514:	f7fd fef0 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 8008518:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800851a:	e010      	b.n	800853e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800851c:	4b9e      	ldr	r3, [pc, #632]	@ (8008798 <UART_SetConfig+0x5c0>)
 800851e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008520:	e00d      	b.n	800853e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008522:	f7fd fe51 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 8008526:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008528:	e009      	b.n	800853e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800852a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800852e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008530:	e005      	b.n	800853e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800853c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800853e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8130 	beq.w	80087a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800854a:	4a94      	ldr	r2, [pc, #592]	@ (800879c <UART_SetConfig+0x5c4>)
 800854c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008550:	461a      	mov	r2, r3
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	fbb3 f3f2 	udiv	r3, r3, r2
 8008558:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	685a      	ldr	r2, [r3, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	4413      	add	r3, r2
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	429a      	cmp	r2, r3
 8008568:	d305      	bcc.n	8008576 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	429a      	cmp	r2, r3
 8008574:	d903      	bls.n	800857e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800857c:	e113      	b.n	80087a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800857e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008580:	2200      	movs	r2, #0
 8008582:	60bb      	str	r3, [r7, #8]
 8008584:	60fa      	str	r2, [r7, #12]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800858a:	4a84      	ldr	r2, [pc, #528]	@ (800879c <UART_SetConfig+0x5c4>)
 800858c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008590:	b29b      	uxth	r3, r3
 8008592:	2200      	movs	r2, #0
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	607a      	str	r2, [r7, #4]
 8008598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800859c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085a0:	f7f7 fe2c 	bl	80001fc <__aeabi_uldivmod>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4610      	mov	r0, r2
 80085aa:	4619      	mov	r1, r3
 80085ac:	f04f 0200 	mov.w	r2, #0
 80085b0:	f04f 0300 	mov.w	r3, #0
 80085b4:	020b      	lsls	r3, r1, #8
 80085b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085ba:	0202      	lsls	r2, r0, #8
 80085bc:	6979      	ldr	r1, [r7, #20]
 80085be:	6849      	ldr	r1, [r1, #4]
 80085c0:	0849      	lsrs	r1, r1, #1
 80085c2:	2000      	movs	r0, #0
 80085c4:	460c      	mov	r4, r1
 80085c6:	4605      	mov	r5, r0
 80085c8:	eb12 0804 	adds.w	r8, r2, r4
 80085cc:	eb43 0905 	adc.w	r9, r3, r5
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	469a      	mov	sl, r3
 80085d8:	4693      	mov	fp, r2
 80085da:	4652      	mov	r2, sl
 80085dc:	465b      	mov	r3, fp
 80085de:	4640      	mov	r0, r8
 80085e0:	4649      	mov	r1, r9
 80085e2:	f7f7 fe0b 	bl	80001fc <__aeabi_uldivmod>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4613      	mov	r3, r2
 80085ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085f4:	d308      	bcc.n	8008608 <UART_SetConfig+0x430>
 80085f6:	6a3b      	ldr	r3, [r7, #32]
 80085f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085fc:	d204      	bcs.n	8008608 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6a3a      	ldr	r2, [r7, #32]
 8008604:	60da      	str	r2, [r3, #12]
 8008606:	e0ce      	b.n	80087a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800860e:	e0ca      	b.n	80087a6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	69db      	ldr	r3, [r3, #28]
 8008614:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008618:	d166      	bne.n	80086e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800861a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800861e:	2b08      	cmp	r3, #8
 8008620:	d827      	bhi.n	8008672 <UART_SetConfig+0x49a>
 8008622:	a201      	add	r2, pc, #4	@ (adr r2, 8008628 <UART_SetConfig+0x450>)
 8008624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008628:	0800864d 	.word	0x0800864d
 800862c:	08008655 	.word	0x08008655
 8008630:	0800865d 	.word	0x0800865d
 8008634:	08008673 	.word	0x08008673
 8008638:	08008663 	.word	0x08008663
 800863c:	08008673 	.word	0x08008673
 8008640:	08008673 	.word	0x08008673
 8008644:	08008673 	.word	0x08008673
 8008648:	0800866b 	.word	0x0800866b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800864c:	f7fd fe54 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 8008650:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008652:	e014      	b.n	800867e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008654:	f7fd fe66 	bl	8006324 <HAL_RCC_GetPCLK2Freq>
 8008658:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800865a:	e010      	b.n	800867e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800865c:	4b4e      	ldr	r3, [pc, #312]	@ (8008798 <UART_SetConfig+0x5c0>)
 800865e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008660:	e00d      	b.n	800867e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008662:	f7fd fdb1 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 8008666:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008668:	e009      	b.n	800867e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800866a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800866e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008670:	e005      	b.n	800867e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800867c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800867e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 8090 	beq.w	80087a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868a:	4a44      	ldr	r2, [pc, #272]	@ (800879c <UART_SetConfig+0x5c4>)
 800868c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008690:	461a      	mov	r2, r3
 8008692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008694:	fbb3 f3f2 	udiv	r3, r3, r2
 8008698:	005a      	lsls	r2, r3, #1
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	085b      	lsrs	r3, r3, #1
 80086a0:	441a      	add	r2, r3
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	2b0f      	cmp	r3, #15
 80086b0:	d916      	bls.n	80086e0 <UART_SetConfig+0x508>
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086b8:	d212      	bcs.n	80086e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086ba:	6a3b      	ldr	r3, [r7, #32]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	f023 030f 	bic.w	r3, r3, #15
 80086c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	085b      	lsrs	r3, r3, #1
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	8bfb      	ldrh	r3, [r7, #30]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	8bfa      	ldrh	r2, [r7, #30]
 80086dc:	60da      	str	r2, [r3, #12]
 80086de:	e062      	b.n	80087a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80086e6:	e05e      	b.n	80087a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d828      	bhi.n	8008742 <UART_SetConfig+0x56a>
 80086f0:	a201      	add	r2, pc, #4	@ (adr r2, 80086f8 <UART_SetConfig+0x520>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	0800871d 	.word	0x0800871d
 80086fc:	08008725 	.word	0x08008725
 8008700:	0800872d 	.word	0x0800872d
 8008704:	08008743 	.word	0x08008743
 8008708:	08008733 	.word	0x08008733
 800870c:	08008743 	.word	0x08008743
 8008710:	08008743 	.word	0x08008743
 8008714:	08008743 	.word	0x08008743
 8008718:	0800873b 	.word	0x0800873b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800871c:	f7fd fdec 	bl	80062f8 <HAL_RCC_GetPCLK1Freq>
 8008720:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008722:	e014      	b.n	800874e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008724:	f7fd fdfe 	bl	8006324 <HAL_RCC_GetPCLK2Freq>
 8008728:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800872a:	e010      	b.n	800874e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800872c:	4b1a      	ldr	r3, [pc, #104]	@ (8008798 <UART_SetConfig+0x5c0>)
 800872e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008730:	e00d      	b.n	800874e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008732:	f7fd fd49 	bl	80061c8 <HAL_RCC_GetSysClockFreq>
 8008736:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008738:	e009      	b.n	800874e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800873a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800873e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008740:	e005      	b.n	800874e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800874c:	bf00      	nop
    }

    if (pclk != 0U)
 800874e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	d028      	beq.n	80087a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008758:	4a10      	ldr	r2, [pc, #64]	@ (800879c <UART_SetConfig+0x5c4>)
 800875a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800875e:	461a      	mov	r2, r3
 8008760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008762:	fbb3 f2f2 	udiv	r2, r3, r2
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	085b      	lsrs	r3, r3, #1
 800876c:	441a      	add	r2, r3
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	fbb2 f3f3 	udiv	r3, r2, r3
 8008776:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	2b0f      	cmp	r3, #15
 800877c:	d910      	bls.n	80087a0 <UART_SetConfig+0x5c8>
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008784:	d20c      	bcs.n	80087a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	b29a      	uxth	r2, r3
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60da      	str	r2, [r3, #12]
 8008790:	e009      	b.n	80087a6 <UART_SetConfig+0x5ce>
 8008792:	bf00      	nop
 8008794:	40008000 	.word	0x40008000
 8008798:	00f42400 	.word	0x00f42400
 800879c:	0800dde0 	.word	0x0800dde0
      }
      else
      {
        ret = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2200      	movs	r2, #0
 80087ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2200      	movs	r2, #0
 80087c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80087c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3730      	adds	r7, #48	@ 0x30
 80087ca:	46bd      	mov	sp, r7
 80087cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080087d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087dc:	f003 0308 	and.w	r3, r3, #8
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00a      	beq.n	80087fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008842:	f003 0304 	and.w	r3, r3, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008864:	f003 0310 	and.w	r3, r3, #16
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	430a      	orrs	r2, r1
 8008880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008886:	f003 0320 	and.w	r3, r3, #32
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01a      	beq.n	80088e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088ce:	d10a      	bne.n	80088e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	605a      	str	r2, [r3, #4]
  }
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b098      	sub	sp, #96	@ 0x60
 8008918:	af02      	add	r7, sp, #8
 800891a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008924:	f7f9 f9ea 	bl	8001cfc <HAL_GetTick>
 8008928:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0308 	and.w	r3, r3, #8
 8008934:	2b08      	cmp	r3, #8
 8008936:	d12f      	bne.n	8008998 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008938:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008940:	2200      	movs	r2, #0
 8008942:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f88e 	bl	8008a68 <UART_WaitOnFlagUntilTimeout>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d022      	beq.n	8008998 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895a:	e853 3f00 	ldrex	r3, [r3]
 800895e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008962:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008966:	653b      	str	r3, [r7, #80]	@ 0x50
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	461a      	mov	r2, r3
 800896e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008970:	647b      	str	r3, [r7, #68]	@ 0x44
 8008972:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008974:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008978:	e841 2300 	strex	r3, r2, [r1]
 800897c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800897e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e6      	bne.n	8008952 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2220      	movs	r2, #32
 8008988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e063      	b.n	8008a60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f003 0304 	and.w	r3, r3, #4
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d149      	bne.n	8008a3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089ae:	2200      	movs	r2, #0
 80089b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f857 	bl	8008a68 <UART_WaitOnFlagUntilTimeout>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d03c      	beq.n	8008a3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	623b      	str	r3, [r7, #32]
   return(result);
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089de:	633b      	str	r3, [r7, #48]	@ 0x30
 80089e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e6      	bne.n	80089c0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3308      	adds	r3, #8
 80089f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f023 0301 	bic.w	r3, r3, #1
 8008a08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3308      	adds	r3, #8
 8008a10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a12:	61fa      	str	r2, [r7, #28]
 8008a14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	69b9      	ldr	r1, [r7, #24]
 8008a18:	69fa      	ldr	r2, [r7, #28]
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	617b      	str	r3, [r7, #20]
   return(result);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e5      	bne.n	80089f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e012      	b.n	8008a60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3758      	adds	r7, #88	@ 0x58
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	603b      	str	r3, [r7, #0]
 8008a74:	4613      	mov	r3, r2
 8008a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a78:	e049      	b.n	8008b0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a80:	d045      	beq.n	8008b0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a82:	f7f9 f93b 	bl	8001cfc <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d302      	bcc.n	8008a98 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a92:	69bb      	ldr	r3, [r7, #24]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d101      	bne.n	8008a9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e048      	b.n	8008b2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d031      	beq.n	8008b0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	f003 0308 	and.w	r3, r3, #8
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d110      	bne.n	8008ada <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2208      	movs	r2, #8
 8008abe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 f95b 	bl	8008d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2208      	movs	r2, #8
 8008aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e029      	b.n	8008b2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ae8:	d111      	bne.n	8008b0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 f941 	bl	8008d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2220      	movs	r2, #32
 8008afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e00f      	b.n	8008b2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69da      	ldr	r2, [r3, #28]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	4013      	ands	r3, r2
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	bf0c      	ite	eq
 8008b1e:	2301      	moveq	r3, #1
 8008b20:	2300      	movne	r3, #0
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	461a      	mov	r2, r3
 8008b26:	79fb      	ldrb	r3, [r7, #7]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d0a6      	beq.n	8008a7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b0a3      	sub	sp, #140	@ 0x8c
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	4613      	mov	r3, r2
 8008b44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	88fa      	ldrh	r2, [r7, #6]
 8008b50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	88fa      	ldrh	r2, [r7, #6]
 8008b58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b6a:	d10e      	bne.n	8008b8a <UART_Start_Receive_IT+0x52>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d105      	bne.n	8008b80 <UART_Start_Receive_IT+0x48>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008b7a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b7e:	e02d      	b.n	8008bdc <UART_Start_Receive_IT+0xa4>
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	22ff      	movs	r2, #255	@ 0xff
 8008b84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008b88:	e028      	b.n	8008bdc <UART_Start_Receive_IT+0xa4>
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d10d      	bne.n	8008bae <UART_Start_Receive_IT+0x76>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	691b      	ldr	r3, [r3, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d104      	bne.n	8008ba4 <UART_Start_Receive_IT+0x6c>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	22ff      	movs	r2, #255	@ 0xff
 8008b9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ba2:	e01b      	b.n	8008bdc <UART_Start_Receive_IT+0xa4>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	227f      	movs	r2, #127	@ 0x7f
 8008ba8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bac:	e016      	b.n	8008bdc <UART_Start_Receive_IT+0xa4>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bb6:	d10d      	bne.n	8008bd4 <UART_Start_Receive_IT+0x9c>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d104      	bne.n	8008bca <UART_Start_Receive_IT+0x92>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	227f      	movs	r2, #127	@ 0x7f
 8008bc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bc8:	e008      	b.n	8008bdc <UART_Start_Receive_IT+0xa4>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	223f      	movs	r2, #63	@ 0x3f
 8008bce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008bd2:	e003      	b.n	8008bdc <UART_Start_Receive_IT+0xa4>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2222      	movs	r2, #34	@ 0x22
 8008be8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bf6:	e853 3f00 	ldrex	r3, [r3]
 8008bfa:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008bfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008bfe:	f043 0301 	orr.w	r3, r3, #1
 8008c02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3308      	adds	r3, #8
 8008c0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008c10:	673a      	str	r2, [r7, #112]	@ 0x70
 8008c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008c16:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008c18:	e841 2300 	strex	r3, r2, [r1]
 8008c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008c1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1e3      	bne.n	8008bec <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c2c:	d14f      	bne.n	8008cce <UART_Start_Receive_IT+0x196>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008c34:	88fa      	ldrh	r2, [r7, #6]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d349      	bcc.n	8008cce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c42:	d107      	bne.n	8008c54 <UART_Start_Receive_IT+0x11c>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d103      	bne.n	8008c54 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4a47      	ldr	r2, [pc, #284]	@ (8008d6c <UART_Start_Receive_IT+0x234>)
 8008c50:	675a      	str	r2, [r3, #116]	@ 0x74
 8008c52:	e002      	b.n	8008c5a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	4a46      	ldr	r2, [pc, #280]	@ (8008d70 <UART_Start_Receive_IT+0x238>)
 8008c58:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d01a      	beq.n	8008c98 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c6a:	e853 3f00 	ldrex	r3, [r3]
 8008c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c86:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c88:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008c8a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008c8c:	e841 2300 	strex	r3, r2, [r1]
 8008c90:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e4      	bne.n	8008c62 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008cb8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008cba:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cc0:	e841 2300 	strex	r3, r2, [r1]
 8008cc4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e5      	bne.n	8008c98 <UART_Start_Receive_IT+0x160>
 8008ccc:	e046      	b.n	8008d5c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cd6:	d107      	bne.n	8008ce8 <UART_Start_Receive_IT+0x1b0>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d103      	bne.n	8008ce8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4a24      	ldr	r2, [pc, #144]	@ (8008d74 <UART_Start_Receive_IT+0x23c>)
 8008ce4:	675a      	str	r2, [r3, #116]	@ 0x74
 8008ce6:	e002      	b.n	8008cee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4a23      	ldr	r2, [pc, #140]	@ (8008d78 <UART_Start_Receive_IT+0x240>)
 8008cec:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d019      	beq.n	8008d2a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cfe:	e853 3f00 	ldrex	r3, [r3]
 8008d02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d06:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008d0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d16:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008d1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d1c:	e841 2300 	strex	r3, r2, [r1]
 8008d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1e6      	bne.n	8008cf6 <UART_Start_Receive_IT+0x1be>
 8008d28:	e018      	b.n	8008d5c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	613b      	str	r3, [r7, #16]
   return(result);
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	f043 0320 	orr.w	r3, r3, #32
 8008d3e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	461a      	mov	r2, r3
 8008d46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d48:	623b      	str	r3, [r7, #32]
 8008d4a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	69f9      	ldr	r1, [r7, #28]
 8008d4e:	6a3a      	ldr	r2, [r7, #32]
 8008d50:	e841 2300 	strex	r3, r2, [r1]
 8008d54:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d56:	69bb      	ldr	r3, [r7, #24]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e6      	bne.n	8008d2a <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	378c      	adds	r7, #140	@ 0x8c
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	080095a9 	.word	0x080095a9
 8008d70:	08009245 	.word	0x08009245
 8008d74:	08009089 	.word	0x08009089
 8008d78:	08008ecd 	.word	0x08008ecd

08008d7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b095      	sub	sp, #84	@ 0x54
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	461a      	mov	r2, r3
 8008da0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008da2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008da4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008da8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008daa:	e841 2300 	strex	r3, r2, [r1]
 8008dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1e6      	bne.n	8008d84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3308      	adds	r3, #8
 8008dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	e853 3f00 	ldrex	r3, [r3]
 8008dc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008dcc:	f023 0301 	bic.w	r3, r3, #1
 8008dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008de0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008de2:	e841 2300 	strex	r3, r2, [r1]
 8008de6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1e3      	bne.n	8008db6 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d118      	bne.n	8008e28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	f023 0310 	bic.w	r3, r3, #16
 8008e0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e14:	61bb      	str	r3, [r7, #24]
 8008e16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	6979      	ldr	r1, [r7, #20]
 8008e1a:	69ba      	ldr	r2, [r7, #24]
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	613b      	str	r3, [r7, #16]
   return(result);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e6      	bne.n	8008df6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e3c:	bf00      	nop
 8008e3e:	3754      	adds	r7, #84	@ 0x54
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f7ff f9a0 	bl	80081ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e6c:	bf00      	nop
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	e853 3f00 	ldrex	r3, [r3]
 8008e88:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e90:	61fb      	str	r3, [r7, #28]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	461a      	mov	r2, r3
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	61bb      	str	r3, [r7, #24]
 8008e9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9e:	6979      	ldr	r1, [r7, #20]
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1e6      	bne.n	8008e7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff f96b 	bl	8008198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ec2:	bf00      	nop
 8008ec4:	3720      	adds	r7, #32
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b09c      	sub	sp, #112	@ 0x70
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008eda:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ee4:	2b22      	cmp	r3, #34	@ 0x22
 8008ee6:	f040 80be 	bne.w	8009066 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008ef0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ef4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008ef8:	b2d9      	uxtb	r1, r3
 8008efa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f04:	400a      	ands	r2, r1
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f040 80a3 	bne.w	800907a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f52:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f54:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e6      	bne.n	8008f34 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3308      	adds	r3, #8
 8008f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f78:	f023 0301 	bic.w	r3, r3, #1
 8008f7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3308      	adds	r3, #8
 8008f84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008f86:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1e5      	bne.n	8008f66 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a34      	ldr	r2, [pc, #208]	@ (8009084 <UART_RxISR_8BIT+0x1b8>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d01f      	beq.n	8008ff8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d018      	beq.n	8008ff8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	623b      	str	r3, [r7, #32]
   return(result);
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008fda:	663b      	str	r3, [r7, #96]	@ 0x60
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fe6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fec:	e841 2300 	strex	r3, r2, [r1]
 8008ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e6      	bne.n	8008fc6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d12e      	bne.n	800905e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	e853 3f00 	ldrex	r3, [r3]
 8009012:	60fb      	str	r3, [r7, #12]
   return(result);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f023 0310 	bic.w	r3, r3, #16
 800901a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	461a      	mov	r2, r3
 8009022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009024:	61fb      	str	r3, [r7, #28]
 8009026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	69b9      	ldr	r1, [r7, #24]
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	617b      	str	r3, [r7, #20]
   return(result);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e6      	bne.n	8009006 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	f003 0310 	and.w	r3, r3, #16
 8009042:	2b10      	cmp	r3, #16
 8009044:	d103      	bne.n	800904e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2210      	movs	r2, #16
 800904c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7ff f8b2 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800905c:	e00d      	b.n	800907a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f7f7 ff20 	bl	8000ea4 <HAL_UART_RxCpltCallback>
}
 8009064:	e009      	b.n	800907a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	8b1b      	ldrh	r3, [r3, #24]
 800906c:	b29a      	uxth	r2, r3
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f042 0208 	orr.w	r2, r2, #8
 8009076:	b292      	uxth	r2, r2
 8009078:	831a      	strh	r2, [r3, #24]
}
 800907a:	bf00      	nop
 800907c:	3770      	adds	r7, #112	@ 0x70
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	40008000 	.word	0x40008000

08009088 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b09c      	sub	sp, #112	@ 0x70
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009096:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090a0:	2b22      	cmp	r3, #34	@ 0x22
 80090a2:	f040 80be 	bne.w	8009222 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80090ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80090b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80090ba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80090be:	4013      	ands	r3, r2
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ca:	1c9a      	adds	r2, r3, #2
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29a      	uxth	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f040 80a3 	bne.w	8009236 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80090fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009100:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009104:	667b      	str	r3, [r7, #100]	@ 0x64
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800910e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009110:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009114:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800911c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e6      	bne.n	80090f0 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	f023 0301 	bic.w	r3, r3, #1
 8009138:	663b      	str	r3, [r7, #96]	@ 0x60
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3308      	adds	r3, #8
 8009140:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009142:	643a      	str	r2, [r7, #64]	@ 0x40
 8009144:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009148:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e5      	bne.n	8009122 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2220      	movs	r2, #32
 800915a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a34      	ldr	r2, [pc, #208]	@ (8009240 <UART_RxISR_16BIT+0x1b8>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d01f      	beq.n	80091b4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d018      	beq.n	80091b4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	6a3b      	ldr	r3, [r7, #32]
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009196:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	461a      	mov	r2, r3
 800919e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091a2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091a8:	e841 2300 	strex	r3, r2, [r1]
 80091ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1e6      	bne.n	8009182 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d12e      	bne.n	800921a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f023 0310 	bic.w	r3, r3, #16
 80091d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	461a      	mov	r2, r3
 80091de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80091e0:	61bb      	str	r3, [r7, #24]
 80091e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6979      	ldr	r1, [r7, #20]
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	613b      	str	r3, [r7, #16]
   return(result);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e6      	bne.n	80091c2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	f003 0310 	and.w	r3, r3, #16
 80091fe:	2b10      	cmp	r3, #16
 8009200:	d103      	bne.n	800920a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2210      	movs	r2, #16
 8009208:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7fe ffd4 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009218:	e00d      	b.n	8009236 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7f7 fe42 	bl	8000ea4 <HAL_UART_RxCpltCallback>
}
 8009220:	e009      	b.n	8009236 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	8b1b      	ldrh	r3, [r3, #24]
 8009228:	b29a      	uxth	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f042 0208 	orr.w	r2, r2, #8
 8009232:	b292      	uxth	r2, r2
 8009234:	831a      	strh	r2, [r3, #24]
}
 8009236:	bf00      	nop
 8009238:	3770      	adds	r7, #112	@ 0x70
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	40008000 	.word	0x40008000

08009244 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b0ac      	sub	sp, #176	@ 0xb0
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009252:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	69db      	ldr	r3, [r3, #28]
 800925c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800927a:	2b22      	cmp	r3, #34	@ 0x22
 800927c:	f040 8182 	bne.w	8009584 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009286:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800928a:	e125      	b.n	80094d8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009292:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009296:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800929a:	b2d9      	uxtb	r1, r3
 800929c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092a6:	400a      	ands	r2, r1
 80092a8:	b2d2      	uxtb	r2, r2
 80092aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092b0:	1c5a      	adds	r2, r3, #1
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092bc:	b29b      	uxth	r3, r3
 80092be:	3b01      	subs	r3, #1
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80092d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d053      	beq.n	8009386 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d011      	beq.n	800930e <UART_RxISR_8BIT_FIFOEN+0xca>
 80092ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80092ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00b      	beq.n	800930e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2201      	movs	r2, #1
 80092fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009304:	f043 0201 	orr.w	r2, r3, #1
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800930e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d011      	beq.n	800933e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800931a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00b      	beq.n	800933e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2202      	movs	r2, #2
 800932c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009334:	f043 0204 	orr.w	r2, r3, #4
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800933e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009342:	f003 0304 	and.w	r3, r3, #4
 8009346:	2b00      	cmp	r3, #0
 8009348:	d011      	beq.n	800936e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800934a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00b      	beq.n	800936e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2204      	movs	r2, #4
 800935c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009364:	f043 0202 	orr.w	r2, r3, #2
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009374:	2b00      	cmp	r3, #0
 8009376:	d006      	beq.n	8009386 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7fe ff17 	bl	80081ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800938c:	b29b      	uxth	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	f040 80a2 	bne.w	80094d8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800939c:	e853 3f00 	ldrex	r3, [r3]
 80093a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80093a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	461a      	mov	r2, r3
 80093b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80093b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80093b8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80093bc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80093c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e4      	bne.n	8009394 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	3308      	adds	r3, #8
 80093d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093d4:	e853 3f00 	ldrex	r3, [r3]
 80093d8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80093da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093e0:	f023 0301 	bic.w	r3, r3, #1
 80093e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3308      	adds	r3, #8
 80093ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80093f2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80093f4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80093f8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009400:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e1      	bne.n	80093ca <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a60      	ldr	r2, [pc, #384]	@ (80095a0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d021      	beq.n	8009468 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800942e:	2b00      	cmp	r3, #0
 8009430:	d01a      	beq.n	8009468 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009442:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009446:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009454:	657b      	str	r3, [r7, #84]	@ 0x54
 8009456:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800945a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e4      	bne.n	8009432 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800946c:	2b01      	cmp	r3, #1
 800946e:	d130      	bne.n	80094d2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800947e:	e853 3f00 	ldrex	r3, [r3]
 8009482:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009486:	f023 0310 	bic.w	r3, r3, #16
 800948a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	461a      	mov	r2, r3
 8009494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009498:	643b      	str	r3, [r7, #64]	@ 0x40
 800949a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800949e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094a0:	e841 2300 	strex	r3, r2, [r1]
 80094a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1e4      	bne.n	8009476 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f003 0310 	and.w	r3, r3, #16
 80094b6:	2b10      	cmp	r3, #16
 80094b8:	d103      	bne.n	80094c2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2210      	movs	r2, #16
 80094c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094c8:	4619      	mov	r1, r3
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f7fe fe78 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
 80094d0:	e002      	b.n	80094d8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7f7 fce6 	bl	8000ea4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094d8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d006      	beq.n	80094ee <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80094e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094e4:	f003 0320 	and.w	r3, r3, #32
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f47f aecf 	bne.w	800928c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094f4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80094f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d04b      	beq.n	8009598 <UART_RxISR_8BIT_FIFOEN+0x354>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009506:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800950a:	429a      	cmp	r2, r3
 800950c:	d244      	bcs.n	8009598 <UART_RxISR_8BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3308      	adds	r3, #8
 8009514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	e853 3f00 	ldrex	r3, [r3]
 800951c:	61fb      	str	r3, [r7, #28]
   return(result);
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009524:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	3308      	adds	r3, #8
 800952e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009532:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009534:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009536:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800953a:	e841 2300 	strex	r3, r2, [r1]
 800953e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1e3      	bne.n	800950e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4a16      	ldr	r2, [pc, #88]	@ (80095a4 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800954a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	e853 3f00 	ldrex	r3, [r3]
 8009558:	60bb      	str	r3, [r7, #8]
   return(result);
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	f043 0320 	orr.w	r3, r3, #32
 8009560:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	461a      	mov	r2, r3
 800956a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800956e:	61bb      	str	r3, [r7, #24]
 8009570:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009572:	6979      	ldr	r1, [r7, #20]
 8009574:	69ba      	ldr	r2, [r7, #24]
 8009576:	e841 2300 	strex	r3, r2, [r1]
 800957a:	613b      	str	r3, [r7, #16]
   return(result);
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1e4      	bne.n	800954c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009582:	e009      	b.n	8009598 <UART_RxISR_8BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	8b1b      	ldrh	r3, [r3, #24]
 800958a:	b29a      	uxth	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f042 0208 	orr.w	r2, r2, #8
 8009594:	b292      	uxth	r2, r2
 8009596:	831a      	strh	r2, [r3, #24]
}
 8009598:	bf00      	nop
 800959a:	37b0      	adds	r7, #176	@ 0xb0
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}
 80095a0:	40008000 	.word	0x40008000
 80095a4:	08008ecd 	.word	0x08008ecd

080095a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b0ae      	sub	sp, #184	@ 0xb8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095de:	2b22      	cmp	r3, #34	@ 0x22
 80095e0:	f040 8186 	bne.w	80098f0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80095ea:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095ee:	e129      	b.n	8009844 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80095f6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009602:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009606:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800960a:	4013      	ands	r3, r2
 800960c:	b29a      	uxth	r2, r3
 800960e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009612:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009618:	1c9a      	adds	r2, r3, #2
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009624:	b29b      	uxth	r3, r3
 8009626:	3b01      	subs	r3, #1
 8009628:	b29a      	uxth	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800963a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800963e:	f003 0307 	and.w	r3, r3, #7
 8009642:	2b00      	cmp	r3, #0
 8009644:	d053      	beq.n	80096ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009646:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d011      	beq.n	8009676 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2201      	movs	r2, #1
 8009664:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800966c:	f043 0201 	orr.w	r2, r3, #1
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009676:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800967a:	f003 0302 	and.w	r3, r3, #2
 800967e:	2b00      	cmp	r3, #0
 8009680:	d011      	beq.n	80096a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009682:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009686:	f003 0301 	and.w	r3, r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00b      	beq.n	80096a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2202      	movs	r2, #2
 8009694:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800969c:	f043 0204 	orr.w	r2, r3, #4
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80096aa:	f003 0304 	and.w	r3, r3, #4
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d011      	beq.n	80096d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80096b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00b      	beq.n	80096d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2204      	movs	r2, #4
 80096c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096cc:	f043 0202 	orr.w	r2, r3, #2
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d006      	beq.n	80096ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7fe fd63 	bl	80081ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f040 80a4 	bne.w	8009844 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009704:	e853 3f00 	ldrex	r3, [r3]
 8009708:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800970a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800970c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009710:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	461a      	mov	r2, r3
 800971a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800971e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009722:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009724:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009726:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e2      	bne.n	80096fc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	3308      	adds	r3, #8
 800973c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800973e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009740:	e853 3f00 	ldrex	r3, [r3]
 8009744:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800974c:	f023 0301 	bic.w	r3, r3, #1
 8009750:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3308      	adds	r3, #8
 800975a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800975e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009760:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009762:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009764:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009766:	e841 2300 	strex	r3, r2, [r1]
 800976a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800976c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1e1      	bne.n	8009736 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2220      	movs	r2, #32
 8009776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a60      	ldr	r2, [pc, #384]	@ (800990c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d021      	beq.n	80097d4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800979a:	2b00      	cmp	r3, #0
 800979c:	d01a      	beq.n	80097d4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	461a      	mov	r2, r3
 80097bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80097c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80097c2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80097c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097c8:	e841 2300 	strex	r3, r2, [r1]
 80097cc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e4      	bne.n	800979e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d130      	bne.n	800983e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f2:	f023 0310 	bic.w	r3, r3, #16
 80097f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009804:	647b      	str	r3, [r7, #68]	@ 0x44
 8009806:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009808:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800980a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800980c:	e841 2300 	strex	r3, r2, [r1]
 8009810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009814:	2b00      	cmp	r3, #0
 8009816:	d1e4      	bne.n	80097e2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	69db      	ldr	r3, [r3, #28]
 800981e:	f003 0310 	and.w	r3, r3, #16
 8009822:	2b10      	cmp	r3, #16
 8009824:	d103      	bne.n	800982e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2210      	movs	r2, #16
 800982c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009834:	4619      	mov	r1, r3
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f7fe fcc2 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
 800983c:	e002      	b.n	8009844 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7f7 fb30 	bl	8000ea4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009844:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009848:	2b00      	cmp	r3, #0
 800984a:	d006      	beq.n	800985a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800984c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009850:	f003 0320 	and.w	r3, r3, #32
 8009854:	2b00      	cmp	r3, #0
 8009856:	f47f aecb 	bne.w	80095f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009860:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009864:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009868:	2b00      	cmp	r3, #0
 800986a:	d04b      	beq.n	8009904 <UART_RxISR_16BIT_FIFOEN+0x35c>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009872:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009876:	429a      	cmp	r2, r3
 8009878:	d244      	bcs.n	8009904 <UART_RxISR_16BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	623b      	str	r3, [r7, #32]
   return(result);
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800989e:	633a      	str	r2, [r7, #48]	@ 0x30
 80098a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80098a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80098ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1e3      	bne.n	800987a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a16      	ldr	r2, [pc, #88]	@ (8009910 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80098b6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f043 0320 	orr.w	r3, r3, #32
 80098cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	461a      	mov	r2, r3
 80098d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098da:	61fb      	str	r3, [r7, #28]
 80098dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098de:	69b9      	ldr	r1, [r7, #24]
 80098e0:	69fa      	ldr	r2, [r7, #28]
 80098e2:	e841 2300 	strex	r3, r2, [r1]
 80098e6:	617b      	str	r3, [r7, #20]
   return(result);
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1e4      	bne.n	80098b8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098ee:	e009      	b.n	8009904 <UART_RxISR_16BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	8b1b      	ldrh	r3, [r3, #24]
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f042 0208 	orr.w	r2, r2, #8
 8009900:	b292      	uxth	r2, r2
 8009902:	831a      	strh	r2, [r3, #24]
}
 8009904:	bf00      	nop
 8009906:	37b8      	adds	r7, #184	@ 0xb8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	40008000 	.word	0x40008000
 8009910:	08009089 	.word	0x08009089

08009914 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800991c:	bf00      	nop
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr

08009950 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800995e:	2b01      	cmp	r3, #1
 8009960:	d101      	bne.n	8009966 <HAL_UARTEx_DisableFifoMode+0x16>
 8009962:	2302      	movs	r3, #2
 8009964:	e027      	b.n	80099b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2224      	movs	r2, #36	@ 0x24
 8009972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f022 0201 	bic.w	r2, r2, #1
 800998c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009994:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2220      	movs	r2, #32
 80099a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d101      	bne.n	80099da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099d6:	2302      	movs	r3, #2
 80099d8:	e02d      	b.n	8009a36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2224      	movs	r2, #36	@ 0x24
 80099e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 0201 	bic.w	r2, r2, #1
 8009a00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	683a      	ldr	r2, [r7, #0]
 8009a12:	430a      	orrs	r2, r1
 8009a14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f850 	bl	8009abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2220      	movs	r2, #32
 8009a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b084      	sub	sp, #16
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d101      	bne.n	8009a56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a52:	2302      	movs	r3, #2
 8009a54:	e02d      	b.n	8009ab2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2224      	movs	r2, #36	@ 0x24
 8009a62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f022 0201 	bic.w	r2, r2, #1
 8009a7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f812 	bl	8009abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2220      	movs	r2, #32
 8009aa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d108      	bne.n	8009ade <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009adc:	e031      	b.n	8009b42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ade:	2308      	movs	r3, #8
 8009ae0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ae2:	2308      	movs	r3, #8
 8009ae4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	0e5b      	lsrs	r3, r3, #25
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	f003 0307 	and.w	r3, r3, #7
 8009af4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	0f5b      	lsrs	r3, r3, #29
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	f003 0307 	and.w	r3, r3, #7
 8009b04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	7b3a      	ldrb	r2, [r7, #12]
 8009b0a:	4911      	ldr	r1, [pc, #68]	@ (8009b50 <UARTEx_SetNbDataToProcess+0x94>)
 8009b0c:	5c8a      	ldrb	r2, [r1, r2]
 8009b0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b12:	7b3a      	ldrb	r2, [r7, #12]
 8009b14:	490f      	ldr	r1, [pc, #60]	@ (8009b54 <UARTEx_SetNbDataToProcess+0x98>)
 8009b16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b18:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
 8009b26:	7b7a      	ldrb	r2, [r7, #13]
 8009b28:	4909      	ldr	r1, [pc, #36]	@ (8009b50 <UARTEx_SetNbDataToProcess+0x94>)
 8009b2a:	5c8a      	ldrb	r2, [r1, r2]
 8009b2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b30:	7b7a      	ldrb	r2, [r7, #13]
 8009b32:	4908      	ldr	r1, [pc, #32]	@ (8009b54 <UARTEx_SetNbDataToProcess+0x98>)
 8009b34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b36:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b3a:	b29a      	uxth	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b42:	bf00      	nop
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	0800ddf8 	.word	0x0800ddf8
 8009b54:	0800de00 	.word	0x0800de00

08009b58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b58:	b084      	sub	sp, #16
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	f107 001c 	add.w	r0, r7, #28
 8009b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	68db      	ldr	r3, [r3, #12]
 8009b6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f001 fa1c 	bl	800afb4 <USB_CoreReset>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009b80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d106      	bne.n	8009b94 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	639a      	str	r2, [r3, #56]	@ 0x38
 8009b92:	e005      	b.n	8009ba0 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bac:	b004      	add	sp, #16
 8009bae:	4770      	bx	lr

08009bb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009bbe:	79fb      	ldrb	r3, [r7, #7]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d165      	bne.n	8009c90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	4a3e      	ldr	r2, [pc, #248]	@ (8009cc0 <USB_SetTurnaroundTime+0x110>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d906      	bls.n	8009bda <USB_SetTurnaroundTime+0x2a>
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	4a3d      	ldr	r2, [pc, #244]	@ (8009cc4 <USB_SetTurnaroundTime+0x114>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d202      	bcs.n	8009bda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009bd4:	230f      	movs	r3, #15
 8009bd6:	617b      	str	r3, [r7, #20]
 8009bd8:	e05c      	b.n	8009c94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	4a39      	ldr	r2, [pc, #228]	@ (8009cc4 <USB_SetTurnaroundTime+0x114>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d306      	bcc.n	8009bf0 <USB_SetTurnaroundTime+0x40>
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	4a38      	ldr	r2, [pc, #224]	@ (8009cc8 <USB_SetTurnaroundTime+0x118>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d202      	bcs.n	8009bf0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009bea:	230e      	movs	r3, #14
 8009bec:	617b      	str	r3, [r7, #20]
 8009bee:	e051      	b.n	8009c94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	4a35      	ldr	r2, [pc, #212]	@ (8009cc8 <USB_SetTurnaroundTime+0x118>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d306      	bcc.n	8009c06 <USB_SetTurnaroundTime+0x56>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	4a34      	ldr	r2, [pc, #208]	@ (8009ccc <USB_SetTurnaroundTime+0x11c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d202      	bcs.n	8009c06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009c00:	230d      	movs	r3, #13
 8009c02:	617b      	str	r3, [r7, #20]
 8009c04:	e046      	b.n	8009c94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	4a30      	ldr	r2, [pc, #192]	@ (8009ccc <USB_SetTurnaroundTime+0x11c>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d306      	bcc.n	8009c1c <USB_SetTurnaroundTime+0x6c>
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	4a2f      	ldr	r2, [pc, #188]	@ (8009cd0 <USB_SetTurnaroundTime+0x120>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d802      	bhi.n	8009c1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009c16:	230c      	movs	r3, #12
 8009c18:	617b      	str	r3, [r7, #20]
 8009c1a:	e03b      	b.n	8009c94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	4a2c      	ldr	r2, [pc, #176]	@ (8009cd0 <USB_SetTurnaroundTime+0x120>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d906      	bls.n	8009c32 <USB_SetTurnaroundTime+0x82>
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	4a2b      	ldr	r2, [pc, #172]	@ (8009cd4 <USB_SetTurnaroundTime+0x124>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d802      	bhi.n	8009c32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009c2c:	230b      	movs	r3, #11
 8009c2e:	617b      	str	r3, [r7, #20]
 8009c30:	e030      	b.n	8009c94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	4a27      	ldr	r2, [pc, #156]	@ (8009cd4 <USB_SetTurnaroundTime+0x124>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d906      	bls.n	8009c48 <USB_SetTurnaroundTime+0x98>
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	4a26      	ldr	r2, [pc, #152]	@ (8009cd8 <USB_SetTurnaroundTime+0x128>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d802      	bhi.n	8009c48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009c42:	230a      	movs	r3, #10
 8009c44:	617b      	str	r3, [r7, #20]
 8009c46:	e025      	b.n	8009c94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	4a23      	ldr	r2, [pc, #140]	@ (8009cd8 <USB_SetTurnaroundTime+0x128>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d906      	bls.n	8009c5e <USB_SetTurnaroundTime+0xae>
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	4a22      	ldr	r2, [pc, #136]	@ (8009cdc <USB_SetTurnaroundTime+0x12c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d202      	bcs.n	8009c5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009c58:	2309      	movs	r3, #9
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	e01a      	b.n	8009c94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	4a1e      	ldr	r2, [pc, #120]	@ (8009cdc <USB_SetTurnaroundTime+0x12c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d306      	bcc.n	8009c74 <USB_SetTurnaroundTime+0xc4>
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	4a1d      	ldr	r2, [pc, #116]	@ (8009ce0 <USB_SetTurnaroundTime+0x130>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d802      	bhi.n	8009c74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009c6e:	2308      	movs	r3, #8
 8009c70:	617b      	str	r3, [r7, #20]
 8009c72:	e00f      	b.n	8009c94 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	4a1a      	ldr	r2, [pc, #104]	@ (8009ce0 <USB_SetTurnaroundTime+0x130>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d906      	bls.n	8009c8a <USB_SetTurnaroundTime+0xda>
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	4a19      	ldr	r2, [pc, #100]	@ (8009ce4 <USB_SetTurnaroundTime+0x134>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d202      	bcs.n	8009c8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009c84:	2307      	movs	r3, #7
 8009c86:	617b      	str	r3, [r7, #20]
 8009c88:	e004      	b.n	8009c94 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009c8a:	2306      	movs	r3, #6
 8009c8c:	617b      	str	r3, [r7, #20]
 8009c8e:	e001      	b.n	8009c94 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009c90:	2309      	movs	r3, #9
 8009c92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	68da      	ldr	r2, [r3, #12]
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	029b      	lsls	r3, r3, #10
 8009ca8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009cac:	431a      	orrs	r2, r3
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009cb2:	2300      	movs	r3, #0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	371c      	adds	r7, #28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	00d8acbf 	.word	0x00d8acbf
 8009cc4:	00e4e1c0 	.word	0x00e4e1c0
 8009cc8:	00f42400 	.word	0x00f42400
 8009ccc:	01067380 	.word	0x01067380
 8009cd0:	011a499f 	.word	0x011a499f
 8009cd4:	01312cff 	.word	0x01312cff
 8009cd8:	014ca43f 	.word	0x014ca43f
 8009cdc:	016e3600 	.word	0x016e3600
 8009ce0:	01a6ab1f 	.word	0x01a6ab1f
 8009ce4:	01e84800 	.word	0x01e84800

08009ce8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f043 0201 	orr.w	r2, r3, #1
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b083      	sub	sp, #12
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f023 0201 	bic.w	r2, r3, #1
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009d48:	78fb      	ldrb	r3, [r7, #3]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d115      	bne.n	8009d7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009d5a:	2001      	movs	r0, #1
 8009d5c:	f7f7 ffda 	bl	8001d14 <HAL_Delay>
      ms++;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3301      	adds	r3, #1
 8009d64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f001 f8ab 	bl	800aec2 <USB_GetMode>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d01e      	beq.n	8009db0 <USB_SetCurrentMode+0x84>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b31      	cmp	r3, #49	@ 0x31
 8009d76:	d9f0      	bls.n	8009d5a <USB_SetCurrentMode+0x2e>
 8009d78:	e01a      	b.n	8009db0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009d7a:	78fb      	ldrb	r3, [r7, #3]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d115      	bne.n	8009dac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009d8c:	2001      	movs	r0, #1
 8009d8e:	f7f7 ffc1 	bl	8001d14 <HAL_Delay>
      ms++;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3301      	adds	r3, #1
 8009d96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f001 f892 	bl	800aec2 <USB_GetMode>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d005      	beq.n	8009db0 <USB_SetCurrentMode+0x84>
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b31      	cmp	r3, #49	@ 0x31
 8009da8:	d9f0      	bls.n	8009d8c <USB_SetCurrentMode+0x60>
 8009daa:	e001      	b.n	8009db0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e005      	b.n	8009dbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2b32      	cmp	r3, #50	@ 0x32
 8009db4:	d101      	bne.n	8009dba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e000      	b.n	8009dbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b086      	sub	sp, #24
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009dd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009dde:	2300      	movs	r3, #0
 8009de0:	613b      	str	r3, [r7, #16]
 8009de2:	e009      	b.n	8009df8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	3340      	adds	r3, #64	@ 0x40
 8009dea:	009b      	lsls	r3, r3, #2
 8009dec:	4413      	add	r3, r2
 8009dee:	2200      	movs	r2, #0
 8009df0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	3301      	adds	r3, #1
 8009df6:	613b      	str	r3, [r7, #16]
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	2b0e      	cmp	r3, #14
 8009dfc:	d9f2      	bls.n	8009de4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d11c      	bne.n	8009e3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e12:	f043 0302 	orr.w	r3, r3, #2
 8009e16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e1c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	601a      	str	r2, [r3, #0]
 8009e3c:	e005      	b.n	8009e4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e42:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e50:	461a      	mov	r2, r3
 8009e52:	2300      	movs	r3, #0
 8009e54:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009e56:	2103      	movs	r1, #3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f959 	bl	800a110 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009e5e:	2110      	movs	r1, #16
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 f8f1 	bl	800a048 <USB_FlushTxFifo>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f91d 	bl	800a0b0 <USB_FlushRxFifo>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d001      	beq.n	8009e80 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e86:	461a      	mov	r2, r3
 8009e88:	2300      	movs	r3, #0
 8009e8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e92:	461a      	mov	r2, r3
 8009e94:	2300      	movs	r3, #0
 8009e96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	613b      	str	r3, [r7, #16]
 8009ea8:	e043      	b.n	8009f32 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ec0:	d118      	bne.n	8009ef4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d10a      	bne.n	8009ede <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	015a      	lsls	r2, r3, #5
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	4413      	add	r3, r2
 8009ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009eda:	6013      	str	r3, [r2, #0]
 8009edc:	e013      	b.n	8009f06 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eea:	461a      	mov	r2, r3
 8009eec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009ef0:	6013      	str	r3, [r2, #0]
 8009ef2:	e008      	b.n	8009f06 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f00:	461a      	mov	r2, r3
 8009f02:	2300      	movs	r3, #0
 8009f04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f12:	461a      	mov	r2, r3
 8009f14:	2300      	movs	r3, #0
 8009f16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f24:	461a      	mov	r2, r3
 8009f26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009f2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	613b      	str	r3, [r7, #16]
 8009f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d3b7      	bcc.n	8009eaa <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	613b      	str	r3, [r7, #16]
 8009f3e:	e043      	b.n	8009fc8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	015a      	lsls	r2, r3, #5
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	4413      	add	r3, r2
 8009f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009f52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009f56:	d118      	bne.n	8009f8a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10a      	bne.n	8009f74 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009f70:	6013      	str	r3, [r2, #0]
 8009f72:	e013      	b.n	8009f9c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f80:	461a      	mov	r2, r3
 8009f82:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009f86:	6013      	str	r3, [r2, #0]
 8009f88:	e008      	b.n	8009f9c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f96:	461a      	mov	r2, r3
 8009f98:	2300      	movs	r3, #0
 8009f9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fa8:	461a      	mov	r2, r3
 8009faa:	2300      	movs	r3, #0
 8009fac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fba:	461a      	mov	r2, r3
 8009fbc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009fc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	613b      	str	r3, [r7, #16]
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d3b7      	bcc.n	8009f40 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009fde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fe2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009ff0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	f043 0210 	orr.w	r2, r3, #16
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	699a      	ldr	r2, [r3, #24]
 800a002:	4b10      	ldr	r3, [pc, #64]	@ (800a044 <USB_DevInit+0x280>)
 800a004:	4313      	orrs	r3, r2
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a00a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d005      	beq.n	800a01c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	699b      	ldr	r3, [r3, #24]
 800a014:	f043 0208 	orr.w	r2, r3, #8
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a01c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d107      	bne.n	800a032 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a02a:	f043 0304 	orr.w	r3, r3, #4
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a032:	7dfb      	ldrb	r3, [r7, #23]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a03e:	b004      	add	sp, #16
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	803c3800 	.word	0x803c3800

0800a048 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	3301      	adds	r3, #1
 800a05a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4a13      	ldr	r2, [pc, #76]	@ (800a0ac <USB_FlushTxFifo+0x64>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d901      	bls.n	800a068 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e01b      	b.n	800a0a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	daf2      	bge.n	800a056 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	019b      	lsls	r3, r3, #6
 800a078:	f043 0220 	orr.w	r2, r3, #32
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	3301      	adds	r3, #1
 800a084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	4a08      	ldr	r2, [pc, #32]	@ (800a0ac <USB_FlushTxFifo+0x64>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d901      	bls.n	800a092 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e006      	b.n	800a0a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	f003 0320 	and.w	r3, r3, #32
 800a09a:	2b20      	cmp	r3, #32
 800a09c:	d0f0      	beq.n	800a080 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	00030d40 	.word	0x00030d40

0800a0b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4a11      	ldr	r2, [pc, #68]	@ (800a10c <USB_FlushRxFifo+0x5c>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d901      	bls.n	800a0ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	e018      	b.n	800a100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	daf2      	bge.n	800a0bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2210      	movs	r2, #16
 800a0de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	4a08      	ldr	r2, [pc, #32]	@ (800a10c <USB_FlushRxFifo+0x5c>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d901      	bls.n	800a0f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e006      	b.n	800a100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	f003 0310 	and.w	r3, r3, #16
 800a0fa:	2b10      	cmp	r3, #16
 800a0fc:	d0f0      	beq.n	800a0e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	00030d40 	.word	0x00030d40

0800a110 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	460b      	mov	r3, r1
 800a11a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	78fb      	ldrb	r3, [r7, #3]
 800a12a:	68f9      	ldr	r1, [r7, #12]
 800a12c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a130:	4313      	orrs	r3, r2
 800a132:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a142:	b480      	push	{r7}
 800a144:	b087      	sub	sp, #28
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	f003 0306 	and.w	r3, r3, #6
 800a15a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d002      	beq.n	800a168 <USB_GetDevSpeed+0x26>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2b06      	cmp	r3, #6
 800a166:	d102      	bne.n	800a16e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a168:	2302      	movs	r3, #2
 800a16a:	75fb      	strb	r3, [r7, #23]
 800a16c:	e001      	b.n	800a172 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800a16e:	230f      	movs	r3, #15
 800a170:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a172:	7dfb      	ldrb	r3, [r7, #23]
}
 800a174:	4618      	mov	r0, r3
 800a176:	371c      	adds	r7, #28
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	785b      	ldrb	r3, [r3, #1]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d13a      	bne.n	800a212 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1a2:	69da      	ldr	r2, [r3, #28]
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	f003 030f 	and.w	r3, r3, #15
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	68f9      	ldr	r1, [r7, #12]
 800a1b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	015a      	lsls	r2, r3, #5
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d155      	bne.n	800a280 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	791b      	ldrb	r3, [r3, #4]
 800a1ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a1f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	059b      	lsls	r3, r3, #22
 800a1f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	0151      	lsls	r1, r2, #5
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	440a      	add	r2, r1
 800a202:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a20a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a20e:	6013      	str	r3, [r2, #0]
 800a210:	e036      	b.n	800a280 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a218:	69da      	ldr	r2, [r3, #28]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	f003 030f 	and.w	r3, r3, #15
 800a222:	2101      	movs	r1, #1
 800a224:	fa01 f303 	lsl.w	r3, r1, r3
 800a228:	041b      	lsls	r3, r3, #16
 800a22a:	68f9      	ldr	r1, [r7, #12]
 800a22c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a230:	4313      	orrs	r3, r2
 800a232:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a246:	2b00      	cmp	r3, #0
 800a248:	d11a      	bne.n	800a280 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	015a      	lsls	r2, r3, #5
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	4413      	add	r3, r2
 800a252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	791b      	ldrb	r3, [r3, #4]
 800a264:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a266:	430b      	orrs	r3, r1
 800a268:	4313      	orrs	r3, r2
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	0151      	lsls	r1, r2, #5
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	440a      	add	r2, r1
 800a272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a27a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a27e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
	...

0800a290 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	785b      	ldrb	r3, [r3, #1]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d161      	bne.n	800a370 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2c2:	d11f      	bne.n	800a304 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	0151      	lsls	r1, r2, #5
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	440a      	add	r2, r1
 800a2da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a2e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	015a      	lsls	r2, r3, #5
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	0151      	lsls	r1, r2, #5
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	440a      	add	r2, r1
 800a2fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a2fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a302:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a30a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	f003 030f 	and.w	r3, r3, #15
 800a314:	2101      	movs	r1, #1
 800a316:	fa01 f303 	lsl.w	r3, r1, r3
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	43db      	mvns	r3, r3
 800a31e:	68f9      	ldr	r1, [r7, #12]
 800a320:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a324:	4013      	ands	r3, r2
 800a326:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a32e:	69da      	ldr	r2, [r3, #28]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	f003 030f 	and.w	r3, r3, #15
 800a338:	2101      	movs	r1, #1
 800a33a:	fa01 f303 	lsl.w	r3, r1, r3
 800a33e:	b29b      	uxth	r3, r3
 800a340:	43db      	mvns	r3, r3
 800a342:	68f9      	ldr	r1, [r7, #12]
 800a344:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a348:	4013      	ands	r3, r2
 800a34a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	015a      	lsls	r2, r3, #5
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	4413      	add	r3, r2
 800a354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	0159      	lsls	r1, r3, #5
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	440b      	add	r3, r1
 800a362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a366:	4619      	mov	r1, r3
 800a368:	4b35      	ldr	r3, [pc, #212]	@ (800a440 <USB_DeactivateEndpoint+0x1b0>)
 800a36a:	4013      	ands	r3, r2
 800a36c:	600b      	str	r3, [r1, #0]
 800a36e:	e060      	b.n	800a432 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a382:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a386:	d11f      	bne.n	800a3c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	015a      	lsls	r2, r3, #5
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	4413      	add	r3, r2
 800a390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	0151      	lsls	r1, r2, #5
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	440a      	add	r2, r1
 800a39e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a3a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	015a      	lsls	r2, r3, #5
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	0151      	lsls	r1, r2, #5
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	440a      	add	r2, r1
 800a3be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	f003 030f 	and.w	r3, r3, #15
 800a3d8:	2101      	movs	r1, #1
 800a3da:	fa01 f303 	lsl.w	r3, r1, r3
 800a3de:	041b      	lsls	r3, r3, #16
 800a3e0:	43db      	mvns	r3, r3
 800a3e2:	68f9      	ldr	r1, [r7, #12]
 800a3e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3f2:	69da      	ldr	r2, [r3, #28]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	f003 030f 	and.w	r3, r3, #15
 800a3fc:	2101      	movs	r1, #1
 800a3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a402:	041b      	lsls	r3, r3, #16
 800a404:	43db      	mvns	r3, r3
 800a406:	68f9      	ldr	r1, [r7, #12]
 800a408:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a40c:	4013      	ands	r3, r2
 800a40e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	4413      	add	r3, r2
 800a418:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	0159      	lsls	r1, r3, #5
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	440b      	add	r3, r1
 800a426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a42a:	4619      	mov	r1, r3
 800a42c:	4b05      	ldr	r3, [pc, #20]	@ (800a444 <USB_DeactivateEndpoint+0x1b4>)
 800a42e:	4013      	ands	r3, r2
 800a430:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	ec337800 	.word	0xec337800
 800a444:	eff37800 	.word	0xeff37800

0800a448 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	785b      	ldrb	r3, [r3, #1]
 800a460:	2b01      	cmp	r3, #1
 800a462:	f040 8128 	bne.w	800a6b6 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d132      	bne.n	800a4d4 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	015a      	lsls	r2, r3, #5
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	4413      	add	r3, r2
 800a476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	693a      	ldr	r2, [r7, #16]
 800a47e:	0151      	lsls	r1, r2, #5
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	440a      	add	r2, r1
 800a484:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a488:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a48c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a490:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	015a      	lsls	r2, r3, #5
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	4413      	add	r3, r2
 800a49a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	0151      	lsls	r1, r2, #5
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	440a      	add	r2, r1
 800a4a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a4b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	015a      	lsls	r2, r3, #5
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	0151      	lsls	r1, r2, #5
 800a4c4:	697a      	ldr	r2, [r7, #20]
 800a4c6:	440a      	add	r2, r1
 800a4c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4cc:	0cdb      	lsrs	r3, r3, #19
 800a4ce:	04db      	lsls	r3, r3, #19
 800a4d0:	6113      	str	r3, [r2, #16]
 800a4d2:	e092      	b.n	800a5fa <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	015a      	lsls	r2, r3, #5
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	4413      	add	r3, r2
 800a4dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	693a      	ldr	r2, [r7, #16]
 800a4e4:	0151      	lsls	r1, r2, #5
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	440a      	add	r2, r1
 800a4ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4ee:	0cdb      	lsrs	r3, r3, #19
 800a4f0:	04db      	lsls	r3, r3, #19
 800a4f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	0151      	lsls	r1, r2, #5
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	440a      	add	r2, r1
 800a50a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a50e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a512:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a516:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d11a      	bne.n	800a554 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	691a      	ldr	r2, [r3, #16]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	429a      	cmp	r2, r3
 800a528:	d903      	bls.n	800a532 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	689a      	ldr	r2, [r3, #8]
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	015a      	lsls	r2, r3, #5
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	4413      	add	r3, r2
 800a53a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	0151      	lsls	r1, r2, #5
 800a544:	697a      	ldr	r2, [r7, #20]
 800a546:	440a      	add	r2, r1
 800a548:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a54c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a550:	6113      	str	r3, [r2, #16]
 800a552:	e01b      	b.n	800a58c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	015a      	lsls	r2, r3, #5
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	4413      	add	r3, r2
 800a55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a560:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	6919      	ldr	r1, [r3, #16]
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	440b      	add	r3, r1
 800a56c:	1e59      	subs	r1, r3, #1
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	fbb1 f3f3 	udiv	r3, r1, r3
 800a576:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a578:	4b8d      	ldr	r3, [pc, #564]	@ (800a7b0 <USB_EPStartXfer+0x368>)
 800a57a:	400b      	ands	r3, r1
 800a57c:	6939      	ldr	r1, [r7, #16]
 800a57e:	0148      	lsls	r0, r1, #5
 800a580:	6979      	ldr	r1, [r7, #20]
 800a582:	4401      	add	r1, r0
 800a584:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a588:	4313      	orrs	r3, r2
 800a58a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	015a      	lsls	r2, r3, #5
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	4413      	add	r3, r2
 800a594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a598:	691a      	ldr	r2, [r3, #16]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5a2:	6939      	ldr	r1, [r7, #16]
 800a5a4:	0148      	lsls	r0, r1, #5
 800a5a6:	6979      	ldr	r1, [r7, #20]
 800a5a8:	4401      	add	r1, r0
 800a5aa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	791b      	ldrb	r3, [r3, #4]
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d11f      	bne.n	800a5fa <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	0151      	lsls	r1, r2, #5
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	440a      	add	r2, r1
 800a5d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5d4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a5d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	015a      	lsls	r2, r3, #5
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5e6:	691b      	ldr	r3, [r3, #16]
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	0151      	lsls	r1, r2, #5
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	440a      	add	r2, r1
 800a5f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a5f8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	015a      	lsls	r2, r3, #5
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	4413      	add	r3, r2
 800a602:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	693a      	ldr	r2, [r7, #16]
 800a60a:	0151      	lsls	r1, r2, #5
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	440a      	add	r2, r1
 800a610:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a614:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a618:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	791b      	ldrb	r3, [r3, #4]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d015      	beq.n	800a64e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 8139 	beq.w	800a89e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	f003 030f 	and.w	r3, r3, #15
 800a63c:	2101      	movs	r1, #1
 800a63e:	fa01 f303 	lsl.w	r3, r1, r3
 800a642:	6979      	ldr	r1, [r7, #20]
 800a644:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a648:	4313      	orrs	r3, r2
 800a64a:	634b      	str	r3, [r1, #52]	@ 0x34
 800a64c:	e127      	b.n	800a89e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d110      	bne.n	800a680 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	015a      	lsls	r2, r3, #5
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	4413      	add	r3, r2
 800a666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	0151      	lsls	r1, r2, #5
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	440a      	add	r2, r1
 800a674:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a678:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a67c:	6013      	str	r3, [r2, #0]
 800a67e:	e00f      	b.n	800a6a0 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	015a      	lsls	r2, r3, #5
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	4413      	add	r3, r2
 800a688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	0151      	lsls	r1, r2, #5
 800a692:	697a      	ldr	r2, [r7, #20]
 800a694:	440a      	add	r2, r1
 800a696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a69a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a69e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	68d9      	ldr	r1, [r3, #12]
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	691b      	ldr	r3, [r3, #16]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f9a6 	bl	800aa00 <USB_WritePacket>
 800a6b4:	e0f3      	b.n	800a89e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	0151      	lsls	r1, r2, #5
 800a6c8:	697a      	ldr	r2, [r7, #20]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6d0:	0cdb      	lsrs	r3, r3, #19
 800a6d2:	04db      	lsls	r3, r3, #19
 800a6d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	693a      	ldr	r2, [r7, #16]
 800a6e6:	0151      	lsls	r1, r2, #5
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	440a      	add	r2, r1
 800a6ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6f0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a6f4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a6f8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d12f      	bne.n	800a760 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d003      	beq.n	800a710 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	689a      	ldr	r2, [r3, #8]
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	015a      	lsls	r2, r3, #5
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	4413      	add	r3, r2
 800a720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a724:	691a      	ldr	r2, [r3, #16]
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a72e:	6939      	ldr	r1, [r7, #16]
 800a730:	0148      	lsls	r0, r1, #5
 800a732:	6979      	ldr	r1, [r7, #20]
 800a734:	4401      	add	r1, r0
 800a736:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a73a:	4313      	orrs	r3, r2
 800a73c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a74a:	691b      	ldr	r3, [r3, #16]
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	0151      	lsls	r1, r2, #5
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	440a      	add	r2, r1
 800a754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a758:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a75c:	6113      	str	r3, [r2, #16]
 800a75e:	e061      	b.n	800a824 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d125      	bne.n	800a7b4 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	015a      	lsls	r2, r3, #5
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	4413      	add	r3, r2
 800a770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a774:	691a      	ldr	r2, [r3, #16]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a77e:	6939      	ldr	r1, [r7, #16]
 800a780:	0148      	lsls	r0, r1, #5
 800a782:	6979      	ldr	r1, [r7, #20]
 800a784:	4401      	add	r1, r0
 800a786:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a78a:	4313      	orrs	r3, r2
 800a78c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	015a      	lsls	r2, r3, #5
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	4413      	add	r3, r2
 800a796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	0151      	lsls	r1, r2, #5
 800a7a0:	697a      	ldr	r2, [r7, #20]
 800a7a2:	440a      	add	r2, r1
 800a7a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a7ac:	6113      	str	r3, [r2, #16]
 800a7ae:	e039      	b.n	800a824 <USB_EPStartXfer+0x3dc>
 800a7b0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	691a      	ldr	r2, [r3, #16]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	4413      	add	r3, r2
 800a7be:	1e5a      	subs	r2, r3, #1
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c8:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	89fa      	ldrh	r2, [r7, #14]
 800a7d0:	fb03 f202 	mul.w	r2, r3, r2
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	015a      	lsls	r2, r3, #5
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	4413      	add	r3, r2
 800a7e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7e4:	691a      	ldr	r2, [r3, #16]
 800a7e6:	89fb      	ldrh	r3, [r7, #14]
 800a7e8:	04d9      	lsls	r1, r3, #19
 800a7ea:	4b2f      	ldr	r3, [pc, #188]	@ (800a8a8 <USB_EPStartXfer+0x460>)
 800a7ec:	400b      	ands	r3, r1
 800a7ee:	6939      	ldr	r1, [r7, #16]
 800a7f0:	0148      	lsls	r0, r1, #5
 800a7f2:	6979      	ldr	r1, [r7, #20]
 800a7f4:	4401      	add	r1, r0
 800a7f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	4413      	add	r3, r2
 800a806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a80a:	691a      	ldr	r2, [r3, #16]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	6a1b      	ldr	r3, [r3, #32]
 800a810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a814:	6939      	ldr	r1, [r7, #16]
 800a816:	0148      	lsls	r0, r1, #5
 800a818:	6979      	ldr	r1, [r7, #20]
 800a81a:	4401      	add	r1, r0
 800a81c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a820:	4313      	orrs	r3, r2
 800a822:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	791b      	ldrb	r3, [r3, #4]
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d128      	bne.n	800a87e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d110      	bne.n	800a85e <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	0151      	lsls	r1, r2, #5
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	440a      	add	r2, r1
 800a852:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a856:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a85a:	6013      	str	r3, [r2, #0]
 800a85c:	e00f      	b.n	800a87e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	015a      	lsls	r2, r3, #5
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	4413      	add	r3, r2
 800a866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	0151      	lsls	r1, r2, #5
 800a870:	697a      	ldr	r2, [r7, #20]
 800a872:	440a      	add	r2, r1
 800a874:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a87c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	015a      	lsls	r2, r3, #5
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	4413      	add	r3, r2
 800a886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	693a      	ldr	r2, [r7, #16]
 800a88e:	0151      	lsls	r1, r2, #5
 800a890:	697a      	ldr	r2, [r7, #20]
 800a892:	440a      	add	r2, r1
 800a894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a898:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a89c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	1ff80000 	.word	0x1ff80000

0800a8ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b087      	sub	sp, #28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	785b      	ldrb	r3, [r3, #1]
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d14a      	bne.n	800a960 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8e2:	f040 8086 	bne.w	800a9f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	015a      	lsls	r2, r3, #5
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	7812      	ldrb	r2, [r2, #0]
 800a8fa:	0151      	lsls	r1, r2, #5
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	440a      	add	r2, r1
 800a900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a904:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a908:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	683a      	ldr	r2, [r7, #0]
 800a91c:	7812      	ldrb	r2, [r2, #0]
 800a91e:	0151      	lsls	r1, r2, #5
 800a920:	693a      	ldr	r2, [r7, #16]
 800a922:	440a      	add	r2, r1
 800a924:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a928:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a92c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3301      	adds	r3, #1
 800a932:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d902      	bls.n	800a944 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	75fb      	strb	r3, [r7, #23]
          break;
 800a942:	e056      	b.n	800a9f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	015a      	lsls	r2, r3, #5
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	4413      	add	r3, r2
 800a94e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a958:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a95c:	d0e7      	beq.n	800a92e <USB_EPStopXfer+0x82>
 800a95e:	e048      	b.n	800a9f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	015a      	lsls	r2, r3, #5
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	4413      	add	r3, r2
 800a96a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a974:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a978:	d13b      	bne.n	800a9f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	015a      	lsls	r2, r3, #5
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	4413      	add	r3, r2
 800a984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	7812      	ldrb	r2, [r2, #0]
 800a98e:	0151      	lsls	r1, r2, #5
 800a990:	693a      	ldr	r2, [r7, #16]
 800a992:	440a      	add	r2, r1
 800a994:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a998:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a99c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	015a      	lsls	r2, r3, #5
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	7812      	ldrb	r2, [r2, #0]
 800a9b2:	0151      	lsls	r1, r2, #5
 800a9b4:	693a      	ldr	r2, [r7, #16]
 800a9b6:	440a      	add	r2, r1
 800a9b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a9c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d902      	bls.n	800a9d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	75fb      	strb	r3, [r7, #23]
          break;
 800a9d6:	e00c      	b.n	800a9f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	015a      	lsls	r2, r3, #5
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9f0:	d0e7      	beq.n	800a9c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a9f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	371c      	adds	r7, #28
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b089      	sub	sp, #36	@ 0x24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	460b      	mov	r3, r1
 800aa10:	71fb      	strb	r3, [r7, #7]
 800aa12:	4613      	mov	r3, r2
 800aa14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800aa1e:	88bb      	ldrh	r3, [r7, #4]
 800aa20:	3303      	adds	r3, #3
 800aa22:	089b      	lsrs	r3, r3, #2
 800aa24:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800aa26:	2300      	movs	r3, #0
 800aa28:	61bb      	str	r3, [r7, #24]
 800aa2a:	e018      	b.n	800aa5e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aa2c:	79fb      	ldrb	r3, [r7, #7]
 800aa2e:	031a      	lsls	r2, r3, #12
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	4413      	add	r3, r2
 800aa34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa38:	461a      	mov	r2, r3
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6013      	str	r3, [r2, #0]
    pSrc++;
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	3301      	adds	r3, #1
 800aa44:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	3301      	adds	r3, #1
 800aa56:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	61bb      	str	r3, [r7, #24]
 800aa5e:	69ba      	ldr	r2, [r7, #24]
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d3e2      	bcc.n	800aa2c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3724      	adds	r7, #36	@ 0x24
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b08b      	sub	sp, #44	@ 0x2c
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aa8a:	88fb      	ldrh	r3, [r7, #6]
 800aa8c:	089b      	lsrs	r3, r3, #2
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aa92:	88fb      	ldrh	r3, [r7, #6]
 800aa94:	f003 0303 	and.w	r3, r3, #3
 800aa98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	623b      	str	r3, [r7, #32]
 800aa9e:	e014      	b.n	800aaca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaaa:	601a      	str	r2, [r3, #0]
    pDest++;
 800aaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaae:	3301      	adds	r3, #1
 800aab0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab4:	3301      	adds	r3, #1
 800aab6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaba:	3301      	adds	r3, #1
 800aabc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac0:	3301      	adds	r3, #1
 800aac2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aac4:	6a3b      	ldr	r3, [r7, #32]
 800aac6:	3301      	adds	r3, #1
 800aac8:	623b      	str	r3, [r7, #32]
 800aaca:	6a3a      	ldr	r2, [r7, #32]
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d3e6      	bcc.n	800aaa0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aad2:	8bfb      	ldrh	r3, [r7, #30]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d01e      	beq.n	800ab16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aad8:	2300      	movs	r3, #0
 800aada:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aae2:	461a      	mov	r2, r3
 800aae4:	f107 0310 	add.w	r3, r7, #16
 800aae8:	6812      	ldr	r2, [r2, #0]
 800aaea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	6a3b      	ldr	r3, [r7, #32]
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	00db      	lsls	r3, r3, #3
 800aaf4:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafc:	701a      	strb	r2, [r3, #0]
      i++;
 800aafe:	6a3b      	ldr	r3, [r7, #32]
 800ab00:	3301      	adds	r3, #1
 800ab02:	623b      	str	r3, [r7, #32]
      pDest++;
 800ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab06:	3301      	adds	r3, #1
 800ab08:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ab0a:	8bfb      	ldrh	r3, [r7, #30]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ab10:	8bfb      	ldrh	r3, [r7, #30]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1ea      	bne.n	800aaec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ab16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	372c      	adds	r7, #44	@ 0x2c
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	785b      	ldrb	r3, [r3, #1]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	d12c      	bne.n	800ab9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	db12      	blt.n	800ab78 <USB_EPSetStall+0x54>
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00f      	beq.n	800ab78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	0151      	lsls	r1, r2, #5
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	440a      	add	r2, r1
 800ab6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68ba      	ldr	r2, [r7, #8]
 800ab88:	0151      	lsls	r1, r2, #5
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	440a      	add	r2, r1
 800ab8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	e02b      	b.n	800abf2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	015a      	lsls	r2, r3, #5
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	4413      	add	r3, r2
 800aba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	db12      	blt.n	800abd2 <USB_EPSetStall+0xae>
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00f      	beq.n	800abd2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	015a      	lsls	r2, r3, #5
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	4413      	add	r3, r2
 800abba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	0151      	lsls	r1, r2, #5
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	440a      	add	r2, r1
 800abc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abcc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800abd0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	0151      	lsls	r1, r2, #5
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	440a      	add	r2, r1
 800abe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800abf0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	785b      	ldrb	r3, [r3, #1]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d128      	bne.n	800ac6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	015a      	lsls	r2, r3, #5
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4413      	add	r3, r2
 800ac24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	0151      	lsls	r1, r2, #5
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	440a      	add	r2, r1
 800ac32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	791b      	ldrb	r3, [r3, #4]
 800ac40:	2b03      	cmp	r3, #3
 800ac42:	d003      	beq.n	800ac4c <USB_EPClearStall+0x4c>
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	791b      	ldrb	r3, [r3, #4]
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d138      	bne.n	800acbe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	0151      	lsls	r1, r2, #5
 800ac5e:	68fa      	ldr	r2, [r7, #12]
 800ac60:	440a      	add	r2, r1
 800ac62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac6a:	6013      	str	r3, [r2, #0]
 800ac6c:	e027      	b.n	800acbe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	015a      	lsls	r2, r3, #5
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	4413      	add	r3, r2
 800ac76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	0151      	lsls	r1, r2, #5
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	440a      	add	r2, r1
 800ac84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac88:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	791b      	ldrb	r3, [r3, #4]
 800ac92:	2b03      	cmp	r3, #3
 800ac94:	d003      	beq.n	800ac9e <USB_EPClearStall+0x9e>
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	791b      	ldrb	r3, [r3, #4]
 800ac9a:	2b02      	cmp	r3, #2
 800ac9c:	d10f      	bne.n	800acbe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	0151      	lsls	r1, r2, #5
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	440a      	add	r2, r1
 800acb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800acb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800acbc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acea:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800acee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800ad00:	68f9      	ldr	r1, [r7, #12]
 800ad02:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad06:	4313      	orrs	r3, r2
 800ad08:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3714      	adds	r7, #20
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad32:	f023 0303 	bic.w	r3, r3, #3
 800ad36:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad46:	f023 0302 	bic.w	r3, r3, #2
 800ad4a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b085      	sub	sp, #20
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad74:	f023 0303 	bic.w	r3, r3, #3
 800ad78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	68fa      	ldr	r2, [r7, #12]
 800ad84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad88:	f043 0302 	orr.w	r3, r3, #2
 800ad8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3714      	adds	r7, #20
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	695b      	ldr	r3, [r3, #20]
 800ada8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	4013      	ands	r3, r2
 800adb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800adb4:	68fb      	ldr	r3, [r7, #12]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3714      	adds	r7, #20
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b085      	sub	sp, #20
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adde:	69db      	ldr	r3, [r3, #28]
 800ade0:	68ba      	ldr	r2, [r7, #8]
 800ade2:	4013      	ands	r3, r2
 800ade4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	0c1b      	lsrs	r3, r3, #16
}
 800adea:	4618      	mov	r0, r3
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b085      	sub	sp, #20
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae12:	69db      	ldr	r3, [r3, #28]
 800ae14:	68ba      	ldr	r2, [r7, #8]
 800ae16:	4013      	ands	r3, r2
 800ae18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	b29b      	uxth	r3, r3
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b085      	sub	sp, #20
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	460b      	mov	r3, r1
 800ae34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ae3a:	78fb      	ldrb	r3, [r7, #3]
 800ae3c:	015a      	lsls	r2, r3, #5
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	4413      	add	r3, r2
 800ae42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	4013      	ands	r3, r2
 800ae56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae58:	68bb      	ldr	r3, [r7, #8]
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	3714      	adds	r7, #20
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b087      	sub	sp, #28
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	460b      	mov	r3, r1
 800ae70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae88:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae8a:	78fb      	ldrb	r3, [r7, #3]
 800ae8c:	f003 030f 	and.w	r3, r3, #15
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	fa22 f303 	lsr.w	r3, r2, r3
 800ae96:	01db      	lsls	r3, r3, #7
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aea0:	78fb      	ldrb	r3, [r7, #3]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aeb4:	68bb      	ldr	r3, [r7, #8]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	371c      	adds	r7, #28
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr

0800aec2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aec2:	b480      	push	{r7}
 800aec4:	b083      	sub	sp, #12
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	f003 0301 	and.w	r3, r3, #1
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800aede:	b480      	push	{r7}
 800aee0:	b085      	sub	sp, #20
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aef8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aefc:	f023 0307 	bic.w	r3, r3, #7
 800af00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800af10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3714      	adds	r7, #20
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	333c      	adds	r3, #60	@ 0x3c
 800af36:	3304      	adds	r3, #4
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	4a1c      	ldr	r2, [pc, #112]	@ (800afb0 <USB_EP0_OutStart+0x8c>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d90a      	bls.n	800af5a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af54:	d101      	bne.n	800af5a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	e024      	b.n	800afa4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af60:	461a      	mov	r2, r3
 800af62:	2300      	movs	r3, #0
 800af64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	68fa      	ldr	r2, [r7, #12]
 800af70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af80:	691b      	ldr	r3, [r3, #16]
 800af82:	68fa      	ldr	r2, [r7, #12]
 800af84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af88:	f043 0318 	orr.w	r3, r3, #24
 800af8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af9c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800afa0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	4f54300a 	.word	0x4f54300a

0800afb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afbc:	2300      	movs	r3, #0
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	3301      	adds	r3, #1
 800afc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	4a13      	ldr	r2, [pc, #76]	@ (800b018 <USB_CoreReset+0x64>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d901      	bls.n	800afd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afce:	2303      	movs	r3, #3
 800afd0:	e01b      	b.n	800b00a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	daf2      	bge.n	800afc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800afda:	2300      	movs	r3, #0
 800afdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	f043 0201 	orr.w	r2, r3, #1
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	3301      	adds	r3, #1
 800afee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4a09      	ldr	r2, [pc, #36]	@ (800b018 <USB_CoreReset+0x64>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d901      	bls.n	800affc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aff8:	2303      	movs	r3, #3
 800affa:	e006      	b.n	800b00a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	691b      	ldr	r3, [r3, #16]
 800b000:	f003 0301 	and.w	r3, r3, #1
 800b004:	2b01      	cmp	r3, #1
 800b006:	d0f0      	beq.n	800afea <USB_CoreReset+0x36>

  return HAL_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3714      	adds	r7, #20
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	00030d40 	.word	0x00030d40

0800b01c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b028:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b02c:	f002 fe2c 	bl	800dc88 <USBD_static_malloc>
 800b030:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d109      	bne.n	800b04c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	32b0      	adds	r2, #176	@ 0xb0
 800b042:	2100      	movs	r1, #0
 800b044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b048:	2302      	movs	r3, #2
 800b04a:	e0d4      	b.n	800b1f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b04c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b050:	2100      	movs	r1, #0
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f002 fe36 	bl	800dcc4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	32b0      	adds	r2, #176	@ 0xb0
 800b062:	68f9      	ldr	r1, [r7, #12]
 800b064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	32b0      	adds	r2, #176	@ 0xb0
 800b072:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	7c1b      	ldrb	r3, [r3, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d138      	bne.n	800b0f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b084:	4b5e      	ldr	r3, [pc, #376]	@ (800b200 <USBD_CDC_Init+0x1e4>)
 800b086:	7819      	ldrb	r1, [r3, #0]
 800b088:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b08c:	2202      	movs	r2, #2
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f002 fbe6 	bl	800d860 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b094:	4b5a      	ldr	r3, [pc, #360]	@ (800b200 <USBD_CDC_Init+0x1e4>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	f003 020f 	and.w	r2, r3, #15
 800b09c:	6879      	ldr	r1, [r7, #4]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	440b      	add	r3, r1
 800b0a8:	3324      	adds	r3, #36	@ 0x24
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b0ae:	4b55      	ldr	r3, [pc, #340]	@ (800b204 <USBD_CDC_Init+0x1e8>)
 800b0b0:	7819      	ldrb	r1, [r3, #0]
 800b0b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f002 fbd1 	bl	800d860 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b0be:	4b51      	ldr	r3, [pc, #324]	@ (800b204 <USBD_CDC_Init+0x1e8>)
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	f003 020f 	and.w	r2, r3, #15
 800b0c6:	6879      	ldr	r1, [r7, #4]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	440b      	add	r3, r1
 800b0d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b0da:	4b4b      	ldr	r3, [pc, #300]	@ (800b208 <USBD_CDC_Init+0x1ec>)
 800b0dc:	781b      	ldrb	r3, [r3, #0]
 800b0de:	f003 020f 	and.w	r2, r3, #15
 800b0e2:	6879      	ldr	r1, [r7, #4]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	440b      	add	r3, r1
 800b0ee:	3326      	adds	r3, #38	@ 0x26
 800b0f0:	2210      	movs	r2, #16
 800b0f2:	801a      	strh	r2, [r3, #0]
 800b0f4:	e035      	b.n	800b162 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b0f6:	4b42      	ldr	r3, [pc, #264]	@ (800b200 <USBD_CDC_Init+0x1e4>)
 800b0f8:	7819      	ldrb	r1, [r3, #0]
 800b0fa:	2340      	movs	r3, #64	@ 0x40
 800b0fc:	2202      	movs	r2, #2
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f002 fbae 	bl	800d860 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b104:	4b3e      	ldr	r3, [pc, #248]	@ (800b200 <USBD_CDC_Init+0x1e4>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	f003 020f 	and.w	r2, r3, #15
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	4613      	mov	r3, r2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4413      	add	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	440b      	add	r3, r1
 800b118:	3324      	adds	r3, #36	@ 0x24
 800b11a:	2201      	movs	r2, #1
 800b11c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b11e:	4b39      	ldr	r3, [pc, #228]	@ (800b204 <USBD_CDC_Init+0x1e8>)
 800b120:	7819      	ldrb	r1, [r3, #0]
 800b122:	2340      	movs	r3, #64	@ 0x40
 800b124:	2202      	movs	r2, #2
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f002 fb9a 	bl	800d860 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b12c:	4b35      	ldr	r3, [pc, #212]	@ (800b204 <USBD_CDC_Init+0x1e8>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	f003 020f 	and.w	r2, r3, #15
 800b134:	6879      	ldr	r1, [r7, #4]
 800b136:	4613      	mov	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	4413      	add	r3, r2
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	440b      	add	r3, r1
 800b140:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b144:	2201      	movs	r2, #1
 800b146:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b148:	4b2f      	ldr	r3, [pc, #188]	@ (800b208 <USBD_CDC_Init+0x1ec>)
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	f003 020f 	and.w	r2, r3, #15
 800b150:	6879      	ldr	r1, [r7, #4]
 800b152:	4613      	mov	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4413      	add	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	440b      	add	r3, r1
 800b15c:	3326      	adds	r3, #38	@ 0x26
 800b15e:	2210      	movs	r2, #16
 800b160:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b162:	4b29      	ldr	r3, [pc, #164]	@ (800b208 <USBD_CDC_Init+0x1ec>)
 800b164:	7819      	ldrb	r1, [r3, #0]
 800b166:	2308      	movs	r3, #8
 800b168:	2203      	movs	r2, #3
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f002 fb78 	bl	800d860 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b170:	4b25      	ldr	r3, [pc, #148]	@ (800b208 <USBD_CDC_Init+0x1ec>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	f003 020f 	and.w	r2, r3, #15
 800b178:	6879      	ldr	r1, [r7, #4]
 800b17a:	4613      	mov	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	440b      	add	r3, r1
 800b184:	3324      	adds	r3, #36	@ 0x24
 800b186:	2201      	movs	r2, #1
 800b188:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	33b0      	adds	r3, #176	@ 0xb0
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d101      	bne.n	800b1c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	e018      	b.n	800b1f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	7c1b      	ldrb	r3, [r3, #16]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10a      	bne.n	800b1e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b204 <USBD_CDC_Init+0x1e8>)
 800b1ce:	7819      	ldrb	r1, [r3, #0]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f002 fcba 	bl	800db54 <USBD_LL_PrepareReceive>
 800b1e0:	e008      	b.n	800b1f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1e2:	4b08      	ldr	r3, [pc, #32]	@ (800b204 <USBD_CDC_Init+0x1e8>)
 800b1e4:	7819      	ldrb	r1, [r3, #0]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1ec:	2340      	movs	r3, #64	@ 0x40
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f002 fcb0 	bl	800db54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	20000093 	.word	0x20000093
 800b204:	20000094 	.word	0x20000094
 800b208:	20000095 	.word	0x20000095

0800b20c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	460b      	mov	r3, r1
 800b216:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b218:	4b3a      	ldr	r3, [pc, #232]	@ (800b304 <USBD_CDC_DeInit+0xf8>)
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	4619      	mov	r1, r3
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f002 fb5c 	bl	800d8dc <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b224:	4b37      	ldr	r3, [pc, #220]	@ (800b304 <USBD_CDC_DeInit+0xf8>)
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	f003 020f 	and.w	r2, r3, #15
 800b22c:	6879      	ldr	r1, [r7, #4]
 800b22e:	4613      	mov	r3, r2
 800b230:	009b      	lsls	r3, r3, #2
 800b232:	4413      	add	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	440b      	add	r3, r1
 800b238:	3324      	adds	r3, #36	@ 0x24
 800b23a:	2200      	movs	r2, #0
 800b23c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b23e:	4b32      	ldr	r3, [pc, #200]	@ (800b308 <USBD_CDC_DeInit+0xfc>)
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	4619      	mov	r1, r3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f002 fb49 	bl	800d8dc <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b24a:	4b2f      	ldr	r3, [pc, #188]	@ (800b308 <USBD_CDC_DeInit+0xfc>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	f003 020f 	and.w	r2, r3, #15
 800b252:	6879      	ldr	r1, [r7, #4]
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	440b      	add	r3, r1
 800b25e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b262:	2200      	movs	r2, #0
 800b264:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b266:	4b29      	ldr	r3, [pc, #164]	@ (800b30c <USBD_CDC_DeInit+0x100>)
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f002 fb35 	bl	800d8dc <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b272:	4b26      	ldr	r3, [pc, #152]	@ (800b30c <USBD_CDC_DeInit+0x100>)
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	f003 020f 	and.w	r2, r3, #15
 800b27a:	6879      	ldr	r1, [r7, #4]
 800b27c:	4613      	mov	r3, r2
 800b27e:	009b      	lsls	r3, r3, #2
 800b280:	4413      	add	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	440b      	add	r3, r1
 800b286:	3324      	adds	r3, #36	@ 0x24
 800b288:	2200      	movs	r2, #0
 800b28a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b28c:	4b1f      	ldr	r3, [pc, #124]	@ (800b30c <USBD_CDC_DeInit+0x100>)
 800b28e:	781b      	ldrb	r3, [r3, #0]
 800b290:	f003 020f 	and.w	r2, r3, #15
 800b294:	6879      	ldr	r1, [r7, #4]
 800b296:	4613      	mov	r3, r2
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	4413      	add	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	440b      	add	r3, r1
 800b2a0:	3326      	adds	r3, #38	@ 0x26
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	32b0      	adds	r2, #176	@ 0xb0
 800b2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d01f      	beq.n	800b2f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	33b0      	adds	r3, #176	@ 0xb0
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4413      	add	r3, r2
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	32b0      	adds	r2, #176	@ 0xb0
 800b2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f002 fce2 	bl	800dca4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	32b0      	adds	r2, #176	@ 0xb0
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	20000093 	.word	0x20000093
 800b308:	20000094 	.word	0x20000094
 800b30c:	20000095 	.word	0x20000095

0800b310 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	32b0      	adds	r2, #176	@ 0xb0
 800b324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b328:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b32e:	2300      	movs	r3, #0
 800b330:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b332:	2300      	movs	r3, #0
 800b334:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d101      	bne.n	800b340 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b33c:	2303      	movs	r3, #3
 800b33e:	e0bf      	b.n	800b4c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d050      	beq.n	800b3ee <USBD_CDC_Setup+0xde>
 800b34c:	2b20      	cmp	r3, #32
 800b34e:	f040 80af 	bne.w	800b4b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	88db      	ldrh	r3, [r3, #6]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d03a      	beq.n	800b3d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	b25b      	sxtb	r3, r3
 800b360:	2b00      	cmp	r3, #0
 800b362:	da1b      	bge.n	800b39c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	33b0      	adds	r3, #176	@ 0xb0
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	685b      	ldr	r3, [r3, #4]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b37a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b37c:	683a      	ldr	r2, [r7, #0]
 800b37e:	88d2      	ldrh	r2, [r2, #6]
 800b380:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	88db      	ldrh	r3, [r3, #6]
 800b386:	2b07      	cmp	r3, #7
 800b388:	bf28      	it	cs
 800b38a:	2307      	movcs	r3, #7
 800b38c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	89fa      	ldrh	r2, [r7, #14]
 800b392:	4619      	mov	r1, r3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f001 fdb1 	bl	800cefc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b39a:	e090      	b.n	800b4be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	785a      	ldrb	r2, [r3, #1]
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	88db      	ldrh	r3, [r3, #6]
 800b3aa:	2b3f      	cmp	r3, #63	@ 0x3f
 800b3ac:	d803      	bhi.n	800b3b6 <USBD_CDC_Setup+0xa6>
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	88db      	ldrh	r3, [r3, #6]
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	e000      	b.n	800b3b8 <USBD_CDC_Setup+0xa8>
 800b3b6:	2240      	movs	r2, #64	@ 0x40
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b3be:	6939      	ldr	r1, [r7, #16]
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f001 fdc3 	bl	800cf54 <USBD_CtlPrepareRx>
      break;
 800b3ce:	e076      	b.n	800b4be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	33b0      	adds	r3, #176	@ 0xb0
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	7850      	ldrb	r0, [r2, #1]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	4798      	blx	r3
      break;
 800b3ec:	e067      	b.n	800b4be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	785b      	ldrb	r3, [r3, #1]
 800b3f2:	2b0b      	cmp	r3, #11
 800b3f4:	d851      	bhi.n	800b49a <USBD_CDC_Setup+0x18a>
 800b3f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3fc <USBD_CDC_Setup+0xec>)
 800b3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fc:	0800b42d 	.word	0x0800b42d
 800b400:	0800b4a9 	.word	0x0800b4a9
 800b404:	0800b49b 	.word	0x0800b49b
 800b408:	0800b49b 	.word	0x0800b49b
 800b40c:	0800b49b 	.word	0x0800b49b
 800b410:	0800b49b 	.word	0x0800b49b
 800b414:	0800b49b 	.word	0x0800b49b
 800b418:	0800b49b 	.word	0x0800b49b
 800b41c:	0800b49b 	.word	0x0800b49b
 800b420:	0800b49b 	.word	0x0800b49b
 800b424:	0800b457 	.word	0x0800b457
 800b428:	0800b481 	.word	0x0800b481
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b03      	cmp	r3, #3
 800b436:	d107      	bne.n	800b448 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b438:	f107 030a 	add.w	r3, r7, #10
 800b43c:	2202      	movs	r2, #2
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f001 fd5b 	bl	800cefc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b446:	e032      	b.n	800b4ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f001 fce5 	bl	800ce1a <USBD_CtlError>
            ret = USBD_FAIL;
 800b450:	2303      	movs	r3, #3
 800b452:	75fb      	strb	r3, [r7, #23]
          break;
 800b454:	e02b      	b.n	800b4ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d107      	bne.n	800b472 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b462:	f107 030d 	add.w	r3, r7, #13
 800b466:	2201      	movs	r2, #1
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 fd46 	bl	800cefc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b470:	e01d      	b.n	800b4ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f001 fcd0 	bl	800ce1a <USBD_CtlError>
            ret = USBD_FAIL;
 800b47a:	2303      	movs	r3, #3
 800b47c:	75fb      	strb	r3, [r7, #23]
          break;
 800b47e:	e016      	b.n	800b4ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b03      	cmp	r3, #3
 800b48a:	d00f      	beq.n	800b4ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f001 fcc3 	bl	800ce1a <USBD_CtlError>
            ret = USBD_FAIL;
 800b494:	2303      	movs	r3, #3
 800b496:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b498:	e008      	b.n	800b4ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b49a:	6839      	ldr	r1, [r7, #0]
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f001 fcbc 	bl	800ce1a <USBD_CtlError>
          ret = USBD_FAIL;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	75fb      	strb	r3, [r7, #23]
          break;
 800b4a6:	e002      	b.n	800b4ae <USBD_CDC_Setup+0x19e>
          break;
 800b4a8:	bf00      	nop
 800b4aa:	e008      	b.n	800b4be <USBD_CDC_Setup+0x1ae>
          break;
 800b4ac:	bf00      	nop
      }
      break;
 800b4ae:	e006      	b.n	800b4be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f001 fcb1 	bl	800ce1a <USBD_CtlError>
      ret = USBD_FAIL;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b4bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3718      	adds	r7, #24
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	32b0      	adds	r2, #176	@ 0xb0
 800b4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b4ee:	2303      	movs	r3, #3
 800b4f0:	e065      	b.n	800b5be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	32b0      	adds	r2, #176	@ 0xb0
 800b4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b500:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b502:	78fb      	ldrb	r3, [r7, #3]
 800b504:	f003 020f 	and.w	r2, r3, #15
 800b508:	6879      	ldr	r1, [r7, #4]
 800b50a:	4613      	mov	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	440b      	add	r3, r1
 800b514:	3318      	adds	r3, #24
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d02f      	beq.n	800b57c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b51c:	78fb      	ldrb	r3, [r7, #3]
 800b51e:	f003 020f 	and.w	r2, r3, #15
 800b522:	6879      	ldr	r1, [r7, #4]
 800b524:	4613      	mov	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4413      	add	r3, r2
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	440b      	add	r3, r1
 800b52e:	3318      	adds	r3, #24
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	78fb      	ldrb	r3, [r7, #3]
 800b534:	f003 010f 	and.w	r1, r3, #15
 800b538:	68f8      	ldr	r0, [r7, #12]
 800b53a:	460b      	mov	r3, r1
 800b53c:	00db      	lsls	r3, r3, #3
 800b53e:	440b      	add	r3, r1
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4403      	add	r3, r0
 800b544:	3344      	adds	r3, #68	@ 0x44
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	fbb2 f1f3 	udiv	r1, r2, r3
 800b54c:	fb01 f303 	mul.w	r3, r1, r3
 800b550:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b552:	2b00      	cmp	r3, #0
 800b554:	d112      	bne.n	800b57c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b556:	78fb      	ldrb	r3, [r7, #3]
 800b558:	f003 020f 	and.w	r2, r3, #15
 800b55c:	6879      	ldr	r1, [r7, #4]
 800b55e:	4613      	mov	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	4413      	add	r3, r2
 800b564:	009b      	lsls	r3, r3, #2
 800b566:	440b      	add	r3, r1
 800b568:	3318      	adds	r3, #24
 800b56a:	2200      	movs	r2, #0
 800b56c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b56e:	78f9      	ldrb	r1, [r7, #3]
 800b570:	2300      	movs	r3, #0
 800b572:	2200      	movs	r2, #0
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f002 fab5 	bl	800dae4 <USBD_LL_Transmit>
 800b57a:	e01f      	b.n	800b5bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	2200      	movs	r2, #0
 800b580:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	33b0      	adds	r3, #176	@ 0xb0
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	4413      	add	r3, r2
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	691b      	ldr	r3, [r3, #16]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d010      	beq.n	800b5bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	33b0      	adds	r3, #176	@ 0xb0
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	691b      	ldr	r3, [r3, #16]
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b5b8:	78fa      	ldrb	r2, [r7, #3]
 800b5ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	32b0      	adds	r2, #176	@ 0xb0
 800b5dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	32b0      	adds	r2, #176	@ 0xb0
 800b5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d101      	bne.n	800b5f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b5f4:	2303      	movs	r3, #3
 800b5f6:	e01a      	b.n	800b62e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5f8:	78fb      	ldrb	r3, [r7, #3]
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f002 fae1 	bl	800dbc4 <USBD_LL_GetRxDataSize>
 800b602:	4602      	mov	r2, r0
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	33b0      	adds	r3, #176	@ 0xb0
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4413      	add	r3, r2
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b628:	4611      	mov	r1, r2
 800b62a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b084      	sub	sp, #16
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	32b0      	adds	r2, #176	@ 0xb0
 800b648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d101      	bne.n	800b658 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b654:	2303      	movs	r3, #3
 800b656:	e024      	b.n	800b6a2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	33b0      	adds	r3, #176	@ 0xb0
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d019      	beq.n	800b6a0 <USBD_CDC_EP0_RxReady+0x6a>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b672:	2bff      	cmp	r3, #255	@ 0xff
 800b674:	d014      	beq.n	800b6a0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	33b0      	adds	r3, #176	@ 0xb0
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	4413      	add	r3, r2
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b68e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b690:	68fa      	ldr	r2, [r7, #12]
 800b692:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b696:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	22ff      	movs	r2, #255	@ 0xff
 800b69c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3710      	adds	r7, #16
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
	...

0800b6ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6b4:	2182      	movs	r1, #130	@ 0x82
 800b6b6:	4818      	ldr	r0, [pc, #96]	@ (800b718 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6b8:	f000 fd4f 	bl	800c15a <USBD_GetEpDesc>
 800b6bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6be:	2101      	movs	r1, #1
 800b6c0:	4815      	ldr	r0, [pc, #84]	@ (800b718 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6c2:	f000 fd4a 	bl	800c15a <USBD_GetEpDesc>
 800b6c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6c8:	2181      	movs	r1, #129	@ 0x81
 800b6ca:	4813      	ldr	r0, [pc, #76]	@ (800b718 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6cc:	f000 fd45 	bl	800c15a <USBD_GetEpDesc>
 800b6d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d002      	beq.n	800b6de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	2210      	movs	r2, #16
 800b6dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d006      	beq.n	800b6f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6ec:	711a      	strb	r2, [r3, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d006      	beq.n	800b706 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b700:	711a      	strb	r2, [r3, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2243      	movs	r2, #67	@ 0x43
 800b70a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b70c:	4b02      	ldr	r3, [pc, #8]	@ (800b718 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	20000050 	.word	0x20000050

0800b71c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b724:	2182      	movs	r1, #130	@ 0x82
 800b726:	4818      	ldr	r0, [pc, #96]	@ (800b788 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b728:	f000 fd17 	bl	800c15a <USBD_GetEpDesc>
 800b72c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b72e:	2101      	movs	r1, #1
 800b730:	4815      	ldr	r0, [pc, #84]	@ (800b788 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b732:	f000 fd12 	bl	800c15a <USBD_GetEpDesc>
 800b736:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b738:	2181      	movs	r1, #129	@ 0x81
 800b73a:	4813      	ldr	r0, [pc, #76]	@ (800b788 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b73c:	f000 fd0d 	bl	800c15a <USBD_GetEpDesc>
 800b740:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d002      	beq.n	800b74e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	2210      	movs	r2, #16
 800b74c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d006      	beq.n	800b762 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	2200      	movs	r2, #0
 800b758:	711a      	strb	r2, [r3, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f042 0202 	orr.w	r2, r2, #2
 800b760:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d006      	beq.n	800b776 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	711a      	strb	r2, [r3, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f042 0202 	orr.w	r2, r2, #2
 800b774:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2243      	movs	r2, #67	@ 0x43
 800b77a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b77c:	4b02      	ldr	r3, [pc, #8]	@ (800b788 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3718      	adds	r7, #24
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	20000050 	.word	0x20000050

0800b78c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b086      	sub	sp, #24
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b794:	2182      	movs	r1, #130	@ 0x82
 800b796:	4818      	ldr	r0, [pc, #96]	@ (800b7f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b798:	f000 fcdf 	bl	800c15a <USBD_GetEpDesc>
 800b79c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b79e:	2101      	movs	r1, #1
 800b7a0:	4815      	ldr	r0, [pc, #84]	@ (800b7f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b7a2:	f000 fcda 	bl	800c15a <USBD_GetEpDesc>
 800b7a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b7a8:	2181      	movs	r1, #129	@ 0x81
 800b7aa:	4813      	ldr	r0, [pc, #76]	@ (800b7f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b7ac:	f000 fcd5 	bl	800c15a <USBD_GetEpDesc>
 800b7b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d002      	beq.n	800b7be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	2210      	movs	r2, #16
 800b7bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d006      	beq.n	800b7d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7cc:	711a      	strb	r2, [r3, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d006      	beq.n	800b7e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7e0:	711a      	strb	r2, [r3, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2243      	movs	r2, #67	@ 0x43
 800b7ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7ec:	4b02      	ldr	r3, [pc, #8]	@ (800b7f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20000050 	.word	0x20000050

0800b7fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	220a      	movs	r2, #10
 800b808:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b80a:	4b03      	ldr	r3, [pc, #12]	@ (800b818 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr
 800b818:	2000000c 	.word	0x2000000c

0800b81c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d101      	bne.n	800b830 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b82c:	2303      	movs	r3, #3
 800b82e:	e009      	b.n	800b844 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	33b0      	adds	r3, #176	@ 0xb0
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	370c      	adds	r7, #12
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b850:	b480      	push	{r7}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	60f8      	str	r0, [r7, #12]
 800b858:	60b9      	str	r1, [r7, #8]
 800b85a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	32b0      	adds	r2, #176	@ 0xb0
 800b866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d101      	bne.n	800b876 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b872:	2303      	movs	r3, #3
 800b874:	e008      	b.n	800b888 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b886:	2300      	movs	r3, #0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	371c      	adds	r7, #28
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	32b0      	adds	r2, #176	@ 0xb0
 800b8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e004      	b.n	800b8c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3714      	adds	r7, #20
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
	...

0800b8d0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	32b0      	adds	r2, #176	@ 0xb0
 800b8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d101      	bne.n	800b8f6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	e025      	b.n	800b942 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d11f      	bne.n	800b940 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	2201      	movs	r2, #1
 800b904:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b908:	4b10      	ldr	r3, [pc, #64]	@ (800b94c <USBD_CDC_TransmitPacket+0x7c>)
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	f003 020f 	and.w	r2, r3, #15
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	4613      	mov	r3, r2
 800b91a:	009b      	lsls	r3, r3, #2
 800b91c:	4413      	add	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	4403      	add	r3, r0
 800b922:	3318      	adds	r3, #24
 800b924:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b926:	4b09      	ldr	r3, [pc, #36]	@ (800b94c <USBD_CDC_TransmitPacket+0x7c>)
 800b928:	7819      	ldrb	r1, [r3, #0]
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f002 f8d4 	bl	800dae4 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b93c:	2300      	movs	r3, #0
 800b93e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b940:	7bfb      	ldrb	r3, [r7, #15]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	20000093 	.word	0x20000093

0800b950 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	32b0      	adds	r2, #176	@ 0xb0
 800b962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b966:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	32b0      	adds	r2, #176	@ 0xb0
 800b972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b97a:	2303      	movs	r3, #3
 800b97c:	e018      	b.n	800b9b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	7c1b      	ldrb	r3, [r3, #16]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d10a      	bne.n	800b99c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b986:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b8 <USBD_CDC_ReceivePacket+0x68>)
 800b988:	7819      	ldrb	r1, [r3, #0]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b990:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f002 f8dd 	bl	800db54 <USBD_LL_PrepareReceive>
 800b99a:	e008      	b.n	800b9ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b99c:	4b06      	ldr	r3, [pc, #24]	@ (800b9b8 <USBD_CDC_ReceivePacket+0x68>)
 800b99e:	7819      	ldrb	r1, [r3, #0]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b9a6:	2340      	movs	r3, #64	@ 0x40
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f002 f8d3 	bl	800db54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3710      	adds	r7, #16
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	20000094 	.word	0x20000094

0800b9bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d101      	bne.n	800b9d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e01f      	b.n	800ba14 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d003      	beq.n	800b9fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	68ba      	ldr	r2, [r7, #8]
 800b9f6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	79fa      	ldrb	r2, [r7, #7]
 800ba06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f001 feab 	bl	800d764 <USBD_LL_Init>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3718      	adds	r7, #24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba26:	2300      	movs	r3, #0
 800ba28:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d101      	bne.n	800ba34 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba30:	2303      	movs	r3, #3
 800ba32:	e025      	b.n	800ba80 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	32ae      	adds	r2, #174	@ 0xae
 800ba46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00f      	beq.n	800ba70 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	32ae      	adds	r2, #174	@ 0xae
 800ba5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba60:	f107 020e 	add.w	r2, r7, #14
 800ba64:	4610      	mov	r0, r2
 800ba66:	4798      	blx	r3
 800ba68:	4602      	mov	r2, r0
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ba76:	1c5a      	adds	r2, r3, #1
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f001 feb3 	bl	800d7fc <USBD_LL_Start>
 800ba96:	4603      	mov	r3, r0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800baa8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b084      	sub	sp, #16
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	460b      	mov	r3, r1
 800bac0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d009      	beq.n	800bae4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	78fa      	ldrb	r2, [r7, #3]
 800bada:	4611      	mov	r1, r2
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	4798      	blx	r3
 800bae0:	4603      	mov	r3, r0
 800bae2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b084      	sub	sp, #16
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	460b      	mov	r3, r1
 800baf8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bafa:	2300      	movs	r3, #0
 800bafc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	78fa      	ldrb	r2, [r7, #3]
 800bb08:	4611      	mov	r1, r2
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	4798      	blx	r3
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d001      	beq.n	800bb18 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bb14:	2303      	movs	r3, #3
 800bb16:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b084      	sub	sp, #16
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
 800bb2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f001 f936 	bl	800cda6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bb48:	461a      	mov	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb56:	f003 031f 	and.w	r3, r3, #31
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d01a      	beq.n	800bb94 <USBD_LL_SetupStage+0x72>
 800bb5e:	2b02      	cmp	r3, #2
 800bb60:	d822      	bhi.n	800bba8 <USBD_LL_SetupStage+0x86>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <USBD_LL_SetupStage+0x4a>
 800bb66:	2b01      	cmp	r3, #1
 800bb68:	d00a      	beq.n	800bb80 <USBD_LL_SetupStage+0x5e>
 800bb6a:	e01d      	b.n	800bba8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb72:	4619      	mov	r1, r3
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fb63 	bl	800c240 <USBD_StdDevReq>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb7e:	e020      	b.n	800bbc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb86:	4619      	mov	r1, r3
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fbcb 	bl	800c324 <USBD_StdItfReq>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	73fb      	strb	r3, [r7, #15]
      break;
 800bb92:	e016      	b.n	800bbc2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fc2d 	bl	800c3fc <USBD_StdEPReq>
 800bba2:	4603      	mov	r3, r0
 800bba4:	73fb      	strb	r3, [r7, #15]
      break;
 800bba6:	e00c      	b.n	800bbc2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bbae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f001 fec6 	bl	800d948 <USBD_LL_StallEP>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73fb      	strb	r3, [r7, #15]
      break;
 800bbc0:	bf00      	nop
  }

  return ret;
 800bbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	607a      	str	r2, [r7, #4]
 800bbd8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bbde:	7afb      	ldrb	r3, [r7, #11]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d16e      	bne.n	800bcc2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bbea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	f040 8098 	bne.w	800bd28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	689a      	ldr	r2, [r3, #8]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d913      	bls.n	800bc2c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	689a      	ldr	r2, [r3, #8]
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	1ad2      	subs	r2, r2, r3
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	68da      	ldr	r2, [r3, #12]
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	bf28      	it	cs
 800bc1e:	4613      	movcs	r3, r2
 800bc20:	461a      	mov	r2, r3
 800bc22:	6879      	ldr	r1, [r7, #4]
 800bc24:	68f8      	ldr	r0, [r7, #12]
 800bc26:	f001 f9b2 	bl	800cf8e <USBD_CtlContinueRx>
 800bc2a:	e07d      	b.n	800bd28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc32:	f003 031f 	and.w	r3, r3, #31
 800bc36:	2b02      	cmp	r3, #2
 800bc38:	d014      	beq.n	800bc64 <USBD_LL_DataOutStage+0x98>
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d81d      	bhi.n	800bc7a <USBD_LL_DataOutStage+0xae>
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d002      	beq.n	800bc48 <USBD_LL_DataOutStage+0x7c>
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d003      	beq.n	800bc4e <USBD_LL_DataOutStage+0x82>
 800bc46:	e018      	b.n	800bc7a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	75bb      	strb	r3, [r7, #22]
            break;
 800bc4c:	e018      	b.n	800bc80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	4619      	mov	r1, r3
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f000 fa64 	bl	800c126 <USBD_CoreFindIF>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	75bb      	strb	r3, [r7, #22]
            break;
 800bc62:	e00d      	b.n	800bc80 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f000 fa66 	bl	800c140 <USBD_CoreFindEP>
 800bc74:	4603      	mov	r3, r0
 800bc76:	75bb      	strb	r3, [r7, #22]
            break;
 800bc78:	e002      	b.n	800bc80 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	75bb      	strb	r3, [r7, #22]
            break;
 800bc7e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bc80:	7dbb      	ldrb	r3, [r7, #22]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d119      	bne.n	800bcba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b03      	cmp	r3, #3
 800bc90:	d113      	bne.n	800bcba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bc92:	7dba      	ldrb	r2, [r7, #22]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	32ae      	adds	r2, #174	@ 0xae
 800bc98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00b      	beq.n	800bcba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bca2:	7dba      	ldrb	r2, [r7, #22]
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bcaa:	7dba      	ldrb	r2, [r7, #22]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	32ae      	adds	r2, #174	@ 0xae
 800bcb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f001 f978 	bl	800cfb0 <USBD_CtlSendStatus>
 800bcc0:	e032      	b.n	800bd28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bcc2:	7afb      	ldrb	r3, [r7, #11]
 800bcc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	4619      	mov	r1, r3
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f000 fa37 	bl	800c140 <USBD_CoreFindEP>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcd6:	7dbb      	ldrb	r3, [r7, #22]
 800bcd8:	2bff      	cmp	r3, #255	@ 0xff
 800bcda:	d025      	beq.n	800bd28 <USBD_LL_DataOutStage+0x15c>
 800bcdc:	7dbb      	ldrb	r3, [r7, #22]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d122      	bne.n	800bd28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	2b03      	cmp	r3, #3
 800bcec:	d117      	bne.n	800bd1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bcee:	7dba      	ldrb	r2, [r7, #22]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	32ae      	adds	r2, #174	@ 0xae
 800bcf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00f      	beq.n	800bd1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bcfe:	7dba      	ldrb	r2, [r7, #22]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bd06:	7dba      	ldrb	r2, [r7, #22]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	32ae      	adds	r2, #174	@ 0xae
 800bd0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd10:	699b      	ldr	r3, [r3, #24]
 800bd12:	7afa      	ldrb	r2, [r7, #11]
 800bd14:	4611      	mov	r1, r2
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	4798      	blx	r3
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd1e:	7dfb      	ldrb	r3, [r7, #23]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d001      	beq.n	800bd28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bd24:	7dfb      	ldrb	r3, [r7, #23]
 800bd26:	e000      	b.n	800bd2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3718      	adds	r7, #24
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b086      	sub	sp, #24
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	607a      	str	r2, [r7, #4]
 800bd3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bd40:	7afb      	ldrb	r3, [r7, #11]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d16f      	bne.n	800be26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3314      	adds	r3, #20
 800bd4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	d15a      	bne.n	800be0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	689a      	ldr	r2, [r3, #8]
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d914      	bls.n	800bd8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	689a      	ldr	r2, [r3, #8]
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	1ad2      	subs	r2, r2, r3
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	461a      	mov	r2, r3
 800bd76:	6879      	ldr	r1, [r7, #4]
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f001 f8da 	bl	800cf32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd7e:	2300      	movs	r3, #0
 800bd80:	2200      	movs	r2, #0
 800bd82:	2100      	movs	r1, #0
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f001 fee5 	bl	800db54 <USBD_LL_PrepareReceive>
 800bd8a:	e03f      	b.n	800be0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	68da      	ldr	r2, [r3, #12]
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d11c      	bne.n	800bdd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d316      	bcc.n	800bdd2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d20f      	bcs.n	800bdd2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f001 f8bb 	bl	800cf32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	2100      	movs	r1, #0
 800bdca:	68f8      	ldr	r0, [r7, #12]
 800bdcc:	f001 fec2 	bl	800db54 <USBD_LL_PrepareReceive>
 800bdd0:	e01c      	b.n	800be0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d10f      	bne.n	800bdfe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d009      	beq.n	800bdfe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bdfe:	2180      	movs	r1, #128	@ 0x80
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f001 fda1 	bl	800d948 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f001 f8e5 	bl	800cfd6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d03a      	beq.n	800be8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	f7ff fe42 	bl	800baa0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800be24:	e032      	b.n	800be8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be26:	7afb      	ldrb	r3, [r7, #11]
 800be28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	4619      	mov	r1, r3
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f000 f985 	bl	800c140 <USBD_CoreFindEP>
 800be36:	4603      	mov	r3, r0
 800be38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	2bff      	cmp	r3, #255	@ 0xff
 800be3e:	d025      	beq.n	800be8c <USBD_LL_DataInStage+0x15a>
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d122      	bne.n	800be8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	2b03      	cmp	r3, #3
 800be50:	d11c      	bne.n	800be8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be52:	7dfa      	ldrb	r2, [r7, #23]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	32ae      	adds	r2, #174	@ 0xae
 800be58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d014      	beq.n	800be8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800be62:	7dfa      	ldrb	r2, [r7, #23]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800be6a:	7dfa      	ldrb	r2, [r7, #23]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	32ae      	adds	r2, #174	@ 0xae
 800be70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	7afa      	ldrb	r2, [r7, #11]
 800be78:	4611      	mov	r1, r2
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	4798      	blx	r3
 800be7e:	4603      	mov	r3, r0
 800be80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800be82:	7dbb      	ldrb	r3, [r7, #22]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d001      	beq.n	800be8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800be88:	7dbb      	ldrb	r3, [r7, #22]
 800be8a:	e000      	b.n	800be8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3718      	adds	r7, #24
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2201      	movs	r2, #1
 800bea6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d014      	beq.n	800befc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00e      	beq.n	800befc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	6852      	ldr	r2, [r2, #4]
 800beea:	b2d2      	uxtb	r2, r2
 800beec:	4611      	mov	r1, r2
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	4798      	blx	r3
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d001      	beq.n	800befc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bef8:	2303      	movs	r3, #3
 800befa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800befc:	2340      	movs	r3, #64	@ 0x40
 800befe:	2200      	movs	r2, #0
 800bf00:	2100      	movs	r1, #0
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f001 fcac 	bl	800d860 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2240      	movs	r2, #64	@ 0x40
 800bf14:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf18:	2340      	movs	r3, #64	@ 0x40
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2180      	movs	r1, #128	@ 0x80
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f001 fc9e 	bl	800d860 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2240      	movs	r2, #64	@ 0x40
 800bf2e:	621a      	str	r2, [r3, #32]

  return ret;
 800bf30:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3710      	adds	r7, #16
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	b083      	sub	sp, #12
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	460b      	mov	r3, r1
 800bf44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	78fa      	ldrb	r2, [r7, #3]
 800bf4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	370c      	adds	r7, #12
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	2b04      	cmp	r3, #4
 800bf6c:	d006      	beq.n	800bf7c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2204      	movs	r2, #4
 800bf80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	370c      	adds	r7, #12
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b083      	sub	sp, #12
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b04      	cmp	r3, #4
 800bfa4:	d106      	bne.n	800bfb4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bfac:	b2da      	uxtb	r2, r3
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfc2:	b580      	push	{r7, lr}
 800bfc4:	b082      	sub	sp, #8
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	2b03      	cmp	r3, #3
 800bfd4:	d110      	bne.n	800bff8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00b      	beq.n	800bff8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfe6:	69db      	ldr	r3, [r3, #28]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d005      	beq.n	800bff8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bff2:	69db      	ldr	r3, [r3, #28]
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b082      	sub	sp, #8
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	460b      	mov	r3, r1
 800c00c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	32ae      	adds	r2, #174	@ 0xae
 800c018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c020:	2303      	movs	r3, #3
 800c022:	e01c      	b.n	800c05e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	2b03      	cmp	r3, #3
 800c02e:	d115      	bne.n	800c05c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	32ae      	adds	r2, #174	@ 0xae
 800c03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03e:	6a1b      	ldr	r3, [r3, #32]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00b      	beq.n	800c05c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	32ae      	adds	r2, #174	@ 0xae
 800c04e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c052:	6a1b      	ldr	r3, [r3, #32]
 800c054:	78fa      	ldrb	r2, [r7, #3]
 800c056:	4611      	mov	r1, r2
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b082      	sub	sp, #8
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	460b      	mov	r3, r1
 800c070:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	32ae      	adds	r2, #174	@ 0xae
 800c07c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d101      	bne.n	800c088 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c084:	2303      	movs	r3, #3
 800c086:	e01c      	b.n	800c0c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b03      	cmp	r3, #3
 800c092:	d115      	bne.n	800c0c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	32ae      	adds	r2, #174	@ 0xae
 800c09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00b      	beq.n	800c0c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	32ae      	adds	r2, #174	@ 0xae
 800c0b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0b8:	78fa      	ldrb	r2, [r7, #3]
 800c0ba:	4611      	mov	r1, r2
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b083      	sub	sp, #12
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00e      	beq.n	800c11c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	6852      	ldr	r2, [r2, #4]
 800c10a:	b2d2      	uxtb	r2, r2
 800c10c:	4611      	mov	r1, r2
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	4798      	blx	r3
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c118:	2303      	movs	r3, #3
 800c11a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}

0800c126 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c126:	b480      	push	{r7}
 800c128:	b083      	sub	sp, #12
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	460b      	mov	r3, r1
 800c130:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c132:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c134:	4618      	mov	r0, r3
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	460b      	mov	r3, r1
 800c14a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c14c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c14e:	4618      	mov	r0, r3
 800c150:	370c      	adds	r7, #12
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b086      	sub	sp, #24
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
 800c162:	460b      	mov	r3, r1
 800c164:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c16e:	2300      	movs	r3, #0
 800c170:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	885b      	ldrh	r3, [r3, #2]
 800c176:	b29b      	uxth	r3, r3
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	7812      	ldrb	r2, [r2, #0]
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d91f      	bls.n	800c1c0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c186:	e013      	b.n	800c1b0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c188:	f107 030a 	add.w	r3, r7, #10
 800c18c:	4619      	mov	r1, r3
 800c18e:	6978      	ldr	r0, [r7, #20]
 800c190:	f000 f81b 	bl	800c1ca <USBD_GetNextDesc>
 800c194:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	785b      	ldrb	r3, [r3, #1]
 800c19a:	2b05      	cmp	r3, #5
 800c19c:	d108      	bne.n	800c1b0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	789b      	ldrb	r3, [r3, #2]
 800c1a6:	78fa      	ldrb	r2, [r7, #3]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d008      	beq.n	800c1be <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	885b      	ldrh	r3, [r3, #2]
 800c1b4:	b29a      	uxth	r2, r3
 800c1b6:	897b      	ldrh	r3, [r7, #10]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d8e5      	bhi.n	800c188 <USBD_GetEpDesc+0x2e>
 800c1bc:	e000      	b.n	800c1c0 <USBD_GetEpDesc+0x66>
          break;
 800c1be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c1c0:	693b      	ldr	r3, [r7, #16]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3718      	adds	r7, #24
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b085      	sub	sp, #20
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
 800c1d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	881b      	ldrh	r3, [r3, #0]
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	7812      	ldrb	r2, [r2, #0]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	461a      	mov	r2, r3
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c202:	b480      	push	{r7}
 800c204:	b087      	sub	sp, #28
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	3301      	adds	r3, #1
 800c218:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c220:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c224:	021b      	lsls	r3, r3, #8
 800c226:	b21a      	sxth	r2, r3
 800c228:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c22c:	4313      	orrs	r3, r2
 800c22e:	b21b      	sxth	r3, r3
 800c230:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c232:	89fb      	ldrh	r3, [r7, #14]
}
 800c234:	4618      	mov	r0, r3
 800c236:	371c      	adds	r7, #28
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr

0800c240 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c256:	2b40      	cmp	r3, #64	@ 0x40
 800c258:	d005      	beq.n	800c266 <USBD_StdDevReq+0x26>
 800c25a:	2b40      	cmp	r3, #64	@ 0x40
 800c25c:	d857      	bhi.n	800c30e <USBD_StdDevReq+0xce>
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00f      	beq.n	800c282 <USBD_StdDevReq+0x42>
 800c262:	2b20      	cmp	r3, #32
 800c264:	d153      	bne.n	800c30e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	32ae      	adds	r2, #174	@ 0xae
 800c270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	4798      	blx	r3
 800c27c:	4603      	mov	r3, r0
 800c27e:	73fb      	strb	r3, [r7, #15]
      break;
 800c280:	e04a      	b.n	800c318 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	785b      	ldrb	r3, [r3, #1]
 800c286:	2b09      	cmp	r3, #9
 800c288:	d83b      	bhi.n	800c302 <USBD_StdDevReq+0xc2>
 800c28a:	a201      	add	r2, pc, #4	@ (adr r2, 800c290 <USBD_StdDevReq+0x50>)
 800c28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c290:	0800c2e5 	.word	0x0800c2e5
 800c294:	0800c2f9 	.word	0x0800c2f9
 800c298:	0800c303 	.word	0x0800c303
 800c29c:	0800c2ef 	.word	0x0800c2ef
 800c2a0:	0800c303 	.word	0x0800c303
 800c2a4:	0800c2c3 	.word	0x0800c2c3
 800c2a8:	0800c2b9 	.word	0x0800c2b9
 800c2ac:	0800c303 	.word	0x0800c303
 800c2b0:	0800c2db 	.word	0x0800c2db
 800c2b4:	0800c2cd 	.word	0x0800c2cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 fa3c 	bl	800c738 <USBD_GetDescriptor>
          break;
 800c2c0:	e024      	b.n	800c30c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fbcb 	bl	800ca60 <USBD_SetAddress>
          break;
 800c2ca:	e01f      	b.n	800c30c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2cc:	6839      	ldr	r1, [r7, #0]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fc0a 	bl	800cae8 <USBD_SetConfig>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73fb      	strb	r3, [r7, #15]
          break;
 800c2d8:	e018      	b.n	800c30c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2da:	6839      	ldr	r1, [r7, #0]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 fcad 	bl	800cc3c <USBD_GetConfig>
          break;
 800c2e2:	e013      	b.n	800c30c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fcde 	bl	800cca8 <USBD_GetStatus>
          break;
 800c2ec:	e00e      	b.n	800c30c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c2ee:	6839      	ldr	r1, [r7, #0]
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fd0d 	bl	800cd10 <USBD_SetFeature>
          break;
 800c2f6:	e009      	b.n	800c30c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fd31 	bl	800cd62 <USBD_ClrFeature>
          break;
 800c300:	e004      	b.n	800c30c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 fd88 	bl	800ce1a <USBD_CtlError>
          break;
 800c30a:	bf00      	nop
      }
      break;
 800c30c:	e004      	b.n	800c318 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fd82 	bl	800ce1a <USBD_CtlError>
      break;
 800c316:	bf00      	nop
  }

  return ret;
 800c318:	7bfb      	ldrb	r3, [r7, #15]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop

0800c324 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c32e:	2300      	movs	r3, #0
 800c330:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c33a:	2b40      	cmp	r3, #64	@ 0x40
 800c33c:	d005      	beq.n	800c34a <USBD_StdItfReq+0x26>
 800c33e:	2b40      	cmp	r3, #64	@ 0x40
 800c340:	d852      	bhi.n	800c3e8 <USBD_StdItfReq+0xc4>
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <USBD_StdItfReq+0x26>
 800c346:	2b20      	cmp	r3, #32
 800c348:	d14e      	bne.n	800c3e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c350:	b2db      	uxtb	r3, r3
 800c352:	3b01      	subs	r3, #1
 800c354:	2b02      	cmp	r3, #2
 800c356:	d840      	bhi.n	800c3da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	889b      	ldrh	r3, [r3, #4]
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d836      	bhi.n	800c3d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	889b      	ldrh	r3, [r3, #4]
 800c366:	b2db      	uxtb	r3, r3
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7ff fedb 	bl	800c126 <USBD_CoreFindIF>
 800c370:	4603      	mov	r3, r0
 800c372:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c374:	7bbb      	ldrb	r3, [r7, #14]
 800c376:	2bff      	cmp	r3, #255	@ 0xff
 800c378:	d01d      	beq.n	800c3b6 <USBD_StdItfReq+0x92>
 800c37a:	7bbb      	ldrb	r3, [r7, #14]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d11a      	bne.n	800c3b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c380:	7bba      	ldrb	r2, [r7, #14]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	32ae      	adds	r2, #174	@ 0xae
 800c386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00f      	beq.n	800c3b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c390:	7bba      	ldrb	r2, [r7, #14]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c398:	7bba      	ldrb	r2, [r7, #14]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	32ae      	adds	r2, #174	@ 0xae
 800c39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	6839      	ldr	r1, [r7, #0]
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	4798      	blx	r3
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3ae:	e004      	b.n	800c3ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3b4:	e001      	b.n	800c3ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	88db      	ldrh	r3, [r3, #6]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d110      	bne.n	800c3e4 <USBD_StdItfReq+0xc0>
 800c3c2:	7bfb      	ldrb	r3, [r7, #15]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d10d      	bne.n	800c3e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fdf1 	bl	800cfb0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3ce:	e009      	b.n	800c3e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c3d0:	6839      	ldr	r1, [r7, #0]
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f000 fd21 	bl	800ce1a <USBD_CtlError>
          break;
 800c3d8:	e004      	b.n	800c3e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c3da:	6839      	ldr	r1, [r7, #0]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fd1c 	bl	800ce1a <USBD_CtlError>
          break;
 800c3e2:	e000      	b.n	800c3e6 <USBD_StdItfReq+0xc2>
          break;
 800c3e4:	bf00      	nop
      }
      break;
 800c3e6:	e004      	b.n	800c3f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fd15 	bl	800ce1a <USBD_CtlError>
      break;
 800c3f0:	bf00      	nop
  }

  return ret;
 800c3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	889b      	ldrh	r3, [r3, #4]
 800c40e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c418:	2b40      	cmp	r3, #64	@ 0x40
 800c41a:	d007      	beq.n	800c42c <USBD_StdEPReq+0x30>
 800c41c:	2b40      	cmp	r3, #64	@ 0x40
 800c41e:	f200 817f 	bhi.w	800c720 <USBD_StdEPReq+0x324>
 800c422:	2b00      	cmp	r3, #0
 800c424:	d02a      	beq.n	800c47c <USBD_StdEPReq+0x80>
 800c426:	2b20      	cmp	r3, #32
 800c428:	f040 817a 	bne.w	800c720 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c42c:	7bbb      	ldrb	r3, [r7, #14]
 800c42e:	4619      	mov	r1, r3
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7ff fe85 	bl	800c140 <USBD_CoreFindEP>
 800c436:	4603      	mov	r3, r0
 800c438:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c43a:	7b7b      	ldrb	r3, [r7, #13]
 800c43c:	2bff      	cmp	r3, #255	@ 0xff
 800c43e:	f000 8174 	beq.w	800c72a <USBD_StdEPReq+0x32e>
 800c442:	7b7b      	ldrb	r3, [r7, #13]
 800c444:	2b00      	cmp	r3, #0
 800c446:	f040 8170 	bne.w	800c72a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c44a:	7b7a      	ldrb	r2, [r7, #13]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c452:	7b7a      	ldrb	r2, [r7, #13]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	32ae      	adds	r2, #174	@ 0xae
 800c458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f000 8163 	beq.w	800c72a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c464:	7b7a      	ldrb	r2, [r7, #13]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	32ae      	adds	r2, #174	@ 0xae
 800c46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	4798      	blx	r3
 800c476:	4603      	mov	r3, r0
 800c478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c47a:	e156      	b.n	800c72a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	785b      	ldrb	r3, [r3, #1]
 800c480:	2b03      	cmp	r3, #3
 800c482:	d008      	beq.n	800c496 <USBD_StdEPReq+0x9a>
 800c484:	2b03      	cmp	r3, #3
 800c486:	f300 8145 	bgt.w	800c714 <USBD_StdEPReq+0x318>
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 809b 	beq.w	800c5c6 <USBD_StdEPReq+0x1ca>
 800c490:	2b01      	cmp	r3, #1
 800c492:	d03c      	beq.n	800c50e <USBD_StdEPReq+0x112>
 800c494:	e13e      	b.n	800c714 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b02      	cmp	r3, #2
 800c4a0:	d002      	beq.n	800c4a8 <USBD_StdEPReq+0xac>
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d016      	beq.n	800c4d4 <USBD_StdEPReq+0xd8>
 800c4a6:	e02c      	b.n	800c502 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4a8:	7bbb      	ldrb	r3, [r7, #14]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d00d      	beq.n	800c4ca <USBD_StdEPReq+0xce>
 800c4ae:	7bbb      	ldrb	r3, [r7, #14]
 800c4b0:	2b80      	cmp	r3, #128	@ 0x80
 800c4b2:	d00a      	beq.n	800c4ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4b4:	7bbb      	ldrb	r3, [r7, #14]
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f001 fa45 	bl	800d948 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4be:	2180      	movs	r1, #128	@ 0x80
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f001 fa41 	bl	800d948 <USBD_LL_StallEP>
 800c4c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4c8:	e020      	b.n	800c50c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fca4 	bl	800ce1a <USBD_CtlError>
              break;
 800c4d2:	e01b      	b.n	800c50c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	885b      	ldrh	r3, [r3, #2]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10e      	bne.n	800c4fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4dc:	7bbb      	ldrb	r3, [r7, #14]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00b      	beq.n	800c4fa <USBD_StdEPReq+0xfe>
 800c4e2:	7bbb      	ldrb	r3, [r7, #14]
 800c4e4:	2b80      	cmp	r3, #128	@ 0x80
 800c4e6:	d008      	beq.n	800c4fa <USBD_StdEPReq+0xfe>
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	88db      	ldrh	r3, [r3, #6]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d104      	bne.n	800c4fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4f0:	7bbb      	ldrb	r3, [r7, #14]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f001 fa27 	bl	800d948 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fd58 	bl	800cfb0 <USBD_CtlSendStatus>

              break;
 800c500:	e004      	b.n	800c50c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 fc88 	bl	800ce1a <USBD_CtlError>
              break;
 800c50a:	bf00      	nop
          }
          break;
 800c50c:	e107      	b.n	800c71e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c514:	b2db      	uxtb	r3, r3
 800c516:	2b02      	cmp	r3, #2
 800c518:	d002      	beq.n	800c520 <USBD_StdEPReq+0x124>
 800c51a:	2b03      	cmp	r3, #3
 800c51c:	d016      	beq.n	800c54c <USBD_StdEPReq+0x150>
 800c51e:	e04b      	b.n	800c5b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c520:	7bbb      	ldrb	r3, [r7, #14]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00d      	beq.n	800c542 <USBD_StdEPReq+0x146>
 800c526:	7bbb      	ldrb	r3, [r7, #14]
 800c528:	2b80      	cmp	r3, #128	@ 0x80
 800c52a:	d00a      	beq.n	800c542 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c52c:	7bbb      	ldrb	r3, [r7, #14]
 800c52e:	4619      	mov	r1, r3
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f001 fa09 	bl	800d948 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c536:	2180      	movs	r1, #128	@ 0x80
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f001 fa05 	bl	800d948 <USBD_LL_StallEP>
 800c53e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c540:	e040      	b.n	800c5c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c542:	6839      	ldr	r1, [r7, #0]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 fc68 	bl	800ce1a <USBD_CtlError>
              break;
 800c54a:	e03b      	b.n	800c5c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	885b      	ldrh	r3, [r3, #2]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d136      	bne.n	800c5c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c554:	7bbb      	ldrb	r3, [r7, #14]
 800c556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d004      	beq.n	800c568 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c55e:	7bbb      	ldrb	r3, [r7, #14]
 800c560:	4619      	mov	r1, r3
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f001 fa26 	bl	800d9b4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fd21 	bl	800cfb0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c56e:	7bbb      	ldrb	r3, [r7, #14]
 800c570:	4619      	mov	r1, r3
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f7ff fde4 	bl	800c140 <USBD_CoreFindEP>
 800c578:	4603      	mov	r3, r0
 800c57a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c57c:	7b7b      	ldrb	r3, [r7, #13]
 800c57e:	2bff      	cmp	r3, #255	@ 0xff
 800c580:	d01f      	beq.n	800c5c2 <USBD_StdEPReq+0x1c6>
 800c582:	7b7b      	ldrb	r3, [r7, #13]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d11c      	bne.n	800c5c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c588:	7b7a      	ldrb	r2, [r7, #13]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c590:	7b7a      	ldrb	r2, [r7, #13]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	32ae      	adds	r2, #174	@ 0xae
 800c596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d010      	beq.n	800c5c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5a0:	7b7a      	ldrb	r2, [r7, #13]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	32ae      	adds	r2, #174	@ 0xae
 800c5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	4798      	blx	r3
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c5b6:	e004      	b.n	800c5c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fc2d 	bl	800ce1a <USBD_CtlError>
              break;
 800c5c0:	e000      	b.n	800c5c4 <USBD_StdEPReq+0x1c8>
              break;
 800c5c2:	bf00      	nop
          }
          break;
 800c5c4:	e0ab      	b.n	800c71e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	d002      	beq.n	800c5d8 <USBD_StdEPReq+0x1dc>
 800c5d2:	2b03      	cmp	r3, #3
 800c5d4:	d032      	beq.n	800c63c <USBD_StdEPReq+0x240>
 800c5d6:	e097      	b.n	800c708 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d007      	beq.n	800c5ee <USBD_StdEPReq+0x1f2>
 800c5de:	7bbb      	ldrb	r3, [r7, #14]
 800c5e0:	2b80      	cmp	r3, #128	@ 0x80
 800c5e2:	d004      	beq.n	800c5ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c5e4:	6839      	ldr	r1, [r7, #0]
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fc17 	bl	800ce1a <USBD_CtlError>
                break;
 800c5ec:	e091      	b.n	800c712 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	da0b      	bge.n	800c60e <USBD_StdEPReq+0x212>
 800c5f6:	7bbb      	ldrb	r3, [r7, #14]
 800c5f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	3310      	adds	r3, #16
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	4413      	add	r3, r2
 800c60a:	3304      	adds	r3, #4
 800c60c:	e00b      	b.n	800c626 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c60e:	7bbb      	ldrb	r3, [r7, #14]
 800c610:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c614:	4613      	mov	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	4413      	add	r3, r2
 800c624:	3304      	adds	r3, #4
 800c626:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	2202      	movs	r2, #2
 800c632:	4619      	mov	r1, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 fc61 	bl	800cefc <USBD_CtlSendData>
              break;
 800c63a:	e06a      	b.n	800c712 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c63c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c640:	2b00      	cmp	r3, #0
 800c642:	da11      	bge.n	800c668 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c644:	7bbb      	ldrb	r3, [r7, #14]
 800c646:	f003 020f 	and.w	r2, r3, #15
 800c64a:	6879      	ldr	r1, [r7, #4]
 800c64c:	4613      	mov	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	440b      	add	r3, r1
 800c656:	3324      	adds	r3, #36	@ 0x24
 800c658:	881b      	ldrh	r3, [r3, #0]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d117      	bne.n	800c68e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c65e:	6839      	ldr	r1, [r7, #0]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 fbda 	bl	800ce1a <USBD_CtlError>
                  break;
 800c666:	e054      	b.n	800c712 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c668:	7bbb      	ldrb	r3, [r7, #14]
 800c66a:	f003 020f 	and.w	r2, r3, #15
 800c66e:	6879      	ldr	r1, [r7, #4]
 800c670:	4613      	mov	r3, r2
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	4413      	add	r3, r2
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	440b      	add	r3, r1
 800c67a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c67e:	881b      	ldrh	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d104      	bne.n	800c68e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fbc7 	bl	800ce1a <USBD_CtlError>
                  break;
 800c68c:	e041      	b.n	800c712 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c68e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c692:	2b00      	cmp	r3, #0
 800c694:	da0b      	bge.n	800c6ae <USBD_StdEPReq+0x2b2>
 800c696:	7bbb      	ldrb	r3, [r7, #14]
 800c698:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c69c:	4613      	mov	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	3310      	adds	r3, #16
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	e00b      	b.n	800c6c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6ae:	7bbb      	ldrb	r3, [r7, #14]
 800c6b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6b4:	4613      	mov	r3, r2
 800c6b6:	009b      	lsls	r3, r3, #2
 800c6b8:	4413      	add	r3, r2
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6c8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d002      	beq.n	800c6d4 <USBD_StdEPReq+0x2d8>
 800c6ce:	7bbb      	ldrb	r3, [r7, #14]
 800c6d0:	2b80      	cmp	r3, #128	@ 0x80
 800c6d2:	d103      	bne.n	800c6dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	e00e      	b.n	800c6fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c6dc:	7bbb      	ldrb	r3, [r7, #14]
 800c6de:	4619      	mov	r1, r3
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f001 f99d 	bl	800da20 <USBD_LL_IsStallEP>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	e002      	b.n	800c6fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	2202      	movs	r2, #2
 800c6fe:	4619      	mov	r1, r3
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 fbfb 	bl	800cefc <USBD_CtlSendData>
              break;
 800c706:	e004      	b.n	800c712 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c708:	6839      	ldr	r1, [r7, #0]
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 fb85 	bl	800ce1a <USBD_CtlError>
              break;
 800c710:	bf00      	nop
          }
          break;
 800c712:	e004      	b.n	800c71e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c714:	6839      	ldr	r1, [r7, #0]
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fb7f 	bl	800ce1a <USBD_CtlError>
          break;
 800c71c:	bf00      	nop
      }
      break;
 800c71e:	e005      	b.n	800c72c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fb79 	bl	800ce1a <USBD_CtlError>
      break;
 800c728:	e000      	b.n	800c72c <USBD_StdEPReq+0x330>
      break;
 800c72a:	bf00      	nop
  }

  return ret;
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
	...

0800c738 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c742:	2300      	movs	r3, #0
 800c744:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c746:	2300      	movs	r3, #0
 800c748:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c74a:	2300      	movs	r3, #0
 800c74c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	885b      	ldrh	r3, [r3, #2]
 800c752:	0a1b      	lsrs	r3, r3, #8
 800c754:	b29b      	uxth	r3, r3
 800c756:	3b01      	subs	r3, #1
 800c758:	2b0e      	cmp	r3, #14
 800c75a:	f200 8152 	bhi.w	800ca02 <USBD_GetDescriptor+0x2ca>
 800c75e:	a201      	add	r2, pc, #4	@ (adr r2, 800c764 <USBD_GetDescriptor+0x2c>)
 800c760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c764:	0800c7d5 	.word	0x0800c7d5
 800c768:	0800c7ed 	.word	0x0800c7ed
 800c76c:	0800c82d 	.word	0x0800c82d
 800c770:	0800ca03 	.word	0x0800ca03
 800c774:	0800ca03 	.word	0x0800ca03
 800c778:	0800c9a3 	.word	0x0800c9a3
 800c77c:	0800c9cf 	.word	0x0800c9cf
 800c780:	0800ca03 	.word	0x0800ca03
 800c784:	0800ca03 	.word	0x0800ca03
 800c788:	0800ca03 	.word	0x0800ca03
 800c78c:	0800ca03 	.word	0x0800ca03
 800c790:	0800ca03 	.word	0x0800ca03
 800c794:	0800ca03 	.word	0x0800ca03
 800c798:	0800ca03 	.word	0x0800ca03
 800c79c:	0800c7a1 	.word	0x0800c7a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7a6:	69db      	ldr	r3, [r3, #28]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00b      	beq.n	800c7c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7b2:	69db      	ldr	r3, [r3, #28]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	7c12      	ldrb	r2, [r2, #16]
 800c7b8:	f107 0108 	add.w	r1, r7, #8
 800c7bc:	4610      	mov	r0, r2
 800c7be:	4798      	blx	r3
 800c7c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7c2:	e126      	b.n	800ca12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c7c4:	6839      	ldr	r1, [r7, #0]
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 fb27 	bl	800ce1a <USBD_CtlError>
        err++;
 800c7cc:	7afb      	ldrb	r3, [r7, #11]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	72fb      	strb	r3, [r7, #11]
      break;
 800c7d2:	e11e      	b.n	800ca12 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	7c12      	ldrb	r2, [r2, #16]
 800c7e0:	f107 0108 	add.w	r1, r7, #8
 800c7e4:	4610      	mov	r0, r2
 800c7e6:	4798      	blx	r3
 800c7e8:	60f8      	str	r0, [r7, #12]
      break;
 800c7ea:	e112      	b.n	800ca12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	7c1b      	ldrb	r3, [r3, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10d      	bne.n	800c810 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7fc:	f107 0208 	add.w	r2, r7, #8
 800c800:	4610      	mov	r0, r2
 800c802:	4798      	blx	r3
 800c804:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	3301      	adds	r3, #1
 800c80a:	2202      	movs	r2, #2
 800c80c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c80e:	e100      	b.n	800ca12 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c818:	f107 0208 	add.w	r2, r7, #8
 800c81c:	4610      	mov	r0, r2
 800c81e:	4798      	blx	r3
 800c820:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3301      	adds	r3, #1
 800c826:	2202      	movs	r2, #2
 800c828:	701a      	strb	r2, [r3, #0]
      break;
 800c82a:	e0f2      	b.n	800ca12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	885b      	ldrh	r3, [r3, #2]
 800c830:	b2db      	uxtb	r3, r3
 800c832:	2b05      	cmp	r3, #5
 800c834:	f200 80ac 	bhi.w	800c990 <USBD_GetDescriptor+0x258>
 800c838:	a201      	add	r2, pc, #4	@ (adr r2, 800c840 <USBD_GetDescriptor+0x108>)
 800c83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c83e:	bf00      	nop
 800c840:	0800c859 	.word	0x0800c859
 800c844:	0800c88d 	.word	0x0800c88d
 800c848:	0800c8c1 	.word	0x0800c8c1
 800c84c:	0800c8f5 	.word	0x0800c8f5
 800c850:	0800c929 	.word	0x0800c929
 800c854:	0800c95d 	.word	0x0800c95d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00b      	beq.n	800c87c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	7c12      	ldrb	r2, [r2, #16]
 800c870:	f107 0108 	add.w	r1, r7, #8
 800c874:	4610      	mov	r0, r2
 800c876:	4798      	blx	r3
 800c878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c87a:	e091      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c87c:	6839      	ldr	r1, [r7, #0]
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f000 facb 	bl	800ce1a <USBD_CtlError>
            err++;
 800c884:	7afb      	ldrb	r3, [r7, #11]
 800c886:	3301      	adds	r3, #1
 800c888:	72fb      	strb	r3, [r7, #11]
          break;
 800c88a:	e089      	b.n	800c9a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d00b      	beq.n	800c8b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	7c12      	ldrb	r2, [r2, #16]
 800c8a4:	f107 0108 	add.w	r1, r7, #8
 800c8a8:	4610      	mov	r0, r2
 800c8aa:	4798      	blx	r3
 800c8ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ae:	e077      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8b0:	6839      	ldr	r1, [r7, #0]
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 fab1 	bl	800ce1a <USBD_CtlError>
            err++;
 800c8b8:	7afb      	ldrb	r3, [r7, #11]
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c8be:	e06f      	b.n	800c9a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00b      	beq.n	800c8e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	7c12      	ldrb	r2, [r2, #16]
 800c8d8:	f107 0108 	add.w	r1, r7, #8
 800c8dc:	4610      	mov	r0, r2
 800c8de:	4798      	blx	r3
 800c8e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8e2:	e05d      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c8e4:	6839      	ldr	r1, [r7, #0]
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f000 fa97 	bl	800ce1a <USBD_CtlError>
            err++;
 800c8ec:	7afb      	ldrb	r3, [r7, #11]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c8f2:	e055      	b.n	800c9a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d00b      	beq.n	800c918 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	7c12      	ldrb	r2, [r2, #16]
 800c90c:	f107 0108 	add.w	r1, r7, #8
 800c910:	4610      	mov	r0, r2
 800c912:	4798      	blx	r3
 800c914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c916:	e043      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fa7d 	bl	800ce1a <USBD_CtlError>
            err++;
 800c920:	7afb      	ldrb	r3, [r7, #11]
 800c922:	3301      	adds	r3, #1
 800c924:	72fb      	strb	r3, [r7, #11]
          break;
 800c926:	e03b      	b.n	800c9a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c92e:	695b      	ldr	r3, [r3, #20]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00b      	beq.n	800c94c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c93a:	695b      	ldr	r3, [r3, #20]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	7c12      	ldrb	r2, [r2, #16]
 800c940:	f107 0108 	add.w	r1, r7, #8
 800c944:	4610      	mov	r0, r2
 800c946:	4798      	blx	r3
 800c948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c94a:	e029      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fa63 	bl	800ce1a <USBD_CtlError>
            err++;
 800c954:	7afb      	ldrb	r3, [r7, #11]
 800c956:	3301      	adds	r3, #1
 800c958:	72fb      	strb	r3, [r7, #11]
          break;
 800c95a:	e021      	b.n	800c9a0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c962:	699b      	ldr	r3, [r3, #24]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d00b      	beq.n	800c980 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	7c12      	ldrb	r2, [r2, #16]
 800c974:	f107 0108 	add.w	r1, r7, #8
 800c978:	4610      	mov	r0, r2
 800c97a:	4798      	blx	r3
 800c97c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c97e:	e00f      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fa49 	bl	800ce1a <USBD_CtlError>
            err++;
 800c988:	7afb      	ldrb	r3, [r7, #11]
 800c98a:	3301      	adds	r3, #1
 800c98c:	72fb      	strb	r3, [r7, #11]
          break;
 800c98e:	e007      	b.n	800c9a0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c990:	6839      	ldr	r1, [r7, #0]
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 fa41 	bl	800ce1a <USBD_CtlError>
          err++;
 800c998:	7afb      	ldrb	r3, [r7, #11]
 800c99a:	3301      	adds	r3, #1
 800c99c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c99e:	bf00      	nop
      }
      break;
 800c9a0:	e037      	b.n	800ca12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	7c1b      	ldrb	r3, [r3, #16]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d109      	bne.n	800c9be <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9b2:	f107 0208 	add.w	r2, r7, #8
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	4798      	blx	r3
 800c9ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9bc:	e029      	b.n	800ca12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c9be:	6839      	ldr	r1, [r7, #0]
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 fa2a 	bl	800ce1a <USBD_CtlError>
        err++;
 800c9c6:	7afb      	ldrb	r3, [r7, #11]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	72fb      	strb	r3, [r7, #11]
      break;
 800c9cc:	e021      	b.n	800ca12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	7c1b      	ldrb	r3, [r3, #16]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d10d      	bne.n	800c9f2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9de:	f107 0208 	add.w	r2, r7, #8
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	4798      	blx	r3
 800c9e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	2207      	movs	r2, #7
 800c9ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9f0:	e00f      	b.n	800ca12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fa10 	bl	800ce1a <USBD_CtlError>
        err++;
 800c9fa:	7afb      	ldrb	r3, [r7, #11]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	72fb      	strb	r3, [r7, #11]
      break;
 800ca00:	e007      	b.n	800ca12 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ca02:	6839      	ldr	r1, [r7, #0]
 800ca04:	6878      	ldr	r0, [r7, #4]
 800ca06:	f000 fa08 	bl	800ce1a <USBD_CtlError>
      err++;
 800ca0a:	7afb      	ldrb	r3, [r7, #11]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	72fb      	strb	r3, [r7, #11]
      break;
 800ca10:	bf00      	nop
  }

  if (err != 0U)
 800ca12:	7afb      	ldrb	r3, [r7, #11]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d11e      	bne.n	800ca56 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	88db      	ldrh	r3, [r3, #6]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d016      	beq.n	800ca4e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ca20:	893b      	ldrh	r3, [r7, #8]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00e      	beq.n	800ca44 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	88da      	ldrh	r2, [r3, #6]
 800ca2a:	893b      	ldrh	r3, [r7, #8]
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	bf28      	it	cs
 800ca30:	4613      	movcs	r3, r2
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca36:	893b      	ldrh	r3, [r7, #8]
 800ca38:	461a      	mov	r2, r3
 800ca3a:	68f9      	ldr	r1, [r7, #12]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 fa5d 	bl	800cefc <USBD_CtlSendData>
 800ca42:	e009      	b.n	800ca58 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ca44:	6839      	ldr	r1, [r7, #0]
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 f9e7 	bl	800ce1a <USBD_CtlError>
 800ca4c:	e004      	b.n	800ca58 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 faae 	bl	800cfb0 <USBD_CtlSendStatus>
 800ca54:	e000      	b.n	800ca58 <USBD_GetDescriptor+0x320>
    return;
 800ca56:	bf00      	nop
  }
}
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop

0800ca60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	889b      	ldrh	r3, [r3, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d131      	bne.n	800cad6 <USBD_SetAddress+0x76>
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	88db      	ldrh	r3, [r3, #6]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d12d      	bne.n	800cad6 <USBD_SetAddress+0x76>
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	885b      	ldrh	r3, [r3, #2]
 800ca7e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca80:	d829      	bhi.n	800cad6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	885b      	ldrh	r3, [r3, #2]
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	2b03      	cmp	r3, #3
 800ca98:	d104      	bne.n	800caa4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca9a:	6839      	ldr	r1, [r7, #0]
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f000 f9bc 	bl	800ce1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caa2:	e01d      	b.n	800cae0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	7bfa      	ldrb	r2, [r7, #15]
 800caa8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800caac:	7bfb      	ldrb	r3, [r7, #15]
 800caae:	4619      	mov	r1, r3
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 ffe1 	bl	800da78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fa7a 	bl	800cfb0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cabc:	7bfb      	ldrb	r3, [r7, #15]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d004      	beq.n	800cacc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2202      	movs	r2, #2
 800cac6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caca:	e009      	b.n	800cae0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cad4:	e004      	b.n	800cae0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cad6:	6839      	ldr	r1, [r7, #0]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f99e 	bl	800ce1a <USBD_CtlError>
  }
}
 800cade:	bf00      	nop
 800cae0:	bf00      	nop
 800cae2:	3710      	adds	r7, #16
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caf2:	2300      	movs	r3, #0
 800caf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	885b      	ldrh	r3, [r3, #2]
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	4b4e      	ldr	r3, [pc, #312]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cafe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cb00:	4b4d      	ldr	r3, [pc, #308]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d905      	bls.n	800cb14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f000 f985 	bl	800ce1a <USBD_CtlError>
    return USBD_FAIL;
 800cb10:	2303      	movs	r3, #3
 800cb12:	e08c      	b.n	800cc2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d002      	beq.n	800cb26 <USBD_SetConfig+0x3e>
 800cb20:	2b03      	cmp	r3, #3
 800cb22:	d029      	beq.n	800cb78 <USBD_SetConfig+0x90>
 800cb24:	e075      	b.n	800cc12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cb26:	4b44      	ldr	r3, [pc, #272]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d020      	beq.n	800cb70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cb2e:	4b42      	ldr	r3, [pc, #264]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	461a      	mov	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb38:	4b3f      	ldr	r3, [pc, #252]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	4619      	mov	r1, r3
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f7fe ffb9 	bl	800bab6 <USBD_SetClassConfig>
 800cb44:	4603      	mov	r3, r0
 800cb46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb48:	7bfb      	ldrb	r3, [r7, #15]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d008      	beq.n	800cb60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cb4e:	6839      	ldr	r1, [r7, #0]
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 f962 	bl	800ce1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2202      	movs	r2, #2
 800cb5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb5e:	e065      	b.n	800cc2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f000 fa25 	bl	800cfb0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2203      	movs	r2, #3
 800cb6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb6e:	e05d      	b.n	800cc2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fa1d 	bl	800cfb0 <USBD_CtlSendStatus>
      break;
 800cb76:	e059      	b.n	800cc2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb78:	4b2f      	ldr	r3, [pc, #188]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d112      	bne.n	800cba6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2202      	movs	r2, #2
 800cb84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cb88:	4b2b      	ldr	r3, [pc, #172]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb92:	4b29      	ldr	r3, [pc, #164]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	4619      	mov	r1, r3
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7fe ffa8 	bl	800baee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 fa06 	bl	800cfb0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cba4:	e042      	b.n	800cc2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cba6:	4b24      	ldr	r3, [pc, #144]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d02a      	beq.n	800cc0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	4619      	mov	r1, r3
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7fe ff96 	bl	800baee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cbc2:	4b1d      	ldr	r3, [pc, #116]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cbcc:	4b1a      	ldr	r3, [pc, #104]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cbce:	781b      	ldrb	r3, [r3, #0]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7fe ff6f 	bl	800bab6 <USBD_SetClassConfig>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cbdc:	7bfb      	ldrb	r3, [r7, #15]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00f      	beq.n	800cc02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 f918 	bl	800ce1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f7fe ff7b 	bl	800baee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2202      	movs	r2, #2
 800cbfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cc00:	e014      	b.n	800cc2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 f9d4 	bl	800cfb0 <USBD_CtlSendStatus>
      break;
 800cc08:	e010      	b.n	800cc2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f9d0 	bl	800cfb0 <USBD_CtlSendStatus>
      break;
 800cc10:	e00c      	b.n	800cc2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f000 f900 	bl	800ce1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cc1a:	4b07      	ldr	r3, [pc, #28]	@ (800cc38 <USBD_SetConfig+0x150>)
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	4619      	mov	r1, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f7fe ff64 	bl	800baee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cc26:	2303      	movs	r3, #3
 800cc28:	73fb      	strb	r3, [r7, #15]
      break;
 800cc2a:	bf00      	nop
  }

  return ret;
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	200039a0 	.word	0x200039a0

0800cc3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	88db      	ldrh	r3, [r3, #6]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d004      	beq.n	800cc58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 f8e2 	bl	800ce1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc56:	e023      	b.n	800cca0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	dc02      	bgt.n	800cc6a <USBD_GetConfig+0x2e>
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	dc03      	bgt.n	800cc70 <USBD_GetConfig+0x34>
 800cc68:	e015      	b.n	800cc96 <USBD_GetConfig+0x5a>
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d00b      	beq.n	800cc86 <USBD_GetConfig+0x4a>
 800cc6e:	e012      	b.n	800cc96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3308      	adds	r3, #8
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 f93c 	bl	800cefc <USBD_CtlSendData>
        break;
 800cc84:	e00c      	b.n	800cca0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 f934 	bl	800cefc <USBD_CtlSendData>
        break;
 800cc94:	e004      	b.n	800cca0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc96:	6839      	ldr	r1, [r7, #0]
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 f8be 	bl	800ce1a <USBD_CtlError>
        break;
 800cc9e:	bf00      	nop
}
 800cca0:	bf00      	nop
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d81e      	bhi.n	800ccfe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	88db      	ldrh	r3, [r3, #6]
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d004      	beq.n	800ccd2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ccc8:	6839      	ldr	r1, [r7, #0]
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f8a5 	bl	800ce1a <USBD_CtlError>
        break;
 800ccd0:	e01a      	b.n	800cd08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d005      	beq.n	800ccee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	f043 0202 	orr.w	r2, r3, #2
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	330c      	adds	r3, #12
 800ccf2:	2202      	movs	r2, #2
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 f900 	bl	800cefc <USBD_CtlSendData>
      break;
 800ccfc:	e004      	b.n	800cd08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ccfe:	6839      	ldr	r1, [r7, #0]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 f88a 	bl	800ce1a <USBD_CtlError>
      break;
 800cd06:	bf00      	nop
  }
}
 800cd08:	bf00      	nop
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	885b      	ldrh	r3, [r3, #2]
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d107      	bne.n	800cd32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2201      	movs	r2, #1
 800cd26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f940 	bl	800cfb0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cd30:	e013      	b.n	800cd5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	885b      	ldrh	r3, [r3, #2]
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d10b      	bne.n	800cd52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	889b      	ldrh	r3, [r3, #4]
 800cd3e:	0a1b      	lsrs	r3, r3, #8
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f930 	bl	800cfb0 <USBD_CtlSendStatus>
}
 800cd50:	e003      	b.n	800cd5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cd52:	6839      	ldr	r1, [r7, #0]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f860 	bl	800ce1a <USBD_CtlError>
}
 800cd5a:	bf00      	nop
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b082      	sub	sp, #8
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	3b01      	subs	r3, #1
 800cd76:	2b02      	cmp	r3, #2
 800cd78:	d80b      	bhi.n	800cd92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	885b      	ldrh	r3, [r3, #2]
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d10c      	bne.n	800cd9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f000 f910 	bl	800cfb0 <USBD_CtlSendStatus>
      }
      break;
 800cd90:	e004      	b.n	800cd9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd92:	6839      	ldr	r1, [r7, #0]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f000 f840 	bl	800ce1a <USBD_CtlError>
      break;
 800cd9a:	e000      	b.n	800cd9e <USBD_ClrFeature+0x3c>
      break;
 800cd9c:	bf00      	nop
  }
}
 800cd9e:	bf00      	nop
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b084      	sub	sp, #16
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	781a      	ldrb	r2, [r3, #0]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	781a      	ldrb	r2, [r3, #0]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f7ff fa16 	bl	800c202 <SWAPBYTE>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	461a      	mov	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	3301      	adds	r3, #1
 800cde2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	3301      	adds	r3, #1
 800cde8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f7ff fa09 	bl	800c202 <SWAPBYTE>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	3301      	adds	r3, #1
 800ce02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f7ff f9fc 	bl	800c202 <SWAPBYTE>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	80da      	strh	r2, [r3, #6]
}
 800ce12:	bf00      	nop
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce1a:	b580      	push	{r7, lr}
 800ce1c:	b082      	sub	sp, #8
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
 800ce22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce24:	2180      	movs	r1, #128	@ 0x80
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 fd8e 	bl	800d948 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 fd8a 	bl	800d948 <USBD_LL_StallEP>
}
 800ce34:	bf00      	nop
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b086      	sub	sp, #24
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d036      	beq.n	800cec0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ce56:	6938      	ldr	r0, [r7, #16]
 800ce58:	f000 f836 	bl	800cec8 <USBD_GetLen>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	3301      	adds	r3, #1
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	b29a      	uxth	r2, r3
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce6a:	7dfb      	ldrb	r3, [r7, #23]
 800ce6c:	68ba      	ldr	r2, [r7, #8]
 800ce6e:	4413      	add	r3, r2
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	7812      	ldrb	r2, [r2, #0]
 800ce74:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce76:	7dfb      	ldrb	r3, [r7, #23]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce7c:	7dfb      	ldrb	r3, [r7, #23]
 800ce7e:	68ba      	ldr	r2, [r7, #8]
 800ce80:	4413      	add	r3, r2
 800ce82:	2203      	movs	r2, #3
 800ce84:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce86:	7dfb      	ldrb	r3, [r7, #23]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce8c:	e013      	b.n	800ceb6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ce8e:	7dfb      	ldrb	r3, [r7, #23]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	4413      	add	r3, r2
 800ce94:	693a      	ldr	r2, [r7, #16]
 800ce96:	7812      	ldrb	r2, [r2, #0]
 800ce98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	613b      	str	r3, [r7, #16]
    idx++;
 800cea0:	7dfb      	ldrb	r3, [r7, #23]
 800cea2:	3301      	adds	r3, #1
 800cea4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cea6:	7dfb      	ldrb	r3, [r7, #23]
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	4413      	add	r3, r2
 800ceac:	2200      	movs	r2, #0
 800ceae:	701a      	strb	r2, [r3, #0]
    idx++;
 800ceb0:	7dfb      	ldrb	r3, [r7, #23]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1e7      	bne.n	800ce8e <USBD_GetString+0x52>
 800cebe:	e000      	b.n	800cec2 <USBD_GetString+0x86>
    return;
 800cec0:	bf00      	nop
  }
}
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b085      	sub	sp, #20
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ced0:	2300      	movs	r3, #0
 800ced2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ced8:	e005      	b.n	800cee6 <USBD_GetLen+0x1e>
  {
    len++;
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
 800cedc:	3301      	adds	r3, #1
 800cede:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	3301      	adds	r3, #1
 800cee4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1f5      	bne.n	800ceda <USBD_GetLen+0x12>
  }

  return len;
 800ceee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3714      	adds	r7, #20
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2202      	movs	r2, #2
 800cf0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	2100      	movs	r1, #0
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	f000 fdde 	bl	800dae4 <USBD_LL_Transmit>

  return USBD_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b084      	sub	sp, #16
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	60f8      	str	r0, [r7, #12]
 800cf3a:	60b9      	str	r1, [r7, #8]
 800cf3c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	2100      	movs	r1, #0
 800cf44:	68f8      	ldr	r0, [r7, #12]
 800cf46:	f000 fdcd 	bl	800dae4 <USBD_LL_Transmit>

  return USBD_OK;
 800cf4a:	2300      	movs	r3, #0
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3710      	adds	r7, #16
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b084      	sub	sp, #16
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2203      	movs	r2, #3
 800cf64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	68ba      	ldr	r2, [r7, #8]
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	f000 fde8 	bl	800db54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b084      	sub	sp, #16
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	60f8      	str	r0, [r7, #12]
 800cf96:	60b9      	str	r1, [r7, #8]
 800cf98:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	68ba      	ldr	r2, [r7, #8]
 800cf9e:	2100      	movs	r1, #0
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	f000 fdd7 	bl	800db54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfa6:	2300      	movs	r3, #0
}
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	3710      	adds	r7, #16
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}

0800cfb0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2204      	movs	r2, #4
 800cfbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 fd8c 	bl	800dae4 <USBD_LL_Transmit>

  return USBD_OK;
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	3708      	adds	r7, #8
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}

0800cfd6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cfd6:	b580      	push	{r7, lr}
 800cfd8:	b082      	sub	sp, #8
 800cfda:	af00      	add	r7, sp, #0
 800cfdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2205      	movs	r2, #5
 800cfe2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	2200      	movs	r2, #0
 800cfea:	2100      	movs	r1, #0
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 fdb1 	bl	800db54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cff2:	2300      	movs	r3, #0
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d000:	2200      	movs	r2, #0
 800d002:	4912      	ldr	r1, [pc, #72]	@ (800d04c <MX_USB_DEVICE_Init+0x50>)
 800d004:	4812      	ldr	r0, [pc, #72]	@ (800d050 <MX_USB_DEVICE_Init+0x54>)
 800d006:	f7fe fcd9 	bl	800b9bc <USBD_Init>
 800d00a:	4603      	mov	r3, r0
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d001      	beq.n	800d014 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d010:	f7f4 fab7 	bl	8001582 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d014:	490f      	ldr	r1, [pc, #60]	@ (800d054 <MX_USB_DEVICE_Init+0x58>)
 800d016:	480e      	ldr	r0, [pc, #56]	@ (800d050 <MX_USB_DEVICE_Init+0x54>)
 800d018:	f7fe fd00 	bl	800ba1c <USBD_RegisterClass>
 800d01c:	4603      	mov	r3, r0
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d022:	f7f4 faae 	bl	8001582 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d026:	490c      	ldr	r1, [pc, #48]	@ (800d058 <MX_USB_DEVICE_Init+0x5c>)
 800d028:	4809      	ldr	r0, [pc, #36]	@ (800d050 <MX_USB_DEVICE_Init+0x54>)
 800d02a:	f7fe fbf7 	bl	800b81c <USBD_CDC_RegisterInterface>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d001      	beq.n	800d038 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d034:	f7f4 faa5 	bl	8001582 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d038:	4805      	ldr	r0, [pc, #20]	@ (800d050 <MX_USB_DEVICE_Init+0x54>)
 800d03a:	f7fe fd25 	bl	800ba88 <USBD_Start>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d001      	beq.n	800d048 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d044:	f7f4 fa9d 	bl	8001582 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d048:	bf00      	nop
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	200000ac 	.word	0x200000ac
 800d050:	200039a4 	.word	0x200039a4
 800d054:	20000018 	.word	0x20000018
 800d058:	20000098 	.word	0x20000098

0800d05c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d060:	2200      	movs	r2, #0
 800d062:	4905      	ldr	r1, [pc, #20]	@ (800d078 <CDC_Init_FS+0x1c>)
 800d064:	4805      	ldr	r0, [pc, #20]	@ (800d07c <CDC_Init_FS+0x20>)
 800d066:	f7fe fbf3 	bl	800b850 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d06a:	4905      	ldr	r1, [pc, #20]	@ (800d080 <CDC_Init_FS+0x24>)
 800d06c:	4803      	ldr	r0, [pc, #12]	@ (800d07c <CDC_Init_FS+0x20>)
 800d06e:	f7fe fc11 	bl	800b894 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d072:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d074:	4618      	mov	r0, r3
 800d076:	bd80      	pop	{r7, pc}
 800d078:	20004480 	.word	0x20004480
 800d07c:	200039a4 	.word	0x200039a4
 800d080:	20003c80 	.word	0x20003c80

0800d084 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d084:	b480      	push	{r7}
 800d086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d088:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d094:	b480      	push	{r7}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	4603      	mov	r3, r0
 800d09c:	6039      	str	r1, [r7, #0]
 800d09e:	71fb      	strb	r3, [r7, #7]
 800d0a0:	4613      	mov	r3, r2
 800d0a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	2b23      	cmp	r3, #35	@ 0x23
 800d0a8:	d84a      	bhi.n	800d140 <CDC_Control_FS+0xac>
 800d0aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d0b0 <CDC_Control_FS+0x1c>)
 800d0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b0:	0800d141 	.word	0x0800d141
 800d0b4:	0800d141 	.word	0x0800d141
 800d0b8:	0800d141 	.word	0x0800d141
 800d0bc:	0800d141 	.word	0x0800d141
 800d0c0:	0800d141 	.word	0x0800d141
 800d0c4:	0800d141 	.word	0x0800d141
 800d0c8:	0800d141 	.word	0x0800d141
 800d0cc:	0800d141 	.word	0x0800d141
 800d0d0:	0800d141 	.word	0x0800d141
 800d0d4:	0800d141 	.word	0x0800d141
 800d0d8:	0800d141 	.word	0x0800d141
 800d0dc:	0800d141 	.word	0x0800d141
 800d0e0:	0800d141 	.word	0x0800d141
 800d0e4:	0800d141 	.word	0x0800d141
 800d0e8:	0800d141 	.word	0x0800d141
 800d0ec:	0800d141 	.word	0x0800d141
 800d0f0:	0800d141 	.word	0x0800d141
 800d0f4:	0800d141 	.word	0x0800d141
 800d0f8:	0800d141 	.word	0x0800d141
 800d0fc:	0800d141 	.word	0x0800d141
 800d100:	0800d141 	.word	0x0800d141
 800d104:	0800d141 	.word	0x0800d141
 800d108:	0800d141 	.word	0x0800d141
 800d10c:	0800d141 	.word	0x0800d141
 800d110:	0800d141 	.word	0x0800d141
 800d114:	0800d141 	.word	0x0800d141
 800d118:	0800d141 	.word	0x0800d141
 800d11c:	0800d141 	.word	0x0800d141
 800d120:	0800d141 	.word	0x0800d141
 800d124:	0800d141 	.word	0x0800d141
 800d128:	0800d141 	.word	0x0800d141
 800d12c:	0800d141 	.word	0x0800d141
 800d130:	0800d141 	.word	0x0800d141
 800d134:	0800d141 	.word	0x0800d141
 800d138:	0800d141 	.word	0x0800d141
 800d13c:	0800d141 	.word	0x0800d141
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d140:	bf00      	nop
  }

  return (USBD_OK);
 800d142:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d144:	4618      	mov	r0, r3
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d15a:	6879      	ldr	r1, [r7, #4]
 800d15c:	4808      	ldr	r0, [pc, #32]	@ (800d180 <CDC_Receive_FS+0x30>)
 800d15e:	f7fe fb99 	bl	800b894 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d162:	4807      	ldr	r0, [pc, #28]	@ (800d180 <CDC_Receive_FS+0x30>)
 800d164:	f7fe fbf4 	bl	800b950 <USBD_CDC_ReceivePacket>

  //CDC_myReceive_FS(Buf, Len); // byvala funkce v main.c
  //USB_My_Receive(Buf, *Len);
  comms_cdc_rx_callback(Buf, *Len);
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4619      	mov	r1, r3
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7f3 fcdc 	bl	8000b2c <comms_cdc_rx_callback>

  return (USBD_OK);
 800d174:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d176:	4618      	mov	r0, r3
 800d178:	3708      	adds	r7, #8
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	200039a4 	.word	0x200039a4

0800d184 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	460b      	mov	r3, r1
 800d18e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d190:	2300      	movs	r3, #0
 800d192:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d194:	4b0d      	ldr	r3, [pc, #52]	@ (800d1cc <CDC_Transmit_FS+0x48>)
 800d196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d19a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	e00b      	b.n	800d1c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d1aa:	887b      	ldrh	r3, [r7, #2]
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	6879      	ldr	r1, [r7, #4]
 800d1b0:	4806      	ldr	r0, [pc, #24]	@ (800d1cc <CDC_Transmit_FS+0x48>)
 800d1b2:	f7fe fb4d 	bl	800b850 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d1b6:	4805      	ldr	r0, [pc, #20]	@ (800d1cc <CDC_Transmit_FS+0x48>)
 800d1b8:	f7fe fb8a 	bl	800b8d0 <USBD_CDC_TransmitPacket>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	200039a4 	.word	0x200039a4

0800d1d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b087      	sub	sp, #28
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	4613      	mov	r3, r2
 800d1dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d1e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	371c      	adds	r7, #28
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
	...

0800d1f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	6039      	str	r1, [r7, #0]
 800d1fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	2212      	movs	r2, #18
 800d204:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d206:	4b03      	ldr	r3, [pc, #12]	@ (800d214 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d208:	4618      	mov	r0, r3
 800d20a:	370c      	adds	r7, #12
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr
 800d214:	200000cc 	.word	0x200000cc

0800d218 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	4603      	mov	r3, r0
 800d220:	6039      	str	r1, [r7, #0]
 800d222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	2204      	movs	r2, #4
 800d228:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d22a:	4b03      	ldr	r3, [pc, #12]	@ (800d238 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr
 800d238:	200000ec 	.word	0x200000ec

0800d23c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b082      	sub	sp, #8
 800d240:	af00      	add	r7, sp, #0
 800d242:	4603      	mov	r3, r0
 800d244:	6039      	str	r1, [r7, #0]
 800d246:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d248:	79fb      	ldrb	r3, [r7, #7]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d105      	bne.n	800d25a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	4907      	ldr	r1, [pc, #28]	@ (800d270 <USBD_FS_ProductStrDescriptor+0x34>)
 800d252:	4808      	ldr	r0, [pc, #32]	@ (800d274 <USBD_FS_ProductStrDescriptor+0x38>)
 800d254:	f7ff fdf2 	bl	800ce3c <USBD_GetString>
 800d258:	e004      	b.n	800d264 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	4904      	ldr	r1, [pc, #16]	@ (800d270 <USBD_FS_ProductStrDescriptor+0x34>)
 800d25e:	4805      	ldr	r0, [pc, #20]	@ (800d274 <USBD_FS_ProductStrDescriptor+0x38>)
 800d260:	f7ff fdec 	bl	800ce3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d264:	4b02      	ldr	r3, [pc, #8]	@ (800d270 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20004c80 	.word	0x20004c80
 800d274:	0800dd50 	.word	0x0800dd50

0800d278 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b082      	sub	sp, #8
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	4603      	mov	r3, r0
 800d280:	6039      	str	r1, [r7, #0]
 800d282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d284:	683a      	ldr	r2, [r7, #0]
 800d286:	4904      	ldr	r1, [pc, #16]	@ (800d298 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d288:	4804      	ldr	r0, [pc, #16]	@ (800d29c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d28a:	f7ff fdd7 	bl	800ce3c <USBD_GetString>
  return USBD_StrDesc;
 800d28e:	4b02      	ldr	r3, [pc, #8]	@ (800d298 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d290:	4618      	mov	r0, r3
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	20004c80 	.word	0x20004c80
 800d29c:	0800dd68 	.word	0x0800dd68

0800d2a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	6039      	str	r1, [r7, #0]
 800d2aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	221a      	movs	r2, #26
 800d2b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d2b2:	f000 f855 	bl	800d360 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d2b6:	4b02      	ldr	r3, [pc, #8]	@ (800d2c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3708      	adds	r7, #8
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	200000f0 	.word	0x200000f0

0800d2c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	6039      	str	r1, [r7, #0]
 800d2ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d2d0:	79fb      	ldrb	r3, [r7, #7]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d105      	bne.n	800d2e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2d6:	683a      	ldr	r2, [r7, #0]
 800d2d8:	4907      	ldr	r1, [pc, #28]	@ (800d2f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2da:	4808      	ldr	r0, [pc, #32]	@ (800d2fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2dc:	f7ff fdae 	bl	800ce3c <USBD_GetString>
 800d2e0:	e004      	b.n	800d2ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d2e2:	683a      	ldr	r2, [r7, #0]
 800d2e4:	4904      	ldr	r1, [pc, #16]	@ (800d2f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d2e6:	4805      	ldr	r0, [pc, #20]	@ (800d2fc <USBD_FS_ConfigStrDescriptor+0x38>)
 800d2e8:	f7ff fda8 	bl	800ce3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2ec:	4b02      	ldr	r3, [pc, #8]	@ (800d2f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3708      	adds	r7, #8
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	20004c80 	.word	0x20004c80
 800d2fc:	0800dd7c 	.word	0x0800dd7c

0800d300 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	4603      	mov	r3, r0
 800d308:	6039      	str	r1, [r7, #0]
 800d30a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d30c:	79fb      	ldrb	r3, [r7, #7]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d105      	bne.n	800d31e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	4907      	ldr	r1, [pc, #28]	@ (800d334 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d316:	4808      	ldr	r0, [pc, #32]	@ (800d338 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d318:	f7ff fd90 	bl	800ce3c <USBD_GetString>
 800d31c:	e004      	b.n	800d328 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	4904      	ldr	r1, [pc, #16]	@ (800d334 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d322:	4805      	ldr	r0, [pc, #20]	@ (800d338 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d324:	f7ff fd8a 	bl	800ce3c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d328:	4b02      	ldr	r3, [pc, #8]	@ (800d334 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	20004c80 	.word	0x20004c80
 800d338:	0800dd88 	.word	0x0800dd88

0800d33c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	4603      	mov	r3, r0
 800d344:	6039      	str	r1, [r7, #0]
 800d346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	220c      	movs	r2, #12
 800d34c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d34e:	4b03      	ldr	r3, [pc, #12]	@ (800d35c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d350:	4618      	mov	r0, r3
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	200000e0 	.word	0x200000e0

0800d360 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d366:	4b0f      	ldr	r3, [pc, #60]	@ (800d3a4 <Get_SerialNum+0x44>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d36c:	4b0e      	ldr	r3, [pc, #56]	@ (800d3a8 <Get_SerialNum+0x48>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d372:	4b0e      	ldr	r3, [pc, #56]	@ (800d3ac <Get_SerialNum+0x4c>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d378:	68fa      	ldr	r2, [r7, #12]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	4413      	add	r3, r2
 800d37e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d009      	beq.n	800d39a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d386:	2208      	movs	r2, #8
 800d388:	4909      	ldr	r1, [pc, #36]	@ (800d3b0 <Get_SerialNum+0x50>)
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f000 f814 	bl	800d3b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d390:	2204      	movs	r2, #4
 800d392:	4908      	ldr	r1, [pc, #32]	@ (800d3b4 <Get_SerialNum+0x54>)
 800d394:	68b8      	ldr	r0, [r7, #8]
 800d396:	f000 f80f 	bl	800d3b8 <IntToUnicode>
  }
}
 800d39a:	bf00      	nop
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	1fff7590 	.word	0x1fff7590
 800d3a8:	1fff7594 	.word	0x1fff7594
 800d3ac:	1fff7598 	.word	0x1fff7598
 800d3b0:	200000f2 	.word	0x200000f2
 800d3b4:	20000102 	.word	0x20000102

0800d3b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b087      	sub	sp, #28
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	75fb      	strb	r3, [r7, #23]
 800d3ce:	e027      	b.n	800d420 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	0f1b      	lsrs	r3, r3, #28
 800d3d4:	2b09      	cmp	r3, #9
 800d3d6:	d80b      	bhi.n	800d3f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	0f1b      	lsrs	r3, r3, #28
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	7dfb      	ldrb	r3, [r7, #23]
 800d3e0:	005b      	lsls	r3, r3, #1
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	440b      	add	r3, r1
 800d3e8:	3230      	adds	r2, #48	@ 0x30
 800d3ea:	b2d2      	uxtb	r2, r2
 800d3ec:	701a      	strb	r2, [r3, #0]
 800d3ee:	e00a      	b.n	800d406 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	0f1b      	lsrs	r3, r3, #28
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
 800d3f8:	005b      	lsls	r3, r3, #1
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	440b      	add	r3, r1
 800d400:	3237      	adds	r2, #55	@ 0x37
 800d402:	b2d2      	uxtb	r2, r2
 800d404:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	011b      	lsls	r3, r3, #4
 800d40a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d40c:	7dfb      	ldrb	r3, [r7, #23]
 800d40e:	005b      	lsls	r3, r3, #1
 800d410:	3301      	adds	r3, #1
 800d412:	68ba      	ldr	r2, [r7, #8]
 800d414:	4413      	add	r3, r2
 800d416:	2200      	movs	r2, #0
 800d418:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d41a:	7dfb      	ldrb	r3, [r7, #23]
 800d41c:	3301      	adds	r3, #1
 800d41e:	75fb      	strb	r3, [r7, #23]
 800d420:	7dfa      	ldrb	r2, [r7, #23]
 800d422:	79fb      	ldrb	r3, [r7, #7]
 800d424:	429a      	cmp	r2, r3
 800d426:	d3d3      	bcc.n	800d3d0 <IntToUnicode+0x18>
  }
}
 800d428:	bf00      	nop
 800d42a:	bf00      	nop
 800d42c:	371c      	adds	r7, #28
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr
	...

0800d438 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b0b0      	sub	sp, #192	@ 0xc0
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d440:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d444:	2200      	movs	r2, #0
 800d446:	601a      	str	r2, [r3, #0]
 800d448:	605a      	str	r2, [r3, #4]
 800d44a:	609a      	str	r2, [r3, #8]
 800d44c:	60da      	str	r2, [r3, #12]
 800d44e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800d450:	f107 0318 	add.w	r3, r7, #24
 800d454:	2294      	movs	r2, #148	@ 0x94
 800d456:	2100      	movs	r1, #0
 800d458:	4618      	mov	r0, r3
 800d45a:	f000 fc33 	bl	800dcc4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d466:	d174      	bne.n	800d552 <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d468:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d46c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800d46e:	2300      	movs	r3, #0
 800d470:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800d474:	f107 0318 	add.w	r3, r7, #24
 800d478:	4618      	mov	r0, r3
 800d47a:	f7f9 f829 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 800d47e:	4603      	mov	r3, r0
 800d480:	2b00      	cmp	r3, #0
 800d482:	d001      	beq.n	800d488 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d484:	f7f4 f87d 	bl	8001582 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d488:	4b34      	ldr	r3, [pc, #208]	@ (800d55c <HAL_PCD_MspInit+0x124>)
 800d48a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d48c:	4a33      	ldr	r2, [pc, #204]	@ (800d55c <HAL_PCD_MspInit+0x124>)
 800d48e:	f043 0301 	orr.w	r3, r3, #1
 800d492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d494:	4b31      	ldr	r3, [pc, #196]	@ (800d55c <HAL_PCD_MspInit+0x124>)
 800d496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d498:	f003 0301 	and.w	r3, r3, #1
 800d49c:	617b      	str	r3, [r7, #20]
 800d49e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d4a0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800d4a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4a8:	2302      	movs	r3, #2
 800d4aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4b4:	2303      	movs	r3, #3
 800d4b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d4ba:	230a      	movs	r3, #10
 800d4bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4c0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d4ca:	f7f6 fca9 	bl	8003e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800d4ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800d4e2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d4ec:	f7f6 fc98 	bl	8003e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d4f0:	4b1a      	ldr	r3, [pc, #104]	@ (800d55c <HAL_PCD_MspInit+0x124>)
 800d4f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4f4:	4a19      	ldr	r2, [pc, #100]	@ (800d55c <HAL_PCD_MspInit+0x124>)
 800d4f6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d4fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d4fc:	4b17      	ldr	r3, [pc, #92]	@ (800d55c <HAL_PCD_MspInit+0x124>)
 800d4fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d500:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d504:	613b      	str	r3, [r7, #16]
 800d506:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d508:	4b14      	ldr	r3, [pc, #80]	@ (800d55c <HAL_PCD_MspInit+0x124>)
 800d50a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d50c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d510:	2b00      	cmp	r3, #0
 800d512:	d114      	bne.n	800d53e <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d514:	4b11      	ldr	r3, [pc, #68]	@ (800d55c <HAL_PCD_MspInit+0x124>)
 800d516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d518:	4a10      	ldr	r2, [pc, #64]	@ (800d55c <HAL_PCD_MspInit+0x124>)
 800d51a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d51e:	6593      	str	r3, [r2, #88]	@ 0x58
 800d520:	4b0e      	ldr	r3, [pc, #56]	@ (800d55c <HAL_PCD_MspInit+0x124>)
 800d522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d528:	60fb      	str	r3, [r7, #12]
 800d52a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800d52c:	f7f8 f8d8 	bl	80056e0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d530:	4b0a      	ldr	r3, [pc, #40]	@ (800d55c <HAL_PCD_MspInit+0x124>)
 800d532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d534:	4a09      	ldr	r2, [pc, #36]	@ (800d55c <HAL_PCD_MspInit+0x124>)
 800d536:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d53a:	6593      	str	r3, [r2, #88]	@ 0x58
 800d53c:	e001      	b.n	800d542 <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800d53e:	f7f8 f8cf 	bl	80056e0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d542:	2200      	movs	r2, #0
 800d544:	2100      	movs	r1, #0
 800d546:	2043      	movs	r0, #67	@ 0x43
 800d548:	f7f6 f8bd 	bl	80036c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d54c:	2043      	movs	r0, #67	@ 0x43
 800d54e:	f7f6 f8d6 	bl	80036fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d552:	bf00      	nop
 800d554:	37c0      	adds	r7, #192	@ 0xc0
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	40021000 	.word	0x40021000

0800d560 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800d574:	4619      	mov	r1, r3
 800d576:	4610      	mov	r0, r2
 800d578:	f7fe fad3 	bl	800bb22 <USBD_LL_SetupStage>
}
 800d57c:	bf00      	nop
 800d57e:	3708      	adds	r7, #8
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}

0800d584 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	460b      	mov	r3, r1
 800d58e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d596:	78fa      	ldrb	r2, [r7, #3]
 800d598:	6879      	ldr	r1, [r7, #4]
 800d59a:	4613      	mov	r3, r2
 800d59c:	00db      	lsls	r3, r3, #3
 800d59e:	4413      	add	r3, r2
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	440b      	add	r3, r1
 800d5a4:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	78fb      	ldrb	r3, [r7, #3]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	f7fe fb0d 	bl	800bbcc <USBD_LL_DataOutStage>
}
 800d5b2:	bf00      	nop
 800d5b4:	3708      	adds	r7, #8
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}

0800d5ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ba:	b580      	push	{r7, lr}
 800d5bc:	b082      	sub	sp, #8
 800d5be:	af00      	add	r7, sp, #0
 800d5c0:	6078      	str	r0, [r7, #4]
 800d5c2:	460b      	mov	r3, r1
 800d5c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800d5cc:	78fa      	ldrb	r2, [r7, #3]
 800d5ce:	6879      	ldr	r1, [r7, #4]
 800d5d0:	4613      	mov	r3, r2
 800d5d2:	00db      	lsls	r3, r3, #3
 800d5d4:	4413      	add	r3, r2
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	440b      	add	r3, r1
 800d5da:	3348      	adds	r3, #72	@ 0x48
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	78fb      	ldrb	r3, [r7, #3]
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	f7fe fba6 	bl	800bd32 <USBD_LL_DataInStage>
}
 800d5e6:	bf00      	nop
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b082      	sub	sp, #8
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7fe fce0 	bl	800bfc2 <USBD_LL_SOF>
}
 800d602:	bf00      	nop
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b084      	sub	sp, #16
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d612:	2301      	movs	r3, #1
 800d614:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	691b      	ldr	r3, [r3, #16]
 800d61a:	2b02      	cmp	r3, #2
 800d61c:	d001      	beq.n	800d622 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d61e:	f7f3 ffb0 	bl	8001582 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d628:	7bfa      	ldrb	r2, [r7, #15]
 800d62a:	4611      	mov	r1, r2
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7fe fc84 	bl	800bf3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d638:	4618      	mov	r0, r3
 800d63a:	f7fe fc2c 	bl	800be96 <USBD_LL_Reset>
}
 800d63e:	bf00      	nop
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
	...

0800d648 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	687a      	ldr	r2, [r7, #4]
 800d65c:	6812      	ldr	r2, [r2, #0]
 800d65e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d662:	f043 0301 	orr.w	r3, r3, #1
 800d666:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fe fc73 	bl	800bf5a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6a1b      	ldr	r3, [r3, #32]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d005      	beq.n	800d688 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d67c:	4b04      	ldr	r3, [pc, #16]	@ (800d690 <HAL_PCD_SuspendCallback+0x48>)
 800d67e:	691b      	ldr	r3, [r3, #16]
 800d680:	4a03      	ldr	r2, [pc, #12]	@ (800d690 <HAL_PCD_SuspendCallback+0x48>)
 800d682:	f043 0306 	orr.w	r3, r3, #6
 800d686:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d688:	bf00      	nop
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}
 800d690:	e000ed00 	.word	0xe000ed00

0800d694 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	6812      	ldr	r2, [r2, #0]
 800d6aa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d6ae:	f023 0301 	bic.w	r3, r3, #1
 800d6b2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6a1b      	ldr	r3, [r3, #32]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d007      	beq.n	800d6cc <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6bc:	4b08      	ldr	r3, [pc, #32]	@ (800d6e0 <HAL_PCD_ResumeCallback+0x4c>)
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	4a07      	ldr	r2, [pc, #28]	@ (800d6e0 <HAL_PCD_ResumeCallback+0x4c>)
 800d6c2:	f023 0306 	bic.w	r3, r3, #6
 800d6c6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d6c8:	f000 faf6 	bl	800dcb8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7fe fc5d 	bl	800bf92 <USBD_LL_Resume>
}
 800d6d8:	bf00      	nop
 800d6da:	3708      	adds	r7, #8
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	e000ed00 	.word	0xe000ed00

0800d6e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b082      	sub	sp, #8
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d6f6:	78fa      	ldrb	r2, [r7, #3]
 800d6f8:	4611      	mov	r1, r2
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f7fe fcb3 	bl	800c066 <USBD_LL_IsoOUTIncomplete>
}
 800d700:	bf00      	nop
 800d702:	3708      	adds	r7, #8
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	460b      	mov	r3, r1
 800d712:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d71a:	78fa      	ldrb	r2, [r7, #3]
 800d71c:	4611      	mov	r1, r2
 800d71e:	4618      	mov	r0, r3
 800d720:	f7fe fc6f 	bl	800c002 <USBD_LL_IsoINIncomplete>
}
 800d724:	bf00      	nop
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fe fcc5 	bl	800c0ca <USBD_LL_DevConnected>
}
 800d740:	bf00      	nop
 800d742:	3708      	adds	r7, #8
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}

0800d748 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800d756:	4618      	mov	r0, r3
 800d758:	f7fe fcc2 	bl	800c0e0 <USBD_LL_DevDisconnected>
}
 800d75c:	bf00      	nop
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d13c      	bne.n	800d7ee <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d774:	4a20      	ldr	r2, [pc, #128]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	4a1e      	ldr	r2, [pc, #120]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d780:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d784:	4b1c      	ldr	r3, [pc, #112]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d786:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d78a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d78c:	4b1a      	ldr	r3, [pc, #104]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d78e:	2206      	movs	r2, #6
 800d790:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d792:	4b19      	ldr	r3, [pc, #100]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d794:	2202      	movs	r2, #2
 800d796:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d798:	4b17      	ldr	r3, [pc, #92]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d79a:	2202      	movs	r2, #2
 800d79c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d79e:	4b16      	ldr	r3, [pc, #88]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d7a4:	4b14      	ldr	r3, [pc, #80]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d7aa:	4b13      	ldr	r3, [pc, #76]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d7b0:	4b11      	ldr	r3, [pc, #68]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d7b6:	4b10      	ldr	r3, [pc, #64]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d7bc:	4b0e      	ldr	r3, [pc, #56]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d7be:	2200      	movs	r2, #0
 800d7c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d7c2:	480d      	ldr	r0, [pc, #52]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d7c4:	f7f6 fd20 	bl	8004208 <HAL_PCD_Init>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d7ce:	f7f3 fed8 	bl	8001582 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d7d2:	2180      	movs	r1, #128	@ 0x80
 800d7d4:	4808      	ldr	r0, [pc, #32]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d7d6:	f7f7 fe8a 	bl	80054ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d7da:	2240      	movs	r2, #64	@ 0x40
 800d7dc:	2100      	movs	r1, #0
 800d7de:	4806      	ldr	r0, [pc, #24]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d7e0:	f7f7 fe3e 	bl	8005460 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d7e4:	2280      	movs	r2, #128	@ 0x80
 800d7e6:	2101      	movs	r1, #1
 800d7e8:	4803      	ldr	r0, [pc, #12]	@ (800d7f8 <USBD_LL_Init+0x94>)
 800d7ea:	f7f7 fe39 	bl	8005460 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3708      	adds	r7, #8
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	20004e80 	.word	0x20004e80

0800d7fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d804:	2300      	movs	r3, #0
 800d806:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d808:	2300      	movs	r3, #0
 800d80a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d812:	4618      	mov	r0, r3
 800d814:	f7f6 fe1c 	bl	8004450 <HAL_PCD_Start>
 800d818:	4603      	mov	r3, r0
 800d81a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d81c:	7bbb      	ldrb	r3, [r7, #14]
 800d81e:	2b03      	cmp	r3, #3
 800d820:	d816      	bhi.n	800d850 <USBD_LL_Start+0x54>
 800d822:	a201      	add	r2, pc, #4	@ (adr r2, 800d828 <USBD_LL_Start+0x2c>)
 800d824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d828:	0800d839 	.word	0x0800d839
 800d82c:	0800d83f 	.word	0x0800d83f
 800d830:	0800d845 	.word	0x0800d845
 800d834:	0800d84b 	.word	0x0800d84b
    case HAL_OK :
      usb_status = USBD_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	73fb      	strb	r3, [r7, #15]
    break;
 800d83c:	e00b      	b.n	800d856 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d83e:	2303      	movs	r3, #3
 800d840:	73fb      	strb	r3, [r7, #15]
    break;
 800d842:	e008      	b.n	800d856 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d844:	2301      	movs	r3, #1
 800d846:	73fb      	strb	r3, [r7, #15]
    break;
 800d848:	e005      	b.n	800d856 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d84a:	2303      	movs	r3, #3
 800d84c:	73fb      	strb	r3, [r7, #15]
    break;
 800d84e:	e002      	b.n	800d856 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800d850:	2303      	movs	r3, #3
 800d852:	73fb      	strb	r3, [r7, #15]
    break;
 800d854:	bf00      	nop
  }
  return usb_status;
 800d856:	7bfb      	ldrb	r3, [r7, #15]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	4608      	mov	r0, r1
 800d86a:	4611      	mov	r1, r2
 800d86c:	461a      	mov	r2, r3
 800d86e:	4603      	mov	r3, r0
 800d870:	70fb      	strb	r3, [r7, #3]
 800d872:	460b      	mov	r3, r1
 800d874:	70bb      	strb	r3, [r7, #2]
 800d876:	4613      	mov	r3, r2
 800d878:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d87a:	2300      	movs	r3, #0
 800d87c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d87e:	2300      	movs	r3, #0
 800d880:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d888:	78bb      	ldrb	r3, [r7, #2]
 800d88a:	883a      	ldrh	r2, [r7, #0]
 800d88c:	78f9      	ldrb	r1, [r7, #3]
 800d88e:	f7f7 fac6 	bl	8004e1e <HAL_PCD_EP_Open>
 800d892:	4603      	mov	r3, r0
 800d894:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d896:	7bbb      	ldrb	r3, [r7, #14]
 800d898:	2b03      	cmp	r3, #3
 800d89a:	d817      	bhi.n	800d8cc <USBD_LL_OpenEP+0x6c>
 800d89c:	a201      	add	r2, pc, #4	@ (adr r2, 800d8a4 <USBD_LL_OpenEP+0x44>)
 800d89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8a2:	bf00      	nop
 800d8a4:	0800d8b5 	.word	0x0800d8b5
 800d8a8:	0800d8bb 	.word	0x0800d8bb
 800d8ac:	0800d8c1 	.word	0x0800d8c1
 800d8b0:	0800d8c7 	.word	0x0800d8c7
    case HAL_OK :
      usb_status = USBD_OK;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800d8b8:	e00b      	b.n	800d8d2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	73fb      	strb	r3, [r7, #15]
    break;
 800d8be:	e008      	b.n	800d8d2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8c4:	e005      	b.n	800d8d2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d8ca:	e002      	b.n	800d8d2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d8d0:	bf00      	nop
  }
  return usb_status;
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3710      	adds	r7, #16
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b084      	sub	sp, #16
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8f6:	78fa      	ldrb	r2, [r7, #3]
 800d8f8:	4611      	mov	r1, r2
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7f7 faf7 	bl	8004eee <HAL_PCD_EP_Close>
 800d900:	4603      	mov	r3, r0
 800d902:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d904:	7bbb      	ldrb	r3, [r7, #14]
 800d906:	2b03      	cmp	r3, #3
 800d908:	d816      	bhi.n	800d938 <USBD_LL_CloseEP+0x5c>
 800d90a:	a201      	add	r2, pc, #4	@ (adr r2, 800d910 <USBD_LL_CloseEP+0x34>)
 800d90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d910:	0800d921 	.word	0x0800d921
 800d914:	0800d927 	.word	0x0800d927
 800d918:	0800d92d 	.word	0x0800d92d
 800d91c:	0800d933 	.word	0x0800d933
    case HAL_OK :
      usb_status = USBD_OK;
 800d920:	2300      	movs	r3, #0
 800d922:	73fb      	strb	r3, [r7, #15]
    break;
 800d924:	e00b      	b.n	800d93e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d926:	2303      	movs	r3, #3
 800d928:	73fb      	strb	r3, [r7, #15]
    break;
 800d92a:	e008      	b.n	800d93e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d92c:	2301      	movs	r3, #1
 800d92e:	73fb      	strb	r3, [r7, #15]
    break;
 800d930:	e005      	b.n	800d93e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d932:	2303      	movs	r3, #3
 800d934:	73fb      	strb	r3, [r7, #15]
    break;
 800d936:	e002      	b.n	800d93e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d938:	2303      	movs	r3, #3
 800d93a:	73fb      	strb	r3, [r7, #15]
    break;
 800d93c:	bf00      	nop
  }
  return usb_status;
 800d93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3710      	adds	r7, #16
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d954:	2300      	movs	r3, #0
 800d956:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d958:	2300      	movs	r3, #0
 800d95a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d962:	78fa      	ldrb	r2, [r7, #3]
 800d964:	4611      	mov	r1, r2
 800d966:	4618      	mov	r0, r3
 800d968:	f7f7 fb86 	bl	8005078 <HAL_PCD_EP_SetStall>
 800d96c:	4603      	mov	r3, r0
 800d96e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d970:	7bbb      	ldrb	r3, [r7, #14]
 800d972:	2b03      	cmp	r3, #3
 800d974:	d816      	bhi.n	800d9a4 <USBD_LL_StallEP+0x5c>
 800d976:	a201      	add	r2, pc, #4	@ (adr r2, 800d97c <USBD_LL_StallEP+0x34>)
 800d978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d97c:	0800d98d 	.word	0x0800d98d
 800d980:	0800d993 	.word	0x0800d993
 800d984:	0800d999 	.word	0x0800d999
 800d988:	0800d99f 	.word	0x0800d99f
    case HAL_OK :
      usb_status = USBD_OK;
 800d98c:	2300      	movs	r3, #0
 800d98e:	73fb      	strb	r3, [r7, #15]
    break;
 800d990:	e00b      	b.n	800d9aa <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d992:	2303      	movs	r3, #3
 800d994:	73fb      	strb	r3, [r7, #15]
    break;
 800d996:	e008      	b.n	800d9aa <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d998:	2301      	movs	r3, #1
 800d99a:	73fb      	strb	r3, [r7, #15]
    break;
 800d99c:	e005      	b.n	800d9aa <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d99e:	2303      	movs	r3, #3
 800d9a0:	73fb      	strb	r3, [r7, #15]
    break;
 800d9a2:	e002      	b.n	800d9aa <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800d9a4:	2303      	movs	r3, #3
 800d9a6:	73fb      	strb	r3, [r7, #15]
    break;
 800d9a8:	bf00      	nop
  }
  return usb_status;
 800d9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3710      	adds	r7, #16
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}

0800d9b4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	460b      	mov	r3, r1
 800d9be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9ce:	78fa      	ldrb	r2, [r7, #3]
 800d9d0:	4611      	mov	r1, r2
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7f7 fbb2 	bl	800513c <HAL_PCD_EP_ClrStall>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800d9dc:	7bbb      	ldrb	r3, [r7, #14]
 800d9de:	2b03      	cmp	r3, #3
 800d9e0:	d816      	bhi.n	800da10 <USBD_LL_ClearStallEP+0x5c>
 800d9e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d9e8 <USBD_LL_ClearStallEP+0x34>)
 800d9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e8:	0800d9f9 	.word	0x0800d9f9
 800d9ec:	0800d9ff 	.word	0x0800d9ff
 800d9f0:	0800da05 	.word	0x0800da05
 800d9f4:	0800da0b 	.word	0x0800da0b
    case HAL_OK :
      usb_status = USBD_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	73fb      	strb	r3, [r7, #15]
    break;
 800d9fc:	e00b      	b.n	800da16 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d9fe:	2303      	movs	r3, #3
 800da00:	73fb      	strb	r3, [r7, #15]
    break;
 800da02:	e008      	b.n	800da16 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800da04:	2301      	movs	r3, #1
 800da06:	73fb      	strb	r3, [r7, #15]
    break;
 800da08:	e005      	b.n	800da16 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800da0a:	2303      	movs	r3, #3
 800da0c:	73fb      	strb	r3, [r7, #15]
    break;
 800da0e:	e002      	b.n	800da16 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800da10:	2303      	movs	r3, #3
 800da12:	73fb      	strb	r3, [r7, #15]
    break;
 800da14:	bf00      	nop
  }
  return usb_status;
 800da16:	7bfb      	ldrb	r3, [r7, #15]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3710      	adds	r7, #16
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800da34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	da0b      	bge.n	800da54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800da3c:	78fb      	ldrb	r3, [r7, #3]
 800da3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da42:	68f9      	ldr	r1, [r7, #12]
 800da44:	4613      	mov	r3, r2
 800da46:	00db      	lsls	r3, r3, #3
 800da48:	4413      	add	r3, r2
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	440b      	add	r3, r1
 800da4e:	333e      	adds	r3, #62	@ 0x3e
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	e00b      	b.n	800da6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800da54:	78fb      	ldrb	r3, [r7, #3]
 800da56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da5a:	68f9      	ldr	r1, [r7, #12]
 800da5c:	4613      	mov	r3, r2
 800da5e:	00db      	lsls	r3, r3, #3
 800da60:	4413      	add	r3, r2
 800da62:	009b      	lsls	r3, r3, #2
 800da64:	440b      	add	r3, r1
 800da66:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800da6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3714      	adds	r7, #20
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	460b      	mov	r3, r1
 800da82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da84:	2300      	movs	r3, #0
 800da86:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da88:	2300      	movs	r3, #0
 800da8a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da92:	78fa      	ldrb	r2, [r7, #3]
 800da94:	4611      	mov	r1, r2
 800da96:	4618      	mov	r0, r3
 800da98:	f7f7 f99c 	bl	8004dd4 <HAL_PCD_SetAddress>
 800da9c:	4603      	mov	r3, r0
 800da9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800daa0:	7bbb      	ldrb	r3, [r7, #14]
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	d816      	bhi.n	800dad4 <USBD_LL_SetUSBAddress+0x5c>
 800daa6:	a201      	add	r2, pc, #4	@ (adr r2, 800daac <USBD_LL_SetUSBAddress+0x34>)
 800daa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daac:	0800dabd 	.word	0x0800dabd
 800dab0:	0800dac3 	.word	0x0800dac3
 800dab4:	0800dac9 	.word	0x0800dac9
 800dab8:	0800dacf 	.word	0x0800dacf
    case HAL_OK :
      usb_status = USBD_OK;
 800dabc:	2300      	movs	r3, #0
 800dabe:	73fb      	strb	r3, [r7, #15]
    break;
 800dac0:	e00b      	b.n	800dada <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dac2:	2303      	movs	r3, #3
 800dac4:	73fb      	strb	r3, [r7, #15]
    break;
 800dac6:	e008      	b.n	800dada <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dac8:	2301      	movs	r3, #1
 800daca:	73fb      	strb	r3, [r7, #15]
    break;
 800dacc:	e005      	b.n	800dada <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dace:	2303      	movs	r3, #3
 800dad0:	73fb      	strb	r3, [r7, #15]
    break;
 800dad2:	e002      	b.n	800dada <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800dad4:	2303      	movs	r3, #3
 800dad6:	73fb      	strb	r3, [r7, #15]
    break;
 800dad8:	bf00      	nop
  }
  return usb_status;
 800dada:	7bfb      	ldrb	r3, [r7, #15]
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3710      	adds	r7, #16
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b086      	sub	sp, #24
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	607a      	str	r2, [r7, #4]
 800daee:	603b      	str	r3, [r7, #0]
 800daf0:	460b      	mov	r3, r1
 800daf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daf4:	2300      	movs	r3, #0
 800daf6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daf8:	2300      	movs	r3, #0
 800dafa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800db02:	7af9      	ldrb	r1, [r7, #11]
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	f7f7 fa85 	bl	8005016 <HAL_PCD_EP_Transmit>
 800db0c:	4603      	mov	r3, r0
 800db0e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800db10:	7dbb      	ldrb	r3, [r7, #22]
 800db12:	2b03      	cmp	r3, #3
 800db14:	d816      	bhi.n	800db44 <USBD_LL_Transmit+0x60>
 800db16:	a201      	add	r2, pc, #4	@ (adr r2, 800db1c <USBD_LL_Transmit+0x38>)
 800db18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db1c:	0800db2d 	.word	0x0800db2d
 800db20:	0800db33 	.word	0x0800db33
 800db24:	0800db39 	.word	0x0800db39
 800db28:	0800db3f 	.word	0x0800db3f
    case HAL_OK :
      usb_status = USBD_OK;
 800db2c:	2300      	movs	r3, #0
 800db2e:	75fb      	strb	r3, [r7, #23]
    break;
 800db30:	e00b      	b.n	800db4a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db32:	2303      	movs	r3, #3
 800db34:	75fb      	strb	r3, [r7, #23]
    break;
 800db36:	e008      	b.n	800db4a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db38:	2301      	movs	r3, #1
 800db3a:	75fb      	strb	r3, [r7, #23]
    break;
 800db3c:	e005      	b.n	800db4a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db3e:	2303      	movs	r3, #3
 800db40:	75fb      	strb	r3, [r7, #23]
    break;
 800db42:	e002      	b.n	800db4a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800db44:	2303      	movs	r3, #3
 800db46:	75fb      	strb	r3, [r7, #23]
    break;
 800db48:	bf00      	nop
  }
  return usb_status;
 800db4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3718      	adds	r7, #24
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b086      	sub	sp, #24
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	607a      	str	r2, [r7, #4]
 800db5e:	603b      	str	r3, [r7, #0]
 800db60:	460b      	mov	r3, r1
 800db62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db64:	2300      	movs	r3, #0
 800db66:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db68:	2300      	movs	r3, #0
 800db6a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800db72:	7af9      	ldrb	r1, [r7, #11]
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	f7f7 fa03 	bl	8004f82 <HAL_PCD_EP_Receive>
 800db7c:	4603      	mov	r3, r0
 800db7e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800db80:	7dbb      	ldrb	r3, [r7, #22]
 800db82:	2b03      	cmp	r3, #3
 800db84:	d816      	bhi.n	800dbb4 <USBD_LL_PrepareReceive+0x60>
 800db86:	a201      	add	r2, pc, #4	@ (adr r2, 800db8c <USBD_LL_PrepareReceive+0x38>)
 800db88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db8c:	0800db9d 	.word	0x0800db9d
 800db90:	0800dba3 	.word	0x0800dba3
 800db94:	0800dba9 	.word	0x0800dba9
 800db98:	0800dbaf 	.word	0x0800dbaf
    case HAL_OK :
      usb_status = USBD_OK;
 800db9c:	2300      	movs	r3, #0
 800db9e:	75fb      	strb	r3, [r7, #23]
    break;
 800dba0:	e00b      	b.n	800dbba <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dba2:	2303      	movs	r3, #3
 800dba4:	75fb      	strb	r3, [r7, #23]
    break;
 800dba6:	e008      	b.n	800dbba <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	75fb      	strb	r3, [r7, #23]
    break;
 800dbac:	e005      	b.n	800dbba <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dbae:	2303      	movs	r3, #3
 800dbb0:	75fb      	strb	r3, [r7, #23]
    break;
 800dbb2:	e002      	b.n	800dbba <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800dbb4:	2303      	movs	r3, #3
 800dbb6:	75fb      	strb	r3, [r7, #23]
    break;
 800dbb8:	bf00      	nop
  }
  return usb_status;
 800dbba:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3718      	adds	r7, #24
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	460b      	mov	r3, r1
 800dbce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dbd6:	78fa      	ldrb	r2, [r7, #3]
 800dbd8:	4611      	mov	r1, r2
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7f7 fa03 	bl	8004fe6 <HAL_PCD_EP_GetRxCount>
 800dbe0:	4603      	mov	r3, r0
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3708      	adds	r7, #8
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
	...

0800dbec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800dbf8:	78fb      	ldrb	r3, [r7, #3]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d002      	beq.n	800dc04 <HAL_PCDEx_LPM_Callback+0x18>
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d01f      	beq.n	800dc42 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800dc02:	e03b      	b.n	800dc7c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a1b      	ldr	r3, [r3, #32]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d007      	beq.n	800dc1c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dc0c:	f000 f854 	bl	800dcb8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc10:	4b1c      	ldr	r3, [pc, #112]	@ (800dc84 <HAL_PCDEx_LPM_Callback+0x98>)
 800dc12:	691b      	ldr	r3, [r3, #16]
 800dc14:	4a1b      	ldr	r2, [pc, #108]	@ (800dc84 <HAL_PCDEx_LPM_Callback+0x98>)
 800dc16:	f023 0306 	bic.w	r3, r3, #6
 800dc1a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	6812      	ldr	r2, [r2, #0]
 800dc2a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dc2e:	f023 0301 	bic.w	r3, r3, #1
 800dc32:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fe f9a9 	bl	800bf92 <USBD_LL_Resume>
    break;
 800dc40:	e01c      	b.n	800dc7c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	6812      	ldr	r2, [r2, #0]
 800dc50:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dc54:	f043 0301 	orr.w	r3, r3, #1
 800dc58:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7fe f97a 	bl	800bf5a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6a1b      	ldr	r3, [r3, #32]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d005      	beq.n	800dc7a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc6e:	4b05      	ldr	r3, [pc, #20]	@ (800dc84 <HAL_PCDEx_LPM_Callback+0x98>)
 800dc70:	691b      	ldr	r3, [r3, #16]
 800dc72:	4a04      	ldr	r2, [pc, #16]	@ (800dc84 <HAL_PCDEx_LPM_Callback+0x98>)
 800dc74:	f043 0306 	orr.w	r3, r3, #6
 800dc78:	6113      	str	r3, [r2, #16]
    break;
 800dc7a:	bf00      	nop
}
 800dc7c:	bf00      	nop
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}
 800dc84:	e000ed00 	.word	0xe000ed00

0800dc88 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dc90:	4b03      	ldr	r3, [pc, #12]	@ (800dca0 <USBD_static_malloc+0x18>)
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	370c      	adds	r7, #12
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop
 800dca0:	2000538c 	.word	0x2000538c

0800dca4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b083      	sub	sp, #12
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]

}
 800dcac:	bf00      	nop
 800dcae:	370c      	adds	r7, #12
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dcbc:	f7f3 fc0e 	bl	80014dc <SystemClock_Config>
}
 800dcc0:	bf00      	nop
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <memset>:
 800dcc4:	4402      	add	r2, r0
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d100      	bne.n	800dcce <memset+0xa>
 800dccc:	4770      	bx	lr
 800dcce:	f803 1b01 	strb.w	r1, [r3], #1
 800dcd2:	e7f9      	b.n	800dcc8 <memset+0x4>

0800dcd4 <__libc_init_array>:
 800dcd4:	b570      	push	{r4, r5, r6, lr}
 800dcd6:	4d0d      	ldr	r5, [pc, #52]	@ (800dd0c <__libc_init_array+0x38>)
 800dcd8:	4c0d      	ldr	r4, [pc, #52]	@ (800dd10 <__libc_init_array+0x3c>)
 800dcda:	1b64      	subs	r4, r4, r5
 800dcdc:	10a4      	asrs	r4, r4, #2
 800dcde:	2600      	movs	r6, #0
 800dce0:	42a6      	cmp	r6, r4
 800dce2:	d109      	bne.n	800dcf8 <__libc_init_array+0x24>
 800dce4:	4d0b      	ldr	r5, [pc, #44]	@ (800dd14 <__libc_init_array+0x40>)
 800dce6:	4c0c      	ldr	r4, [pc, #48]	@ (800dd18 <__libc_init_array+0x44>)
 800dce8:	f000 f826 	bl	800dd38 <_init>
 800dcec:	1b64      	subs	r4, r4, r5
 800dcee:	10a4      	asrs	r4, r4, #2
 800dcf0:	2600      	movs	r6, #0
 800dcf2:	42a6      	cmp	r6, r4
 800dcf4:	d105      	bne.n	800dd02 <__libc_init_array+0x2e>
 800dcf6:	bd70      	pop	{r4, r5, r6, pc}
 800dcf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcfc:	4798      	blx	r3
 800dcfe:	3601      	adds	r6, #1
 800dd00:	e7ee      	b.n	800dce0 <__libc_init_array+0xc>
 800dd02:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd06:	4798      	blx	r3
 800dd08:	3601      	adds	r6, #1
 800dd0a:	e7f2      	b.n	800dcf2 <__libc_init_array+0x1e>
 800dd0c:	0800de10 	.word	0x0800de10
 800dd10:	0800de10 	.word	0x0800de10
 800dd14:	0800de10 	.word	0x0800de10
 800dd18:	0800de14 	.word	0x0800de14

0800dd1c <memcpy>:
 800dd1c:	440a      	add	r2, r1
 800dd1e:	4291      	cmp	r1, r2
 800dd20:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dd24:	d100      	bne.n	800dd28 <memcpy+0xc>
 800dd26:	4770      	bx	lr
 800dd28:	b510      	push	{r4, lr}
 800dd2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd32:	4291      	cmp	r1, r2
 800dd34:	d1f9      	bne.n	800dd2a <memcpy+0xe>
 800dd36:	bd10      	pop	{r4, pc}

0800dd38 <_init>:
 800dd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3a:	bf00      	nop
 800dd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3e:	bc08      	pop	{r3}
 800dd40:	469e      	mov	lr, r3
 800dd42:	4770      	bx	lr

0800dd44 <_fini>:
 800dd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd46:	bf00      	nop
 800dd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd4a:	bc08      	pop	{r3}
 800dd4c:	469e      	mov	lr, r3
 800dd4e:	4770      	bx	lr
