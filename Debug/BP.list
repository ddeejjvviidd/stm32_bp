
BP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa90  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800ac4c  0800ac4c  0001ac4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad14  0800ad14  0002010c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad14  0800ad14  0001ad14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad1c  0800ad1c  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad1c  0800ad1c  0001ad1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad20  0800ad20  0001ad20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  0800ad24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ea8  2000010c  0800ae30  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fb4  0800ae30  00021fb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e79d  00000000  00000000  0002017f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000440b  00000000  00000000  0003e91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001810  00000000  00000000  00042d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128f  00000000  00000000  00044538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dbc9  00000000  00000000  000457c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e592  00000000  00000000  00073390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010bc09  00000000  00000000  00091922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006424  00000000  00000000  0019d52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  001a3950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000010c 	.word	0x2000010c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800ac34 	.word	0x0800ac34

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000110 	.word	0x20000110
 80001f8:	0800ac34 	.word	0x0800ac34

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800021c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000220:	f000 b970 	b.w	8000504 <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9e08      	ldr	r6, [sp, #32]
 8000242:	460d      	mov	r5, r1
 8000244:	4604      	mov	r4, r0
 8000246:	460f      	mov	r7, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14a      	bne.n	80002e2 <__udivmoddi4+0xa6>
 800024c:	428a      	cmp	r2, r1
 800024e:	4694      	mov	ip, r2
 8000250:	d965      	bls.n	800031e <__udivmoddi4+0xe2>
 8000252:	fab2 f382 	clz	r3, r2
 8000256:	b143      	cbz	r3, 800026a <__udivmoddi4+0x2e>
 8000258:	fa02 fc03 	lsl.w	ip, r2, r3
 800025c:	f1c3 0220 	rsb	r2, r3, #32
 8000260:	409f      	lsls	r7, r3
 8000262:	fa20 f202 	lsr.w	r2, r0, r2
 8000266:	4317      	orrs	r7, r2
 8000268:	409c      	lsls	r4, r3
 800026a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026e:	fa1f f58c 	uxth.w	r5, ip
 8000272:	fbb7 f1fe 	udiv	r1, r7, lr
 8000276:	0c22      	lsrs	r2, r4, #16
 8000278:	fb0e 7711 	mls	r7, lr, r1, r7
 800027c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000280:	fb01 f005 	mul.w	r0, r1, r5
 8000284:	4290      	cmp	r0, r2
 8000286:	d90a      	bls.n	800029e <__udivmoddi4+0x62>
 8000288:	eb1c 0202 	adds.w	r2, ip, r2
 800028c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000290:	f080 811c 	bcs.w	80004cc <__udivmoddi4+0x290>
 8000294:	4290      	cmp	r0, r2
 8000296:	f240 8119 	bls.w	80004cc <__udivmoddi4+0x290>
 800029a:	3902      	subs	r1, #2
 800029c:	4462      	add	r2, ip
 800029e:	1a12      	subs	r2, r2, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ae:	fb00 f505 	mul.w	r5, r0, r5
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x90>
 80002b6:	eb1c 0404 	adds.w	r4, ip, r4
 80002ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x294>
 80002c2:	42a5      	cmp	r5, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x294>
 80002c8:	4464      	add	r4, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d0:	1b64      	subs	r4, r4, r5
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11e      	cbz	r6, 80002de <__udivmoddi4+0xa2>
 80002d6:	40dc      	lsrs	r4, r3
 80002d8:	2300      	movs	r3, #0
 80002da:	e9c6 4300 	strd	r4, r3, [r6]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d908      	bls.n	80002f8 <__udivmoddi4+0xbc>
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f000 80ed 	beq.w	80004c6 <__udivmoddi4+0x28a>
 80002ec:	2100      	movs	r1, #0
 80002ee:	e9c6 0500 	strd	r0, r5, [r6]
 80002f2:	4608      	mov	r0, r1
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	fab3 f183 	clz	r1, r3
 80002fc:	2900      	cmp	r1, #0
 80002fe:	d149      	bne.n	8000394 <__udivmoddi4+0x158>
 8000300:	42ab      	cmp	r3, r5
 8000302:	d302      	bcc.n	800030a <__udivmoddi4+0xce>
 8000304:	4282      	cmp	r2, r0
 8000306:	f200 80f8 	bhi.w	80004fa <__udivmoddi4+0x2be>
 800030a:	1a84      	subs	r4, r0, r2
 800030c:	eb65 0203 	sbc.w	r2, r5, r3
 8000310:	2001      	movs	r0, #1
 8000312:	4617      	mov	r7, r2
 8000314:	2e00      	cmp	r6, #0
 8000316:	d0e2      	beq.n	80002de <__udivmoddi4+0xa2>
 8000318:	e9c6 4700 	strd	r4, r7, [r6]
 800031c:	e7df      	b.n	80002de <__udivmoddi4+0xa2>
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xe6>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f382 	clz	r3, r2
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x210>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2101      	movs	r1, #1
 8000338:	fbb2 f5f7 	udiv	r5, r2, r7
 800033c:	fb07 2015 	mls	r0, r7, r5, r2
 8000340:	0c22      	lsrs	r2, r4, #16
 8000342:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000346:	fb0e f005 	mul.w	r0, lr, r5
 800034a:	4290      	cmp	r0, r2
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x124>
 800034e:	eb1c 0202 	adds.w	r2, ip, r2
 8000352:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x122>
 8000358:	4290      	cmp	r0, r2
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2b8>
 800035e:	4645      	mov	r5, r8
 8000360:	1a12      	subs	r2, r2, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb2 f0f7 	udiv	r0, r2, r7
 8000368:	fb07 2210 	mls	r2, r7, r0, r2
 800036c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x14e>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x14c>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2c2>
 8000388:	4610      	mov	r0, r2
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000392:	e79f      	b.n	80002d4 <__udivmoddi4+0x98>
 8000394:	f1c1 0720 	rsb	r7, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa05 f401 	lsl.w	r4, r5, r1
 80003a6:	fa20 f307 	lsr.w	r3, r0, r7
 80003aa:	40fd      	lsrs	r5, r7
 80003ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	fb09 5518 	mls	r5, r9, r8, r5
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c4:	fb08 f50e 	mul.w	r5, r8, lr
 80003c8:	42a5      	cmp	r5, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	fa00 f001 	lsl.w	r0, r0, r1
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b0>
 80003d4:	eb1c 0404 	adds.w	r4, ip, r4
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2b4>
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2b4>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4464      	add	r4, ip
 80003ec:	1b64      	subs	r4, r4, r5
 80003ee:	b29d      	uxth	r5, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1da>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2ac>
 800040e:	45a6      	cmp	lr, r4
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2ac>
 8000412:	3b02      	subs	r3, #2
 8000414:	4464      	add	r4, ip
 8000416:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041a:	fba3 9502 	umull	r9, r5, r3, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	42ac      	cmp	r4, r5
 8000424:	46c8      	mov	r8, r9
 8000426:	46ae      	mov	lr, r5
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x29c>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x298>
 800042c:	b156      	cbz	r6, 8000444 <__udivmoddi4+0x208>
 800042e:	ebb0 0208 	subs.w	r2, r0, r8
 8000432:	eb64 040e 	sbc.w	r4, r4, lr
 8000436:	fa04 f707 	lsl.w	r7, r4, r7
 800043a:	40ca      	lsrs	r2, r1
 800043c:	40cc      	lsrs	r4, r1
 800043e:	4317      	orrs	r7, r2
 8000440:	e9c6 7400 	strd	r7, r4, [r6]
 8000444:	4618      	mov	r0, r3
 8000446:	2100      	movs	r1, #0
 8000448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044c:	f1c3 0120 	rsb	r1, r3, #32
 8000450:	fa02 fc03 	lsl.w	ip, r2, r3
 8000454:	fa20 f201 	lsr.w	r2, r0, r1
 8000458:	fa25 f101 	lsr.w	r1, r5, r1
 800045c:	409d      	lsls	r5, r3
 800045e:	432a      	orrs	r2, r5
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb1 f0f7 	udiv	r0, r1, r7
 800046c:	fb07 1510 	mls	r5, r7, r0, r1
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000476:	fb00 f50e 	mul.w	r5, r0, lr
 800047a:	428d      	cmp	r5, r1
 800047c:	fa04 f403 	lsl.w	r4, r4, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x258>
 8000482:	eb1c 0101 	adds.w	r1, ip, r1
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b0>
 800048c:	428d      	cmp	r5, r1
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b0>
 8000490:	3802      	subs	r0, #2
 8000492:	4461      	add	r1, ip
 8000494:	1b49      	subs	r1, r1, r5
 8000496:	b292      	uxth	r2, r2
 8000498:	fbb1 f5f7 	udiv	r5, r1, r7
 800049c:	fb07 1115 	mls	r1, r7, r5, r1
 80004a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a4:	fb05 f10e 	mul.w	r1, r5, lr
 80004a8:	4291      	cmp	r1, r2
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x282>
 80004ac:	eb1c 0202 	adds.w	r2, ip, r2
 80004b0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2a8>
 80004b6:	4291      	cmp	r1, r2
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2a8>
 80004ba:	3d02      	subs	r5, #2
 80004bc:	4462      	add	r2, ip
 80004be:	1a52      	subs	r2, r2, r1
 80004c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0xfc>
 80004c6:	4631      	mov	r1, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xa2>
 80004cc:	4639      	mov	r1, r7
 80004ce:	e6e6      	b.n	800029e <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x90>
 80004d4:	4548      	cmp	r0, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f0>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e0:	3b01      	subs	r3, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f0>
 80004e4:	4645      	mov	r5, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x282>
 80004e8:	462b      	mov	r3, r5
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1da>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x258>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b0>
 80004f4:	3d02      	subs	r5, #2
 80004f6:	4462      	add	r2, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x124>
 80004fa:	4608      	mov	r0, r1
 80004fc:	e70a      	b.n	8000314 <__udivmoddi4+0xd8>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x14e>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <MX_DMA_Init+0x78>)
 8000510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000512:	4a1b      	ldr	r2, [pc, #108]	; (8000580 <MX_DMA_Init+0x78>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6493      	str	r3, [r2, #72]	; 0x48
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <MX_DMA_Init+0x78>)
 800051c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_DMA_Init+0x78>)
 8000528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800052a:	4a15      	ldr	r2, [pc, #84]	; (8000580 <MX_DMA_Init+0x78>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6493      	str	r3, [r2, #72]	; 0x48
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_DMA_Init+0x78>)
 8000534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <MX_DMA_Init+0x78>)
 8000540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000542:	4a0f      	ldr	r2, [pc, #60]	; (8000580 <MX_DMA_Init+0x78>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6493      	str	r3, [r2, #72]	; 0x48
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <MX_DMA_Init+0x78>)
 800054c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	2100      	movs	r1, #0
 800055a:	200b      	movs	r0, #11
 800055c:	f000 fe3d 	bl	80011da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000560:	200b      	movs	r0, #11
 8000562:	f000 fe56 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	2100      	movs	r1, #0
 800056a:	2039      	movs	r0, #57	; 0x39
 800056c:	f000 fe35 	bl	80011da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000570:	2039      	movs	r0, #57	; 0x39
 8000572:	f000 fe4e 	bl	8001212 <HAL_NVIC_EnableIRQ>

}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40021000 	.word	0x40021000

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b55      	ldr	r3, [pc, #340]	; (80006f0 <MX_GPIO_Init+0x16c>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a54      	ldr	r2, [pc, #336]	; (80006f0 <MX_GPIO_Init+0x16c>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b52      	ldr	r3, [pc, #328]	; (80006f0 <MX_GPIO_Init+0x16c>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	61bb      	str	r3, [r7, #24]
 80005b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	4b4f      	ldr	r3, [pc, #316]	; (80006f0 <MX_GPIO_Init+0x16c>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a4e      	ldr	r2, [pc, #312]	; (80006f0 <MX_GPIO_Init+0x16c>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b4c      	ldr	r3, [pc, #304]	; (80006f0 <MX_GPIO_Init+0x16c>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	617b      	str	r3, [r7, #20]
 80005c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b49      	ldr	r3, [pc, #292]	; (80006f0 <MX_GPIO_Init+0x16c>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a48      	ldr	r2, [pc, #288]	; (80006f0 <MX_GPIO_Init+0x16c>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b46      	ldr	r3, [pc, #280]	; (80006f0 <MX_GPIO_Init+0x16c>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	4b43      	ldr	r3, [pc, #268]	; (80006f0 <MX_GPIO_Init+0x16c>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a42      	ldr	r2, [pc, #264]	; (80006f0 <MX_GPIO_Init+0x16c>)
 80005e8:	f043 0308 	orr.w	r3, r3, #8
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <MX_GPIO_Init+0x16c>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0308 	and.w	r3, r3, #8
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005fa:	4b3d      	ldr	r3, [pc, #244]	; (80006f0 <MX_GPIO_Init+0x16c>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a3c      	ldr	r2, [pc, #240]	; (80006f0 <MX_GPIO_Init+0x16c>)
 8000600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b3a      	ldr	r3, [pc, #232]	; (80006f0 <MX_GPIO_Init+0x16c>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000612:	f002 fd9f 	bl	8003154 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <MX_GPIO_Init+0x16c>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a35      	ldr	r2, [pc, #212]	; (80006f0 <MX_GPIO_Init+0x16c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <MX_GPIO_Init+0x16c>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000634:	482f      	ldr	r0, [pc, #188]	; (80006f4 <MX_GPIO_Init+0x170>)
 8000636:	f001 fac7 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2140      	movs	r1, #64	; 0x40
 800063e:	482e      	ldr	r0, [pc, #184]	; (80006f8 <MX_GPIO_Init+0x174>)
 8000640:	f001 fac2 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	482c      	ldr	r0, [pc, #176]	; (80006fc <MX_GPIO_Init+0x178>)
 800064a:	f001 fabd 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000654:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	4619      	mov	r1, r3
 8000664:	4825      	ldr	r0, [pc, #148]	; (80006fc <MX_GPIO_Init+0x178>)
 8000666:	f001 f91d 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800066a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	481c      	ldr	r0, [pc, #112]	; (80006f4 <MX_GPIO_Init+0x170>)
 8000684:	f001 f90e 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000688:	2320      	movs	r3, #32
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068c:	2300      	movs	r3, #0
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	4817      	ldr	r0, [pc, #92]	; (80006f8 <MX_GPIO_Init+0x174>)
 800069c:	f001 f902 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006a0:	2340      	movs	r3, #64	; 0x40
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	4810      	ldr	r0, [pc, #64]	; (80006f8 <MX_GPIO_Init+0x174>)
 80006b8:	f001 f8f4 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	480a      	ldr	r0, [pc, #40]	; (80006fc <MX_GPIO_Init+0x178>)
 80006d4:	f001 f8e6 	bl	80018a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2028      	movs	r0, #40	; 0x28
 80006de:	f000 fd7c 	bl	80011da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006e2:	2028      	movs	r0, #40	; 0x28
 80006e4:	f000 fd95 	bl	8001212 <HAL_NVIC_EnableIRQ>

}
 80006e8:	bf00      	nop
 80006ea:	3730      	adds	r7, #48	; 0x30
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000400 	.word	0x48000400
 80006f8:	48001800 	.word	0x48001800
 80006fc:	48000800 	.word	0x48000800

08000700 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	80fb      	strh	r3, [r7, #6]
	//obsluha preruseni
	if(GPIO_Pin == GPIO_PIN_13){
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000710:	d119      	bne.n	8000746 <HAL_GPIO_EXTI_Callback+0x46>
		static bool previous;
		if(previous == false){
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_GPIO_EXTI_Callback+0x50>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	f083 0301 	eor.w	r3, r3, #1
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d009      	beq.n	8000734 <HAL_GPIO_EXTI_Callback+0x34>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <HAL_GPIO_EXTI_Callback+0x54>)
 8000728:	f001 fa4e 	bl	8001bc8 <HAL_GPIO_WritePin>
			previous = true;
 800072c:	4b08      	ldr	r3, [pc, #32]	; (8000750 <HAL_GPIO_EXTI_Callback+0x50>)
 800072e:	2201      	movs	r2, #1
 8000730:	701a      	strb	r2, [r3, #0]
  //UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000732:	e008      	b.n	8000746 <HAL_GPIO_EXTI_Callback+0x46>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <HAL_GPIO_EXTI_Callback+0x54>)
 800073c:	f001 fa44 	bl	8001bc8 <HAL_GPIO_WritePin>
			previous = false;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <HAL_GPIO_EXTI_Callback+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000128 	.word	0x20000128
 8000754:	48000400 	.word	0x48000400

08000758 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  if(htim == &htim6){
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d10d      	bne.n	8000784 <HAL_TIM_PeriodElapsedCallback+0x2c>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	4809      	ldr	r0, [pc, #36]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800076c:	f001 fa44 	bl	8001bf8 <HAL_GPIO_TogglePin>

	// zvysovani promenne periodical a odesilani po UART
	periodical += 1;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	4a07      	ldr	r2, [pc, #28]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000778:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit_DMA(&hlpuart1, (const uint8_t*)&periodical, 10);
 800077a:	220a      	movs	r2, #10
 800077c:	4905      	ldr	r1, [pc, #20]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000780:	f004 fcfa 	bl	8005178 <HAL_UART_Transmit_DMA>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000170 	.word	0x20000170
 8000790:	48000400 	.word	0x48000400
 8000794:	2000015c 	.word	0x2000015c
 8000798:	200001bc 	.word	0x200001bc

0800079c <HAL_UART_RxCpltCallback>:

char testdata[10];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(huart);

    if(huart == &hlpuart1){
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_UART_RxCpltCallback+0x2c>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d109      	bne.n	80007c0 <HAL_UART_RxCpltCallback+0x24>
    	HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t*)testdata, 10);
 80007ac:	220a      	movs	r2, #10
 80007ae:	4907      	ldr	r1, [pc, #28]	; (80007cc <HAL_UART_RxCpltCallback+0x30>)
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <HAL_UART_RxCpltCallback+0x2c>)
 80007b2:	f004 fce1 	bl	8005178 <HAL_UART_Transmit_DMA>
    	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)testdata, 10);
 80007b6:	220a      	movs	r2, #10
 80007b8:	4904      	ldr	r1, [pc, #16]	; (80007cc <HAL_UART_RxCpltCallback+0x30>)
 80007ba:	4803      	ldr	r0, [pc, #12]	; (80007c8 <HAL_UART_RxCpltCallback+0x2c>)
 80007bc:	f004 fd5c 	bl	8005278 <HAL_UART_Receive_DMA>
    }

    /* NOTE : This function should not be modified, when the callback is needed,
              the HAL_UART_RxCpltCallback can be implemented in the user file.
     */
  }
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200001bc 	.word	0x200001bc
 80007cc:	20000164 	.word	0x20000164

080007d0 <CDC_myReceive_FS>:
	}

    CDC_Transmit_FS(OutputBuf, (uint16_t)output_size);
}

int8_t CDC_myReceive_FS(uint8_t* Buf, uint32_t *Len){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	// stavovy automat

	switch(rx_state){
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <CDC_myReceive_FS+0x6c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d01b      	beq.n	800081a <CDC_myReceive_FS+0x4a>
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	dc25      	bgt.n	8000832 <CDC_myReceive_FS+0x62>
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <CDC_myReceive_FS+0x20>
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d009      	beq.n	8000802 <CDC_myReceive_FS+0x32>
 80007ee:	e020      	b.n	8000832 <CDC_myReceive_FS+0x62>
	case 0:
		//kopirovani hodnot
        //memcpy(iD, Buf, (*Len));
		iD = *(uint16_t*)Buf;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <CDC_myReceive_FS+0x70>)
 80007f8:	601a      	str	r2, [r3, #0]

        rx_state = 1;
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <CDC_myReceive_FS+0x6c>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	601a      	str	r2, [r3, #0]
		break;
 8000800:	e017      	b.n	8000832 <CDC_myReceive_FS+0x62>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	b29b      	uxth	r3, r3
	case 1:
		uint16_t receivedValue;
		memcpy(&receivedValue, Buf, sizeof(uint16_t));
 8000808:	81fb      	strh	r3, [r7, #14]

		//nData = (int)strtol((char*)Buf, NULL, 10);
	    nData = receivedValue; // Přiřazení hodnoty receivedValue proměnné nData
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	461a      	mov	r2, r3
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <CDC_myReceive_FS+0x74>)
 8000810:	601a      	str	r2, [r3, #0]

	    //memcpy(&xData_length, Buf, sizeof(int));
		//memcpy(nData, Buf, (*Len));

		rx_state = 2;
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <CDC_myReceive_FS+0x6c>)
 8000814:	2202      	movs	r2, #2
 8000816:	601a      	str	r2, [r3, #0]
		break;
 8000818:	e00b      	b.n	8000832 <CDC_myReceive_FS+0x62>
	case 2:
//		for (int i = 0; i < nData; ++i) {
//			memcpy(&xData[i], &Buf[i * 4], 4); // prevod z uint32_t
//		}

		memcpy((uint8_t*)xData, Buf, 4*nData);
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <CDC_myReceive_FS+0x74>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	461a      	mov	r2, r3
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <CDC_myReceive_FS+0x78>)
 8000826:	f00a f9f7 	bl	800ac18 <memcpy>

		rx_state = 0;
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <CDC_myReceive_FS+0x6c>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
		break;
 8000830:	bf00      	nop
	}


	return 0;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000160 	.word	0x20000160
 8000840:	2000012c 	.word	0x2000012c
 8000844:	20000130 	.word	0x20000130
 8000848:	20000134 	.word	0x20000134

0800084c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000852:	f000 fb4e 	bl	8000ef2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000856:	f000 f831 	bl	80008bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085a:	f7ff fe93 	bl	8000584 <MX_GPIO_Init>
  MX_DMA_Init();
 800085e:	f7ff fe53 	bl	8000508 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000862:	f000 f97b 	bl	8000b5c <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000866:	f000 f9c5 	bl	8000bf4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800086a:	f000 f919 	bl	8000aa0 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 800086e:	f009 fb6b 	bl	8009f48 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // zapnuti zelene ledky
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	480c      	ldr	r0, [pc, #48]	; (80008a8 <main+0x5c>)
 8000878:	f001 f9a6 	bl	8001bc8 <HAL_GPIO_WritePin>

  // volani casovace
  HAL_TIM_Base_Start_IT(&htim6);
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <main+0x60>)
 800087e:	f004 f8c1 	bl	8004a04 <HAL_TIM_Base_Start_IT>

  char *msg = "Hello world!\n\r";
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <main+0x64>)
 8000884:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff fcb8 	bl	80001fc <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	4807      	ldr	r0, [pc, #28]	; (80008b4 <main+0x68>)
 8000898:	f004 fbde 	bl	8005058 <HAL_UART_Transmit>
  HAL_UART_Receive_DMA(&hlpuart1, (uint8_t*)testdata, 10);
 800089c:	220a      	movs	r2, #10
 800089e:	4906      	ldr	r1, [pc, #24]	; (80008b8 <main+0x6c>)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <main+0x68>)
 80008a2:	f004 fce9 	bl	8005278 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <main+0x5a>
 80008a8:	48000800 	.word	0x48000800
 80008ac:	20000170 	.word	0x20000170
 80008b0:	0800ac4c 	.word	0x0800ac4c
 80008b4:	200001bc 	.word	0x200001bc
 80008b8:	20000164 	.word	0x20000164

080008bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b096      	sub	sp, #88	; 0x58
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2244      	movs	r2, #68	; 0x44
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00a f978 	bl	800abc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80008de:	2000      	movs	r0, #0
 80008e0:	f002 fb84 	bl	8002fec <HAL_PWREx_ControlVoltageScaling>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x32>
  {
    Error_Handler();
 80008ea:	f000 f83a 	bl	8000962 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80008ee:	2322      	movs	r3, #34	; 0x22
 80008f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008f8:	2301      	movs	r3, #1
 80008fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fc:	2340      	movs	r3, #64	; 0x40
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000900:	2302      	movs	r3, #2
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000904:	2302      	movs	r3, #2
 8000906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800090c:	231e      	movs	r3, #30
 800090e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000910:	2302      	movs	r3, #2
 8000912:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fc27 	bl	8003174 <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800092c:	f000 f819 	bl	8000962 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	2303      	movs	r3, #3
 8000936:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000940:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	2105      	movs	r1, #5
 800094a:	4618      	mov	r0, r3
 800094c:	f003 f82c 	bl	80039a8 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000956:	f000 f804 	bl	8000962 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3758      	adds	r7, #88	; 0x58
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000966:	b672      	cpsid	i
}
 8000968:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096a:	e7fe      	b.n	800096a <Error_Handler+0x8>

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_MspInit+0x44>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_MspInit+0x44>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6613      	str	r3, [r2, #96]	; 0x60
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_MspInit+0x44>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x44>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x44>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6593      	str	r3, [r2, #88]	; 0x58
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x44>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40021000 	.word	0x40021000

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 facc 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <DMA1_Channel1_IRQHandler+0x10>)
 8000a0e:	f000 fdf9 	bl	8001604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200002e4 	.word	0x200002e4

08000a1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a24:	f001 f902 	bl	8001c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <TIM6_DAC_IRQHandler+0x10>)
 8000a32:	f004 f857 	bl	8004ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000170 	.word	0x20000170

08000a40 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <DMA2_Channel2_IRQHandler+0x10>)
 8000a46:	f000 fddd 	bl	8001604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000344 	.word	0x20000344

08000a54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <OTG_FS_IRQHandler+0x10>)
 8000a5a:	f001 fa52 	bl	8001f02 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20001888 	.word	0x20001888

08000a68 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a6c:	4802      	ldr	r0, [pc, #8]	; (8000a78 <LPUART1_IRQHandler+0x10>)
 8000a6e:	f004 fc4f 	bl	8005310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200001bc 	.word	0x200001bc

08000a7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <SystemInit+0x20>)
 8000a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a86:	4a05      	ldr	r2, [pc, #20]	; (8000a9c <SystemInit+0x20>)
 8000a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_TIM6_Init+0x68>)
 8000ab2:	4a16      	ldr	r2, [pc, #88]	; (8000b0c <MX_TIM6_Init+0x6c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10000;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_TIM6_Init+0x68>)
 8000ab8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000abc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_TIM6_Init+0x68>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 12000;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_TIM6_Init+0x68>)
 8000ac6:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8000aca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_TIM6_Init+0x68>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_TIM6_Init+0x68>)
 8000ad4:	f003 ff3e 	bl	8004954 <HAL_TIM_Base_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000ade:	f7ff ff40 	bl	8000962 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	4619      	mov	r1, r3
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <MX_TIM6_Init+0x68>)
 8000af0:	f004 f9bc 	bl	8004e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000afa:	f7ff ff32 	bl	8000962 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000170 	.word	0x20000170
 8000b0c:	40001000 	.word	0x40001000

08000b10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <HAL_TIM_Base_MspInit+0x44>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d113      	bne.n	8000b4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_TIM_Base_MspInit+0x48>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <HAL_TIM_Base_MspInit+0x48>)
 8000b28:	f043 0310 	orr.w	r3, r3, #16
 8000b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_TIM_Base_MspInit+0x48>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2036      	movs	r0, #54	; 0x36
 8000b40:	f000 fb4b 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b44:	2036      	movs	r0, #54	; 0x36
 8000b46:	f000 fb64 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40001000 	.word	0x40001000
 8000b58:	40021000 	.word	0x40021000

08000b5c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b60:	4b22      	ldr	r3, [pc, #136]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000b62:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <MX_LPUART1_UART_Init+0x94>)
 8000b64:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000ba6:	f004 fa07 	bl	8004fb8 <HAL_UART_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f7ff fed7 	bl	8000962 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000bb8:	f005 fee7 	bl	800698a <HAL_UARTEx_SetTxFifoThreshold>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc2:	f7ff fece 	bl	8000962 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4808      	ldr	r0, [pc, #32]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000bca:	f005 ff1c 	bl	8006a06 <HAL_UARTEx_SetRxFifoThreshold>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f7ff fec5 	bl	8000962 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_LPUART1_UART_Init+0x90>)
 8000bda:	f005 fe9d 	bl	8006918 <HAL_UARTEx_DisableFifoMode>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f7ff febd 	bl	8000962 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200001bc 	.word	0x200001bc
 8000bf0:	40008000 	.word	0x40008000

08000bf4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000bfa:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <MX_USART3_UART_Init+0x94>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c3e:	f004 f9bb 	bl	8004fb8 <HAL_UART_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c48:	f7ff fe8b 	bl	8000962 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c50:	f005 fe9b 	bl	800698a <HAL_UARTEx_SetTxFifoThreshold>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c5a:	f7ff fe82 	bl	8000962 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4808      	ldr	r0, [pc, #32]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c62:	f005 fed0 	bl	8006a06 <HAL_UARTEx_SetRxFifoThreshold>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c6c:	f7ff fe79 	bl	8000962 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_USART3_UART_Init+0x90>)
 8000c72:	f005 fe51 	bl	8006918 <HAL_UARTEx_DisableFifoMode>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f7ff fe71 	bl	8000962 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000250 	.word	0x20000250
 8000c88:	40004800 	.word	0x40004800

08000c8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0b0      	sub	sp, #192	; 0xc0
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	f107 0318 	add.w	r3, r7, #24
 8000ca8:	2294      	movs	r2, #148	; 0x94
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f009 ff87 	bl	800abc0 <memset>
  if(uartHandle->Instance==LPUART1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a71      	ldr	r2, [pc, #452]	; (8000e7c <HAL_UART_MspInit+0x1f0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	f040 809a 	bne.w	8000df2 <HAL_UART_MspInit+0x166>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc6:	f107 0318 	add.w	r3, r7, #24
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 f92a 	bl	8003f24 <HAL_RCCEx_PeriphCLKConfig>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cd6:	f7ff fe44 	bl	8000962 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cda:	4b69      	ldr	r3, [pc, #420]	; (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cde:	4a68      	ldr	r2, [pc, #416]	; (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ce6:	4b66      	ldr	r3, [pc, #408]	; (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf2:	4b63      	ldr	r3, [pc, #396]	; (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a62      	ldr	r2, [pc, #392]	; (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b60      	ldr	r3, [pc, #384]	; (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000d0a:	f002 fa23 	bl	8003154 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000d0e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d32:	4619      	mov	r1, r3
 8000d34:	4853      	ldr	r0, [pc, #332]	; (8000e84 <HAL_UART_MspInit+0x1f8>)
 8000d36:	f000 fdb5 	bl	80018a4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000d3a:	4b53      	ldr	r3, [pc, #332]	; (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d3c:	4a53      	ldr	r2, [pc, #332]	; (8000e8c <HAL_UART_MspInit+0x200>)
 8000d3e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000d40:	4b51      	ldr	r3, [pc, #324]	; (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d42:	2222      	movs	r2, #34	; 0x22
 8000d44:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d46:	4b50      	ldr	r3, [pc, #320]	; (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4c:	4b4e      	ldr	r3, [pc, #312]	; (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d52:	4b4d      	ldr	r3, [pc, #308]	; (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d58:	4b4b      	ldr	r3, [pc, #300]	; (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5e:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000d64:	4b48      	ldr	r3, [pc, #288]	; (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d6a:	4b47      	ldr	r3, [pc, #284]	; (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000d70:	4845      	ldr	r0, [pc, #276]	; (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d72:	f000 fa69 	bl	8001248 <HAL_DMA_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000d7c:	f7ff fdf1 	bl	8000962 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a41      	ldr	r2, [pc, #260]	; (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000d88:	4a3f      	ldr	r2, [pc, #252]	; (8000e88 <HAL_UART_MspInit+0x1fc>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA2_Channel2;
 8000d8e:	4b40      	ldr	r3, [pc, #256]	; (8000e90 <HAL_UART_MspInit+0x204>)
 8000d90:	4a40      	ldr	r2, [pc, #256]	; (8000e94 <HAL_UART_MspInit+0x208>)
 8000d92:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000d94:	4b3e      	ldr	r3, [pc, #248]	; (8000e90 <HAL_UART_MspInit+0x204>)
 8000d96:	2223      	movs	r2, #35	; 0x23
 8000d98:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d9a:	4b3d      	ldr	r3, [pc, #244]	; (8000e90 <HAL_UART_MspInit+0x204>)
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da0:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <HAL_UART_MspInit+0x204>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da6:	4b3a      	ldr	r3, [pc, #232]	; (8000e90 <HAL_UART_MspInit+0x204>)
 8000da8:	2280      	movs	r2, #128	; 0x80
 8000daa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dac:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <HAL_UART_MspInit+0x204>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <HAL_UART_MspInit+0x204>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000db8:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <HAL_UART_MspInit+0x204>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dbe:	4b34      	ldr	r3, [pc, #208]	; (8000e90 <HAL_UART_MspInit+0x204>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000dc4:	4832      	ldr	r0, [pc, #200]	; (8000e90 <HAL_UART_MspInit+0x204>)
 8000dc6:	f000 fa3f 	bl	8001248 <HAL_DMA_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_UART_MspInit+0x148>
    {
      Error_Handler();
 8000dd0:	f7ff fdc7 	bl	8000962 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a2e      	ldr	r2, [pc, #184]	; (8000e90 <HAL_UART_MspInit+0x204>)
 8000dd8:	67da      	str	r2, [r3, #124]	; 0x7c
 8000dda:	4a2d      	ldr	r2, [pc, #180]	; (8000e90 <HAL_UART_MspInit+0x204>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	2046      	movs	r0, #70	; 0x46
 8000de6:	f000 f9f8 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000dea:	2046      	movs	r0, #70	; 0x46
 8000dec:	f000 fa11 	bl	8001212 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000df0:	e040      	b.n	8000e74 <HAL_UART_MspInit+0x1e8>
  else if(uartHandle->Instance==USART3)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a28      	ldr	r2, [pc, #160]	; (8000e98 <HAL_UART_MspInit+0x20c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d13b      	bne.n	8000e74 <HAL_UART_MspInit+0x1e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 f88b 	bl	8003f24 <HAL_RCCEx_PeriphCLKConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8000e14:	f7ff fda5 	bl	8000962 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000e1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e22:	6593      	str	r3, [r2, #88]	; 0x58
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e34:	4a12      	ldr	r2, [pc, #72]	; (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <HAL_UART_MspInit+0x1f4>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e62:	2307      	movs	r3, #7
 8000e64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e68:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480b      	ldr	r0, [pc, #44]	; (8000e9c <HAL_UART_MspInit+0x210>)
 8000e70:	f000 fd18 	bl	80018a4 <HAL_GPIO_Init>
}
 8000e74:	bf00      	nop
 8000e76:	37c0      	adds	r7, #192	; 0xc0
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40008000 	.word	0x40008000
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48001800 	.word	0x48001800
 8000e88:	200002e4 	.word	0x200002e4
 8000e8c:	40020008 	.word	0x40020008
 8000e90:	20000344 	.word	0x20000344
 8000e94:	4002041c 	.word	0x4002041c
 8000e98:	40004800 	.word	0x40004800
 8000e9c:	48000c00 	.word	0x48000c00

08000ea0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea4:	f7ff fdea 	bl	8000a7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <LoopForever+0x6>)
  ldr r1, =_edata
 8000eaa:	490d      	ldr	r1, [pc, #52]	; (8000ee0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <LoopForever+0xe>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	; (8000eec <LoopForever+0x16>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ece:	f009 fe7f 	bl	800abd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ed2:	f7ff fcbb 	bl	800084c <main>

08000ed6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ed6:	e7fe      	b.n	8000ed6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ed8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000ee4:	0800ad24 	.word	0x0800ad24
  ldr r2, =_sbss
 8000ee8:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000eec:	20001fb4 	.word	0x20001fb4

08000ef0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_IRQHandler>

08000ef2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f000 f961 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f80e 	bl	8000f24 <HAL_InitTick>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	e001      	b.n	8000f18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f14:	f7ff fd2a 	bl	800096c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f18:	79fb      	ldrb	r3, [r7, #7]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_InitTick+0x6c>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d023      	beq.n	8000f80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_InitTick+0x70>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <HAL_InitTick+0x6c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f96d 	bl	800122e <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10f      	bne.n	8000f7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d809      	bhi.n	8000f74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f68:	f000 f937 	bl	80011da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <HAL_InitTick+0x74>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	e007      	b.n	8000f84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e004      	b.n	8000f84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	e001      	b.n	8000f84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	200003a4 	.word	0x200003a4

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	200003a4 	.word	0x200003a4

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <__NVIC_EnableIRQ+0x38>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff29 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff3e 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff8e 	bl	8001118 <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff31 	bl	8001088 <__NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffa2 	bl	8001180 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e08d      	b.n	8001376 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	4b47      	ldr	r3, [pc, #284]	; (8001380 <HAL_DMA_Init+0x138>)
 8001262:	429a      	cmp	r2, r3
 8001264:	d80f      	bhi.n	8001286 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b45      	ldr	r3, [pc, #276]	; (8001384 <HAL_DMA_Init+0x13c>)
 800126e:	4413      	add	r3, r2
 8001270:	4a45      	ldr	r2, [pc, #276]	; (8001388 <HAL_DMA_Init+0x140>)
 8001272:	fba2 2303 	umull	r2, r3, r2, r3
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	009a      	lsls	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a42      	ldr	r2, [pc, #264]	; (800138c <HAL_DMA_Init+0x144>)
 8001282:	641a      	str	r2, [r3, #64]	; 0x40
 8001284:	e00e      	b.n	80012a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4b40      	ldr	r3, [pc, #256]	; (8001390 <HAL_DMA_Init+0x148>)
 800128e:	4413      	add	r3, r2
 8001290:	4a3d      	ldr	r2, [pc, #244]	; (8001388 <HAL_DMA_Init+0x140>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	009a      	lsls	r2, r3, #2
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a3c      	ldr	r2, [pc, #240]	; (8001394 <HAL_DMA_Init+0x14c>)
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2202      	movs	r2, #2
 80012a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a1b      	ldr	r3, [r3, #32]
 80012e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fa72 	bl	80017e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001304:	d102      	bne.n	800130c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001320:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d010      	beq.n	800134c <HAL_DMA_Init+0x104>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b04      	cmp	r3, #4
 8001330:	d80c      	bhi.n	800134c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fa92 	bl	800185c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	e008      	b.n	800135e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2200      	movs	r2, #0
 800135c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40020407 	.word	0x40020407
 8001384:	bffdfff8 	.word	0xbffdfff8
 8001388:	cccccccd 	.word	0xcccccccd
 800138c:	40020000 	.word	0x40020000
 8001390:	bffdfbf8 	.word	0xbffdfbf8
 8001394:	40020400 	.word	0x40020400

08001398 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d101      	bne.n	80013b8 <HAL_DMA_Start_IT+0x20>
 80013b4:	2302      	movs	r3, #2
 80013b6:	e066      	b.n	8001486 <HAL_DMA_Start_IT+0xee>
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d155      	bne.n	8001478 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0201 	bic.w	r2, r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	68b9      	ldr	r1, [r7, #8]
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f000 f9b6 	bl	8001762 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d008      	beq.n	8001410 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f042 020e 	orr.w	r2, r2, #14
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e00f      	b.n	8001430 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0204 	bic.w	r2, r2, #4
 800141e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 020a 	orr.w	r2, r2, #10
 800142e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800144c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001464:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	e005      	b.n	8001484 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001480:	2302      	movs	r3, #2
 8001482:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001484:	7dfb      	ldrb	r3, [r7, #23]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800148e:	b480      	push	{r7}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d008      	beq.n	80014b8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2204      	movs	r2, #4
 80014aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e040      	b.n	800153a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 020e 	bic.w	r2, r2, #14
 80014c6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014d6:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ec:	f003 021c 	and.w	r2, r3, #28
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f202 	lsl.w	r2, r1, r2
 80014fa:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001504:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00c      	beq.n	8001528 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800151c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001526:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001538:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d005      	beq.n	800156a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2204      	movs	r2, #4
 8001562:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e047      	b.n	80015fa <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 020e 	bic.w	r2, r2, #14
 8001578:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0201 	bic.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001598:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f003 021c 	and.w	r2, r3, #28
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	2101      	movs	r1, #1
 80015a8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015b6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00c      	beq.n	80015da <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015d8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	4798      	blx	r3
    }
  }
  return status;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f003 031c 	and.w	r3, r3, #28
 8001624:	2204      	movs	r2, #4
 8001626:	409a      	lsls	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d026      	beq.n	800167e <HAL_DMA_IRQHandler+0x7a>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	2b00      	cmp	r3, #0
 8001638:	d021      	beq.n	800167e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0320 	and.w	r3, r3, #32
 8001644:	2b00      	cmp	r3, #0
 8001646:	d107      	bne.n	8001658 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0204 	bic.w	r2, r2, #4
 8001656:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f003 021c 	and.w	r2, r3, #28
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	2104      	movs	r1, #4
 8001666:	fa01 f202 	lsl.w	r2, r1, r2
 800166a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	2b00      	cmp	r3, #0
 8001672:	d071      	beq.n	8001758 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800167c:	e06c      	b.n	8001758 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f003 031c 	and.w	r3, r3, #28
 8001686:	2202      	movs	r2, #2
 8001688:	409a      	lsls	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4013      	ands	r3, r2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d02e      	beq.n	80016f0 <HAL_DMA_IRQHandler+0xec>
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d029      	beq.n	80016f0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0320 	and.w	r3, r3, #32
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10b      	bne.n	80016c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 020a 	bic.w	r2, r2, #10
 80016b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f003 021c 	and.w	r2, r3, #28
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	2102      	movs	r1, #2
 80016d0:	fa01 f202 	lsl.w	r2, r1, r2
 80016d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d038      	beq.n	8001758 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016ee:	e033      	b.n	8001758 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	f003 031c 	and.w	r3, r3, #28
 80016f8:	2208      	movs	r2, #8
 80016fa:	409a      	lsls	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d02a      	beq.n	800175a <HAL_DMA_IRQHandler+0x156>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d025      	beq.n	800175a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 020e 	bic.w	r2, r2, #14
 800171c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f003 021c 	and.w	r2, r3, #28
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	2101      	movs	r1, #1
 800172c:	fa01 f202 	lsl.w	r2, r1, r2
 8001730:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174c:	2b00      	cmp	r3, #0
 800174e:	d004      	beq.n	800175a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001758:	bf00      	nop
 800175a:	bf00      	nop
}
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001762:	b480      	push	{r7}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001778:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177e:	2b00      	cmp	r3, #0
 8001780:	d004      	beq.n	800178c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800178a:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	f003 021c 	and.w	r2, r3, #28
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	2101      	movs	r1, #1
 800179a:	fa01 f202 	lsl.w	r2, r1, r2
 800179e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	d108      	bne.n	80017c2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017c0:	e007      	b.n	80017d2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	60da      	str	r2, [r3, #12]
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
	...

080017e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d80a      	bhi.n	800180a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001800:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6493      	str	r3, [r2, #72]	; 0x48
 8001808:	e007      	b.n	800181a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	089b      	lsrs	r3, r3, #2
 8001810:	009a      	lsls	r2, r3, #2
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001814:	4413      	add	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	3b08      	subs	r3, #8
 8001822:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001830:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f003 031f 	and.w	r3, r3, #31
 8001838:	2201      	movs	r2, #1
 800183a:	409a      	lsls	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	40020407 	.word	0x40020407
 8001850:	4002081c 	.word	0x4002081c
 8001854:	cccccccd 	.word	0xcccccccd
 8001858:	40020880 	.word	0x40020880

0800185c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	461a      	mov	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800187e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3b01      	subs	r3, #1
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2201      	movs	r2, #1
 800188a:	409a      	lsls	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	1000823f 	.word	0x1000823f
 80018a0:	40020940 	.word	0x40020940

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b087      	sub	sp, #28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b2:	e166      	b.n	8001b82 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2101      	movs	r1, #1
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	4013      	ands	r3, r2
 80018c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 8158 	beq.w	8001b7c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d005      	beq.n	80018e4 <HAL_GPIO_Init+0x40>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d130      	bne.n	8001946 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800191a:	2201      	movs	r2, #1
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	f003 0201 	and.w	r2, r3, #1
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b03      	cmp	r3, #3
 8001950:	d017      	beq.n	8001982 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	2203      	movs	r2, #3
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d123      	bne.n	80019d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	220f      	movs	r2, #15
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	08da      	lsrs	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3208      	adds	r2, #8
 80019d0:	6939      	ldr	r1, [r7, #16]
 80019d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 0203 	and.w	r2, r3, #3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80b2 	beq.w	8001b7c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a18:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <HAL_GPIO_Init+0x2fc>)
 8001a1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a1c:	4a60      	ldr	r2, [pc, #384]	; (8001ba0 <HAL_GPIO_Init+0x2fc>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6613      	str	r3, [r2, #96]	; 0x60
 8001a24:	4b5e      	ldr	r3, [pc, #376]	; (8001ba0 <HAL_GPIO_Init+0x2fc>)
 8001a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a30:	4a5c      	ldr	r2, [pc, #368]	; (8001ba4 <HAL_GPIO_Init+0x300>)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	3302      	adds	r3, #2
 8001a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a5a:	d02b      	beq.n	8001ab4 <HAL_GPIO_Init+0x210>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a52      	ldr	r2, [pc, #328]	; (8001ba8 <HAL_GPIO_Init+0x304>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d025      	beq.n	8001ab0 <HAL_GPIO_Init+0x20c>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a51      	ldr	r2, [pc, #324]	; (8001bac <HAL_GPIO_Init+0x308>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d01f      	beq.n	8001aac <HAL_GPIO_Init+0x208>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a50      	ldr	r2, [pc, #320]	; (8001bb0 <HAL_GPIO_Init+0x30c>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d019      	beq.n	8001aa8 <HAL_GPIO_Init+0x204>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a4f      	ldr	r2, [pc, #316]	; (8001bb4 <HAL_GPIO_Init+0x310>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d013      	beq.n	8001aa4 <HAL_GPIO_Init+0x200>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a4e      	ldr	r2, [pc, #312]	; (8001bb8 <HAL_GPIO_Init+0x314>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00d      	beq.n	8001aa0 <HAL_GPIO_Init+0x1fc>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a4d      	ldr	r2, [pc, #308]	; (8001bbc <HAL_GPIO_Init+0x318>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d007      	beq.n	8001a9c <HAL_GPIO_Init+0x1f8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a4c      	ldr	r2, [pc, #304]	; (8001bc0 <HAL_GPIO_Init+0x31c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_GPIO_Init+0x1f4>
 8001a94:	2307      	movs	r3, #7
 8001a96:	e00e      	b.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001a98:	2308      	movs	r3, #8
 8001a9a:	e00c      	b.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001a9c:	2306      	movs	r3, #6
 8001a9e:	e00a      	b.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001aa0:	2305      	movs	r3, #5
 8001aa2:	e008      	b.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	e006      	b.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e004      	b.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e002      	b.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	f002 0203 	and.w	r2, r2, #3
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ac6:	4937      	ldr	r1, [pc, #220]	; (8001ba4 <HAL_GPIO_Init+0x300>)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ad4:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <HAL_GPIO_Init+0x320>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001af8:	4a32      	ldr	r2, [pc, #200]	; (8001bc4 <HAL_GPIO_Init+0x320>)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001afe:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_GPIO_Init+0x320>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b22:	4a28      	ldr	r2, [pc, #160]	; (8001bc4 <HAL_GPIO_Init+0x320>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b28:	4b26      	ldr	r3, [pc, #152]	; (8001bc4 <HAL_GPIO_Init+0x320>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_GPIO_Init+0x320>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b52:	4b1c      	ldr	r3, [pc, #112]	; (8001bc4 <HAL_GPIO_Init+0x320>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b76:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <HAL_GPIO_Init+0x320>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f47f ae91 	bne.w	80018b4 <HAL_GPIO_Init+0x10>
  }
}
 8001b92:	bf00      	nop
 8001b94:	bf00      	nop
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	48000800 	.word	0x48000800
 8001bb0:	48000c00 	.word	0x48000c00
 8001bb4:	48001000 	.word	0x48001000
 8001bb8:	48001400 	.word	0x48001400
 8001bbc:	48001800 	.word	0x48001800
 8001bc0:	48001c00 	.word	0x48001c00
 8001bc4:	40010400 	.word	0x40010400

08001bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c0a:	887a      	ldrh	r2, [r7, #2]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	041a      	lsls	r2, r3, #16
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43d9      	mvns	r1, r3
 8001c16:	887b      	ldrh	r3, [r7, #2]
 8001c18:	400b      	ands	r3, r1
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	619a      	str	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c42:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fd58 	bl	8000700 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40010400 	.word	0x40010400

08001c5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5e:	b08f      	sub	sp, #60	; 0x3c
 8001c60:	af0a      	add	r7, sp, #40	; 0x28
 8001c62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e116      	b.n	8001e9c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d106      	bne.n	8001c8e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f008 fb53 	bl	800a334 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2203      	movs	r2, #3
 8001c92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f005 f810 	bl	8006cd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	687e      	ldr	r6, [r7, #4]
 8001cba:	466d      	mov	r5, sp
 8001cbc:	f106 0410 	add.w	r4, r6, #16
 8001cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ccc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cd0:	1d33      	adds	r3, r6, #4
 8001cd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cd4:	6838      	ldr	r0, [r7, #0]
 8001cd6:	f004 ff23 	bl	8006b20 <USB_CoreInit>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0d7      	b.n	8001e9c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f004 fffe 	bl	8006cf4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e04a      	b.n	8001d94 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	333d      	adds	r3, #61	; 0x3d
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	6879      	ldr	r1, [r7, #4]
 8001d16:	4613      	mov	r3, r2
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	440b      	add	r3, r1
 8001d20:	333c      	adds	r3, #60	; 0x3c
 8001d22:	7bfa      	ldrb	r2, [r7, #15]
 8001d24:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	b298      	uxth	r0, r3
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	3356      	adds	r3, #86	; 0x56
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	4413      	add	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3340      	adds	r3, #64	; 0x40
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3344      	adds	r3, #68	; 0x44
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3348      	adds	r3, #72	; 0x48
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	334c      	adds	r3, #76	; 0x4c
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	3301      	adds	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3af      	bcc.n	8001cfe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e044      	b.n	8001e2e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001da4:	7bfa      	ldrb	r2, [r7, #15]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	440b      	add	r3, r1
 8001df4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	6879      	ldr	r1, [r7, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4413      	add	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	440b      	add	r3, r1
 8001e0a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e12:	7bfa      	ldrb	r2, [r7, #15]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3b5      	bcc.n	8001da4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	687e      	ldr	r6, [r7, #4]
 8001e40:	466d      	mov	r5, sp
 8001e42:	f106 0410 	add.w	r4, r6, #16
 8001e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e52:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e56:	1d33      	adds	r3, r6, #4
 8001e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e5a:	6838      	ldr	r0, [r7, #0]
 8001e5c:	f004 ff96 	bl	8006d8c <USB_DevInit>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e014      	b.n	8001e9c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d102      	bne.n	8001e90 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f001 f86a 	bl	8002f64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f005 ff44 	bl	8007d22 <USB_DevDisconnect>

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_PCD_Start+0x1c>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e01c      	b.n	8001efa <HAL_PCD_Start+0x56>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 fee5 	bl	8006cb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f005 fef8 	bl	8007ce0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f02:	b590      	push	{r4, r7, lr}
 8001f04:	b08d      	sub	sp, #52	; 0x34
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f005 ffb6 	bl	8007e8a <USB_GetMode>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f040 847e 	bne.w	8002822 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f005 ff1a 	bl	8007d64 <USB_ReadInterrupts>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8474 	beq.w	8002820 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f005 ff07 	bl	8007d64 <USB_ReadInterrupts>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d107      	bne.n	8001f70 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f002 0202 	and.w	r2, r2, #2
 8001f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f005 fef5 	bl	8007d64 <USB_ReadInterrupts>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d161      	bne.n	8002048 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0210 	bic.w	r2, r2, #16
 8001f92:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f94:	6a3b      	ldr	r3, [r7, #32]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	f003 020f 	and.w	r2, r3, #15
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	0c5b      	lsrs	r3, r3, #17
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d124      	bne.n	800200a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d035      	beq.n	8002038 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	6a38      	ldr	r0, [r7, #32]
 8001fe0:	f005 fd2c 	bl	8007a3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ff0:	441a      	add	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002002:	441a      	add	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	615a      	str	r2, [r3, #20]
 8002008:	e016      	b.n	8002038 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	0c5b      	lsrs	r3, r3, #17
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	2b06      	cmp	r3, #6
 8002014:	d110      	bne.n	8002038 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800201c:	2208      	movs	r2, #8
 800201e:	4619      	mov	r1, r3
 8002020:	6a38      	ldr	r0, [r7, #32]
 8002022:	f005 fd0b 	bl	8007a3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	695a      	ldr	r2, [r3, #20]
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002032:	441a      	add	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0210 	orr.w	r2, r2, #16
 8002046:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f005 fe89 	bl	8007d64 <USB_ReadInterrupts>
 8002052:	4603      	mov	r3, r0
 8002054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002058:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800205c:	f040 80a7 	bne.w	80021ae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f005 fe8e 	bl	8007d8a <USB_ReadDevAllOutEpInterrupt>
 800206e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002070:	e099      	b.n	80021a6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 808e 	beq.w	800219a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f005 feb2 	bl	8007df2 <USB_ReadDevOutEPInterrupt>
 800208e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a6:	461a      	mov	r2, r3
 80020a8:	2301      	movs	r3, #1
 80020aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80020ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fe7e 	bl	8002db0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00c      	beq.n	80020d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ca:	461a      	mov	r2, r3
 80020cc:	2308      	movs	r3, #8
 80020ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 feba 	bl	8002e4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d008      	beq.n	80020f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ee:	461a      	mov	r2, r3
 80020f0:	2310      	movs	r3, #16
 80020f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d030      	beq.n	8002160 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002106:	2b80      	cmp	r3, #128	; 0x80
 8002108:	d109      	bne.n	800211e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002118:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800211e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	78db      	ldrb	r3, [r3, #3]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2200      	movs	r2, #0
 8002140:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4619      	mov	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f008 fa49 	bl	800a5e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215a:	461a      	mov	r2, r3
 800215c:	2302      	movs	r3, #2
 800215e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002176:	461a      	mov	r2, r3
 8002178:	2320      	movs	r3, #32
 800217a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	015a      	lsls	r2, r3, #5
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	4413      	add	r3, r2
 800218e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002192:	461a      	mov	r2, r3
 8002194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002198:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	3301      	adds	r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a2:	085b      	lsrs	r3, r3, #1
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f47f af62 	bne.w	8002072 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f005 fdd6 	bl	8007d64 <USB_ReadInterrupts>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021c2:	f040 80a4 	bne.w	800230e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f005 fdf7 	bl	8007dbe <USB_ReadDevAllInEpInterrupt>
 80021d0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021d6:	e096      	b.n	8002306 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 808b 	beq.w	80022fa <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f005 fe1d 	bl	8007e2e <USB_ReadDevInEPInterrupt>
 80021f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	2201      	movs	r2, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43db      	mvns	r3, r3
 800221a:	69f9      	ldr	r1, [r7, #28]
 800221c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002220:	4013      	ands	r3, r2
 8002222:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	4413      	add	r3, r2
 800222c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002230:	461a      	mov	r2, r3
 8002232:	2301      	movs	r3, #1
 8002234:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	b2db      	uxtb	r3, r3
 800223a:	4619      	mov	r1, r3
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f008 f93a 	bl	800a4b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	4413      	add	r3, r2
 8002254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002258:	461a      	mov	r2, r3
 800225a:	2308      	movs	r3, #8
 800225c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	4413      	add	r3, r2
 8002270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002274:	461a      	mov	r2, r3
 8002276:	2310      	movs	r3, #16
 8002278:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002290:	461a      	mov	r2, r3
 8002292:	2340      	movs	r3, #64	; 0x40
 8002294:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d023      	beq.n	80022e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80022a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a2:	6a38      	ldr	r0, [r7, #32]
 80022a4:	f004 feb4 	bl	8007010 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80022a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	3338      	adds	r3, #56	; 0x38
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	3304      	adds	r3, #4
 80022ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	78db      	ldrb	r3, [r3, #3]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d108      	bne.n	80022d6 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2200      	movs	r2, #0
 80022c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	4619      	mov	r1, r3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f008 f997 	bl	800a604 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e2:	461a      	mov	r2, r3
 80022e4:	2302      	movs	r3, #2
 80022e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fcd2 	bl	8002c9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	3301      	adds	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002302:	085b      	lsrs	r3, r3, #1
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002308:	2b00      	cmp	r3, #0
 800230a:	f47f af65 	bne.w	80021d8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f005 fd26 	bl	8007d64 <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800231e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002322:	d122      	bne.n	800236a <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002332:	f023 0301 	bic.w	r3, r3, #1
 8002336:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800233e:	2b01      	cmp	r3, #1
 8002340:	d108      	bne.n	8002354 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800234a:	2100      	movs	r1, #0
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f008 fbcb 	bl	800aae8 <HAL_PCDEx_LPM_Callback>
 8002352:	e002      	b.n	800235a <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f008 f91b 	bl	800a590 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f005 fcf8 	bl	8007d64 <USB_ReadInterrupts>
 8002374:	4603      	mov	r3, r0
 8002376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800237a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800237e:	d112      	bne.n	80023a6 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d102      	bne.n	8002396 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f008 f8d7 	bl	800a544 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f005 fcda 	bl	8007d64 <USB_ReadInterrupts>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ba:	d121      	bne.n	8002400 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80023ca:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d111      	bne.n	80023fa <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	f003 020f 	and.w	r2, r3, #15
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80023f0:	2101      	movs	r1, #1
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f008 fb78 	bl	800aae8 <HAL_PCDEx_LPM_Callback>
 80023f8:	e002      	b.n	8002400 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f008 f8a2 	bl	800a544 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f005 fcad 	bl	8007d64 <USB_ReadInterrupts>
 800240a:	4603      	mov	r3, r0
 800240c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002414:	f040 80b5 	bne.w	8002582 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2110      	movs	r1, #16
 8002432:	4618      	mov	r0, r3
 8002434:	f004 fdec 	bl	8007010 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002438:	2300      	movs	r3, #0
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800243c:	e046      	b.n	80024cc <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	4413      	add	r3, r2
 8002446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800244a:	461a      	mov	r2, r3
 800244c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002450:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	4413      	add	r3, r2
 800245a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002462:	0151      	lsls	r1, r2, #5
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	440a      	add	r2, r1
 8002468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800246c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002470:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800247e:	461a      	mov	r2, r3
 8002480:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002484:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	4413      	add	r3, r2
 800248e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002496:	0151      	lsls	r1, r2, #5
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	440a      	add	r2, r1
 800249c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b6:	0151      	lsls	r1, r2, #5
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	440a      	add	r2, r1
 80024bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	3301      	adds	r3, #1
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d3b3      	bcc.n	800243e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80024e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d016      	beq.n	8002520 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002502:	f043 030b 	orr.w	r3, r3, #11
 8002506:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002518:	f043 030b 	orr.w	r3, r3, #11
 800251c:	6453      	str	r3, [r2, #68]	; 0x44
 800251e:	e015      	b.n	800254c <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800252e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002532:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002536:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002546:	f043 030b 	orr.w	r3, r3, #11
 800254a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800255a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800255e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f005 fcbd 	bl	8007eec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695a      	ldr	r2, [r3, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002580:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f005 fbec 	bl	8007d64 <USB_ReadInterrupts>
 800258c:	4603      	mov	r3, r0
 800258e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002596:	d124      	bne.n	80025e2 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f005 fc82 	bl	8007ea6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 fdaf 	bl	800710a <USB_GetDevSpeed>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681c      	ldr	r4, [r3, #0]
 80025b8:	f001 fbbc 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 80025bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	461a      	mov	r2, r3
 80025c6:	4620      	mov	r0, r4
 80025c8:	f004 fad6 	bl	8006b78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f007 ff9a 	bl	800a506 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f005 fbbc 	bl	8007d64 <USB_ReadInterrupts>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d10a      	bne.n	800260c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f007 ff77 	bl	800a4ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f002 0208 	and.w	r2, r2, #8
 800260a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f005 fba7 	bl	8007d64 <USB_ReadInterrupts>
 8002616:	4603      	mov	r3, r0
 8002618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261c:	2b80      	cmp	r3, #128	; 0x80
 800261e:	d122      	bne.n	8002666 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800262c:	2301      	movs	r3, #1
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
 8002630:	e014      	b.n	800265c <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d105      	bne.n	8002656 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	b2db      	uxtb	r3, r3
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 faf3 	bl	8002c3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	3301      	adds	r3, #1
 800265a:	627b      	str	r3, [r7, #36]	; 0x24
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002662:	429a      	cmp	r2, r3
 8002664:	d3e5      	bcc.n	8002632 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f005 fb7a 	bl	8007d64 <USB_ReadInterrupts>
 8002670:	4603      	mov	r3, r0
 8002672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800267a:	d13b      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800267c:	2301      	movs	r3, #1
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
 8002680:	e02b      	b.n	80026da <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	4413      	add	r3, r2
 800268a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	3340      	adds	r3, #64	; 0x40
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d115      	bne.n	80026d4 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80026a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	da12      	bge.n	80026d4 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	333f      	adds	r3, #63	; 0x3f
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 fab4 	bl	8002c3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	3301      	adds	r3, #1
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d3ce      	bcc.n	8002682 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80026f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f005 fb33 	bl	8007d64 <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002704:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002708:	d155      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800270a:	2301      	movs	r3, #1
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
 800270e:	e045      	b.n	800279c <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d12e      	bne.n	8002796 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002738:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800273a:	2b00      	cmp	r3, #0
 800273c:	da2b      	bge.n	8002796 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800274a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800274e:	429a      	cmp	r2, r3
 8002750:	d121      	bne.n	8002796 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	69fa      	ldr	r2, [r7, #28]
 800278a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800278e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002792:	6053      	str	r3, [r2, #4]
            break;
 8002794:	e007      	b.n	80027a6 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	3301      	adds	r3, #1
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d3b4      	bcc.n	8002710 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f005 fad2 	bl	8007d64 <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ca:	d10a      	bne.n	80027e2 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f007 ff2b 	bl	800a628 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	695a      	ldr	r2, [r3, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f005 fabc 	bl	8007d64 <USB_ReadInterrupts>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d115      	bne.n	8002822 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f007 ff1b 	bl	800a644 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	e000      	b.n	8002822 <HAL_PCD_IRQHandler+0x920>
      return;
 8002820:	bf00      	nop
    }
  }
}
 8002822:	3734      	adds	r7, #52	; 0x34
 8002824:	46bd      	mov	sp, r7
 8002826:	bd90      	pop	{r4, r7, pc}

08002828 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800283a:	2b01      	cmp	r3, #1
 800283c:	d101      	bne.n	8002842 <HAL_PCD_SetAddress+0x1a>
 800283e:	2302      	movs	r3, #2
 8002840:	e013      	b.n	800286a <HAL_PCD_SetAddress+0x42>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	78fa      	ldrb	r2, [r7, #3]
 800284e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f005 fa1a 	bl	8007c94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	4608      	mov	r0, r1
 800287c:	4611      	mov	r1, r2
 800287e:	461a      	mov	r2, r3
 8002880:	4603      	mov	r3, r0
 8002882:	70fb      	strb	r3, [r7, #3]
 8002884:	460b      	mov	r3, r1
 8002886:	803b      	strh	r3, [r7, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002894:	2b00      	cmp	r3, #0
 8002896:	da0f      	bge.n	80028b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	f003 020f 	and.w	r2, r3, #15
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	3338      	adds	r3, #56	; 0x38
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	3304      	adds	r3, #4
 80028ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	705a      	strb	r2, [r3, #1]
 80028b6:	e00f      	b.n	80028d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	f003 020f 	and.w	r2, r3, #15
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028e4:	883a      	ldrh	r2, [r7, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	78ba      	ldrb	r2, [r7, #2]
 80028ee:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d004      	beq.n	8002902 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002902:	78bb      	ldrb	r3, [r7, #2]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d102      	bne.n	800290e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_PCD_EP_Open+0xaa>
 8002918:	2302      	movs	r3, #2
 800291a:	e00e      	b.n	800293a <HAL_PCD_EP_Open+0xc8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68f9      	ldr	r1, [r7, #12]
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fc0c 	bl	8007148 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002938:	7afb      	ldrb	r3, [r7, #11]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
 800294a:	460b      	mov	r3, r1
 800294c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800294e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002952:	2b00      	cmp	r3, #0
 8002954:	da0f      	bge.n	8002976 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	f003 020f 	and.w	r2, r3, #15
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	3338      	adds	r3, #56	; 0x38
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	4413      	add	r3, r2
 800296a:	3304      	adds	r3, #4
 800296c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	705a      	strb	r2, [r3, #1]
 8002974:	e00f      	b.n	8002996 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	f003 020f 	and.w	r2, r3, #15
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	b2da      	uxtb	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_PCD_EP_Close+0x6e>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e00e      	b.n	80029ce <HAL_PCD_EP_Close+0x8c>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68f9      	ldr	r1, [r7, #12]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fc4a 	bl	8007258 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b086      	sub	sp, #24
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	460b      	mov	r3, r1
 80029e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e6:	7afb      	ldrb	r3, [r7, #11]
 80029e8:	f003 020f 	and.w	r2, r3, #15
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	4413      	add	r3, r2
 80029fc:	3304      	adds	r3, #4
 80029fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2200      	movs	r2, #0
 8002a16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a18:	7afb      	ldrb	r3, [r7, #11]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6979      	ldr	r1, [r7, #20]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f004 fcf0 	bl	8007410 <USB_EPStartXfer>

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	460b      	mov	r3, r1
 8002a44:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a46:	78fb      	ldrb	r3, [r7, #3]
 8002a48:	f003 020f 	and.w	r2, r3, #15
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8002a5c:	681b      	ldr	r3, [r3, #0]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	460b      	mov	r3, r1
 8002a78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7a:	7afb      	ldrb	r3, [r7, #11]
 8002a7c:	f003 020f 	and.w	r2, r3, #15
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	3338      	adds	r3, #56	; 0x38
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3304      	adds	r3, #4
 8002a90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aaa:	7afb      	ldrb	r3, [r7, #11]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6979      	ldr	r1, [r7, #20]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f004 fca7 	bl	8007410 <USB_EPStartXfer>

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	f003 020f 	and.w	r2, r3, #15
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d901      	bls.n	8002aea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e04e      	b.n	8002b88 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	da0f      	bge.n	8002b12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	f003 020f 	and.w	r2, r3, #15
 8002af8:	4613      	mov	r3, r2
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	3338      	adds	r3, #56	; 0x38
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	3304      	adds	r3, #4
 8002b08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	705a      	strb	r2, [r3, #1]
 8002b10:	e00d      	b.n	8002b2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b12:	78fa      	ldrb	r2, [r7, #3]
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	3304      	adds	r3, #4
 8002b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_PCD_EP_SetStall+0x82>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e01c      	b.n	8002b88 <HAL_PCD_EP_SetStall+0xbc>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68f9      	ldr	r1, [r7, #12]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 ffc5 	bl	8007aec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d108      	bne.n	8002b7e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b76:	4619      	mov	r1, r3
 8002b78:	4610      	mov	r0, r2
 8002b7a:	f005 f9b7 	bl	8007eec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	f003 020f 	and.w	r2, r3, #15
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d901      	bls.n	8002bae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e042      	b.n	8002c34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	da0f      	bge.n	8002bd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	f003 020f 	and.w	r2, r3, #15
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	3338      	adds	r3, #56	; 0x38
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	3304      	adds	r3, #4
 8002bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	705a      	strb	r2, [r3, #1]
 8002bd4:	e00f      	b.n	8002bf6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 020f 	and.w	r2, r3, #15
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	3304      	adds	r3, #4
 8002bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_PCD_EP_ClrStall+0x86>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e00e      	b.n	8002c34 <HAL_PCD_EP_ClrStall+0xa4>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68f9      	ldr	r1, [r7, #12]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f004 ffcf 	bl	8007bc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	da0c      	bge.n	8002c6a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 020f 	and.w	r2, r3, #15
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	3338      	adds	r3, #56	; 0x38
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	3304      	adds	r3, #4
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e00c      	b.n	8002c84 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	f003 020f 	and.w	r2, r3, #15
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	3304      	adds	r3, #4
 8002c82:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68f9      	ldr	r1, [r7, #12]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f004 fdf2 	bl	8007874 <USB_EPStopXfer>
 8002c90:	4603      	mov	r3, r0
 8002c92:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c94:	7afb      	ldrb	r3, [r7, #11]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b088      	sub	sp, #32
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	3338      	adds	r3, #56	; 0x38
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	695a      	ldr	r2, [r3, #20]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d901      	bls.n	8002cd6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e067      	b.n	8002da6 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d902      	bls.n	8002cf2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3303      	adds	r3, #3
 8002cf6:	089b      	lsrs	r3, r3, #2
 8002cf8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cfa:	e026      	b.n	8002d4a <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d902      	bls.n	8002d18 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	3303      	adds	r3, #3
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	68d9      	ldr	r1, [r3, #12]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	6978      	ldr	r0, [r7, #20]
 8002d2e:	f004 fe4b 	bl	80079c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	441a      	add	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	441a      	add	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d809      	bhi.n	8002d74 <PCD_WriteEmptyTxFifo+0xd6>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	695a      	ldr	r2, [r3, #20]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d203      	bcs.n	8002d74 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1c3      	bne.n	8002cfc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d811      	bhi.n	8002da4 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	2201      	movs	r2, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	6939      	ldr	r1, [r7, #16]
 8002d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002da0:	4013      	ands	r3, r2
 8002da2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	333c      	adds	r3, #60	; 0x3c
 8002dc8:	3304      	adds	r3, #4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <PCD_EP_OutXfrComplete_int+0x98>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d124      	bne.n	8002e30 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e02:	6093      	str	r3, [r2, #8]
 8002e04:	e01a      	b.n	8002e3c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	015a      	lsls	r2, r3, #5
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4413      	add	r3, r2
 8002e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2320      	movs	r3, #32
 8002e20:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f007 fb29 	bl	800a480 <HAL_PCD_DataOutStageCallback>
 8002e2e:	e005      	b.n	8002e3c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f007 fb22 	bl	800a480 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	4f54310a 	.word	0x4f54310a

08002e4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	333c      	adds	r3, #60	; 0x3c
 8002e64:	3304      	adds	r3, #4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a0c      	ldr	r2, [pc, #48]	; (8002eb0 <PCD_EP_OutSetupPacket_int+0x64>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d90e      	bls.n	8002ea0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d009      	beq.n	8002ea0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e98:	461a      	mov	r2, r3
 8002e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f007 fadb 	bl	800a45c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	4f54300a 	.word	0x4f54300a

08002eb4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d107      	bne.n	8002ee2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ed2:	883b      	ldrh	r3, [r7, #0]
 8002ed4:	0419      	lsls	r1, r3, #16
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	629a      	str	r2, [r3, #40]	; 0x28
 8002ee0:	e028      	b.n	8002f34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	0c1b      	lsrs	r3, r3, #16
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	4413      	add	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e00d      	b.n	8002f12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	3340      	adds	r3, #64	; 0x40
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4413      	add	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d3ec      	bcc.n	8002ef6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f1c:	883b      	ldrh	r3, [r7, #0]
 8002f1e:	0418      	lsls	r0, r3, #16
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	4302      	orrs	r2, r0
 8002f2c:	3340      	adds	r3, #64	; 0x40
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	887a      	ldrh	r2, [r7, #2]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f96:	f043 0303 	orr.w	r3, r3, #3
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fbc:	d102      	bne.n	8002fc4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fc2:	e00b      	b.n	8002fdc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002fc4:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd2:	d102      	bne.n	8002fda <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd8:	e000      	b.n	8002fdc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002fda:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40007000 	.word	0x40007000

08002fec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d141      	bne.n	800307e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ffa:	4b4b      	ldr	r3, [pc, #300]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003006:	d131      	bne.n	800306c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003008:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800300e:	4a46      	ldr	r2, [pc, #280]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003014:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003018:	4b43      	ldr	r3, [pc, #268]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003020:	4a41      	ldr	r2, [pc, #260]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003026:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003028:	4b40      	ldr	r3, [pc, #256]	; (800312c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2232      	movs	r2, #50	; 0x32
 800302e:	fb02 f303 	mul.w	r3, r2, r3
 8003032:	4a3f      	ldr	r2, [pc, #252]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003034:	fba2 2303 	umull	r2, r3, r2, r3
 8003038:	0c9b      	lsrs	r3, r3, #18
 800303a:	3301      	adds	r3, #1
 800303c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800303e:	e002      	b.n	8003046 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3b01      	subs	r3, #1
 8003044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003046:	4b38      	ldr	r3, [pc, #224]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003052:	d102      	bne.n	800305a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f2      	bne.n	8003040 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800305a:	4b33      	ldr	r3, [pc, #204]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003066:	d158      	bne.n	800311a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e057      	b.n	800311c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800306c:	4b2e      	ldr	r3, [pc, #184]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800306e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003072:	4a2d      	ldr	r2, [pc, #180]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003078:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800307c:	e04d      	b.n	800311a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003084:	d141      	bne.n	800310a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003086:	4b28      	ldr	r3, [pc, #160]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003092:	d131      	bne.n	80030f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003094:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800309a:	4a23      	ldr	r2, [pc, #140]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a4:	4b20      	ldr	r3, [pc, #128]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030ac:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2232      	movs	r2, #50	; 0x32
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	4a1c      	ldr	r2, [pc, #112]	; (8003130 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	0c9b      	lsrs	r3, r3, #18
 80030c6:	3301      	adds	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030ca:	e002      	b.n	80030d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030de:	d102      	bne.n	80030e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f2      	bne.n	80030cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f2:	d112      	bne.n	800311a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e011      	b.n	800311c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003104:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003108:	e007      	b.n	800311a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800310a:	4b07      	ldr	r3, [pc, #28]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003112:	4a05      	ldr	r2, [pc, #20]	; (8003128 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003114:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003118:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40007000 	.word	0x40007000
 800312c:	20000000 	.word	0x20000000
 8003130:	431bde83 	.word	0x431bde83

08003134 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_PWREx_EnableVddUSB+0x1c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a04      	ldr	r2, [pc, #16]	; (8003150 <HAL_PWREx_EnableVddUSB+0x1c>)
 800313e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003142:	6053      	str	r3, [r2, #4]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40007000 	.word	0x40007000

08003154 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <HAL_PWREx_EnableVddIO2+0x1c>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <HAL_PWREx_EnableVddIO2+0x1c>)
 800315e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003162:	6053      	str	r3, [r2, #4]
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40007000 	.word	0x40007000

08003174 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b088      	sub	sp, #32
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d102      	bne.n	8003188 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f000 bc08 	b.w	8003998 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003188:	4b96      	ldr	r3, [pc, #600]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003192:	4b94      	ldr	r3, [pc, #592]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80e4 	beq.w	8003372 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_RCC_OscConfig+0x4c>
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b0c      	cmp	r3, #12
 80031b4:	f040 808b 	bne.w	80032ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	f040 8087 	bne.w	80032ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031c0:	4b88      	ldr	r3, [pc, #544]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_OscConfig+0x64>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e3df      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1a      	ldr	r2, [r3, #32]
 80031dc:	4b81      	ldr	r3, [pc, #516]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_RCC_OscConfig+0x7e>
 80031e8:	4b7e      	ldr	r3, [pc, #504]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031f0:	e005      	b.n	80031fe <HAL_RCC_OscConfig+0x8a>
 80031f2:	4b7c      	ldr	r3, [pc, #496]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80031f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fe:	4293      	cmp	r3, r2
 8003200:	d223      	bcs.n	800324a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fdcc 	bl	8003da4 <RCC_SetFlashLatencyFromMSIRange>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e3c0      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003216:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a72      	ldr	r2, [pc, #456]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 800321c:	f043 0308 	orr.w	r3, r3, #8
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b70      	ldr	r3, [pc, #448]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	496d      	ldr	r1, [pc, #436]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003234:	4b6b      	ldr	r3, [pc, #428]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	021b      	lsls	r3, r3, #8
 8003242:	4968      	ldr	r1, [pc, #416]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
 8003248:	e025      	b.n	8003296 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800324a:	4b66      	ldr	r3, [pc, #408]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a65      	ldr	r2, [pc, #404]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003250:	f043 0308 	orr.w	r3, r3, #8
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b63      	ldr	r3, [pc, #396]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4960      	ldr	r1, [pc, #384]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003264:	4313      	orrs	r3, r2
 8003266:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003268:	4b5e      	ldr	r3, [pc, #376]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	021b      	lsls	r3, r3, #8
 8003276:	495b      	ldr	r1, [pc, #364]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fd8c 	bl	8003da4 <RCC_SetFlashLatencyFromMSIRange>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e380      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003296:	f000 fcc1 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 800329a:	4602      	mov	r2, r0
 800329c:	4b51      	ldr	r3, [pc, #324]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	4950      	ldr	r1, [pc, #320]	; (80033e8 <HAL_RCC_OscConfig+0x274>)
 80032a8:	5ccb      	ldrb	r3, [r1, r3]
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	4a4e      	ldr	r2, [pc, #312]	; (80033ec <HAL_RCC_OscConfig+0x278>)
 80032b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032b6:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <HAL_RCC_OscConfig+0x27c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd fe32 	bl	8000f24 <HAL_InitTick>
 80032c0:	4603      	mov	r3, r0
 80032c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d052      	beq.n	8003370 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	e364      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d032      	beq.n	800333c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032d6:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a42      	ldr	r2, [pc, #264]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032e2:	f7fd fe6f 	bl	8000fc4 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032ea:	f7fd fe6b 	bl	8000fc4 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e34d      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032fc:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003308:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a35      	ldr	r2, [pc, #212]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 800330e:	f043 0308 	orr.w	r3, r3, #8
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b33      	ldr	r3, [pc, #204]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4930      	ldr	r1, [pc, #192]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003326:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	492b      	ldr	r1, [pc, #172]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003336:	4313      	orrs	r3, r2
 8003338:	604b      	str	r3, [r1, #4]
 800333a:	e01a      	b.n	8003372 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800333c:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a28      	ldr	r2, [pc, #160]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003348:	f7fd fe3c 	bl	8000fc4 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003350:	f7fd fe38 	bl	8000fc4 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e31a      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003362:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1f0      	bne.n	8003350 <HAL_RCC_OscConfig+0x1dc>
 800336e:	e000      	b.n	8003372 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003370:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d073      	beq.n	8003466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d005      	beq.n	8003390 <HAL_RCC_OscConfig+0x21c>
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b0c      	cmp	r3, #12
 8003388:	d10e      	bne.n	80033a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d10b      	bne.n	80033a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003390:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d063      	beq.n	8003464 <HAL_RCC_OscConfig+0x2f0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d15f      	bne.n	8003464 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e2f7      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x24c>
 80033b2:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a0b      	ldr	r2, [pc, #44]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e025      	b.n	800340c <HAL_RCC_OscConfig+0x298>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c8:	d114      	bne.n	80033f4 <HAL_RCC_OscConfig+0x280>
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a05      	ldr	r2, [pc, #20]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80033d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a02      	ldr	r2, [pc, #8]	; (80033e4 <HAL_RCC_OscConfig+0x270>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e013      	b.n	800340c <HAL_RCC_OscConfig+0x298>
 80033e4:	40021000 	.word	0x40021000
 80033e8:	0800aca4 	.word	0x0800aca4
 80033ec:	20000000 	.word	0x20000000
 80033f0:	20000004 	.word	0x20000004
 80033f4:	4ba0      	ldr	r3, [pc, #640]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a9f      	ldr	r2, [pc, #636]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80033fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fe:	6013      	str	r3, [r2, #0]
 8003400:	4b9d      	ldr	r3, [pc, #628]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a9c      	ldr	r2, [pc, #624]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800340a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d013      	beq.n	800343c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd fdd6 	bl	8000fc4 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fd fdd2 	bl	8000fc4 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e2b4      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342e:	4b92      	ldr	r3, [pc, #584]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x2a8>
 800343a:	e014      	b.n	8003466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343c:	f7fd fdc2 	bl	8000fc4 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003444:	f7fd fdbe 	bl	8000fc4 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b64      	cmp	r3, #100	; 0x64
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e2a0      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003456:	4b88      	ldr	r3, [pc, #544]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1f0      	bne.n	8003444 <HAL_RCC_OscConfig+0x2d0>
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	2b00      	cmp	r3, #0
 8003470:	d060      	beq.n	8003534 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d005      	beq.n	8003484 <HAL_RCC_OscConfig+0x310>
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d119      	bne.n	80034b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d116      	bne.n	80034b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003484:	4b7c      	ldr	r3, [pc, #496]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_OscConfig+0x328>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e27d      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800349c:	4b76      	ldr	r3, [pc, #472]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	061b      	lsls	r3, r3, #24
 80034aa:	4973      	ldr	r1, [pc, #460]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b0:	e040      	b.n	8003534 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d023      	beq.n	8003502 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ba:	4b6f      	ldr	r3, [pc, #444]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6e      	ldr	r2, [pc, #440]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fd fd7d 	bl	8000fc4 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ce:	f7fd fd79 	bl	8000fc4 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e25b      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e0:	4b65      	ldr	r3, [pc, #404]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ec:	4b62      	ldr	r3, [pc, #392]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	495f      	ldr	r1, [pc, #380]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	604b      	str	r3, [r1, #4]
 8003500:	e018      	b.n	8003534 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003502:	4b5d      	ldr	r3, [pc, #372]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a5c      	ldr	r2, [pc, #368]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fd fd59 	bl	8000fc4 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003516:	f7fd fd55 	bl	8000fc4 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e237      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003528:	4b53      	ldr	r3, [pc, #332]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d03c      	beq.n	80035ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01c      	beq.n	8003582 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003548:	4b4b      	ldr	r3, [pc, #300]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 800354a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354e:	4a4a      	ldr	r2, [pc, #296]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003550:	f043 0301 	orr.w	r3, r3, #1
 8003554:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fd fd34 	bl	8000fc4 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003560:	f7fd fd30 	bl	8000fc4 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e212      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003572:	4b41      	ldr	r3, [pc, #260]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ef      	beq.n	8003560 <HAL_RCC_OscConfig+0x3ec>
 8003580:	e01b      	b.n	80035ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003582:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003588:	4a3b      	ldr	r2, [pc, #236]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 800358a:	f023 0301 	bic.w	r3, r3, #1
 800358e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7fd fd17 	bl	8000fc4 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800359a:	f7fd fd13 	bl	8000fc4 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1f5      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035ac:	4b32      	ldr	r3, [pc, #200]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ef      	bne.n	800359a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80a6 	beq.w	8003714 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c8:	2300      	movs	r3, #0
 80035ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035cc:	4b2a      	ldr	r3, [pc, #168]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10d      	bne.n	80035f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d8:	4b27      	ldr	r3, [pc, #156]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80035de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e2:	6593      	str	r3, [r2, #88]	; 0x58
 80035e4:	4b24      	ldr	r3, [pc, #144]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f0:	2301      	movs	r3, #1
 80035f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f4:	4b21      	ldr	r3, [pc, #132]	; (800367c <HAL_RCC_OscConfig+0x508>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d118      	bne.n	8003632 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003600:	4b1e      	ldr	r3, [pc, #120]	; (800367c <HAL_RCC_OscConfig+0x508>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1d      	ldr	r2, [pc, #116]	; (800367c <HAL_RCC_OscConfig+0x508>)
 8003606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800360c:	f7fd fcda 	bl	8000fc4 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003614:	f7fd fcd6 	bl	8000fc4 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b02      	cmp	r3, #2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1b8      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003626:	4b15      	ldr	r3, [pc, #84]	; (800367c <HAL_RCC_OscConfig+0x508>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d108      	bne.n	800364c <HAL_RCC_OscConfig+0x4d8>
 800363a:	4b0f      	ldr	r3, [pc, #60]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	4a0d      	ldr	r2, [pc, #52]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800364a:	e029      	b.n	80036a0 <HAL_RCC_OscConfig+0x52c>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b05      	cmp	r3, #5
 8003652:	d115      	bne.n	8003680 <HAL_RCC_OscConfig+0x50c>
 8003654:	4b08      	ldr	r3, [pc, #32]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	4a07      	ldr	r2, [pc, #28]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 800365c:	f043 0304 	orr.w	r3, r3, #4
 8003660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	4a03      	ldr	r2, [pc, #12]	; (8003678 <HAL_RCC_OscConfig+0x504>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003674:	e014      	b.n	80036a0 <HAL_RCC_OscConfig+0x52c>
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000
 800367c:	40007000 	.word	0x40007000
 8003680:	4b9d      	ldr	r3, [pc, #628]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003686:	4a9c      	ldr	r2, [pc, #624]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003690:	4b99      	ldr	r3, [pc, #612]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	4a98      	ldr	r2, [pc, #608]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d016      	beq.n	80036d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fd fc8c 	bl	8000fc4 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7fd fc88 	bl	8000fc4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e168      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c6:	4b8c      	ldr	r3, [pc, #560]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ed      	beq.n	80036b0 <HAL_RCC_OscConfig+0x53c>
 80036d4:	e015      	b.n	8003702 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d6:	f7fd fc75 	bl	8000fc4 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fd fc71 	bl	8000fc4 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e151      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f4:	4b80      	ldr	r3, [pc, #512]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ed      	bne.n	80036de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003702:	7ffb      	ldrb	r3, [r7, #31]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003708:	4b7b      	ldr	r3, [pc, #492]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	4a7a      	ldr	r2, [pc, #488]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 800370e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003712:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d03c      	beq.n	800379a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01c      	beq.n	8003762 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003728:	4b73      	ldr	r3, [pc, #460]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 800372a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800372e:	4a72      	ldr	r2, [pc, #456]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fd fc44 	bl	8000fc4 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003740:	f7fd fc40 	bl	8000fc4 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e122      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003752:	4b69      	ldr	r3, [pc, #420]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ef      	beq.n	8003740 <HAL_RCC_OscConfig+0x5cc>
 8003760:	e01b      	b.n	800379a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003762:	4b65      	ldr	r3, [pc, #404]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003764:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003768:	4a63      	ldr	r2, [pc, #396]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fd fc27 	bl	8000fc4 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800377a:	f7fd fc23 	bl	8000fc4 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e105      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800378c:	4b5a      	ldr	r3, [pc, #360]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 800378e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1ef      	bne.n	800377a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80f9 	beq.w	8003996 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	f040 80cf 	bne.w	800394c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037ae:	4b52      	ldr	r3, [pc, #328]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f003 0203 	and.w	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	429a      	cmp	r2, r3
 80037c0:	d12c      	bne.n	800381c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	3b01      	subs	r3, #1
 80037ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d123      	bne.n	800381c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d11b      	bne.n	800381c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d113      	bne.n	800381c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	3b01      	subs	r3, #1
 8003802:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d109      	bne.n	800381c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	3b01      	subs	r3, #1
 8003816:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d071      	beq.n	8003900 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b0c      	cmp	r3, #12
 8003820:	d068      	beq.n	80038f4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003822:	4b35      	ldr	r3, [pc, #212]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d105      	bne.n	800383a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800382e:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0ac      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800383e:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003844:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003848:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800384a:	f7fd fbbb 	bl	8000fc4 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003852:	f7fd fbb7 	bl	8000fc4 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e099      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003864:	4b24      	ldr	r3, [pc, #144]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f0      	bne.n	8003852 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003870:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	4b21      	ldr	r3, [pc, #132]	; (80038fc <HAL_RCC_OscConfig+0x788>)
 8003876:	4013      	ands	r3, r2
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003880:	3a01      	subs	r2, #1
 8003882:	0112      	lsls	r2, r2, #4
 8003884:	4311      	orrs	r1, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800388a:	0212      	lsls	r2, r2, #8
 800388c:	4311      	orrs	r1, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003892:	0852      	lsrs	r2, r2, #1
 8003894:	3a01      	subs	r2, #1
 8003896:	0552      	lsls	r2, r2, #21
 8003898:	4311      	orrs	r1, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800389e:	0852      	lsrs	r2, r2, #1
 80038a0:	3a01      	subs	r2, #1
 80038a2:	0652      	lsls	r2, r2, #25
 80038a4:	4311      	orrs	r1, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038aa:	06d2      	lsls	r2, r2, #27
 80038ac:	430a      	orrs	r2, r1
 80038ae:	4912      	ldr	r1, [pc, #72]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a0f      	ldr	r2, [pc, #60]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 80038ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038c0:	4b0d      	ldr	r3, [pc, #52]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4a0c      	ldr	r2, [pc, #48]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 80038c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038cc:	f7fd fb7a 	bl	8000fc4 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d4:	f7fd fb76 	bl	8000fc4 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e058      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <HAL_RCC_OscConfig+0x784>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038f2:	e050      	b.n	8003996 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e04f      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
 80038f8:	40021000 	.word	0x40021000
 80038fc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003900:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <HAL_RCC_OscConfig+0x82c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d144      	bne.n	8003996 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800390c:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <HAL_RCC_OscConfig+0x82c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a23      	ldr	r2, [pc, #140]	; (80039a0 <HAL_RCC_OscConfig+0x82c>)
 8003912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003918:	4b21      	ldr	r3, [pc, #132]	; (80039a0 <HAL_RCC_OscConfig+0x82c>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a20      	ldr	r2, [pc, #128]	; (80039a0 <HAL_RCC_OscConfig+0x82c>)
 800391e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003924:	f7fd fb4e 	bl	8000fc4 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fd fb4a 	bl	8000fc4 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e02c      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393e:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <HAL_RCC_OscConfig+0x82c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x7b8>
 800394a:	e024      	b.n	8003996 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b0c      	cmp	r3, #12
 8003950:	d01f      	beq.n	8003992 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <HAL_RCC_OscConfig+0x82c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <HAL_RCC_OscConfig+0x82c>)
 8003958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800395c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fd fb31 	bl	8000fc4 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003966:	f7fd fb2d 	bl	8000fc4 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e00f      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <HAL_RCC_OscConfig+0x82c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1f0      	bne.n	8003966 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <HAL_RCC_OscConfig+0x82c>)
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	4905      	ldr	r1, [pc, #20]	; (80039a0 <HAL_RCC_OscConfig+0x82c>)
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_RCC_OscConfig+0x830>)
 800398c:	4013      	ands	r3, r2
 800398e:	60cb      	str	r3, [r1, #12]
 8003990:	e001      	b.n	8003996 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3720      	adds	r7, #32
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000
 80039a4:	feeefffc 	.word	0xfeeefffc

080039a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e11d      	b.n	8003bfc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c0:	4b90      	ldr	r3, [pc, #576]	; (8003c04 <HAL_RCC_ClockConfig+0x25c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d910      	bls.n	80039f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b8d      	ldr	r3, [pc, #564]	; (8003c04 <HAL_RCC_ClockConfig+0x25c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 020f 	bic.w	r2, r3, #15
 80039d6:	498b      	ldr	r1, [pc, #556]	; (8003c04 <HAL_RCC_ClockConfig+0x25c>)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	4313      	orrs	r3, r2
 80039dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039de:	4b89      	ldr	r3, [pc, #548]	; (8003c04 <HAL_RCC_ClockConfig+0x25c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d001      	beq.n	80039f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e105      	b.n	8003bfc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d010      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	4b81      	ldr	r3, [pc, #516]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d908      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a0c:	4b7e      	ldr	r3, [pc, #504]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	497b      	ldr	r1, [pc, #492]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d079      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d11e      	bne.n	8003a70 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a32:	4b75      	ldr	r3, [pc, #468]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0dc      	b.n	8003bfc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003a42:	f000 fa09 	bl	8003e58 <RCC_GetSysClockFreqFromPLLSource>
 8003a46:	4603      	mov	r3, r0
 8003a48:	4a70      	ldr	r2, [pc, #448]	; (8003c0c <HAL_RCC_ClockConfig+0x264>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d946      	bls.n	8003adc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a4e:	4b6e      	ldr	r3, [pc, #440]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d140      	bne.n	8003adc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a5a:	4b6b      	ldr	r3, [pc, #428]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a62:	4a69      	ldr	r2, [pc, #420]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	e035      	b.n	8003adc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d107      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a78:	4b63      	ldr	r3, [pc, #396]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d115      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0b9      	b.n	8003bfc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a90:	4b5d      	ldr	r3, [pc, #372]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0ad      	b.n	8003bfc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0a5      	b.n	8003bfc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003ab0:	f000 f8b4 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	4a55      	ldr	r2, [pc, #340]	; (8003c0c <HAL_RCC_ClockConfig+0x264>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d90f      	bls.n	8003adc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003abc:	4b52      	ldr	r3, [pc, #328]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ac8:	4b4f      	ldr	r3, [pc, #316]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ad0:	4a4d      	ldr	r2, [pc, #308]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ad8:	2380      	movs	r3, #128	; 0x80
 8003ada:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003adc:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f023 0203 	bic.w	r2, r3, #3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4947      	ldr	r1, [pc, #284]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aee:	f7fd fa69 	bl	8000fc4 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af6:	f7fd fa65 	bl	8000fc4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e077      	b.n	8003bfc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0c:	4b3e      	ldr	r3, [pc, #248]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 020c 	and.w	r2, r3, #12
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d1eb      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b80      	cmp	r3, #128	; 0x80
 8003b22:	d105      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b24:	4b38      	ldr	r3, [pc, #224]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4a37      	ldr	r2, [pc, #220]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b2e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d010      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d208      	bcs.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4c:	4b2e      	ldr	r3, [pc, #184]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	492b      	ldr	r1, [pc, #172]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5e:	4b29      	ldr	r3, [pc, #164]	; (8003c04 <HAL_RCC_ClockConfig+0x25c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d210      	bcs.n	8003b8e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6c:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <HAL_RCC_ClockConfig+0x25c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f023 020f 	bic.w	r2, r3, #15
 8003b74:	4923      	ldr	r1, [pc, #140]	; (8003c04 <HAL_RCC_ClockConfig+0x25c>)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7c:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <HAL_RCC_ClockConfig+0x25c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e036      	b.n	8003bfc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	4918      	ldr	r1, [pc, #96]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb8:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4910      	ldr	r1, [pc, #64]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bcc:	f000 f826 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <HAL_RCC_ClockConfig+0x260>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	490c      	ldr	r1, [pc, #48]	; (8003c10 <HAL_RCC_ClockConfig+0x268>)
 8003bde:	5ccb      	ldrb	r3, [r1, r3]
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
 8003be8:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <HAL_RCC_ClockConfig+0x26c>)
 8003bea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_ClockConfig+0x270>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fd f997 	bl	8000f24 <HAL_InitTick>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40022000 	.word	0x40022000
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	04c4b400 	.word	0x04c4b400
 8003c10:	0800aca4 	.word	0x0800aca4
 8003c14:	20000000 	.word	0x20000000
 8003c18:	20000004 	.word	0x20000004

08003c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	; 0x24
 8003c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c34:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x34>
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d121      	bne.n	8003c8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d11e      	bne.n	8003c8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c50:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c5c:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	e005      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c6c:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c78:	4a2b      	ldr	r2, [pc, #172]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10d      	bne.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c8c:	e00a      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d102      	bne.n	8003c9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c94:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	e004      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ca0:	4b23      	ldr	r3, [pc, #140]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ca2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b0c      	cmp	r3, #12
 8003ca8:	d134      	bne.n	8003d14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d003      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xac>
 8003cc0:	e005      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003cc4:	617b      	str	r3, [r7, #20]
      break;
 8003cc6:	e005      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cc8:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cca:	617b      	str	r3, [r7, #20]
      break;
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	617b      	str	r3, [r7, #20]
      break;
 8003cd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	3301      	adds	r3, #1
 8003ce0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	0a1b      	lsrs	r3, r3, #8
 8003ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	fb03 f202 	mul.w	r2, r3, r2
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	0e5b      	lsrs	r3, r3, #25
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	3301      	adds	r3, #1
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d14:	69bb      	ldr	r3, [r7, #24]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	0800acbc 	.word	0x0800acbc
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	007a1200 	.word	0x007a1200

08003d34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d38:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000000 	.word	0x20000000

08003d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d50:	f7ff fff0 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4904      	ldr	r1, [pc, #16]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	0800acb4 	.word	0x0800acb4

08003d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d7c:	f7ff ffda 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0adb      	lsrs	r3, r3, #11
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4904      	ldr	r1, [pc, #16]	; (8003da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	0800acb4 	.word	0x0800acb4

08003da4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003db0:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dbc:	f7ff f8f6 	bl	8002fac <HAL_PWREx_GetVoltageRange>
 8003dc0:	6178      	str	r0, [r7, #20]
 8003dc2:	e014      	b.n	8003dee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dc4:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	4a21      	ldr	r2, [pc, #132]	; (8003e50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dce:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd0:	4b1f      	ldr	r3, [pc, #124]	; (8003e50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ddc:	f7ff f8e6 	bl	8002fac <HAL_PWREx_GetVoltageRange>
 8003de0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003de2:	4b1b      	ldr	r3, [pc, #108]	; (8003e50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de6:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df4:	d10b      	bne.n	8003e0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b80      	cmp	r3, #128	; 0x80
 8003dfa:	d913      	bls.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2ba0      	cmp	r3, #160	; 0xa0
 8003e00:	d902      	bls.n	8003e08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e02:	2302      	movs	r3, #2
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	e00d      	b.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e08:	2301      	movs	r3, #1
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	e00a      	b.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b7f      	cmp	r3, #127	; 0x7f
 8003e12:	d902      	bls.n	8003e1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003e14:	2302      	movs	r3, #2
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	e004      	b.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b70      	cmp	r3, #112	; 0x70
 8003e1e:	d101      	bne.n	8003e24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e20:	2301      	movs	r3, #1
 8003e22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f023 020f 	bic.w	r2, r3, #15
 8003e2c:	4909      	ldr	r1, [pc, #36]	; (8003e54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e34:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d001      	beq.n	8003e46 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40022000 	.word	0x40022000

08003e58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e5e:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d00b      	beq.n	8003e86 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d825      	bhi.n	8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d008      	beq.n	8003e8c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d11f      	bne.n	8003ec0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003e80:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e82:	613b      	str	r3, [r7, #16]
    break;
 8003e84:	e01f      	b.n	8003ec6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003e86:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003e88:	613b      	str	r3, [r7, #16]
    break;
 8003e8a:	e01c      	b.n	8003ec6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e8c:	4b21      	ldr	r3, [pc, #132]	; (8003f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d107      	bne.n	8003ea8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e98:	4b1e      	ldr	r3, [pc, #120]	; (8003f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e005      	b.n	8003eb4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003eb4:	4a1a      	ldr	r2, [pc, #104]	; (8003f20 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ebc:	613b      	str	r3, [r7, #16]
    break;
 8003ebe:	e002      	b.n	8003ec6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	613b      	str	r3, [r7, #16]
    break;
 8003ec4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	0a1b      	lsrs	r3, r3, #8
 8003eda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	fb03 f202 	mul.w	r2, r3, r2
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eea:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eec:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	0e5b      	lsrs	r3, r3, #25
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003f06:	683b      	ldr	r3, [r7, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40021000 	.word	0x40021000
 8003f18:	00f42400 	.word	0x00f42400
 8003f1c:	007a1200 	.word	0x007a1200
 8003f20:	0800acbc 	.word	0x0800acbc

08003f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f30:	2300      	movs	r3, #0
 8003f32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d040      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f44:	2b80      	cmp	r3, #128	; 0x80
 8003f46:	d02a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f48:	2b80      	cmp	r3, #128	; 0x80
 8003f4a:	d825      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f4c:	2b60      	cmp	r3, #96	; 0x60
 8003f4e:	d026      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f50:	2b60      	cmp	r3, #96	; 0x60
 8003f52:	d821      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f54:	2b40      	cmp	r3, #64	; 0x40
 8003f56:	d006      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003f58:	2b40      	cmp	r3, #64	; 0x40
 8003f5a:	d81d      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d009      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d010      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003f64:	e018      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f66:	4b89      	ldr	r3, [pc, #548]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	4a88      	ldr	r2, [pc, #544]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f70:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f72:	e015      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3304      	adds	r3, #4
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fb02 	bl	8004584 <RCCEx_PLLSAI1_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f84:	e00c      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3320      	adds	r3, #32
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fbed 	bl	800476c <RCCEx_PLLSAI2_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f96:	e003      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	74fb      	strb	r3, [r7, #19]
      break;
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10b      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fa6:	4b79      	ldr	r3, [pc, #484]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fac:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fb4:	4975      	ldr	r1, [pc, #468]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003fbc:	e001      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbe:	7cfb      	ldrb	r3, [r7, #19]
 8003fc0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d047      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd6:	d030      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fdc:	d82a      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe2:	d02a      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe8:	d824      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fee:	d008      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff4:	d81e      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffe:	d010      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004000:	e018      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004002:	4b62      	ldr	r3, [pc, #392]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	4a61      	ldr	r2, [pc, #388]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800400e:	e015      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3304      	adds	r3, #4
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fab4 	bl	8004584 <RCCEx_PLLSAI1_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004020:	e00c      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3320      	adds	r3, #32
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f000 fb9f 	bl	800476c <RCCEx_PLLSAI2_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004032:	e003      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	74fb      	strb	r3, [r7, #19]
      break;
 8004038:	e000      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800403a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10b      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004042:	4b52      	ldr	r3, [pc, #328]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004044:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	494e      	ldr	r1, [pc, #312]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004052:	4313      	orrs	r3, r2
 8004054:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004058:	e001      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	f000 809f 	beq.w	80041aa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406c:	2300      	movs	r3, #0
 800406e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004070:	4b46      	ldr	r3, [pc, #280]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00d      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004086:	4b41      	ldr	r3, [pc, #260]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	4a40      	ldr	r2, [pc, #256]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800408c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004090:	6593      	str	r3, [r2, #88]	; 0x58
 8004092:	4b3e      	ldr	r3, [pc, #248]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409e:	2301      	movs	r3, #1
 80040a0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040a2:	4b3b      	ldr	r3, [pc, #236]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a3a      	ldr	r2, [pc, #232]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80040a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040ae:	f7fc ff89 	bl	8000fc4 <HAL_GetTick>
 80040b2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040b4:	e009      	b.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b6:	f7fc ff85 	bl	8000fc4 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d902      	bls.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	74fb      	strb	r3, [r7, #19]
        break;
 80040c8:	e005      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040ca:	4b31      	ldr	r3, [pc, #196]	; (8004190 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0ef      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80040d6:	7cfb      	ldrb	r3, [r7, #19]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d15b      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040dc:	4b2b      	ldr	r3, [pc, #172]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040e6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01f      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d019      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004104:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004106:	4b21      	ldr	r3, [pc, #132]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	4a1f      	ldr	r2, [pc, #124]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800410e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004116:	4b1d      	ldr	r3, [pc, #116]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	4a1b      	ldr	r2, [pc, #108]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004126:	4a19      	ldr	r2, [pc, #100]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d016      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fc ff44 	bl	8000fc4 <HAL_GetTick>
 800413c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800413e:	e00b      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fc ff40 	bl	8000fc4 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	; 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d902      	bls.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	74fb      	strb	r3, [r7, #19]
            break;
 8004156:	e006      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0ec      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004166:	7cfb      	ldrb	r3, [r7, #19]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10c      	bne.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800416c:	4b07      	ldr	r3, [pc, #28]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004172:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	4903      	ldr	r1, [pc, #12]	; (800418c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004184:	e008      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	74bb      	strb	r3, [r7, #18]
 800418a:	e005      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800418c:	40021000 	.word	0x40021000
 8004190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004194:	7cfb      	ldrb	r3, [r7, #19]
 8004196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004198:	7c7b      	ldrb	r3, [r7, #17]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d105      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800419e:	4ba0      	ldr	r3, [pc, #640]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	4a9f      	ldr	r2, [pc, #636]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041b6:	4b9a      	ldr	r3, [pc, #616]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f023 0203 	bic.w	r2, r3, #3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	4996      	ldr	r1, [pc, #600]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041d8:	4b91      	ldr	r3, [pc, #580]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041de:	f023 020c 	bic.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	498e      	ldr	r1, [pc, #568]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041fa:	4b89      	ldr	r3, [pc, #548]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004200:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004208:	4985      	ldr	r1, [pc, #532]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800420a:	4313      	orrs	r3, r2
 800420c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800421c:	4b80      	ldr	r3, [pc, #512]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422a:	497d      	ldr	r1, [pc, #500]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800423e:	4b78      	ldr	r3, [pc, #480]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424c:	4974      	ldr	r1, [pc, #464]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004260:	4b6f      	ldr	r3, [pc, #444]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426e:	496c      	ldr	r1, [pc, #432]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004282:	4b67      	ldr	r3, [pc, #412]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004290:	4963      	ldr	r1, [pc, #396]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042a4:	4b5e      	ldr	r3, [pc, #376]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b2:	495b      	ldr	r1, [pc, #364]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042c6:	4b56      	ldr	r3, [pc, #344]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	4952      	ldr	r1, [pc, #328]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042e8:	4b4d      	ldr	r3, [pc, #308]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	494a      	ldr	r1, [pc, #296]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800430a:	4b45      	ldr	r3, [pc, #276]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	4941      	ldr	r1, [pc, #260]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800432c:	4b3c      	ldr	r3, [pc, #240]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800432e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004332:	f023 0203 	bic.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433a:	4939      	ldr	r1, [pc, #228]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d028      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800434e:	4b34      	ldr	r3, [pc, #208]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435c:	4930      	ldr	r1, [pc, #192]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800436c:	d106      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800436e:	4b2c      	ldr	r3, [pc, #176]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	4a2b      	ldr	r2, [pc, #172]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004374:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004378:	60d3      	str	r3, [r2, #12]
 800437a:	e011      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3304      	adds	r3, #4
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f000 f8f9 	bl	8004584 <RCCEx_PLLSAI1_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d04d      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b4:	d108      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80043b6:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043bc:	4a18      	ldr	r2, [pc, #96]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80043c6:	e012      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80043c8:	4b15      	ldr	r3, [pc, #84]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ce:	4a14      	ldr	r2, [pc, #80]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e6:	490e      	ldr	r1, [pc, #56]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043f6:	d106      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f8:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a08      	ldr	r2, [pc, #32]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004402:	60d3      	str	r3, [r2, #12]
 8004404:	e020      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800440a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800440e:	d109      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4a02      	ldr	r2, [pc, #8]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441a:	60d3      	str	r3, [r2, #12]
 800441c:	e014      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800442c:	d10c      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	2101      	movs	r1, #1
 8004434:	4618      	mov	r0, r3
 8004436:	f000 f8a5 	bl	8004584 <RCCEx_PLLSAI1_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800443e:	7cfb      	ldrb	r3, [r7, #19]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004444:	7cfb      	ldrb	r3, [r7, #19]
 8004446:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d028      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004454:	4b4a      	ldr	r3, [pc, #296]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004462:	4947      	ldr	r1, [pc, #284]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800446e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004472:	d106      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004474:	4b42      	ldr	r3, [pc, #264]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a41      	ldr	r2, [pc, #260]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800447a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800447e:	60d3      	str	r3, [r2, #12]
 8004480:	e011      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004486:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800448a:	d10c      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f876 	bl	8004584 <RCCEx_PLLSAI1_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80044a2:	7cfb      	ldrb	r3, [r7, #19]
 80044a4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01e      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044b2:	4b33      	ldr	r3, [pc, #204]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c2:	492f      	ldr	r1, [pc, #188]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044d4:	d10c      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	3304      	adds	r3, #4
 80044da:	2102      	movs	r1, #2
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 f851 	bl	8004584 <RCCEx_PLLSAI1_Config>
 80044e2:	4603      	mov	r3, r0
 80044e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044fc:	4b20      	ldr	r3, [pc, #128]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004502:	f023 0204 	bic.w	r2, r3, #4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450c:	491c      	ldr	r1, [pc, #112]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00b      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004520:	4b17      	ldr	r3, [pc, #92]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004526:	f023 0218 	bic.w	r2, r3, #24
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	4913      	ldr	r1, [pc, #76]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d017      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004544:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800454a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004554:	490a      	ldr	r1, [pc, #40]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004566:	d105      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4a04      	ldr	r2, [pc, #16]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004572:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004574:	7cbb      	ldrb	r3, [r7, #18]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	40021000 	.word	0x40021000

08004584 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004592:	4b72      	ldr	r3, [pc, #456]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00e      	beq.n	80045bc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800459e:	4b6f      	ldr	r3, [pc, #444]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0203 	and.w	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d103      	bne.n	80045b6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
       ||
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d142      	bne.n	800463c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	73fb      	strb	r3, [r7, #15]
 80045ba:	e03f      	b.n	800463c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d018      	beq.n	80045f6 <RCCEx_PLLSAI1_Config+0x72>
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d825      	bhi.n	8004614 <RCCEx_PLLSAI1_Config+0x90>
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d002      	beq.n	80045d2 <RCCEx_PLLSAI1_Config+0x4e>
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d009      	beq.n	80045e4 <RCCEx_PLLSAI1_Config+0x60>
 80045d0:	e020      	b.n	8004614 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045d2:	4b62      	ldr	r3, [pc, #392]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d11d      	bne.n	800461a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e2:	e01a      	b.n	800461a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045e4:	4b5d      	ldr	r3, [pc, #372]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d116      	bne.n	800461e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f4:	e013      	b.n	800461e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045f6:	4b59      	ldr	r3, [pc, #356]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10f      	bne.n	8004622 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004602:	4b56      	ldr	r3, [pc, #344]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d109      	bne.n	8004622 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004612:	e006      	b.n	8004622 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      break;
 8004618:	e004      	b.n	8004624 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800461a:	bf00      	nop
 800461c:	e002      	b.n	8004624 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800461e:	bf00      	nop
 8004620:	e000      	b.n	8004624 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004622:	bf00      	nop
    }

    if(status == HAL_OK)
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d108      	bne.n	800463c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800462a:	4b4c      	ldr	r3, [pc, #304]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f023 0203 	bic.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4949      	ldr	r1, [pc, #292]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004638:	4313      	orrs	r3, r2
 800463a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800463c:	7bfb      	ldrb	r3, [r7, #15]
 800463e:	2b00      	cmp	r3, #0
 8004640:	f040 8086 	bne.w	8004750 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004644:	4b45      	ldr	r3, [pc, #276]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a44      	ldr	r2, [pc, #272]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 800464a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800464e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004650:	f7fc fcb8 	bl	8000fc4 <HAL_GetTick>
 8004654:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004656:	e009      	b.n	800466c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004658:	f7fc fcb4 	bl	8000fc4 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d902      	bls.n	800466c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	73fb      	strb	r3, [r7, #15]
        break;
 800466a:	e005      	b.n	8004678 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800466c:	4b3b      	ldr	r3, [pc, #236]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1ef      	bne.n	8004658 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d168      	bne.n	8004750 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d113      	bne.n	80046ac <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004684:	4b35      	ldr	r3, [pc, #212]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	4b35      	ldr	r3, [pc, #212]	; (8004760 <RCCEx_PLLSAI1_Config+0x1dc>)
 800468a:	4013      	ands	r3, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6892      	ldr	r2, [r2, #8]
 8004690:	0211      	lsls	r1, r2, #8
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68d2      	ldr	r2, [r2, #12]
 8004696:	06d2      	lsls	r2, r2, #27
 8004698:	4311      	orrs	r1, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6852      	ldr	r2, [r2, #4]
 800469e:	3a01      	subs	r2, #1
 80046a0:	0112      	lsls	r2, r2, #4
 80046a2:	430a      	orrs	r2, r1
 80046a4:	492d      	ldr	r1, [pc, #180]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	610b      	str	r3, [r1, #16]
 80046aa:	e02d      	b.n	8004708 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d115      	bne.n	80046de <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046b2:	4b2a      	ldr	r3, [pc, #168]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	4b2b      	ldr	r3, [pc, #172]	; (8004764 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6892      	ldr	r2, [r2, #8]
 80046be:	0211      	lsls	r1, r2, #8
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6912      	ldr	r2, [r2, #16]
 80046c4:	0852      	lsrs	r2, r2, #1
 80046c6:	3a01      	subs	r2, #1
 80046c8:	0552      	lsls	r2, r2, #21
 80046ca:	4311      	orrs	r1, r2
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6852      	ldr	r2, [r2, #4]
 80046d0:	3a01      	subs	r2, #1
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	430a      	orrs	r2, r1
 80046d6:	4921      	ldr	r1, [pc, #132]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	610b      	str	r3, [r1, #16]
 80046dc:	e014      	b.n	8004708 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046de:	4b1f      	ldr	r3, [pc, #124]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	4b21      	ldr	r3, [pc, #132]	; (8004768 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6892      	ldr	r2, [r2, #8]
 80046ea:	0211      	lsls	r1, r2, #8
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6952      	ldr	r2, [r2, #20]
 80046f0:	0852      	lsrs	r2, r2, #1
 80046f2:	3a01      	subs	r2, #1
 80046f4:	0652      	lsls	r2, r2, #25
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6852      	ldr	r2, [r2, #4]
 80046fc:	3a01      	subs	r2, #1
 80046fe:	0112      	lsls	r2, r2, #4
 8004700:	430a      	orrs	r2, r1
 8004702:	4916      	ldr	r1, [pc, #88]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004704:	4313      	orrs	r3, r2
 8004706:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a13      	ldr	r2, [pc, #76]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 800470e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004712:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004714:	f7fc fc56 	bl	8000fc4 <HAL_GetTick>
 8004718:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800471a:	e009      	b.n	8004730 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800471c:	f7fc fc52 	bl	8000fc4 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d902      	bls.n	8004730 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	73fb      	strb	r3, [r7, #15]
          break;
 800472e:	e005      	b.n	800473c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0ef      	beq.n	800471c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800473c:	7bfb      	ldrb	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004744:	691a      	ldr	r2, [r3, #16]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	4904      	ldr	r1, [pc, #16]	; (800475c <RCCEx_PLLSAI1_Config+0x1d8>)
 800474c:	4313      	orrs	r3, r2
 800474e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004750:	7bfb      	ldrb	r3, [r7, #15]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000
 8004760:	07ff800f 	.word	0x07ff800f
 8004764:	ff9f800f 	.word	0xff9f800f
 8004768:	f9ff800f 	.word	0xf9ff800f

0800476c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800477a:	4b72      	ldr	r3, [pc, #456]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00e      	beq.n	80047a4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004786:	4b6f      	ldr	r3, [pc, #444]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0203 	and.w	r2, r3, #3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d103      	bne.n	800479e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
       ||
 800479a:	2b00      	cmp	r3, #0
 800479c:	d142      	bne.n	8004824 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	73fb      	strb	r3, [r7, #15]
 80047a2:	e03f      	b.n	8004824 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d018      	beq.n	80047de <RCCEx_PLLSAI2_Config+0x72>
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d825      	bhi.n	80047fc <RCCEx_PLLSAI2_Config+0x90>
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d002      	beq.n	80047ba <RCCEx_PLLSAI2_Config+0x4e>
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d009      	beq.n	80047cc <RCCEx_PLLSAI2_Config+0x60>
 80047b8:	e020      	b.n	80047fc <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047ba:	4b62      	ldr	r3, [pc, #392]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d11d      	bne.n	8004802 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ca:	e01a      	b.n	8004802 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047cc:	4b5d      	ldr	r3, [pc, #372]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d116      	bne.n	8004806 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047dc:	e013      	b.n	8004806 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047de:	4b59      	ldr	r3, [pc, #356]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10f      	bne.n	800480a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ea:	4b56      	ldr	r3, [pc, #344]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047fa:	e006      	b.n	800480a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004800:	e004      	b.n	800480c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004802:	bf00      	nop
 8004804:	e002      	b.n	800480c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004806:	bf00      	nop
 8004808:	e000      	b.n	800480c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800480a:	bf00      	nop
    }

    if(status == HAL_OK)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d108      	bne.n	8004824 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004812:	4b4c      	ldr	r3, [pc, #304]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f023 0203 	bic.w	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4949      	ldr	r1, [pc, #292]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004820:	4313      	orrs	r3, r2
 8004822:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004824:	7bfb      	ldrb	r3, [r7, #15]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f040 8086 	bne.w	8004938 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800482c:	4b45      	ldr	r3, [pc, #276]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a44      	ldr	r2, [pc, #272]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004838:	f7fc fbc4 	bl	8000fc4 <HAL_GetTick>
 800483c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800483e:	e009      	b.n	8004854 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004840:	f7fc fbc0 	bl	8000fc4 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d902      	bls.n	8004854 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	73fb      	strb	r3, [r7, #15]
        break;
 8004852:	e005      	b.n	8004860 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004854:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1ef      	bne.n	8004840 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d168      	bne.n	8004938 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d113      	bne.n	8004894 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800486c:	4b35      	ldr	r3, [pc, #212]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 800486e:	695a      	ldr	r2, [r3, #20]
 8004870:	4b35      	ldr	r3, [pc, #212]	; (8004948 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004872:	4013      	ands	r3, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6892      	ldr	r2, [r2, #8]
 8004878:	0211      	lsls	r1, r2, #8
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68d2      	ldr	r2, [r2, #12]
 800487e:	06d2      	lsls	r2, r2, #27
 8004880:	4311      	orrs	r1, r2
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6852      	ldr	r2, [r2, #4]
 8004886:	3a01      	subs	r2, #1
 8004888:	0112      	lsls	r2, r2, #4
 800488a:	430a      	orrs	r2, r1
 800488c:	492d      	ldr	r1, [pc, #180]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 800488e:	4313      	orrs	r3, r2
 8004890:	614b      	str	r3, [r1, #20]
 8004892:	e02d      	b.n	80048f0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d115      	bne.n	80048c6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800489a:	4b2a      	ldr	r3, [pc, #168]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	4b2b      	ldr	r3, [pc, #172]	; (800494c <RCCEx_PLLSAI2_Config+0x1e0>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6892      	ldr	r2, [r2, #8]
 80048a6:	0211      	lsls	r1, r2, #8
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6912      	ldr	r2, [r2, #16]
 80048ac:	0852      	lsrs	r2, r2, #1
 80048ae:	3a01      	subs	r2, #1
 80048b0:	0552      	lsls	r2, r2, #21
 80048b2:	4311      	orrs	r1, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6852      	ldr	r2, [r2, #4]
 80048b8:	3a01      	subs	r2, #1
 80048ba:	0112      	lsls	r2, r2, #4
 80048bc:	430a      	orrs	r2, r1
 80048be:	4921      	ldr	r1, [pc, #132]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	614b      	str	r3, [r1, #20]
 80048c4:	e014      	b.n	80048f0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048c6:	4b1f      	ldr	r3, [pc, #124]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048c8:	695a      	ldr	r2, [r3, #20]
 80048ca:	4b21      	ldr	r3, [pc, #132]	; (8004950 <RCCEx_PLLSAI2_Config+0x1e4>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6892      	ldr	r2, [r2, #8]
 80048d2:	0211      	lsls	r1, r2, #8
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6952      	ldr	r2, [r2, #20]
 80048d8:	0852      	lsrs	r2, r2, #1
 80048da:	3a01      	subs	r2, #1
 80048dc:	0652      	lsls	r2, r2, #25
 80048de:	4311      	orrs	r1, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6852      	ldr	r2, [r2, #4]
 80048e4:	3a01      	subs	r2, #1
 80048e6:	0112      	lsls	r2, r2, #4
 80048e8:	430a      	orrs	r2, r1
 80048ea:	4916      	ldr	r1, [pc, #88]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a13      	ldr	r2, [pc, #76]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fc:	f7fc fb62 	bl	8000fc4 <HAL_GetTick>
 8004900:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004902:	e009      	b.n	8004918 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004904:	f7fc fb5e 	bl	8000fc4 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d902      	bls.n	8004918 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	73fb      	strb	r3, [r7, #15]
          break;
 8004916:	e005      	b.n	8004924 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0ef      	beq.n	8004904 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d106      	bne.n	8004938 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	4904      	ldr	r1, [pc, #16]	; (8004944 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004934:	4313      	orrs	r3, r2
 8004936:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004938:	7bfb      	ldrb	r3, [r7, #15]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40021000 	.word	0x40021000
 8004948:	07ff800f 	.word	0x07ff800f
 800494c:	ff9f800f 	.word	0xff9f800f
 8004950:	f9ff800f 	.word	0xf9ff800f

08004954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e049      	b.n	80049fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fc f8c8 	bl	8000b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3304      	adds	r3, #4
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f000 f9d0 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d001      	beq.n	8004a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e04f      	b.n	8004abc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a23      	ldr	r2, [pc, #140]	; (8004ac8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01d      	beq.n	8004a7a <HAL_TIM_Base_Start_IT+0x76>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a46:	d018      	beq.n	8004a7a <HAL_TIM_Base_Start_IT+0x76>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1f      	ldr	r2, [pc, #124]	; (8004acc <HAL_TIM_Base_Start_IT+0xc8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <HAL_TIM_Base_Start_IT+0x76>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a1e      	ldr	r2, [pc, #120]	; (8004ad0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00e      	beq.n	8004a7a <HAL_TIM_Base_Start_IT+0x76>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d009      	beq.n	8004a7a <HAL_TIM_Base_Start_IT+0x76>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a1b      	ldr	r2, [pc, #108]	; (8004ad8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <HAL_TIM_Base_Start_IT+0x76>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a19      	ldr	r2, [pc, #100]	; (8004adc <HAL_TIM_Base_Start_IT+0xd8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d115      	bne.n	8004aa6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b06      	cmp	r3, #6
 8004a8a:	d015      	beq.n	8004ab8 <HAL_TIM_Base_Start_IT+0xb4>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a92:	d011      	beq.n	8004ab8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f042 0201 	orr.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa4:	e008      	b.n	8004ab8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0201 	orr.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	e000      	b.n	8004aba <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	40012c00 	.word	0x40012c00
 8004acc:	40000400 	.word	0x40000400
 8004ad0:	40000800 	.word	0x40000800
 8004ad4:	40000c00 	.word	0x40000c00
 8004ad8:	40013400 	.word	0x40013400
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	00010007 	.word	0x00010007

08004ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0202 	mvn.w	r2, #2
 8004b18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f8e4 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f8d6 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8e7 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d020      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01b      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0204 	mvn.w	r2, #4
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f8be 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f8b0 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f8c1 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d020      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0208 	mvn.w	r2, #8
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f898 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f88a 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f89b 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d020      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0310 	and.w	r3, r3, #16
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01b      	beq.n	8004c2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0210 	mvn.w	r2, #16
 8004bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2208      	movs	r2, #8
 8004c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f872 	bl	8004cfc <HAL_TIM_IC_CaptureCallback>
 8004c18:	e005      	b.n	8004c26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f864 	bl	8004ce8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f875 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00c      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0201 	mvn.w	r2, #1
 8004c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fb fd84 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d007      	beq.n	8004c74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f98e 	bl	8004f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00c      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d007      	beq.n	8004c98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f986 	bl	8004fa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f834 	bl	8004d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00c      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0220 	mvn.w	r2, #32
 8004cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f94e 	bl	8004f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ce0:	bf00      	nop
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a40      	ldr	r2, [pc, #256]	; (8004e4c <TIM_Base_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d56:	d00f      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a3d      	ldr	r2, [pc, #244]	; (8004e50 <TIM_Base_SetConfig+0x118>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a3c      	ldr	r2, [pc, #240]	; (8004e54 <TIM_Base_SetConfig+0x11c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d007      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3b      	ldr	r2, [pc, #236]	; (8004e58 <TIM_Base_SetConfig+0x120>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a3a      	ldr	r2, [pc, #232]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d108      	bne.n	8004d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a2f      	ldr	r2, [pc, #188]	; (8004e4c <TIM_Base_SetConfig+0x114>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d01f      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d01b      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a2c      	ldr	r2, [pc, #176]	; (8004e50 <TIM_Base_SetConfig+0x118>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d017      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2b      	ldr	r2, [pc, #172]	; (8004e54 <TIM_Base_SetConfig+0x11c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a2a      	ldr	r2, [pc, #168]	; (8004e58 <TIM_Base_SetConfig+0x120>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00f      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a29      	ldr	r2, [pc, #164]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00b      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a28      	ldr	r2, [pc, #160]	; (8004e60 <TIM_Base_SetConfig+0x128>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d007      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a27      	ldr	r2, [pc, #156]	; (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a26      	ldr	r2, [pc, #152]	; (8004e68 <TIM_Base_SetConfig+0x130>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d108      	bne.n	8004de4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a10      	ldr	r2, [pc, #64]	; (8004e4c <TIM_Base_SetConfig+0x114>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00f      	beq.n	8004e30 <TIM_Base_SetConfig+0xf8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a12      	ldr	r2, [pc, #72]	; (8004e5c <TIM_Base_SetConfig+0x124>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00b      	beq.n	8004e30 <TIM_Base_SetConfig+0xf8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a11      	ldr	r2, [pc, #68]	; (8004e60 <TIM_Base_SetConfig+0x128>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_Base_SetConfig+0xf8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a10      	ldr	r2, [pc, #64]	; (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0xf8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a0f      	ldr	r2, [pc, #60]	; (8004e68 <TIM_Base_SetConfig+0x130>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d103      	bne.n	8004e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	615a      	str	r2, [r3, #20]
}
 8004e3e:	bf00      	nop
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	40000400 	.word	0x40000400
 8004e54:	40000800 	.word	0x40000800
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	40013400 	.word	0x40013400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800

08004e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d101      	bne.n	8004e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e80:	2302      	movs	r3, #2
 8004e82:	e068      	b.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a2e      	ldr	r2, [pc, #184]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a2d      	ldr	r2, [pc, #180]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d108      	bne.n	8004eca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ebe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01d      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef6:	d018      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1a      	ldr	r2, [pc, #104]	; (8004f70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00e      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d009      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d004      	beq.n	8004f2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a14      	ldr	r2, [pc, #80]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d10c      	bne.n	8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40012c00 	.word	0x40012c00
 8004f68:	40013400 	.word	0x40013400
 8004f6c:	40000400 	.word	0x40000400
 8004f70:	40000800 	.word	0x40000800
 8004f74:	40000c00 	.word	0x40000c00
 8004f78:	40014000 	.word	0x40014000

08004f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e042      	b.n	8005050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7fb fe55 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2224      	movs	r2, #36	; 0x24
 8004fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 ffd8 	bl	8005fb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fcd9 	bl	80059c0 <UART_SetConfig>
 800500e:	4603      	mov	r3, r0
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e01b      	b.n	8005050 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f001 f857 	bl	80060fc <UART_CheckIdleState>
 800504e:	4603      	mov	r3, r0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506e:	2b20      	cmp	r3, #32
 8005070:	d17c      	bne.n	800516c <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_UART_Transmit+0x26>
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e075      	b.n	800516e <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2221      	movs	r2, #33	; 0x21
 800508e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005092:	f7fb ff97 	bl	8000fc4 <HAL_GetTick>
 8005096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	88fa      	ldrh	r2, [r7, #6]
 800509c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	88fa      	ldrh	r2, [r7, #6]
 80050a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050b0:	d108      	bne.n	80050c4 <HAL_UART_Transmit+0x6c>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d104      	bne.n	80050c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	e003      	b.n	80050cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050cc:	e031      	b.n	8005132 <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2200      	movs	r2, #0
 80050d6:	2180      	movs	r1, #128	; 0x80
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f001 f8b9 	bl	8006250 <UART_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e03e      	b.n	800516e <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10b      	bne.n	800510e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	881a      	ldrh	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005102:	b292      	uxth	r2, r2
 8005104:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	3302      	adds	r3, #2
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	e008      	b.n	8005120 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	781a      	ldrb	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	b292      	uxth	r2, r2
 8005118:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	3301      	adds	r3, #1
 800511e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005126:	b29b      	uxth	r3, r3
 8005128:	3b01      	subs	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1c7      	bne.n	80050ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	2140      	movs	r1, #64	; 0x40
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f001 f881 	bl	8006250 <UART_WaitOnFlagUntilTimeout>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e006      	b.n	800516e <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	e000      	b.n	800516e <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 800516c:	2302      	movs	r3, #2
  }
}
 800516e:	4618      	mov	r0, r3
 8005170:	3720      	adds	r7, #32
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	; 0x28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	4613      	mov	r3, r2
 8005184:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518c:	2b20      	cmp	r3, #32
 800518e:	d167      	bne.n	8005260 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_UART_Transmit_DMA+0x24>
 8005196:	88fb      	ldrh	r3, [r7, #6]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e060      	b.n	8005262 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	88fa      	ldrh	r2, [r7, #6]
 80051aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	88fa      	ldrh	r2, [r7, #6]
 80051b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2221      	movs	r2, #33	; 0x21
 80051c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d028      	beq.n	8005220 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051d2:	4a26      	ldr	r2, [pc, #152]	; (800526c <HAL_UART_Transmit_DMA+0xf4>)
 80051d4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051da:	4a25      	ldr	r2, [pc, #148]	; (8005270 <HAL_UART_Transmit_DMA+0xf8>)
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e2:	4a24      	ldr	r2, [pc, #144]	; (8005274 <HAL_UART_Transmit_DMA+0xfc>)
 80051e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ea:	2200      	movs	r2, #0
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f6:	4619      	mov	r1, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3328      	adds	r3, #40	; 0x28
 80051fe:	461a      	mov	r2, r3
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	f7fc f8c9 	bl	8001398 <HAL_DMA_Start_IT>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d009      	beq.n	8005220 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2210      	movs	r2, #16
 8005210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2220      	movs	r2, #32
 8005218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e020      	b.n	8005262 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2240      	movs	r2, #64	; 0x40
 8005226:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3308      	adds	r3, #8
 800522e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	e853 3f00 	ldrex	r3, [r3]
 8005236:	613b      	str	r3, [r7, #16]
   return(result);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3308      	adds	r3, #8
 8005246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005248:	623a      	str	r2, [r7, #32]
 800524a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524c:	69f9      	ldr	r1, [r7, #28]
 800524e:	6a3a      	ldr	r2, [r7, #32]
 8005250:	e841 2300 	strex	r3, r2, [r1]
 8005254:	61bb      	str	r3, [r7, #24]
   return(result);
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1e5      	bne.n	8005228 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	e000      	b.n	8005262 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005260:	2302      	movs	r3, #2
  }
}
 8005262:	4618      	mov	r0, r3
 8005264:	3728      	adds	r7, #40	; 0x28
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	080065bb 	.word	0x080065bb
 8005270:	08006655 	.word	0x08006655
 8005274:	080067db 	.word	0x080067db

08005278 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08a      	sub	sp, #40	; 0x28
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800528c:	2b20      	cmp	r3, #32
 800528e:	d137      	bne.n	8005300 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <HAL_UART_Receive_DMA+0x24>
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e030      	b.n	8005302 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a18      	ldr	r2, [pc, #96]	; (800530c <HAL_UART_Receive_DMA+0x94>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d01f      	beq.n	80052f0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d018      	beq.n	80052f0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	613b      	str	r3, [r7, #16]
   return(result);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	623b      	str	r3, [r7, #32]
 80052de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	69f9      	ldr	r1, [r7, #28]
 80052e2:	6a3a      	ldr	r2, [r7, #32]
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e6      	bne.n	80052be <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	461a      	mov	r2, r3
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f001 f812 	bl	8006320 <UART_Start_Receive_DMA>
 80052fc:	4603      	mov	r3, r0
 80052fe:	e000      	b.n	8005302 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005300:	2302      	movs	r3, #2
  }
}
 8005302:	4618      	mov	r0, r3
 8005304:	3728      	adds	r7, #40	; 0x28
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40008000 	.word	0x40008000

08005310 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b0ba      	sub	sp, #232	; 0xe8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005336:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800533a:	f640 030f 	movw	r3, #2063	; 0x80f
 800533e:	4013      	ands	r3, r2
 8005340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d11b      	bne.n	8005384 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800534c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005350:	f003 0320 	and.w	r3, r3, #32
 8005354:	2b00      	cmp	r3, #0
 8005356:	d015      	beq.n	8005384 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800535c:	f003 0320 	and.w	r3, r3, #32
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d009      	beq.n	8005384 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 82e3 	beq.w	8005940 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	4798      	blx	r3
      }
      return;
 8005382:	e2dd      	b.n	8005940 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 8123 	beq.w	80055d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800538e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005392:	4b8d      	ldr	r3, [pc, #564]	; (80055c8 <HAL_UART_IRQHandler+0x2b8>)
 8005394:	4013      	ands	r3, r2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800539a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800539e:	4b8b      	ldr	r3, [pc, #556]	; (80055cc <HAL_UART_IRQHandler+0x2bc>)
 80053a0:	4013      	ands	r3, r2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 8116 	beq.w	80055d4 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d011      	beq.n	80053d8 <HAL_UART_IRQHandler+0xc8>
 80053b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00b      	beq.n	80053d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2201      	movs	r2, #1
 80053c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	f043 0201 	orr.w	r2, r3, #1
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d011      	beq.n	8005408 <HAL_UART_IRQHandler+0xf8>
 80053e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2202      	movs	r2, #2
 80053f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fe:	f043 0204 	orr.w	r2, r3, #4
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d011      	beq.n	8005438 <HAL_UART_IRQHandler+0x128>
 8005414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2204      	movs	r2, #4
 8005426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542e:	f043 0202 	orr.w	r2, r3, #2
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d017      	beq.n	8005474 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005448:	f003 0320 	and.w	r3, r3, #32
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005450:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005454:	4b5c      	ldr	r3, [pc, #368]	; (80055c8 <HAL_UART_IRQHandler+0x2b8>)
 8005456:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2208      	movs	r2, #8
 8005462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	f043 0208 	orr.w	r2, r3, #8
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800547c:	2b00      	cmp	r3, #0
 800547e:	d012      	beq.n	80054a6 <HAL_UART_IRQHandler+0x196>
 8005480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00c      	beq.n	80054a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549c:	f043 0220 	orr.w	r2, r3, #32
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 8249 	beq.w	8005944 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d013      	beq.n	80054e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c2:	f003 0320 	and.w	r3, r3, #32
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d105      	bne.n	80054d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d007      	beq.n	80054e6 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d005      	beq.n	800550a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005502:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005506:	2b00      	cmp	r3, #0
 8005508:	d054      	beq.n	80055b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 ffef 	bl	80064ee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551a:	2b40      	cmp	r3, #64	; 0x40
 800551c:	d146      	bne.n	80055ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3308      	adds	r3, #8
 8005524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800553c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3308      	adds	r3, #8
 8005546:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800554a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800554e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005556:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1d9      	bne.n	800551e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005570:	2b00      	cmp	r3, #0
 8005572:	d017      	beq.n	80055a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800557a:	4a15      	ldr	r2, [pc, #84]	; (80055d0 <HAL_UART_IRQHandler+0x2c0>)
 800557c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005584:	4618      	mov	r0, r3
 8005586:	f7fb ffde 	bl	8001546 <HAL_DMA_Abort_IT>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d019      	beq.n	80055c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800559e:	4610      	mov	r0, r2
 80055a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a2:	e00f      	b.n	80055c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f9f5 	bl	8005994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055aa:	e00b      	b.n	80055c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f9f1 	bl	8005994 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b2:	e007      	b.n	80055c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f9ed 	bl	8005994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80055c2:	e1bf      	b.n	8005944 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c4:	bf00      	nop
    return;
 80055c6:	e1bd      	b.n	8005944 <HAL_UART_IRQHandler+0x634>
 80055c8:	10000001 	.word	0x10000001
 80055cc:	04000120 	.word	0x04000120
 80055d0:	0800685b 	.word	0x0800685b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	f040 8153 	bne.w	8005884 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 814c 	beq.w	8005884 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055f0:	f003 0310 	and.w	r3, r3, #16
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 8145 	beq.w	8005884 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2210      	movs	r2, #16
 8005600:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	f040 80bb 	bne.w	8005788 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005620:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 818f 	beq.w	8005948 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005630:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005634:	429a      	cmp	r2, r3
 8005636:	f080 8187 	bcs.w	8005948 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005640:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b00      	cmp	r3, #0
 8005654:	f040 8087 	bne.w	8005766 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800566c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	461a      	mov	r2, r3
 800567e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005686:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800568e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800569a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1da      	bne.n	8005658 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3308      	adds	r3, #8
 80056c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e1      	bne.n	80056a2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3308      	adds	r3, #8
 80056e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3308      	adds	r3, #8
 80056fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005702:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005704:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e3      	bne.n	80056de <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005734:	f023 0310 	bic.w	r3, r3, #16
 8005738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005746:	65bb      	str	r3, [r7, #88]	; 0x58
 8005748:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800574c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e4      	bne.n	8005724 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005760:	4618      	mov	r0, r3
 8005762:	f7fb fe94 	bl	800148e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2202      	movs	r2, #2
 800576a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005778:	b29b      	uxth	r3, r3
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	b29b      	uxth	r3, r3
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f911 	bl	80059a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005786:	e0df      	b.n	8005948 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005794:	b29b      	uxth	r3, r3
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80d1 	beq.w	800594c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80057aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 80cc 	beq.w	800594c <HAL_UART_IRQHandler+0x63c>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	461a      	mov	r2, r3
 80057d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057d6:	647b      	str	r3, [r7, #68]	; 0x44
 80057d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e4      	bne.n	80057b4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3308      	adds	r3, #8
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	623b      	str	r3, [r7, #32]
   return(result);
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3308      	adds	r3, #8
 800580e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005812:	633a      	str	r2, [r7, #48]	; 0x30
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e1      	bne.n	80057ea <HAL_UART_IRQHandler+0x4da>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	e853 3f00 	ldrex	r3, [r3]
 8005846:	60fb      	str	r3, [r7, #12]
   return(result);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0310 	bic.w	r3, r3, #16
 800584e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005860:	69b9      	ldr	r1, [r7, #24]
 8005862:	69fa      	ldr	r2, [r7, #28]
 8005864:	e841 2300 	strex	r3, r2, [r1]
 8005868:	617b      	str	r3, [r7, #20]
   return(result);
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e4      	bne.n	800583a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005876:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 f893 	bl	80059a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005882:	e063      	b.n	800594c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00e      	beq.n	80058ae <HAL_UART_IRQHandler+0x59e>
 8005890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d008      	beq.n	80058ae <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f001 f818 	bl	80068dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058ac:	e051      	b.n	8005952 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d014      	beq.n	80058e4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80058ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d105      	bne.n	80058d2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80058c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <HAL_UART_IRQHandler+0x5d4>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d03a      	beq.n	8005950 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	4798      	blx	r3
    }
    return;
 80058e2:	e035      	b.n	8005950 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d009      	beq.n	8005904 <HAL_UART_IRQHandler+0x5f4>
 80058f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 ffc2 	bl	8006886 <UART_EndTransmit_IT>
    return;
 8005902:	e026      	b.n	8005952 <HAL_UART_IRQHandler+0x642>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <HAL_UART_IRQHandler+0x614>
 8005910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005914:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d003      	beq.n	8005924 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fff1 	bl	8006904 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005922:	e016      	b.n	8005952 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d010      	beq.n	8005952 <HAL_UART_IRQHandler+0x642>
 8005930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005934:	2b00      	cmp	r3, #0
 8005936:	da0c      	bge.n	8005952 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 ffd9 	bl	80068f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800593e:	e008      	b.n	8005952 <HAL_UART_IRQHandler+0x642>
      return;
 8005940:	bf00      	nop
 8005942:	e006      	b.n	8005952 <HAL_UART_IRQHandler+0x642>
    return;
 8005944:	bf00      	nop
 8005946:	e004      	b.n	8005952 <HAL_UART_IRQHandler+0x642>
      return;
 8005948:	bf00      	nop
 800594a:	e002      	b.n	8005952 <HAL_UART_IRQHandler+0x642>
      return;
 800594c:	bf00      	nop
 800594e:	e000      	b.n	8005952 <HAL_UART_IRQHandler+0x642>
    return;
 8005950:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005952:	37e8      	adds	r7, #232	; 0xe8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059c4:	b08c      	sub	sp, #48	; 0x30
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	431a      	orrs	r2, r3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	431a      	orrs	r2, r3
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4baa      	ldr	r3, [pc, #680]	; (8005c98 <UART_SetConfig+0x2d8>)
 80059f0:	4013      	ands	r3, r2
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059f8:	430b      	orrs	r3, r1
 80059fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a9f      	ldr	r2, [pc, #636]	; (8005c9c <UART_SetConfig+0x2dc>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005a36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	f023 010f 	bic.w	r1, r3, #15
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a90      	ldr	r2, [pc, #576]	; (8005ca0 <UART_SetConfig+0x2e0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d125      	bne.n	8005ab0 <UART_SetConfig+0xf0>
 8005a64:	4b8f      	ldr	r3, [pc, #572]	; (8005ca4 <UART_SetConfig+0x2e4>)
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d81a      	bhi.n	8005aa8 <UART_SetConfig+0xe8>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <UART_SetConfig+0xb8>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005a89 	.word	0x08005a89
 8005a7c:	08005a99 	.word	0x08005a99
 8005a80:	08005a91 	.word	0x08005a91
 8005a84:	08005aa1 	.word	0x08005aa1
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8e:	e116      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005a90:	2302      	movs	r3, #2
 8005a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a96:	e112      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	e10e      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa6:	e10a      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aae:	e106      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a7c      	ldr	r2, [pc, #496]	; (8005ca8 <UART_SetConfig+0x2e8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d138      	bne.n	8005b2c <UART_SetConfig+0x16c>
 8005aba:	4b7a      	ldr	r3, [pc, #488]	; (8005ca4 <UART_SetConfig+0x2e4>)
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac0:	f003 030c 	and.w	r3, r3, #12
 8005ac4:	2b0c      	cmp	r3, #12
 8005ac6:	d82d      	bhi.n	8005b24 <UART_SetConfig+0x164>
 8005ac8:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <UART_SetConfig+0x110>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005b05 	.word	0x08005b05
 8005ad4:	08005b25 	.word	0x08005b25
 8005ad8:	08005b25 	.word	0x08005b25
 8005adc:	08005b25 	.word	0x08005b25
 8005ae0:	08005b15 	.word	0x08005b15
 8005ae4:	08005b25 	.word	0x08005b25
 8005ae8:	08005b25 	.word	0x08005b25
 8005aec:	08005b25 	.word	0x08005b25
 8005af0:	08005b0d 	.word	0x08005b0d
 8005af4:	08005b25 	.word	0x08005b25
 8005af8:	08005b25 	.word	0x08005b25
 8005afc:	08005b25 	.word	0x08005b25
 8005b00:	08005b1d 	.word	0x08005b1d
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0a:	e0d8      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b12:	e0d4      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005b14:	2304      	movs	r3, #4
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1a:	e0d0      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b22:	e0cc      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005b24:	2310      	movs	r3, #16
 8005b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b2a:	e0c8      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a5e      	ldr	r2, [pc, #376]	; (8005cac <UART_SetConfig+0x2ec>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d125      	bne.n	8005b82 <UART_SetConfig+0x1c2>
 8005b36:	4b5b      	ldr	r3, [pc, #364]	; (8005ca4 <UART_SetConfig+0x2e4>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b40:	2b30      	cmp	r3, #48	; 0x30
 8005b42:	d016      	beq.n	8005b72 <UART_SetConfig+0x1b2>
 8005b44:	2b30      	cmp	r3, #48	; 0x30
 8005b46:	d818      	bhi.n	8005b7a <UART_SetConfig+0x1ba>
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d00a      	beq.n	8005b62 <UART_SetConfig+0x1a2>
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d814      	bhi.n	8005b7a <UART_SetConfig+0x1ba>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <UART_SetConfig+0x19a>
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d008      	beq.n	8005b6a <UART_SetConfig+0x1aa>
 8005b58:	e00f      	b.n	8005b7a <UART_SetConfig+0x1ba>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b60:	e0ad      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005b62:	2302      	movs	r3, #2
 8005b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b68:	e0a9      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005b6a:	2304      	movs	r3, #4
 8005b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b70:	e0a5      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005b72:	2308      	movs	r3, #8
 8005b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b78:	e0a1      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005b7a:	2310      	movs	r3, #16
 8005b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b80:	e09d      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a4a      	ldr	r2, [pc, #296]	; (8005cb0 <UART_SetConfig+0x2f0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d125      	bne.n	8005bd8 <UART_SetConfig+0x218>
 8005b8c:	4b45      	ldr	r3, [pc, #276]	; (8005ca4 <UART_SetConfig+0x2e4>)
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b96:	2bc0      	cmp	r3, #192	; 0xc0
 8005b98:	d016      	beq.n	8005bc8 <UART_SetConfig+0x208>
 8005b9a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b9c:	d818      	bhi.n	8005bd0 <UART_SetConfig+0x210>
 8005b9e:	2b80      	cmp	r3, #128	; 0x80
 8005ba0:	d00a      	beq.n	8005bb8 <UART_SetConfig+0x1f8>
 8005ba2:	2b80      	cmp	r3, #128	; 0x80
 8005ba4:	d814      	bhi.n	8005bd0 <UART_SetConfig+0x210>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <UART_SetConfig+0x1f0>
 8005baa:	2b40      	cmp	r3, #64	; 0x40
 8005bac:	d008      	beq.n	8005bc0 <UART_SetConfig+0x200>
 8005bae:	e00f      	b.n	8005bd0 <UART_SetConfig+0x210>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bb6:	e082      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bbe:	e07e      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bc6:	e07a      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005bc8:	2308      	movs	r3, #8
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bce:	e076      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bd6:	e072      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a35      	ldr	r2, [pc, #212]	; (8005cb4 <UART_SetConfig+0x2f4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d12a      	bne.n	8005c38 <UART_SetConfig+0x278>
 8005be2:	4b30      	ldr	r3, [pc, #192]	; (8005ca4 <UART_SetConfig+0x2e4>)
 8005be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bf0:	d01a      	beq.n	8005c28 <UART_SetConfig+0x268>
 8005bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bf6:	d81b      	bhi.n	8005c30 <UART_SetConfig+0x270>
 8005bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bfc:	d00c      	beq.n	8005c18 <UART_SetConfig+0x258>
 8005bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c02:	d815      	bhi.n	8005c30 <UART_SetConfig+0x270>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <UART_SetConfig+0x250>
 8005c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c0c:	d008      	beq.n	8005c20 <UART_SetConfig+0x260>
 8005c0e:	e00f      	b.n	8005c30 <UART_SetConfig+0x270>
 8005c10:	2300      	movs	r3, #0
 8005c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c16:	e052      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c1e:	e04e      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005c20:	2304      	movs	r3, #4
 8005c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c26:	e04a      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2e:	e046      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005c30:	2310      	movs	r3, #16
 8005c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c36:	e042      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <UART_SetConfig+0x2dc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d13a      	bne.n	8005cb8 <UART_SetConfig+0x2f8>
 8005c42:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <UART_SetConfig+0x2e4>)
 8005c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c50:	d01a      	beq.n	8005c88 <UART_SetConfig+0x2c8>
 8005c52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c56:	d81b      	bhi.n	8005c90 <UART_SetConfig+0x2d0>
 8005c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5c:	d00c      	beq.n	8005c78 <UART_SetConfig+0x2b8>
 8005c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c62:	d815      	bhi.n	8005c90 <UART_SetConfig+0x2d0>
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <UART_SetConfig+0x2b0>
 8005c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c6c:	d008      	beq.n	8005c80 <UART_SetConfig+0x2c0>
 8005c6e:	e00f      	b.n	8005c90 <UART_SetConfig+0x2d0>
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c76:	e022      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c7e:	e01e      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005c80:	2304      	movs	r3, #4
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c86:	e01a      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005c88:	2308      	movs	r3, #8
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8e:	e016      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005c90:	2310      	movs	r3, #16
 8005c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c96:	e012      	b.n	8005cbe <UART_SetConfig+0x2fe>
 8005c98:	cfff69f3 	.word	0xcfff69f3
 8005c9c:	40008000 	.word	0x40008000
 8005ca0:	40013800 	.word	0x40013800
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	40004400 	.word	0x40004400
 8005cac:	40004800 	.word	0x40004800
 8005cb0:	40004c00 	.word	0x40004c00
 8005cb4:	40005000 	.word	0x40005000
 8005cb8:	2310      	movs	r3, #16
 8005cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4aae      	ldr	r2, [pc, #696]	; (8005f7c <UART_SetConfig+0x5bc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	f040 8097 	bne.w	8005df8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d823      	bhi.n	8005d1a <UART_SetConfig+0x35a>
 8005cd2:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <UART_SetConfig+0x318>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005d1b 	.word	0x08005d1b
 8005ce0:	08005d05 	.word	0x08005d05
 8005ce4:	08005d1b 	.word	0x08005d1b
 8005ce8:	08005d0b 	.word	0x08005d0b
 8005cec:	08005d1b 	.word	0x08005d1b
 8005cf0:	08005d1b 	.word	0x08005d1b
 8005cf4:	08005d1b 	.word	0x08005d1b
 8005cf8:	08005d13 	.word	0x08005d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cfc:	f7fe f826 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8005d00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d02:	e010      	b.n	8005d26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d04:	4b9e      	ldr	r3, [pc, #632]	; (8005f80 <UART_SetConfig+0x5c0>)
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d08:	e00d      	b.n	8005d26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d0a:	f7fd ff87 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8005d0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d10:	e009      	b.n	8005d26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d18:	e005      	b.n	8005d26 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8130 	beq.w	8005f8e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	4a94      	ldr	r2, [pc, #592]	; (8005f84 <UART_SetConfig+0x5c4>)
 8005d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	4613      	mov	r3, r2
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	4413      	add	r3, r2
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d305      	bcc.n	8005d5e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d58:	69ba      	ldr	r2, [r7, #24]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d903      	bls.n	8005d66 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d64:	e113      	b.n	8005f8e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	2200      	movs	r2, #0
 8005d6a:	60bb      	str	r3, [r7, #8]
 8005d6c:	60fa      	str	r2, [r7, #12]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	4a84      	ldr	r2, [pc, #528]	; (8005f84 <UART_SetConfig+0x5c4>)
 8005d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d88:	f7fa fa40 	bl	800020c <__aeabi_uldivmod>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	460b      	mov	r3, r1
 8005d90:	4610      	mov	r0, r2
 8005d92:	4619      	mov	r1, r3
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	020b      	lsls	r3, r1, #8
 8005d9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005da2:	0202      	lsls	r2, r0, #8
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	6849      	ldr	r1, [r1, #4]
 8005da8:	0849      	lsrs	r1, r1, #1
 8005daa:	2000      	movs	r0, #0
 8005dac:	460c      	mov	r4, r1
 8005dae:	4605      	mov	r5, r0
 8005db0:	eb12 0804 	adds.w	r8, r2, r4
 8005db4:	eb43 0905 	adc.w	r9, r3, r5
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	469a      	mov	sl, r3
 8005dc0:	4693      	mov	fp, r2
 8005dc2:	4652      	mov	r2, sl
 8005dc4:	465b      	mov	r3, fp
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	4649      	mov	r1, r9
 8005dca:	f7fa fa1f 	bl	800020c <__aeabi_uldivmod>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ddc:	d308      	bcc.n	8005df0 <UART_SetConfig+0x430>
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005de4:	d204      	bcs.n	8005df0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6a3a      	ldr	r2, [r7, #32]
 8005dec:	60da      	str	r2, [r3, #12]
 8005dee:	e0ce      	b.n	8005f8e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005df6:	e0ca      	b.n	8005f8e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e00:	d166      	bne.n	8005ed0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005e02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e06:	2b08      	cmp	r3, #8
 8005e08:	d827      	bhi.n	8005e5a <UART_SetConfig+0x49a>
 8005e0a:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <UART_SetConfig+0x450>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e35 	.word	0x08005e35
 8005e14:	08005e3d 	.word	0x08005e3d
 8005e18:	08005e45 	.word	0x08005e45
 8005e1c:	08005e5b 	.word	0x08005e5b
 8005e20:	08005e4b 	.word	0x08005e4b
 8005e24:	08005e5b 	.word	0x08005e5b
 8005e28:	08005e5b 	.word	0x08005e5b
 8005e2c:	08005e5b 	.word	0x08005e5b
 8005e30:	08005e53 	.word	0x08005e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e34:	f7fd ff8a 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8005e38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e3a:	e014      	b.n	8005e66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e3c:	f7fd ff9c 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 8005e40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e42:	e010      	b.n	8005e66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e44:	4b4e      	ldr	r3, [pc, #312]	; (8005f80 <UART_SetConfig+0x5c0>)
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e48:	e00d      	b.n	8005e66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e4a:	f7fd fee7 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8005e4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e50:	e009      	b.n	8005e66 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e58:	e005      	b.n	8005e66 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 8090 	beq.w	8005f8e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	4a44      	ldr	r2, [pc, #272]	; (8005f84 <UART_SetConfig+0x5c4>)
 8005e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e80:	005a      	lsls	r2, r3, #1
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	441a      	add	r2, r3
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e92:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	2b0f      	cmp	r3, #15
 8005e98:	d916      	bls.n	8005ec8 <UART_SetConfig+0x508>
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea0:	d212      	bcs.n	8005ec8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f023 030f 	bic.w	r3, r3, #15
 8005eaa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	085b      	lsrs	r3, r3, #1
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	8bfb      	ldrh	r3, [r7, #30]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	8bfa      	ldrh	r2, [r7, #30]
 8005ec4:	60da      	str	r2, [r3, #12]
 8005ec6:	e062      	b.n	8005f8e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ece:	e05e      	b.n	8005f8e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d828      	bhi.n	8005f2a <UART_SetConfig+0x56a>
 8005ed8:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <UART_SetConfig+0x520>)
 8005eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f15 	.word	0x08005f15
 8005eec:	08005f2b 	.word	0x08005f2b
 8005ef0:	08005f1b 	.word	0x08005f1b
 8005ef4:	08005f2b 	.word	0x08005f2b
 8005ef8:	08005f2b 	.word	0x08005f2b
 8005efc:	08005f2b 	.word	0x08005f2b
 8005f00:	08005f23 	.word	0x08005f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f04:	f7fd ff22 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8005f08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f0a:	e014      	b.n	8005f36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f0c:	f7fd ff34 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 8005f10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f12:	e010      	b.n	8005f36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f14:	4b1a      	ldr	r3, [pc, #104]	; (8005f80 <UART_SetConfig+0x5c0>)
 8005f16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f18:	e00d      	b.n	8005f36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f1a:	f7fd fe7f 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8005f1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f20:	e009      	b.n	8005f36 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f28:	e005      	b.n	8005f36 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f34:	bf00      	nop
    }

    if (pclk != 0U)
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d028      	beq.n	8005f8e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	4a10      	ldr	r2, [pc, #64]	; (8005f84 <UART_SetConfig+0x5c4>)
 8005f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f46:	461a      	mov	r2, r3
 8005f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	085b      	lsrs	r3, r3, #1
 8005f54:	441a      	add	r2, r3
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	2b0f      	cmp	r3, #15
 8005f64:	d910      	bls.n	8005f88 <UART_SetConfig+0x5c8>
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f6c:	d20c      	bcs.n	8005f88 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60da      	str	r2, [r3, #12]
 8005f78:	e009      	b.n	8005f8e <UART_SetConfig+0x5ce>
 8005f7a:	bf00      	nop
 8005f7c:	40008000 	.word	0x40008000
 8005f80:	00f42400 	.word	0x00f42400
 8005f84:	0800acec 	.word	0x0800acec
      }
      else
      {
        ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005faa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3730      	adds	r7, #48	; 0x30
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00a      	beq.n	8005fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	f003 0302 	and.w	r3, r3, #2
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	430a      	orrs	r2, r1
 8006024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602a:	f003 0304 	and.w	r3, r3, #4
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00a      	beq.n	8006048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00a      	beq.n	800606a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01a      	beq.n	80060ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	430a      	orrs	r2, r1
 80060ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b6:	d10a      	bne.n	80060ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	605a      	str	r2, [r3, #4]
  }
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b098      	sub	sp, #96	; 0x60
 8006100:	af02      	add	r7, sp, #8
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800610c:	f7fa ff5a 	bl	8000fc4 <HAL_GetTick>
 8006110:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b08      	cmp	r3, #8
 800611e:	d12f      	bne.n	8006180 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006128:	2200      	movs	r2, #0
 800612a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f88e 	bl	8006250 <UART_WaitOnFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d022      	beq.n	8006180 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800614e:	653b      	str	r3, [r7, #80]	; 0x50
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006158:	647b      	str	r3, [r7, #68]	; 0x44
 800615a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800615e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e6      	bne.n	800613a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e063      	b.n	8006248 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0304 	and.w	r3, r3, #4
 800618a:	2b04      	cmp	r3, #4
 800618c:	d149      	bne.n	8006222 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800618e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006196:	2200      	movs	r2, #0
 8006198:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f857 	bl	8006250 <UART_WaitOnFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d03c      	beq.n	8006222 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	e853 3f00 	ldrex	r3, [r3]
 80061b4:	623b      	str	r3, [r7, #32]
   return(result);
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c6:	633b      	str	r3, [r7, #48]	; 0x30
 80061c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e6      	bne.n	80061a8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3308      	adds	r3, #8
 80061e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	e853 3f00 	ldrex	r3, [r3]
 80061e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f023 0301 	bic.w	r3, r3, #1
 80061f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	3308      	adds	r3, #8
 80061f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061fa:	61fa      	str	r2, [r7, #28]
 80061fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	69b9      	ldr	r1, [r7, #24]
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	617b      	str	r3, [r7, #20]
   return(result);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e5      	bne.n	80061da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e012      	b.n	8006248 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2220      	movs	r2, #32
 800622e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3758      	adds	r7, #88	; 0x58
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	4613      	mov	r3, r2
 800625e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006260:	e049      	b.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006268:	d045      	beq.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626a:	f7fa feab 	bl	8000fc4 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	429a      	cmp	r2, r3
 8006278:	d302      	bcc.n	8006280 <UART_WaitOnFlagUntilTimeout+0x30>
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006280:	2303      	movs	r3, #3
 8006282:	e048      	b.n	8006316 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0304 	and.w	r3, r3, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	d031      	beq.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b08      	cmp	r3, #8
 800629e:	d110      	bne.n	80062c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2208      	movs	r2, #8
 80062a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f920 	bl	80064ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2208      	movs	r2, #8
 80062b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e029      	b.n	8006316 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d0:	d111      	bne.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f906 	bl	80064ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e00f      	b.n	8006316 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4013      	ands	r3, r2
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	429a      	cmp	r2, r3
 8006304:	bf0c      	ite	eq
 8006306:	2301      	moveq	r3, #1
 8006308:	2300      	movne	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	429a      	cmp	r2, r3
 8006312:	d0a6      	beq.n	8006262 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b096      	sub	sp, #88	; 0x58
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	4613      	mov	r3, r2
 800632c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	88fa      	ldrh	r2, [r7, #6]
 8006338:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2222      	movs	r2, #34	; 0x22
 8006348:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006352:	2b00      	cmp	r3, #0
 8006354:	d02d      	beq.n	80063b2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800635c:	4a40      	ldr	r2, [pc, #256]	; (8006460 <UART_Start_Receive_DMA+0x140>)
 800635e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006366:	4a3f      	ldr	r2, [pc, #252]	; (8006464 <UART_Start_Receive_DMA+0x144>)
 8006368:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006370:	4a3d      	ldr	r2, [pc, #244]	; (8006468 <UART_Start_Receive_DMA+0x148>)
 8006372:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637a:	2200      	movs	r2, #0
 800637c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3324      	adds	r3, #36	; 0x24
 800638a:	4619      	mov	r1, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006390:	461a      	mov	r2, r3
 8006392:	88fb      	ldrh	r3, [r7, #6]
 8006394:	f7fb f800 	bl	8001398 <HAL_DMA_Start_IT>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d009      	beq.n	80063b2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2210      	movs	r2, #16
 80063a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e051      	b.n	8006456 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d018      	beq.n	80063ec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c2:	e853 3f00 	ldrex	r3, [r3]
 80063c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ce:	657b      	str	r3, [r7, #84]	; 0x54
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80063da:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063e0:	e841 2300 	strex	r3, r2, [r1]
 80063e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1e6      	bne.n	80063ba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3308      	adds	r3, #8
 80063f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	e853 3f00 	ldrex	r3, [r3]
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	653b      	str	r3, [r7, #80]	; 0x50
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3308      	adds	r3, #8
 800640a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800640c:	637a      	str	r2, [r7, #52]	; 0x34
 800640e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e5      	bne.n	80063ec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3308      	adds	r3, #8
 8006426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	613b      	str	r3, [r7, #16]
   return(result);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006440:	623a      	str	r2, [r7, #32]
 8006442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	69f9      	ldr	r1, [r7, #28]
 8006446:	6a3a      	ldr	r2, [r7, #32]
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	61bb      	str	r3, [r7, #24]
   return(result);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e5      	bne.n	8006420 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3758      	adds	r7, #88	; 0x58
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	08006671 	.word	0x08006671
 8006464:	0800679d 	.word	0x0800679d
 8006468:	080067db 	.word	0x080067db

0800646c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b08f      	sub	sp, #60	; 0x3c
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
#if defined(USART_CR1_FIFOEN)
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	61fb      	str	r3, [r7, #28]
   return(result);
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006488:	637b      	str	r3, [r7, #52]	; 0x34
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006494:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e6      	bne.n	8006474 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3308      	adds	r3, #8
 80064ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80064bc:	633b      	str	r3, [r7, #48]	; 0x30
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c6:	61ba      	str	r2, [r7, #24]
 80064c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	6979      	ldr	r1, [r7, #20]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	613b      	str	r3, [r7, #16]
   return(result);
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e5      	bne.n	80064a6 <UART_EndTxTransfer+0x3a>
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80064e2:	bf00      	nop
 80064e4:	373c      	adds	r7, #60	; 0x3c
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b095      	sub	sp, #84	; 0x54
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800650a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006514:	643b      	str	r3, [r7, #64]	; 0x40
 8006516:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006518:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800651a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800651c:	e841 2300 	strex	r3, r2, [r1]
 8006520:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e6      	bne.n	80064f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3308      	adds	r3, #8
 800652e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	e853 3f00 	ldrex	r3, [r3]
 8006536:	61fb      	str	r3, [r7, #28]
   return(result);
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800653e:	f023 0301 	bic.w	r3, r3, #1
 8006542:	64bb      	str	r3, [r7, #72]	; 0x48
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3308      	adds	r3, #8
 800654a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800654c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e3      	bne.n	8006528 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d118      	bne.n	800659a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	60bb      	str	r3, [r7, #8]
   return(result);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f023 0310 	bic.w	r3, r3, #16
 800657c:	647b      	str	r3, [r7, #68]	; 0x44
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006586:	61bb      	str	r3, [r7, #24]
 8006588:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	6979      	ldr	r1, [r7, #20]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	e841 2300 	strex	r3, r2, [r1]
 8006592:	613b      	str	r3, [r7, #16]
   return(result);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1e6      	bne.n	8006568 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2220      	movs	r2, #32
 800659e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 80065ae:	bf00      	nop
 80065b0:	3754      	adds	r7, #84	; 0x54
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b090      	sub	sp, #64	; 0x40
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d137      	bne.n	8006646 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80065d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d8:	2200      	movs	r2, #0
 80065da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80065de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3308      	adds	r3, #8
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	e853 3f00 	ldrex	r3, [r3]
 80065ec:	623b      	str	r3, [r7, #32]
   return(result);
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80065f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065fe:	633a      	str	r2, [r7, #48]	; 0x30
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006606:	e841 2300 	strex	r3, r2, [r1]
 800660a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1e5      	bne.n	80065de <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006626:	637b      	str	r3, [r7, #52]	; 0x34
 8006628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	461a      	mov	r2, r3
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	61fb      	str	r3, [r7, #28]
 8006632:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	69b9      	ldr	r1, [r7, #24]
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	617b      	str	r3, [r7, #20]
   return(result);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e6      	bne.n	8006612 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006644:	e002      	b.n	800664c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006646:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006648:	f7ff f986 	bl	8005958 <HAL_UART_TxCpltCallback>
}
 800664c:	bf00      	nop
 800664e:	3740      	adds	r7, #64	; 0x40
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff f982 	bl	800596c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b09c      	sub	sp, #112	; 0x70
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d171      	bne.n	8006770 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800668c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668e:	2200      	movs	r2, #0
 8006690:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80066aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	461a      	mov	r2, r3
 80066b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80066b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80066b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e6      	bne.n	8006694 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3308      	adds	r3, #8
 80066cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	667b      	str	r3, [r7, #100]	; 0x64
 80066de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3308      	adds	r3, #8
 80066e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066e6:	647a      	str	r2, [r7, #68]	; 0x44
 80066e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e5      	bne.n	80066c6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3308      	adds	r3, #8
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006704:	e853 3f00 	ldrex	r3, [r3]
 8006708:	623b      	str	r3, [r7, #32]
   return(result);
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006710:	663b      	str	r3, [r7, #96]	; 0x60
 8006712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800671a:	633a      	str	r2, [r7, #48]	; 0x30
 800671c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006722:	e841 2300 	strex	r3, r2, [r1]
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e5      	bne.n	80066fa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800672e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006730:	2220      	movs	r2, #32
 8006732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673a:	2b01      	cmp	r3, #1
 800673c:	d118      	bne.n	8006770 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800673e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	e853 3f00 	ldrex	r3, [r3]
 800674a:	60fb      	str	r3, [r7, #12]
   return(result);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0310 	bic.w	r3, r3, #16
 8006752:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800675c:	61fb      	str	r3, [r7, #28]
 800675e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006760:	69b9      	ldr	r1, [r7, #24]
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	e841 2300 	strex	r3, r2, [r1]
 8006768:	617b      	str	r3, [r7, #20]
   return(result);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1e6      	bne.n	800673e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006772:	2200      	movs	r2, #0
 8006774:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677a:	2b01      	cmp	r3, #1
 800677c:	d107      	bne.n	800678e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800677e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006784:	4619      	mov	r1, r3
 8006786:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006788:	f7ff f90e 	bl	80059a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800678c:	e002      	b.n	8006794 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800678e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006790:	f7fa f804 	bl	800079c <HAL_UART_RxCpltCallback>
}
 8006794:	bf00      	nop
 8006796:	3770      	adds	r7, #112	; 0x70
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2201      	movs	r2, #1
 80067ae:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d109      	bne.n	80067cc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	4619      	mov	r1, r3
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7ff f8ef 	bl	80059a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067ca:	e002      	b.n	80067d2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff f8d7 	bl	8005980 <HAL_UART_RxHalfCpltCallback>
}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b086      	sub	sp, #24
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d109      	bne.n	800681a <UART_DMAError+0x40>
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b21      	cmp	r3, #33	; 0x21
 800680a:	d106      	bne.n	800681a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2200      	movs	r2, #0
 8006810:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006814:	6978      	ldr	r0, [r7, #20]
 8006816:	f7ff fe29 	bl	800646c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b40      	cmp	r3, #64	; 0x40
 8006826:	d109      	bne.n	800683c <UART_DMAError+0x62>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b22      	cmp	r3, #34	; 0x22
 800682c:	d106      	bne.n	800683c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2200      	movs	r2, #0
 8006832:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006836:	6978      	ldr	r0, [r7, #20]
 8006838:	f7ff fe59 	bl	80064ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006842:	f043 0210 	orr.w	r2, r3, #16
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800684c:	6978      	ldr	r0, [r7, #20]
 800684e:	f7ff f8a1 	bl	8005994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006852:	bf00      	nop
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f7ff f88b 	bl	8005994 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800687e:	bf00      	nop
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b088      	sub	sp, #32
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	e853 3f00 	ldrex	r3, [r3]
 800689a:	60bb      	str	r3, [r7, #8]
   return(result);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068a2:	61fb      	str	r3, [r7, #28]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	461a      	mov	r2, r3
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	61bb      	str	r3, [r7, #24]
 80068ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	6979      	ldr	r1, [r7, #20]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	e841 2300 	strex	r3, r2, [r1]
 80068b8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1e6      	bne.n	800688e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7ff f842 	bl	8005958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068d4:	bf00      	nop
 80068d6:	3720      	adds	r7, #32
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_UARTEx_DisableFifoMode+0x16>
 800692a:	2302      	movs	r3, #2
 800692c:	e027      	b.n	800697e <HAL_UARTEx_DisableFifoMode+0x66>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2224      	movs	r2, #36	; 0x24
 800693a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800695c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800699e:	2302      	movs	r3, #2
 80069a0:	e02d      	b.n	80069fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2224      	movs	r2, #36	; 0x24
 80069ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0201 	bic.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f850 	bl	8006a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d101      	bne.n	8006a1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e02d      	b.n	8006a7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2224      	movs	r2, #36	; 0x24
 8006a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0201 	bic.w	r2, r2, #1
 8006a44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f812 	bl	8006a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d108      	bne.n	8006aa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006aa4:	e031      	b.n	8006b0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006aa6:	2308      	movs	r3, #8
 8006aa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006aaa:	2308      	movs	r3, #8
 8006aac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	0e5b      	lsrs	r3, r3, #25
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	0f5b      	lsrs	r3, r3, #29
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	7b3a      	ldrb	r2, [r7, #12]
 8006ad2:	4911      	ldr	r1, [pc, #68]	; (8006b18 <UARTEx_SetNbDataToProcess+0x94>)
 8006ad4:	5c8a      	ldrb	r2, [r1, r2]
 8006ad6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ada:	7b3a      	ldrb	r2, [r7, #12]
 8006adc:	490f      	ldr	r1, [pc, #60]	; (8006b1c <UARTEx_SetNbDataToProcess+0x98>)
 8006ade:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	7b7a      	ldrb	r2, [r7, #13]
 8006af0:	4909      	ldr	r1, [pc, #36]	; (8006b18 <UARTEx_SetNbDataToProcess+0x94>)
 8006af2:	5c8a      	ldrb	r2, [r1, r2]
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006af8:	7b7a      	ldrb	r2, [r7, #13]
 8006afa:	4908      	ldr	r1, [pc, #32]	; (8006b1c <UARTEx_SetNbDataToProcess+0x98>)
 8006afc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006afe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b0a:	bf00      	nop
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	0800ad04 	.word	0x0800ad04
 8006b1c:	0800ad0c 	.word	0x0800ad0c

08006b20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b20:	b084      	sub	sp, #16
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	f107 001c 	add.w	r0, r7, #28
 8006b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 fa1c 	bl	8007f7c <USB_CoreReset>
 8006b44:	4603      	mov	r3, r0
 8006b46:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d106      	bne.n	8006b5c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	639a      	str	r2, [r3, #56]	; 0x38
 8006b5a:	e005      	b.n	8006b68 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b74:	b004      	add	sp, #16
 8006b76:	4770      	bx	lr

08006b78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	4613      	mov	r3, r2
 8006b84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d165      	bne.n	8006c58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4a3e      	ldr	r2, [pc, #248]	; (8006c88 <USB_SetTurnaroundTime+0x110>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d906      	bls.n	8006ba2 <USB_SetTurnaroundTime+0x2a>
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4a3d      	ldr	r2, [pc, #244]	; (8006c8c <USB_SetTurnaroundTime+0x114>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d202      	bcs.n	8006ba2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b9c:	230f      	movs	r3, #15
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	e05c      	b.n	8006c5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	4a39      	ldr	r2, [pc, #228]	; (8006c8c <USB_SetTurnaroundTime+0x114>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d306      	bcc.n	8006bb8 <USB_SetTurnaroundTime+0x40>
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	4a38      	ldr	r2, [pc, #224]	; (8006c90 <USB_SetTurnaroundTime+0x118>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d202      	bcs.n	8006bb8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006bb2:	230e      	movs	r3, #14
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	e051      	b.n	8006c5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4a35      	ldr	r2, [pc, #212]	; (8006c90 <USB_SetTurnaroundTime+0x118>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d306      	bcc.n	8006bce <USB_SetTurnaroundTime+0x56>
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4a34      	ldr	r2, [pc, #208]	; (8006c94 <USB_SetTurnaroundTime+0x11c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d202      	bcs.n	8006bce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006bc8:	230d      	movs	r3, #13
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e046      	b.n	8006c5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4a30      	ldr	r2, [pc, #192]	; (8006c94 <USB_SetTurnaroundTime+0x11c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d306      	bcc.n	8006be4 <USB_SetTurnaroundTime+0x6c>
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	4a2f      	ldr	r2, [pc, #188]	; (8006c98 <USB_SetTurnaroundTime+0x120>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d802      	bhi.n	8006be4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006bde:	230c      	movs	r3, #12
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	e03b      	b.n	8006c5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4a2c      	ldr	r2, [pc, #176]	; (8006c98 <USB_SetTurnaroundTime+0x120>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d906      	bls.n	8006bfa <USB_SetTurnaroundTime+0x82>
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4a2b      	ldr	r2, [pc, #172]	; (8006c9c <USB_SetTurnaroundTime+0x124>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d802      	bhi.n	8006bfa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006bf4:	230b      	movs	r3, #11
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	e030      	b.n	8006c5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4a27      	ldr	r2, [pc, #156]	; (8006c9c <USB_SetTurnaroundTime+0x124>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d906      	bls.n	8006c10 <USB_SetTurnaroundTime+0x98>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	4a26      	ldr	r2, [pc, #152]	; (8006ca0 <USB_SetTurnaroundTime+0x128>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d802      	bhi.n	8006c10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c0a:	230a      	movs	r3, #10
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	e025      	b.n	8006c5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4a23      	ldr	r2, [pc, #140]	; (8006ca0 <USB_SetTurnaroundTime+0x128>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d906      	bls.n	8006c26 <USB_SetTurnaroundTime+0xae>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	4a22      	ldr	r2, [pc, #136]	; (8006ca4 <USB_SetTurnaroundTime+0x12c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d202      	bcs.n	8006c26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006c20:	2309      	movs	r3, #9
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	e01a      	b.n	8006c5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	4a1e      	ldr	r2, [pc, #120]	; (8006ca4 <USB_SetTurnaroundTime+0x12c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d306      	bcc.n	8006c3c <USB_SetTurnaroundTime+0xc4>
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	4a1d      	ldr	r2, [pc, #116]	; (8006ca8 <USB_SetTurnaroundTime+0x130>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d802      	bhi.n	8006c3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c36:	2308      	movs	r3, #8
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	e00f      	b.n	8006c5c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4a1a      	ldr	r2, [pc, #104]	; (8006ca8 <USB_SetTurnaroundTime+0x130>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d906      	bls.n	8006c52 <USB_SetTurnaroundTime+0xda>
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	4a19      	ldr	r2, [pc, #100]	; (8006cac <USB_SetTurnaroundTime+0x134>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d202      	bcs.n	8006c52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c4c:	2307      	movs	r3, #7
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	e004      	b.n	8006c5c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c52:	2306      	movs	r3, #6
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	e001      	b.n	8006c5c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c58:	2309      	movs	r3, #9
 8006c5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	68da      	ldr	r2, [r3, #12]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	029b      	lsls	r3, r3, #10
 8006c70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006c74:	431a      	orrs	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	00d8acbf 	.word	0x00d8acbf
 8006c8c:	00e4e1c0 	.word	0x00e4e1c0
 8006c90:	00f42400 	.word	0x00f42400
 8006c94:	01067380 	.word	0x01067380
 8006c98:	011a499f 	.word	0x011a499f
 8006c9c:	01312cff 	.word	0x01312cff
 8006ca0:	014ca43f 	.word	0x014ca43f
 8006ca4:	016e3600 	.word	0x016e3600
 8006ca8:	01a6ab1f 	.word	0x01a6ab1f
 8006cac:	01e84800 	.word	0x01e84800

08006cb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f043 0201 	orr.w	r2, r3, #1
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f023 0201 	bic.w	r2, r3, #1
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d115      	bne.n	8006d42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d22:	2001      	movs	r0, #1
 8006d24:	f7fa f95a 	bl	8000fdc <HAL_Delay>
      ms++;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f001 f8ab 	bl	8007e8a <USB_GetMode>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d01e      	beq.n	8006d78 <USB_SetCurrentMode+0x84>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b31      	cmp	r3, #49	; 0x31
 8006d3e:	d9f0      	bls.n	8006d22 <USB_SetCurrentMode+0x2e>
 8006d40:	e01a      	b.n	8006d78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d42:	78fb      	ldrb	r3, [r7, #3]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d115      	bne.n	8006d74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d54:	2001      	movs	r0, #1
 8006d56:	f7fa f941 	bl	8000fdc <HAL_Delay>
      ms++;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f001 f892 	bl	8007e8a <USB_GetMode>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <USB_SetCurrentMode+0x84>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b31      	cmp	r3, #49	; 0x31
 8006d70:	d9f0      	bls.n	8006d54 <USB_SetCurrentMode+0x60>
 8006d72:	e001      	b.n	8006d78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e005      	b.n	8006d84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b32      	cmp	r3, #50	; 0x32
 8006d7c:	d101      	bne.n	8006d82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d8c:	b084      	sub	sp, #16
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b086      	sub	sp, #24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006da6:	2300      	movs	r3, #0
 8006da8:	613b      	str	r3, [r7, #16]
 8006daa:	e009      	b.n	8006dc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	3340      	adds	r3, #64	; 0x40
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	2200      	movs	r2, #0
 8006db8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2b0e      	cmp	r3, #14
 8006dc4:	d9f2      	bls.n	8006dac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d11c      	bne.n	8006e06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dda:	f043 0302 	orr.w	r3, r3, #2
 8006dde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	e005      	b.n	8006e12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e18:	461a      	mov	r2, r3
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e1e:	2103      	movs	r1, #3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f959 	bl	80070d8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e26:	2110      	movs	r1, #16
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f8f1 	bl	8007010 <USB_FlushTxFifo>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f91d 	bl	8007078 <USB_FlushRxFifo>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4e:	461a      	mov	r2, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e66:	461a      	mov	r2, r3
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	e043      	b.n	8006efa <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e88:	d118      	bne.n	8006ebc <USB_DevInit+0x130>
    {
      if (i == 0U)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	e013      	b.n	8006ece <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	e008      	b.n	8006ece <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eda:	461a      	mov	r2, r3
 8006edc:	2300      	movs	r3, #0
 8006ede:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eec:	461a      	mov	r2, r3
 8006eee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ef2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d3b7      	bcc.n	8006e72 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	e043      	b.n	8006f90 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1e:	d118      	bne.n	8006f52 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f32:	461a      	mov	r2, r3
 8006f34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e013      	b.n	8006f64 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	e008      	b.n	8006f64 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	461a      	mov	r2, r3
 8006f60:	2300      	movs	r3, #0
 8006f62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	461a      	mov	r2, r3
 8006f72:	2300      	movs	r3, #0
 8006f74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f82:	461a      	mov	r2, r3
 8006f84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d3b7      	bcc.n	8006f08 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006faa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006fb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f043 0210 	orr.w	r2, r3, #16
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	4b10      	ldr	r3, [pc, #64]	; (800700c <USB_DevInit+0x280>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	f043 0208 	orr.w	r2, r3, #8
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d107      	bne.n	8006ffa <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ff2:	f043 0304 	orr.w	r3, r3, #4
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007006:	b004      	add	sp, #16
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	803c3800 	.word	0x803c3800

08007010 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3301      	adds	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4a13      	ldr	r2, [pc, #76]	; (8007074 <USB_FlushTxFifo+0x64>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d901      	bls.n	8007030 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e01b      	b.n	8007068 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	daf2      	bge.n	800701e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	019b      	lsls	r3, r3, #6
 8007040:	f043 0220 	orr.w	r2, r3, #32
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4a08      	ldr	r2, [pc, #32]	; (8007074 <USB_FlushTxFifo+0x64>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e006      	b.n	8007068 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b20      	cmp	r3, #32
 8007064:	d0f0      	beq.n	8007048 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr
 8007074:	00030d40 	.word	0x00030d40

08007078 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3301      	adds	r3, #1
 8007088:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4a11      	ldr	r2, [pc, #68]	; (80070d4 <USB_FlushRxFifo+0x5c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d901      	bls.n	8007096 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e018      	b.n	80070c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	daf2      	bge.n	8007084 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800709e:	2300      	movs	r3, #0
 80070a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2210      	movs	r2, #16
 80070a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <USB_FlushRxFifo+0x5c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d901      	bls.n	80070ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e006      	b.n	80070c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b10      	cmp	r3, #16
 80070c4:	d0f0      	beq.n	80070a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	00030d40 	.word	0x00030d40

080070d8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	68f9      	ldr	r1, [r7, #12]
 80070f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070f8:	4313      	orrs	r3, r2
 80070fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800710a:	b480      	push	{r7}
 800710c:	b087      	sub	sp, #28
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 0306 	and.w	r3, r3, #6
 8007122:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d002      	beq.n	8007130 <USB_GetDevSpeed+0x26>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b06      	cmp	r3, #6
 800712e:	d102      	bne.n	8007136 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007130:	2302      	movs	r3, #2
 8007132:	75fb      	strb	r3, [r7, #23]
 8007134:	e001      	b.n	800713a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8007136:	230f      	movs	r3, #15
 8007138:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800713a:	7dfb      	ldrb	r3, [r7, #23]
}
 800713c:	4618      	mov	r0, r3
 800713e:	371c      	adds	r7, #28
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	785b      	ldrb	r3, [r3, #1]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d13a      	bne.n	80071da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716a:	69da      	ldr	r2, [r3, #28]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	f003 030f 	and.w	r3, r3, #15
 8007174:	2101      	movs	r1, #1
 8007176:	fa01 f303 	lsl.w	r3, r1, r3
 800717a:	b29b      	uxth	r3, r3
 800717c:	68f9      	ldr	r1, [r7, #12]
 800717e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007182:	4313      	orrs	r3, r2
 8007184:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	015a      	lsls	r2, r3, #5
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	4413      	add	r3, r2
 800718e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d155      	bne.n	8007248 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	791b      	ldrb	r3, [r3, #4]
 80071b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	059b      	lsls	r3, r3, #22
 80071be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071c0:	4313      	orrs	r3, r2
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	0151      	lsls	r1, r2, #5
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	440a      	add	r2, r1
 80071ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	e036      	b.n	8007248 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e0:	69da      	ldr	r2, [r3, #28]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	2101      	movs	r1, #1
 80071ec:	fa01 f303 	lsl.w	r3, r1, r3
 80071f0:	041b      	lsls	r3, r3, #16
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f8:	4313      	orrs	r3, r2
 80071fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800720e:	2b00      	cmp	r3, #0
 8007210:	d11a      	bne.n	8007248 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	791b      	ldrb	r3, [r3, #4]
 800722c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800722e:	430b      	orrs	r3, r1
 8007230:	4313      	orrs	r3, r2
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	0151      	lsls	r1, r2, #5
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	440a      	add	r2, r1
 800723a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800723e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007246:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3714      	adds	r7, #20
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
	...

08007258 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	785b      	ldrb	r3, [r3, #1]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d161      	bne.n	8007338 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800728a:	d11f      	bne.n	80072cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	0151      	lsls	r1, r2, #5
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	440a      	add	r2, r1
 80072c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	2101      	movs	r1, #1
 80072de:	fa01 f303 	lsl.w	r3, r1, r3
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	43db      	mvns	r3, r3
 80072e6:	68f9      	ldr	r1, [r7, #12]
 80072e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ec:	4013      	ands	r3, r2
 80072ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f6:	69da      	ldr	r2, [r3, #28]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	2101      	movs	r1, #1
 8007302:	fa01 f303 	lsl.w	r3, r1, r3
 8007306:	b29b      	uxth	r3, r3
 8007308:	43db      	mvns	r3, r3
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007310:	4013      	ands	r3, r2
 8007312:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	0159      	lsls	r1, r3, #5
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	440b      	add	r3, r1
 800732a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732e:	4619      	mov	r1, r3
 8007330:	4b35      	ldr	r3, [pc, #212]	; (8007408 <USB_DeactivateEndpoint+0x1b0>)
 8007332:	4013      	ands	r3, r2
 8007334:	600b      	str	r3, [r1, #0]
 8007336:	e060      	b.n	80073fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800734a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800734e:	d11f      	bne.n	8007390 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800736e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68ba      	ldr	r2, [r7, #8]
 8007380:	0151      	lsls	r1, r2, #5
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	440a      	add	r2, r1
 8007386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800738e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	f003 030f 	and.w	r3, r3, #15
 80073a0:	2101      	movs	r1, #1
 80073a2:	fa01 f303 	lsl.w	r3, r1, r3
 80073a6:	041b      	lsls	r3, r3, #16
 80073a8:	43db      	mvns	r3, r3
 80073aa:	68f9      	ldr	r1, [r7, #12]
 80073ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073b0:	4013      	ands	r3, r2
 80073b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ba:	69da      	ldr	r2, [r3, #28]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	f003 030f 	and.w	r3, r3, #15
 80073c4:	2101      	movs	r1, #1
 80073c6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ca:	041b      	lsls	r3, r3, #16
 80073cc:	43db      	mvns	r3, r3
 80073ce:	68f9      	ldr	r1, [r7, #12]
 80073d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073d4:	4013      	ands	r3, r2
 80073d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	0159      	lsls	r1, r3, #5
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	440b      	add	r3, r1
 80073ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f2:	4619      	mov	r1, r3
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <USB_DeactivateEndpoint+0x1b4>)
 80073f6:	4013      	ands	r3, r2
 80073f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	ec337800 	.word	0xec337800
 800740c:	eff37800 	.word	0xeff37800

08007410 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	785b      	ldrb	r3, [r3, #1]
 8007428:	2b01      	cmp	r3, #1
 800742a:	f040 8128 	bne.w	800767e <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d132      	bne.n	800749c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	0151      	lsls	r1, r2, #5
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	440a      	add	r2, r1
 800744c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007450:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007454:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007458:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	440a      	add	r2, r1
 8007470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007478:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	0151      	lsls	r1, r2, #5
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	440a      	add	r2, r1
 8007490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007494:	0cdb      	lsrs	r3, r3, #19
 8007496:	04db      	lsls	r3, r3, #19
 8007498:	6113      	str	r3, [r2, #16]
 800749a:	e092      	b.n	80075c2 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	0151      	lsls	r1, r2, #5
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	440a      	add	r2, r1
 80074b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b6:	0cdb      	lsrs	r3, r3, #19
 80074b8:	04db      	lsls	r3, r3, #19
 80074ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	0151      	lsls	r1, r2, #5
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	440a      	add	r2, r1
 80074d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074de:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d11a      	bne.n	800751c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	691a      	ldr	r2, [r3, #16]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d903      	bls.n	80074fa <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	440a      	add	r2, r1
 8007510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007514:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007518:	6113      	str	r3, [r2, #16]
 800751a:	e01b      	b.n	8007554 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007528:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6919      	ldr	r1, [r3, #16]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	440b      	add	r3, r1
 8007534:	1e59      	subs	r1, r3, #1
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	fbb1 f3f3 	udiv	r3, r1, r3
 800753e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007540:	4b8d      	ldr	r3, [pc, #564]	; (8007778 <USB_EPStartXfer+0x368>)
 8007542:	400b      	ands	r3, r1
 8007544:	6939      	ldr	r1, [r7, #16]
 8007546:	0148      	lsls	r0, r1, #5
 8007548:	6979      	ldr	r1, [r7, #20]
 800754a:	4401      	add	r1, r0
 800754c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007550:	4313      	orrs	r3, r2
 8007552:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007560:	691a      	ldr	r2, [r3, #16]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800756a:	6939      	ldr	r1, [r7, #16]
 800756c:	0148      	lsls	r0, r1, #5
 800756e:	6979      	ldr	r1, [r7, #20]
 8007570:	4401      	add	r1, r0
 8007572:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007576:	4313      	orrs	r3, r2
 8007578:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	791b      	ldrb	r3, [r3, #4]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d11f      	bne.n	80075c2 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	4413      	add	r3, r2
 800758a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	440a      	add	r2, r1
 8007598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80075a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	0151      	lsls	r1, r2, #5
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	440a      	add	r2, r1
 80075b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075c0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075e0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	791b      	ldrb	r3, [r3, #4]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d015      	beq.n	8007616 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f000 8139 	beq.w	8007866 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	f003 030f 	and.w	r3, r3, #15
 8007604:	2101      	movs	r1, #1
 8007606:	fa01 f303 	lsl.w	r3, r1, r3
 800760a:	6979      	ldr	r1, [r7, #20]
 800760c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007610:	4313      	orrs	r3, r2
 8007612:	634b      	str	r3, [r1, #52]	; 0x34
 8007614:	e127      	b.n	8007866 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007622:	2b00      	cmp	r3, #0
 8007624:	d110      	bne.n	8007648 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	4413      	add	r3, r2
 800762e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	0151      	lsls	r1, r2, #5
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	440a      	add	r2, r1
 800763c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007644:	6013      	str	r3, [r2, #0]
 8007646:	e00f      	b.n	8007668 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	0151      	lsls	r1, r2, #5
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	440a      	add	r2, r1
 800765e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007666:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	68d9      	ldr	r1, [r3, #12]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	781a      	ldrb	r2, [r3, #0]
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	b29b      	uxth	r3, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f9a6 	bl	80079c8 <USB_WritePacket>
 800767c:	e0f3      	b.n	8007866 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	0151      	lsls	r1, r2, #5
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	440a      	add	r2, r1
 8007694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007698:	0cdb      	lsrs	r3, r3, #19
 800769a:	04db      	lsls	r3, r3, #19
 800769c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	0151      	lsls	r1, r2, #5
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	440a      	add	r2, r1
 80076b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076c0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d12f      	bne.n	8007728 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d003      	beq.n	80076d8 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	015a      	lsls	r2, r3, #5
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	4413      	add	r3, r2
 80076e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ec:	691a      	ldr	r2, [r3, #16]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f6:	6939      	ldr	r1, [r7, #16]
 80076f8:	0148      	lsls	r0, r1, #5
 80076fa:	6979      	ldr	r1, [r7, #20]
 80076fc:	4401      	add	r1, r0
 80076fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007702:	4313      	orrs	r3, r2
 8007704:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	0151      	lsls	r1, r2, #5
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	440a      	add	r2, r1
 800771c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007720:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007724:	6113      	str	r3, [r2, #16]
 8007726:	e061      	b.n	80077ec <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d125      	bne.n	800777c <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007746:	6939      	ldr	r1, [r7, #16]
 8007748:	0148      	lsls	r0, r1, #5
 800774a:	6979      	ldr	r1, [r7, #20]
 800774c:	4401      	add	r1, r0
 800774e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007752:	4313      	orrs	r3, r2
 8007754:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	4413      	add	r3, r2
 800775e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	440a      	add	r2, r1
 800776c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007774:	6113      	str	r3, [r2, #16]
 8007776:	e039      	b.n	80077ec <USB_EPStartXfer+0x3dc>
 8007778:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	691a      	ldr	r2, [r3, #16]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	4413      	add	r3, r2
 8007786:	1e5a      	subs	r2, r3, #1
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007790:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	89fa      	ldrh	r2, [r7, #14]
 8007798:	fb03 f202 	mul.w	r2, r3, r2
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ac:	691a      	ldr	r2, [r3, #16]
 80077ae:	89fb      	ldrh	r3, [r7, #14]
 80077b0:	04d9      	lsls	r1, r3, #19
 80077b2:	4b2f      	ldr	r3, [pc, #188]	; (8007870 <USB_EPStartXfer+0x460>)
 80077b4:	400b      	ands	r3, r1
 80077b6:	6939      	ldr	r1, [r7, #16]
 80077b8:	0148      	lsls	r0, r1, #5
 80077ba:	6979      	ldr	r1, [r7, #20]
 80077bc:	4401      	add	r1, r0
 80077be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077c2:	4313      	orrs	r3, r2
 80077c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d2:	691a      	ldr	r2, [r3, #16]
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077dc:	6939      	ldr	r1, [r7, #16]
 80077de:	0148      	lsls	r0, r1, #5
 80077e0:	6979      	ldr	r1, [r7, #20]
 80077e2:	4401      	add	r1, r0
 80077e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077e8:	4313      	orrs	r3, r2
 80077ea:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	791b      	ldrb	r3, [r3, #4]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d128      	bne.n	8007846 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007800:	2b00      	cmp	r3, #0
 8007802:	d110      	bne.n	8007826 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	0151      	lsls	r1, r2, #5
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	440a      	add	r2, r1
 800781a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800781e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	e00f      	b.n	8007846 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	4413      	add	r3, r2
 800782e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	0151      	lsls	r1, r2, #5
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	440a      	add	r2, r1
 800783c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007844:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	0151      	lsls	r1, r2, #5
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	440a      	add	r2, r1
 800785c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007860:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007864:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	1ff80000 	.word	0x1ff80000

08007874 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	785b      	ldrb	r3, [r3, #1]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d14a      	bne.n	8007928 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078aa:	f040 8086 	bne.w	80079ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	7812      	ldrb	r2, [r2, #0]
 80078c2:	0151      	lsls	r1, r2, #5
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	440a      	add	r2, r1
 80078c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	7812      	ldrb	r2, [r2, #0]
 80078e6:	0151      	lsls	r1, r2, #5
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	440a      	add	r2, r1
 80078ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3301      	adds	r3, #1
 80078fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8007902:	4293      	cmp	r3, r2
 8007904:	d902      	bls.n	800790c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	75fb      	strb	r3, [r7, #23]
          break;
 800790a:	e056      	b.n	80079ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	015a      	lsls	r2, r3, #5
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	4413      	add	r3, r2
 8007916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007924:	d0e7      	beq.n	80078f6 <USB_EPStopXfer+0x82>
 8007926:	e048      	b.n	80079ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800793c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007940:	d13b      	bne.n	80079ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	7812      	ldrb	r2, [r2, #0]
 8007956:	0151      	lsls	r1, r2, #5
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	440a      	add	r2, r1
 800795c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007960:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007964:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	7812      	ldrb	r2, [r2, #0]
 800797a:	0151      	lsls	r1, r2, #5
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	440a      	add	r2, r1
 8007980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007988:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	3301      	adds	r3, #1
 800798e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f242 7210 	movw	r2, #10000	; 0x2710
 8007996:	4293      	cmp	r3, r2
 8007998:	d902      	bls.n	80079a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	75fb      	strb	r3, [r7, #23]
          break;
 800799e:	e00c      	b.n	80079ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b8:	d0e7      	beq.n	800798a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	371c      	adds	r7, #28
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b089      	sub	sp, #36	; 0x24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	4611      	mov	r1, r2
 80079d4:	461a      	mov	r2, r3
 80079d6:	460b      	mov	r3, r1
 80079d8:	71fb      	strb	r3, [r7, #7]
 80079da:	4613      	mov	r3, r2
 80079dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80079e6:	88bb      	ldrh	r3, [r7, #4]
 80079e8:	3303      	adds	r3, #3
 80079ea:	089b      	lsrs	r3, r3, #2
 80079ec:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80079ee:	2300      	movs	r3, #0
 80079f0:	61bb      	str	r3, [r7, #24]
 80079f2:	e018      	b.n	8007a26 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	031a      	lsls	r2, r3, #12
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a00:	461a      	mov	r2, r3
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	3301      	adds	r3, #1
 8007a12:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	3301      	adds	r3, #1
 8007a18:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	3301      	adds	r3, #1
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d3e2      	bcc.n	80079f4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3724      	adds	r7, #36	; 0x24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b08b      	sub	sp, #44	; 0x2c
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	089b      	lsrs	r3, r3, #2
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a5a:	88fb      	ldrh	r3, [r7, #6]
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a62:	2300      	movs	r3, #0
 8007a64:	623b      	str	r3, [r7, #32]
 8007a66:	e014      	b.n	8007a92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	3301      	adds	r3, #1
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	3301      	adds	r3, #1
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	3301      	adds	r3, #1
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	623b      	str	r3, [r7, #32]
 8007a92:	6a3a      	ldr	r2, [r7, #32]
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d3e6      	bcc.n	8007a68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a9a:	8bfb      	ldrh	r3, [r7, #30]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01e      	beq.n	8007ade <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f107 0310 	add.w	r3, r7, #16
 8007ab0:	6812      	ldr	r2, [r2, #0]
 8007ab2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac4:	701a      	strb	r2, [r3, #0]
      i++;
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	623b      	str	r3, [r7, #32]
      pDest++;
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	3301      	adds	r3, #1
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007ad2:	8bfb      	ldrh	r3, [r7, #30]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ad8:	8bfb      	ldrh	r3, [r7, #30]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1ea      	bne.n	8007ab4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	372c      	adds	r7, #44	; 0x2c
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	785b      	ldrb	r3, [r3, #1]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d12c      	bne.n	8007b62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	db12      	blt.n	8007b40 <USB_EPSetStall+0x54>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00f      	beq.n	8007b40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	0151      	lsls	r1, r2, #5
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	440a      	add	r2, r1
 8007b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	e02b      	b.n	8007bba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	db12      	blt.n	8007b9a <USB_EPSetStall+0xae>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00f      	beq.n	8007b9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	0151      	lsls	r1, r2, #5
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	440a      	add	r2, r1
 8007b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	0151      	lsls	r1, r2, #5
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	440a      	add	r2, r1
 8007bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	785b      	ldrb	r3, [r3, #1]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d128      	bne.n	8007c36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	015a      	lsls	r2, r3, #5
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	4413      	add	r3, r2
 8007bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	0151      	lsls	r1, r2, #5
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	440a      	add	r2, r1
 8007bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	791b      	ldrb	r3, [r3, #4]
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d003      	beq.n	8007c14 <USB_EPClearStall+0x4c>
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	791b      	ldrb	r3, [r3, #4]
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d138      	bne.n	8007c86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	0151      	lsls	r1, r2, #5
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	440a      	add	r2, r1
 8007c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c32:	6013      	str	r3, [r2, #0]
 8007c34:	e027      	b.n	8007c86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	0151      	lsls	r1, r2, #5
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	440a      	add	r2, r1
 8007c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	791b      	ldrb	r3, [r3, #4]
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d003      	beq.n	8007c66 <USB_EPClearStall+0x9e>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	791b      	ldrb	r3, [r3, #4]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d10f      	bne.n	8007c86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	0151      	lsls	r1, r2, #5
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	440a      	add	r2, r1
 8007c7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cb2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	011b      	lsls	r3, r3, #4
 8007cc4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007cc8:	68f9      	ldr	r1, [r7, #12]
 8007cca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3714      	adds	r7, #20
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cfa:	f023 0303 	bic.w	r3, r3, #3
 8007cfe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d0e:	f023 0302 	bic.w	r3, r3, #2
 8007d12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b085      	sub	sp, #20
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d50:	f043 0302 	orr.w	r3, r3, #2
 8007d54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	68ba      	ldr	r2, [r7, #8]
 8007daa:	4013      	ands	r3, r2
 8007dac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	0c1b      	lsrs	r3, r3, #16
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	68ba      	ldr	r2, [r7, #8]
 8007dde:	4013      	ands	r3, r2
 8007de0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	b29b      	uxth	r3, r3
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e20:	68bb      	ldr	r3, [r7, #8]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b087      	sub	sp, #28
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5e:	01db      	lsls	r3, r3, #7
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	693a      	ldr	r2, [r7, #16]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	f003 0301 	and.w	r3, r3, #1
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ec4:	f023 0307 	bic.w	r3, r3, #7
 8007ec8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007edc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	333c      	adds	r3, #60	; 0x3c
 8007efe:	3304      	adds	r3, #4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4a1c      	ldr	r2, [pc, #112]	; (8007f78 <USB_EP0_OutStart+0x8c>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d90a      	bls.n	8007f22 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f1c:	d101      	bne.n	8007f22 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e024      	b.n	8007f6c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f28:	461a      	mov	r2, r3
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f50:	f043 0318 	orr.w	r3, r3, #24
 8007f54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f64:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f68:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007f6a:	2300      	movs	r3, #0
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	4f54300a 	.word	0x4f54300a

08007f7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	4a13      	ldr	r2, [pc, #76]	; (8007fe0 <USB_CoreReset+0x64>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d901      	bls.n	8007f9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e01b      	b.n	8007fd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	daf2      	bge.n	8007f88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f043 0201 	orr.w	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4a09      	ldr	r2, [pc, #36]	; (8007fe0 <USB_CoreReset+0x64>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d901      	bls.n	8007fc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e006      	b.n	8007fd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d0f0      	beq.n	8007fb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	00030d40 	.word	0x00030d40

08007fe4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ff0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ff4:	f002 fdc6 	bl	800ab84 <USBD_static_malloc>
 8007ff8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d109      	bne.n	8008014 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	32b0      	adds	r2, #176	; 0xb0
 800800a:	2100      	movs	r1, #0
 800800c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008010:	2302      	movs	r3, #2
 8008012:	e0d4      	b.n	80081be <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008014:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008018:	2100      	movs	r1, #0
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f002 fdd0 	bl	800abc0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	32b0      	adds	r2, #176	; 0xb0
 800802a:	68f9      	ldr	r1, [r7, #12]
 800802c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	32b0      	adds	r2, #176	; 0xb0
 800803a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	7c1b      	ldrb	r3, [r3, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d138      	bne.n	80080be <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800804c:	4b5e      	ldr	r3, [pc, #376]	; (80081c8 <USBD_CDC_Init+0x1e4>)
 800804e:	7819      	ldrb	r1, [r3, #0]
 8008050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008054:	2202      	movs	r2, #2
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f002 fb80 	bl	800a75c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800805c:	4b5a      	ldr	r3, [pc, #360]	; (80081c8 <USBD_CDC_Init+0x1e4>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	f003 020f 	and.w	r2, r3, #15
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	4613      	mov	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	440b      	add	r3, r1
 8008070:	3324      	adds	r3, #36	; 0x24
 8008072:	2201      	movs	r2, #1
 8008074:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008076:	4b55      	ldr	r3, [pc, #340]	; (80081cc <USBD_CDC_Init+0x1e8>)
 8008078:	7819      	ldrb	r1, [r3, #0]
 800807a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800807e:	2202      	movs	r2, #2
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f002 fb6b 	bl	800a75c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008086:	4b51      	ldr	r3, [pc, #324]	; (80081cc <USBD_CDC_Init+0x1e8>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	f003 020f 	and.w	r2, r3, #15
 800808e:	6879      	ldr	r1, [r7, #4]
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	440b      	add	r3, r1
 800809a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800809e:	2201      	movs	r2, #1
 80080a0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080a2:	4b4b      	ldr	r3, [pc, #300]	; (80081d0 <USBD_CDC_Init+0x1ec>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	f003 020f 	and.w	r2, r3, #15
 80080aa:	6879      	ldr	r1, [r7, #4]
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	440b      	add	r3, r1
 80080b6:	3326      	adds	r3, #38	; 0x26
 80080b8:	2210      	movs	r2, #16
 80080ba:	801a      	strh	r2, [r3, #0]
 80080bc:	e035      	b.n	800812a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80080be:	4b42      	ldr	r3, [pc, #264]	; (80081c8 <USBD_CDC_Init+0x1e4>)
 80080c0:	7819      	ldrb	r1, [r3, #0]
 80080c2:	2340      	movs	r3, #64	; 0x40
 80080c4:	2202      	movs	r2, #2
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f002 fb48 	bl	800a75c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80080cc:	4b3e      	ldr	r3, [pc, #248]	; (80081c8 <USBD_CDC_Init+0x1e4>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f003 020f 	and.w	r2, r3, #15
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	440b      	add	r3, r1
 80080e0:	3324      	adds	r3, #36	; 0x24
 80080e2:	2201      	movs	r2, #1
 80080e4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080e6:	4b39      	ldr	r3, [pc, #228]	; (80081cc <USBD_CDC_Init+0x1e8>)
 80080e8:	7819      	ldrb	r1, [r3, #0]
 80080ea:	2340      	movs	r3, #64	; 0x40
 80080ec:	2202      	movs	r2, #2
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f002 fb34 	bl	800a75c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080f4:	4b35      	ldr	r3, [pc, #212]	; (80081cc <USBD_CDC_Init+0x1e8>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	f003 020f 	and.w	r2, r3, #15
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	440b      	add	r3, r1
 8008108:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800810c:	2201      	movs	r2, #1
 800810e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008110:	4b2f      	ldr	r3, [pc, #188]	; (80081d0 <USBD_CDC_Init+0x1ec>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	f003 020f 	and.w	r2, r3, #15
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	440b      	add	r3, r1
 8008124:	3326      	adds	r3, #38	; 0x26
 8008126:	2210      	movs	r2, #16
 8008128:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800812a:	4b29      	ldr	r3, [pc, #164]	; (80081d0 <USBD_CDC_Init+0x1ec>)
 800812c:	7819      	ldrb	r1, [r3, #0]
 800812e:	2308      	movs	r3, #8
 8008130:	2203      	movs	r2, #3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f002 fb12 	bl	800a75c <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008138:	4b25      	ldr	r3, [pc, #148]	; (80081d0 <USBD_CDC_Init+0x1ec>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	f003 020f 	and.w	r2, r3, #15
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	440b      	add	r3, r1
 800814c:	3324      	adds	r3, #36	; 0x24
 800814e:	2201      	movs	r2, #1
 8008150:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	33b0      	adds	r3, #176	; 0xb0
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008184:	2b00      	cmp	r3, #0
 8008186:	d101      	bne.n	800818c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008188:	2302      	movs	r3, #2
 800818a:	e018      	b.n	80081be <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	7c1b      	ldrb	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008194:	4b0d      	ldr	r3, [pc, #52]	; (80081cc <USBD_CDC_Init+0x1e8>)
 8008196:	7819      	ldrb	r1, [r3, #0]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800819e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f002 fc54 	bl	800aa50 <USBD_LL_PrepareReceive>
 80081a8:	e008      	b.n	80081bc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081aa:	4b08      	ldr	r3, [pc, #32]	; (80081cc <USBD_CDC_Init+0x1e8>)
 80081ac:	7819      	ldrb	r1, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081b4:	2340      	movs	r3, #64	; 0x40
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f002 fc4a 	bl	800aa50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20000093 	.word	0x20000093
 80081cc:	20000094 	.word	0x20000094
 80081d0:	20000095 	.word	0x20000095

080081d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80081e0:	4b3a      	ldr	r3, [pc, #232]	; (80082cc <USBD_CDC_DeInit+0xf8>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f002 faf6 	bl	800a7d8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80081ec:	4b37      	ldr	r3, [pc, #220]	; (80082cc <USBD_CDC_DeInit+0xf8>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	f003 020f 	and.w	r2, r3, #15
 80081f4:	6879      	ldr	r1, [r7, #4]
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	440b      	add	r3, r1
 8008200:	3324      	adds	r3, #36	; 0x24
 8008202:	2200      	movs	r2, #0
 8008204:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008206:	4b32      	ldr	r3, [pc, #200]	; (80082d0 <USBD_CDC_DeInit+0xfc>)
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f002 fae3 	bl	800a7d8 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008212:	4b2f      	ldr	r3, [pc, #188]	; (80082d0 <USBD_CDC_DeInit+0xfc>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	f003 020f 	and.w	r2, r3, #15
 800821a:	6879      	ldr	r1, [r7, #4]
 800821c:	4613      	mov	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	440b      	add	r3, r1
 8008226:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800822a:	2200      	movs	r2, #0
 800822c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800822e:	4b29      	ldr	r3, [pc, #164]	; (80082d4 <USBD_CDC_DeInit+0x100>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f002 facf 	bl	800a7d8 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800823a:	4b26      	ldr	r3, [pc, #152]	; (80082d4 <USBD_CDC_DeInit+0x100>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	f003 020f 	and.w	r2, r3, #15
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	440b      	add	r3, r1
 800824e:	3324      	adds	r3, #36	; 0x24
 8008250:	2200      	movs	r2, #0
 8008252:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008254:	4b1f      	ldr	r3, [pc, #124]	; (80082d4 <USBD_CDC_DeInit+0x100>)
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	f003 020f 	and.w	r2, r3, #15
 800825c:	6879      	ldr	r1, [r7, #4]
 800825e:	4613      	mov	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	440b      	add	r3, r1
 8008268:	3326      	adds	r3, #38	; 0x26
 800826a:	2200      	movs	r2, #0
 800826c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	32b0      	adds	r2, #176	; 0xb0
 8008278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d01f      	beq.n	80082c0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	33b0      	adds	r3, #176	; 0xb0
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	32b0      	adds	r2, #176	; 0xb0
 800829e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f002 fc7c 	bl	800aba0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	32b0      	adds	r2, #176	; 0xb0
 80082b2:	2100      	movs	r1, #0
 80082b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000093 	.word	0x20000093
 80082d0:	20000094 	.word	0x20000094
 80082d4:	20000095 	.word	0x20000095

080082d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	32b0      	adds	r2, #176	; 0xb0
 80082ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008304:	2303      	movs	r3, #3
 8008306:	e0bf      	b.n	8008488 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008310:	2b00      	cmp	r3, #0
 8008312:	d050      	beq.n	80083b6 <USBD_CDC_Setup+0xde>
 8008314:	2b20      	cmp	r3, #32
 8008316:	f040 80af 	bne.w	8008478 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	88db      	ldrh	r3, [r3, #6]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d03a      	beq.n	8008398 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	b25b      	sxtb	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	da1b      	bge.n	8008364 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	33b0      	adds	r3, #176	; 0xb0
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	4413      	add	r3, r2
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008342:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	88d2      	ldrh	r2, [r2, #6]
 8008348:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	88db      	ldrh	r3, [r3, #6]
 800834e:	2b07      	cmp	r3, #7
 8008350:	bf28      	it	cs
 8008352:	2307      	movcs	r3, #7
 8008354:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	89fa      	ldrh	r2, [r7, #14]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 fd73 	bl	8009e48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008362:	e090      	b.n	8008486 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	785a      	ldrb	r2, [r3, #1]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	88db      	ldrh	r3, [r3, #6]
 8008372:	2b3f      	cmp	r3, #63	; 0x3f
 8008374:	d803      	bhi.n	800837e <USBD_CDC_Setup+0xa6>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	88db      	ldrh	r3, [r3, #6]
 800837a:	b2da      	uxtb	r2, r3
 800837c:	e000      	b.n	8008380 <USBD_CDC_Setup+0xa8>
 800837e:	2240      	movs	r2, #64	; 0x40
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008386:	6939      	ldr	r1, [r7, #16]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800838e:	461a      	mov	r2, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 fd85 	bl	8009ea0 <USBD_CtlPrepareRx>
      break;
 8008396:	e076      	b.n	8008486 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	33b0      	adds	r3, #176	; 0xb0
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	7850      	ldrb	r0, [r2, #1]
 80083ae:	2200      	movs	r2, #0
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	4798      	blx	r3
      break;
 80083b4:	e067      	b.n	8008486 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	2b0b      	cmp	r3, #11
 80083bc:	d851      	bhi.n	8008462 <USBD_CDC_Setup+0x18a>
 80083be:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <USBD_CDC_Setup+0xec>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	080083f5 	.word	0x080083f5
 80083c8:	08008471 	.word	0x08008471
 80083cc:	08008463 	.word	0x08008463
 80083d0:	08008463 	.word	0x08008463
 80083d4:	08008463 	.word	0x08008463
 80083d8:	08008463 	.word	0x08008463
 80083dc:	08008463 	.word	0x08008463
 80083e0:	08008463 	.word	0x08008463
 80083e4:	08008463 	.word	0x08008463
 80083e8:	08008463 	.word	0x08008463
 80083ec:	0800841f 	.word	0x0800841f
 80083f0:	08008449 	.word	0x08008449
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d107      	bne.n	8008410 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008400:	f107 030a 	add.w	r3, r7, #10
 8008404:	2202      	movs	r2, #2
 8008406:	4619      	mov	r1, r3
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f001 fd1d 	bl	8009e48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800840e:	e032      	b.n	8008476 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f001 fca7 	bl	8009d66 <USBD_CtlError>
            ret = USBD_FAIL;
 8008418:	2303      	movs	r3, #3
 800841a:	75fb      	strb	r3, [r7, #23]
          break;
 800841c:	e02b      	b.n	8008476 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b03      	cmp	r3, #3
 8008428:	d107      	bne.n	800843a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800842a:	f107 030d 	add.w	r3, r7, #13
 800842e:	2201      	movs	r2, #1
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f001 fd08 	bl	8009e48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008438:	e01d      	b.n	8008476 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800843a:	6839      	ldr	r1, [r7, #0]
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 fc92 	bl	8009d66 <USBD_CtlError>
            ret = USBD_FAIL;
 8008442:	2303      	movs	r3, #3
 8008444:	75fb      	strb	r3, [r7, #23]
          break;
 8008446:	e016      	b.n	8008476 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b03      	cmp	r3, #3
 8008452:	d00f      	beq.n	8008474 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 fc85 	bl	8009d66 <USBD_CtlError>
            ret = USBD_FAIL;
 800845c:	2303      	movs	r3, #3
 800845e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008460:	e008      	b.n	8008474 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f001 fc7e 	bl	8009d66 <USBD_CtlError>
          ret = USBD_FAIL;
 800846a:	2303      	movs	r3, #3
 800846c:	75fb      	strb	r3, [r7, #23]
          break;
 800846e:	e002      	b.n	8008476 <USBD_CDC_Setup+0x19e>
          break;
 8008470:	bf00      	nop
 8008472:	e008      	b.n	8008486 <USBD_CDC_Setup+0x1ae>
          break;
 8008474:	bf00      	nop
      }
      break;
 8008476:	e006      	b.n	8008486 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f001 fc73 	bl	8009d66 <USBD_CtlError>
      ret = USBD_FAIL;
 8008480:	2303      	movs	r3, #3
 8008482:	75fb      	strb	r3, [r7, #23]
      break;
 8008484:	bf00      	nop
  }

  return (uint8_t)ret;
 8008486:	7dfb      	ldrb	r3, [r7, #23]
}
 8008488:	4618      	mov	r0, r3
 800848a:	3718      	adds	r7, #24
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	32b0      	adds	r2, #176	; 0xb0
 80084ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e065      	b.n	8008586 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	32b0      	adds	r2, #176	; 0xb0
 80084c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	f003 020f 	and.w	r2, r3, #15
 80084d0:	6879      	ldr	r1, [r7, #4]
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	440b      	add	r3, r1
 80084dc:	3318      	adds	r3, #24
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d02f      	beq.n	8008544 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	f003 020f 	and.w	r2, r3, #15
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	4613      	mov	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	440b      	add	r3, r1
 80084f6:	3318      	adds	r3, #24
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	f003 010f 	and.w	r1, r3, #15
 8008500:	68f8      	ldr	r0, [r7, #12]
 8008502:	460b      	mov	r3, r1
 8008504:	00db      	lsls	r3, r3, #3
 8008506:	440b      	add	r3, r1
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4403      	add	r3, r0
 800850c:	3344      	adds	r3, #68	; 0x44
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	fbb2 f1f3 	udiv	r1, r2, r3
 8008514:	fb01 f303 	mul.w	r3, r1, r3
 8008518:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800851a:	2b00      	cmp	r3, #0
 800851c:	d112      	bne.n	8008544 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800851e:	78fb      	ldrb	r3, [r7, #3]
 8008520:	f003 020f 	and.w	r2, r3, #15
 8008524:	6879      	ldr	r1, [r7, #4]
 8008526:	4613      	mov	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	440b      	add	r3, r1
 8008530:	3318      	adds	r3, #24
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008536:	78f9      	ldrb	r1, [r7, #3]
 8008538:	2300      	movs	r3, #0
 800853a:	2200      	movs	r2, #0
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f002 fa4f 	bl	800a9e0 <USBD_LL_Transmit>
 8008542:	e01f      	b.n	8008584 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2200      	movs	r2, #0
 8008548:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	33b0      	adds	r3, #176	; 0xb0
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	4413      	add	r3, r2
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d010      	beq.n	8008584 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	33b0      	adds	r3, #176	; 0xb0
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008580:	78fa      	ldrb	r2, [r7, #3]
 8008582:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
 8008596:	460b      	mov	r3, r1
 8008598:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	32b0      	adds	r2, #176	; 0xb0
 80085a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	32b0      	adds	r2, #176	; 0xb0
 80085b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80085bc:	2303      	movs	r3, #3
 80085be:	e01a      	b.n	80085f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80085c0:	78fb      	ldrb	r3, [r7, #3]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f002 fa7b 	bl	800aac0 <USBD_LL_GetRxDataSize>
 80085ca:	4602      	mov	r2, r0
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	33b0      	adds	r3, #176	; 0xb0
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80085f0:	4611      	mov	r1, r2
 80085f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	32b0      	adds	r2, #176	; 0xb0
 8008610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008614:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800861c:	2303      	movs	r3, #3
 800861e:	e025      	b.n	800866c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	33b0      	adds	r3, #176	; 0xb0
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4413      	add	r3, r2
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01a      	beq.n	800866a <USBD_CDC_EP0_RxReady+0x6c>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800863a:	2bff      	cmp	r3, #255	; 0xff
 800863c:	d015      	beq.n	800866a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	33b0      	adds	r3, #176	; 0xb0
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4413      	add	r3, r2
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008656:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800865e:	b292      	uxth	r2, r2
 8008660:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	22ff      	movs	r2, #255	; 0xff
 8008666:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800867c:	2182      	movs	r1, #130	; 0x82
 800867e:	4818      	ldr	r0, [pc, #96]	; (80086e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008680:	f000 fd0f 	bl	80090a2 <USBD_GetEpDesc>
 8008684:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008686:	2101      	movs	r1, #1
 8008688:	4815      	ldr	r0, [pc, #84]	; (80086e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800868a:	f000 fd0a 	bl	80090a2 <USBD_GetEpDesc>
 800868e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008690:	2181      	movs	r1, #129	; 0x81
 8008692:	4813      	ldr	r0, [pc, #76]	; (80086e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008694:	f000 fd05 	bl	80090a2 <USBD_GetEpDesc>
 8008698:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2210      	movs	r2, #16
 80086a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d006      	beq.n	80086ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086b4:	711a      	strb	r2, [r3, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d006      	beq.n	80086ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086c8:	711a      	strb	r2, [r3, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2243      	movs	r2, #67	; 0x43
 80086d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80086d4:	4b02      	ldr	r3, [pc, #8]	; (80086e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3718      	adds	r7, #24
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	20000050 	.word	0x20000050

080086e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086ec:	2182      	movs	r1, #130	; 0x82
 80086ee:	4818      	ldr	r0, [pc, #96]	; (8008750 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80086f0:	f000 fcd7 	bl	80090a2 <USBD_GetEpDesc>
 80086f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086f6:	2101      	movs	r1, #1
 80086f8:	4815      	ldr	r0, [pc, #84]	; (8008750 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80086fa:	f000 fcd2 	bl	80090a2 <USBD_GetEpDesc>
 80086fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008700:	2181      	movs	r1, #129	; 0x81
 8008702:	4813      	ldr	r0, [pc, #76]	; (8008750 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008704:	f000 fccd 	bl	80090a2 <USBD_GetEpDesc>
 8008708:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	2210      	movs	r2, #16
 8008714:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d006      	beq.n	800872a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	2200      	movs	r2, #0
 8008720:	711a      	strb	r2, [r3, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f042 0202 	orr.w	r2, r2, #2
 8008728:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d006      	beq.n	800873e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	711a      	strb	r2, [r3, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f042 0202 	orr.w	r2, r2, #2
 800873c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2243      	movs	r2, #67	; 0x43
 8008742:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008744:	4b02      	ldr	r3, [pc, #8]	; (8008750 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20000050 	.word	0x20000050

08008754 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800875c:	2182      	movs	r1, #130	; 0x82
 800875e:	4818      	ldr	r0, [pc, #96]	; (80087c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008760:	f000 fc9f 	bl	80090a2 <USBD_GetEpDesc>
 8008764:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008766:	2101      	movs	r1, #1
 8008768:	4815      	ldr	r0, [pc, #84]	; (80087c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800876a:	f000 fc9a 	bl	80090a2 <USBD_GetEpDesc>
 800876e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008770:	2181      	movs	r1, #129	; 0x81
 8008772:	4813      	ldr	r0, [pc, #76]	; (80087c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008774:	f000 fc95 	bl	80090a2 <USBD_GetEpDesc>
 8008778:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	2210      	movs	r2, #16
 8008784:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d006      	beq.n	800879a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	2200      	movs	r2, #0
 8008790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008794:	711a      	strb	r2, [r3, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d006      	beq.n	80087ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087a8:	711a      	strb	r2, [r3, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2243      	movs	r2, #67	; 0x43
 80087b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80087b4:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	20000050 	.word	0x20000050

080087c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	220a      	movs	r2, #10
 80087d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80087d2:	4b03      	ldr	r3, [pc, #12]	; (80087e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	2000000c 	.word	0x2000000c

080087e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e009      	b.n	800880c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	33b0      	adds	r3, #176	; 0xb0
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	4413      	add	r3, r2
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	32b0      	adds	r2, #176	; 0xb0
 800882e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008832:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800883a:	2303      	movs	r3, #3
 800883c:	e008      	b.n	8008850 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	371c      	adds	r7, #28
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	32b0      	adds	r2, #176	; 0xb0
 8008870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008874:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800887c:	2303      	movs	r3, #3
 800887e:	e004      	b.n	800888a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
	...

08008898 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	32b0      	adds	r2, #176	; 0xb0
 80088aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	32b0      	adds	r2, #176	; 0xb0
 80088ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e018      	b.n	80088f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	7c1b      	ldrb	r3, [r3, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10a      	bne.n	80088e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088ce:	4b0c      	ldr	r3, [pc, #48]	; (8008900 <USBD_CDC_ReceivePacket+0x68>)
 80088d0:	7819      	ldrb	r1, [r3, #0]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f002 f8b7 	bl	800aa50 <USBD_LL_PrepareReceive>
 80088e2:	e008      	b.n	80088f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088e4:	4b06      	ldr	r3, [pc, #24]	; (8008900 <USBD_CDC_ReceivePacket+0x68>)
 80088e6:	7819      	ldrb	r1, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088ee:	2340      	movs	r3, #64	; 0x40
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f002 f8ad 	bl	800aa50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	20000094 	.word	0x20000094

08008904 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d101      	bne.n	800891c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008918:	2303      	movs	r3, #3
 800891a:	e01f      	b.n	800895c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	79fa      	ldrb	r2, [r7, #7]
 800894e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f001 fe85 	bl	800a660 <USBD_LL_Init>
 8008956:	4603      	mov	r3, r0
 8008958:	75fb      	strb	r3, [r7, #23]

  return ret;
 800895a:	7dfb      	ldrb	r3, [r7, #23]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800896e:	2300      	movs	r3, #0
 8008970:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008978:	2303      	movs	r3, #3
 800897a:	e025      	b.n	80089c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	32ae      	adds	r2, #174	; 0xae
 800898e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00f      	beq.n	80089b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	32ae      	adds	r2, #174	; 0xae
 80089a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	f107 020e 	add.w	r2, r7, #14
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	4602      	mov	r2, r0
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80089be:	1c5a      	adds	r2, r3, #1
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 fe8d 	bl	800a6f8 <USBD_LL_Start>
 80089de:	4603      	mov	r3, r0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3708      	adds	r7, #8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d009      	beq.n	8008a2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	78fa      	ldrb	r2, [r7, #3]
 8008a22:	4611      	mov	r1, r2
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	4798      	blx	r3
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	4611      	mov	r1, r2
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	4798      	blx	r3
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}

08008a6a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f001 f938 	bl	8009cf2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a90:	461a      	mov	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a9e:	f003 031f 	and.w	r3, r3, #31
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d01a      	beq.n	8008adc <USBD_LL_SetupStage+0x72>
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d822      	bhi.n	8008af0 <USBD_LL_SetupStage+0x86>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d002      	beq.n	8008ab4 <USBD_LL_SetupStage+0x4a>
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d00a      	beq.n	8008ac8 <USBD_LL_SetupStage+0x5e>
 8008ab2:	e01d      	b.n	8008af0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fb65 	bl	800918c <USBD_StdDevReq>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac6:	e020      	b.n	8008b0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fbcd 	bl	8009270 <USBD_StdItfReq>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8008ada:	e016      	b.n	8008b0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fc2f 	bl	8009348 <USBD_StdEPReq>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]
      break;
 8008aee:	e00c      	b.n	8008b0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008af6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fea0 	bl	800a844 <USBD_LL_StallEP>
 8008b04:	4603      	mov	r3, r0
 8008b06:	73fb      	strb	r3, [r7, #15]
      break;
 8008b08:	bf00      	nop
  }

  return ret;
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b086      	sub	sp, #24
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b26:	7afb      	ldrb	r3, [r7, #11]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d16e      	bne.n	8008c0a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008b32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	f040 8098 	bne.w	8008c70 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d913      	bls.n	8008b74 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	1ad2      	subs	r2, r2, r3
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	4293      	cmp	r3, r2
 8008b64:	bf28      	it	cs
 8008b66:	4613      	movcs	r3, r2
 8008b68:	461a      	mov	r2, r3
 8008b6a:	6879      	ldr	r1, [r7, #4]
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f001 f9b4 	bl	8009eda <USBD_CtlContinueRx>
 8008b72:	e07d      	b.n	8008c70 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b7a:	f003 031f 	and.w	r3, r3, #31
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d014      	beq.n	8008bac <USBD_LL_DataOutStage+0x98>
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d81d      	bhi.n	8008bc2 <USBD_LL_DataOutStage+0xae>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <USBD_LL_DataOutStage+0x7c>
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d003      	beq.n	8008b96 <USBD_LL_DataOutStage+0x82>
 8008b8e:	e018      	b.n	8008bc2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b90:	2300      	movs	r3, #0
 8008b92:	75bb      	strb	r3, [r7, #22]
            break;
 8008b94:	e018      	b.n	8008bc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 fa64 	bl	800906e <USBD_CoreFindIF>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	75bb      	strb	r3, [r7, #22]
            break;
 8008baa:	e00d      	b.n	8008bc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 fa66 	bl	8009088 <USBD_CoreFindEP>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	75bb      	strb	r3, [r7, #22]
            break;
 8008bc0:	e002      	b.n	8008bc8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	75bb      	strb	r3, [r7, #22]
            break;
 8008bc6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008bc8:	7dbb      	ldrb	r3, [r7, #22]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d119      	bne.n	8008c02 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d113      	bne.n	8008c02 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008bda:	7dba      	ldrb	r2, [r7, #22]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	32ae      	adds	r2, #174	; 0xae
 8008be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00b      	beq.n	8008c02 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008bea:	7dba      	ldrb	r2, [r7, #22]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008bf2:	7dba      	ldrb	r2, [r7, #22]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	32ae      	adds	r2, #174	; 0xae
 8008bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f001 f97a 	bl	8009efc <USBD_CtlSendStatus>
 8008c08:	e032      	b.n	8008c70 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008c0a:	7afb      	ldrb	r3, [r7, #11]
 8008c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	4619      	mov	r1, r3
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 fa37 	bl	8009088 <USBD_CoreFindEP>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c1e:	7dbb      	ldrb	r3, [r7, #22]
 8008c20:	2bff      	cmp	r3, #255	; 0xff
 8008c22:	d025      	beq.n	8008c70 <USBD_LL_DataOutStage+0x15c>
 8008c24:	7dbb      	ldrb	r3, [r7, #22]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d122      	bne.n	8008c70 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d117      	bne.n	8008c66 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c36:	7dba      	ldrb	r2, [r7, #22]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	32ae      	adds	r2, #174	; 0xae
 8008c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00f      	beq.n	8008c66 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c46:	7dba      	ldrb	r2, [r7, #22]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c4e:	7dba      	ldrb	r2, [r7, #22]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	32ae      	adds	r2, #174	; 0xae
 8008c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	7afa      	ldrb	r2, [r7, #11]
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	4798      	blx	r3
 8008c62:	4603      	mov	r3, r0
 8008c64:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d001      	beq.n	8008c70 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	e000      	b.n	8008c72 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b086      	sub	sp, #24
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	60f8      	str	r0, [r7, #12]
 8008c82:	460b      	mov	r3, r1
 8008c84:	607a      	str	r2, [r7, #4]
 8008c86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c88:	7afb      	ldrb	r3, [r7, #11]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d16f      	bne.n	8008d6e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3314      	adds	r3, #20
 8008c92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d15a      	bne.n	8008d54 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	689a      	ldr	r2, [r3, #8]
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d914      	bls.n	8008cd4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	689a      	ldr	r2, [r3, #8]
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	1ad2      	subs	r2, r2, r3
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f001 f8dc 	bl	8009e7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	2200      	movs	r2, #0
 8008cca:	2100      	movs	r1, #0
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f001 febf 	bl	800aa50 <USBD_LL_PrepareReceive>
 8008cd2:	e03f      	b.n	8008d54 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	68da      	ldr	r2, [r3, #12]
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d11c      	bne.n	8008d1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d316      	bcc.n	8008d1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d20f      	bcs.n	8008d1a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	68f8      	ldr	r0, [r7, #12]
 8008d00:	f001 f8bd 	bl	8009e7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	2200      	movs	r2, #0
 8008d10:	2100      	movs	r1, #0
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f001 fe9c 	bl	800aa50 <USBD_LL_PrepareReceive>
 8008d18:	e01c      	b.n	8008d54 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d10f      	bne.n	8008d46 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d009      	beq.n	8008d46 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d46:	2180      	movs	r1, #128	; 0x80
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f001 fd7b 	bl	800a844 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f001 f8e7 	bl	8009f22 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d03a      	beq.n	8008dd4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f7ff fe42 	bl	80089e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008d6c:	e032      	b.n	8008dd4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008d6e:	7afb      	ldrb	r3, [r7, #11]
 8008d70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	4619      	mov	r1, r3
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f000 f985 	bl	8009088 <USBD_CoreFindEP>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
 8008d84:	2bff      	cmp	r3, #255	; 0xff
 8008d86:	d025      	beq.n	8008dd4 <USBD_LL_DataInStage+0x15a>
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d122      	bne.n	8008dd4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	d11c      	bne.n	8008dd4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d9a:	7dfa      	ldrb	r2, [r7, #23]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	32ae      	adds	r2, #174	; 0xae
 8008da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d014      	beq.n	8008dd4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008daa:	7dfa      	ldrb	r2, [r7, #23]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008db2:	7dfa      	ldrb	r2, [r7, #23]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	32ae      	adds	r2, #174	; 0xae
 8008db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	7afa      	ldrb	r2, [r7, #11]
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	4798      	blx	r3
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008dca:	7dbb      	ldrb	r3, [r7, #22]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008dd0:	7dbb      	ldrb	r3, [r7, #22]
 8008dd2:	e000      	b.n	8008dd6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d014      	beq.n	8008e44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00e      	beq.n	8008e44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	6852      	ldr	r2, [r2, #4]
 8008e32:	b2d2      	uxtb	r2, r2
 8008e34:	4611      	mov	r1, r2
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	4798      	blx	r3
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e40:	2303      	movs	r3, #3
 8008e42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e44:	2340      	movs	r3, #64	; 0x40
 8008e46:	2200      	movs	r2, #0
 8008e48:	2100      	movs	r1, #0
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f001 fc86 	bl	800a75c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2240      	movs	r2, #64	; 0x40
 8008e5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e60:	2340      	movs	r3, #64	; 0x40
 8008e62:	2200      	movs	r2, #0
 8008e64:	2180      	movs	r1, #128	; 0x80
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f001 fc78 	bl	800a75c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2240      	movs	r2, #64	; 0x40
 8008e76:	621a      	str	r2, [r3, #32]

  return ret;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	78fa      	ldrb	r2, [r7, #3]
 8008e92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b083      	sub	sp, #12
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b04      	cmp	r3, #4
 8008eb4:	d006      	beq.n	8008ec4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2204      	movs	r2, #4
 8008ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ecc:	2300      	movs	r3, #0
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b04      	cmp	r3, #4
 8008eec:	d106      	bne.n	8008efc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d110      	bne.n	8008f40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00b      	beq.n	8008f40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d005      	beq.n	8008f40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f3a:	69db      	ldr	r3, [r3, #28]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	460b      	mov	r3, r1
 8008f54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	32ae      	adds	r2, #174	; 0xae
 8008f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e01c      	b.n	8008fa6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d115      	bne.n	8008fa4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	32ae      	adds	r2, #174	; 0xae
 8008f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	32ae      	adds	r2, #174	; 0xae
 8008f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	78fa      	ldrb	r2, [r7, #3]
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b082      	sub	sp, #8
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	32ae      	adds	r2, #174	; 0xae
 8008fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e01c      	b.n	800900a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d115      	bne.n	8009008 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	32ae      	adds	r2, #174	; 0xae
 8008fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00b      	beq.n	8009008 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	32ae      	adds	r2, #174	; 0xae
 8008ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	78fa      	ldrb	r2, [r7, #3]
 8009002:	4611      	mov	r1, r2
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00e      	beq.n	8009064 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	6852      	ldr	r2, [r2, #4]
 8009052:	b2d2      	uxtb	r2, r2
 8009054:	4611      	mov	r1, r2
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	4798      	blx	r3
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009060:	2303      	movs	r3, #3
 8009062:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009064:	7bfb      	ldrb	r3, [r7, #15]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	460b      	mov	r3, r1
 8009078:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800907a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009094:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009096:	4618      	mov	r0, r3
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b086      	sub	sp, #24
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	460b      	mov	r3, r1
 80090ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	885b      	ldrh	r3, [r3, #2]
 80090be:	b29a      	uxth	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d920      	bls.n	800910c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80090d2:	e013      	b.n	80090fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80090d4:	f107 030a 	add.w	r3, r7, #10
 80090d8:	4619      	mov	r1, r3
 80090da:	6978      	ldr	r0, [r7, #20]
 80090dc:	f000 f81b 	bl	8009116 <USBD_GetNextDesc>
 80090e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	785b      	ldrb	r3, [r3, #1]
 80090e6:	2b05      	cmp	r3, #5
 80090e8:	d108      	bne.n	80090fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	789b      	ldrb	r3, [r3, #2]
 80090f2:	78fa      	ldrb	r2, [r7, #3]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d008      	beq.n	800910a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80090f8:	2300      	movs	r3, #0
 80090fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	885b      	ldrh	r3, [r3, #2]
 8009100:	b29a      	uxth	r2, r3
 8009102:	897b      	ldrh	r3, [r7, #10]
 8009104:	429a      	cmp	r2, r3
 8009106:	d8e5      	bhi.n	80090d4 <USBD_GetEpDesc+0x32>
 8009108:	e000      	b.n	800910c <USBD_GetEpDesc+0x6a>
          break;
 800910a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800910c:	693b      	ldr	r3, [r7, #16]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}

08009116 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	881a      	ldrh	r2, [r3, #0]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	b29b      	uxth	r3, r3
 800912e:	4413      	add	r3, r2
 8009130:	b29a      	uxth	r2, r3
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4413      	add	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009142:	68fb      	ldr	r3, [r7, #12]
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	3301      	adds	r3, #1
 8009166:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800916e:	8a3b      	ldrh	r3, [r7, #16]
 8009170:	021b      	lsls	r3, r3, #8
 8009172:	b21a      	sxth	r2, r3
 8009174:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009178:	4313      	orrs	r3, r2
 800917a:	b21b      	sxth	r3, r3
 800917c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800917e:	89fb      	ldrh	r3, [r7, #14]
}
 8009180:	4618      	mov	r0, r3
 8009182:	371c      	adds	r7, #28
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009196:	2300      	movs	r3, #0
 8009198:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091a2:	2b40      	cmp	r3, #64	; 0x40
 80091a4:	d005      	beq.n	80091b2 <USBD_StdDevReq+0x26>
 80091a6:	2b40      	cmp	r3, #64	; 0x40
 80091a8:	d857      	bhi.n	800925a <USBD_StdDevReq+0xce>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00f      	beq.n	80091ce <USBD_StdDevReq+0x42>
 80091ae:	2b20      	cmp	r3, #32
 80091b0:	d153      	bne.n	800925a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	32ae      	adds	r2, #174	; 0xae
 80091bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	4798      	blx	r3
 80091c8:	4603      	mov	r3, r0
 80091ca:	73fb      	strb	r3, [r7, #15]
      break;
 80091cc:	e04a      	b.n	8009264 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	785b      	ldrb	r3, [r3, #1]
 80091d2:	2b09      	cmp	r3, #9
 80091d4:	d83b      	bhi.n	800924e <USBD_StdDevReq+0xc2>
 80091d6:	a201      	add	r2, pc, #4	; (adr r2, 80091dc <USBD_StdDevReq+0x50>)
 80091d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091dc:	08009231 	.word	0x08009231
 80091e0:	08009245 	.word	0x08009245
 80091e4:	0800924f 	.word	0x0800924f
 80091e8:	0800923b 	.word	0x0800923b
 80091ec:	0800924f 	.word	0x0800924f
 80091f0:	0800920f 	.word	0x0800920f
 80091f4:	08009205 	.word	0x08009205
 80091f8:	0800924f 	.word	0x0800924f
 80091fc:	08009227 	.word	0x08009227
 8009200:	08009219 	.word	0x08009219
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fa3c 	bl	8009684 <USBD_GetDescriptor>
          break;
 800920c:	e024      	b.n	8009258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 fbcb 	bl	80099ac <USBD_SetAddress>
          break;
 8009216:	e01f      	b.n	8009258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fc0a 	bl	8009a34 <USBD_SetConfig>
 8009220:	4603      	mov	r3, r0
 8009222:	73fb      	strb	r3, [r7, #15]
          break;
 8009224:	e018      	b.n	8009258 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fcad 	bl	8009b88 <USBD_GetConfig>
          break;
 800922e:	e013      	b.n	8009258 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fcde 	bl	8009bf4 <USBD_GetStatus>
          break;
 8009238:	e00e      	b.n	8009258 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fd0d 	bl	8009c5c <USBD_SetFeature>
          break;
 8009242:	e009      	b.n	8009258 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009244:	6839      	ldr	r1, [r7, #0]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fd31 	bl	8009cae <USBD_ClrFeature>
          break;
 800924c:	e004      	b.n	8009258 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 fd88 	bl	8009d66 <USBD_CtlError>
          break;
 8009256:	bf00      	nop
      }
      break;
 8009258:	e004      	b.n	8009264 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fd82 	bl	8009d66 <USBD_CtlError>
      break;
 8009262:	bf00      	nop
  }

  return ret;
 8009264:	7bfb      	ldrb	r3, [r7, #15]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3710      	adds	r7, #16
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop

08009270 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009286:	2b40      	cmp	r3, #64	; 0x40
 8009288:	d005      	beq.n	8009296 <USBD_StdItfReq+0x26>
 800928a:	2b40      	cmp	r3, #64	; 0x40
 800928c:	d852      	bhi.n	8009334 <USBD_StdItfReq+0xc4>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <USBD_StdItfReq+0x26>
 8009292:	2b20      	cmp	r3, #32
 8009294:	d14e      	bne.n	8009334 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800929c:	b2db      	uxtb	r3, r3
 800929e:	3b01      	subs	r3, #1
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d840      	bhi.n	8009326 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	889b      	ldrh	r3, [r3, #4]
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d836      	bhi.n	800931c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	889b      	ldrh	r3, [r3, #4]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff fed9 	bl	800906e <USBD_CoreFindIF>
 80092bc:	4603      	mov	r3, r0
 80092be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092c0:	7bbb      	ldrb	r3, [r7, #14]
 80092c2:	2bff      	cmp	r3, #255	; 0xff
 80092c4:	d01d      	beq.n	8009302 <USBD_StdItfReq+0x92>
 80092c6:	7bbb      	ldrb	r3, [r7, #14]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d11a      	bne.n	8009302 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80092cc:	7bba      	ldrb	r2, [r7, #14]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	32ae      	adds	r2, #174	; 0xae
 80092d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00f      	beq.n	80092fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80092dc:	7bba      	ldrb	r2, [r7, #14]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80092e4:	7bba      	ldrb	r2, [r7, #14]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	32ae      	adds	r2, #174	; 0xae
 80092ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	4798      	blx	r3
 80092f6:	4603      	mov	r3, r0
 80092f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80092fa:	e004      	b.n	8009306 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80092fc:	2303      	movs	r3, #3
 80092fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009300:	e001      	b.n	8009306 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009302:	2303      	movs	r3, #3
 8009304:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	88db      	ldrh	r3, [r3, #6]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d110      	bne.n	8009330 <USBD_StdItfReq+0xc0>
 800930e:	7bfb      	ldrb	r3, [r7, #15]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10d      	bne.n	8009330 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fdf1 	bl	8009efc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800931a:	e009      	b.n	8009330 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fd21 	bl	8009d66 <USBD_CtlError>
          break;
 8009324:	e004      	b.n	8009330 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fd1c 	bl	8009d66 <USBD_CtlError>
          break;
 800932e:	e000      	b.n	8009332 <USBD_StdItfReq+0xc2>
          break;
 8009330:	bf00      	nop
      }
      break;
 8009332:	e004      	b.n	800933e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fd15 	bl	8009d66 <USBD_CtlError>
      break;
 800933c:	bf00      	nop
  }

  return ret;
 800933e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	889b      	ldrh	r3, [r3, #4]
 800935a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009364:	2b40      	cmp	r3, #64	; 0x40
 8009366:	d007      	beq.n	8009378 <USBD_StdEPReq+0x30>
 8009368:	2b40      	cmp	r3, #64	; 0x40
 800936a:	f200 817f 	bhi.w	800966c <USBD_StdEPReq+0x324>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d02a      	beq.n	80093c8 <USBD_StdEPReq+0x80>
 8009372:	2b20      	cmp	r3, #32
 8009374:	f040 817a 	bne.w	800966c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f7ff fe83 	bl	8009088 <USBD_CoreFindEP>
 8009382:	4603      	mov	r3, r0
 8009384:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009386:	7b7b      	ldrb	r3, [r7, #13]
 8009388:	2bff      	cmp	r3, #255	; 0xff
 800938a:	f000 8174 	beq.w	8009676 <USBD_StdEPReq+0x32e>
 800938e:	7b7b      	ldrb	r3, [r7, #13]
 8009390:	2b00      	cmp	r3, #0
 8009392:	f040 8170 	bne.w	8009676 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009396:	7b7a      	ldrb	r2, [r7, #13]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800939e:	7b7a      	ldrb	r2, [r7, #13]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	32ae      	adds	r2, #174	; 0xae
 80093a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 8163 	beq.w	8009676 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80093b0:	7b7a      	ldrb	r2, [r7, #13]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	32ae      	adds	r2, #174	; 0xae
 80093b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
 80093c2:	4603      	mov	r3, r0
 80093c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80093c6:	e156      	b.n	8009676 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	785b      	ldrb	r3, [r3, #1]
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d008      	beq.n	80093e2 <USBD_StdEPReq+0x9a>
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	f300 8145 	bgt.w	8009660 <USBD_StdEPReq+0x318>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f000 809b 	beq.w	8009512 <USBD_StdEPReq+0x1ca>
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d03c      	beq.n	800945a <USBD_StdEPReq+0x112>
 80093e0:	e13e      	b.n	8009660 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b02      	cmp	r3, #2
 80093ec:	d002      	beq.n	80093f4 <USBD_StdEPReq+0xac>
 80093ee:	2b03      	cmp	r3, #3
 80093f0:	d016      	beq.n	8009420 <USBD_StdEPReq+0xd8>
 80093f2:	e02c      	b.n	800944e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093f4:	7bbb      	ldrb	r3, [r7, #14]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00d      	beq.n	8009416 <USBD_StdEPReq+0xce>
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	2b80      	cmp	r3, #128	; 0x80
 80093fe:	d00a      	beq.n	8009416 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 fa1d 	bl	800a844 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800940a:	2180      	movs	r1, #128	; 0x80
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 fa19 	bl	800a844 <USBD_LL_StallEP>
 8009412:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009414:	e020      	b.n	8009458 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fca4 	bl	8009d66 <USBD_CtlError>
              break;
 800941e:	e01b      	b.n	8009458 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	885b      	ldrh	r3, [r3, #2]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10e      	bne.n	8009446 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009428:	7bbb      	ldrb	r3, [r7, #14]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00b      	beq.n	8009446 <USBD_StdEPReq+0xfe>
 800942e:	7bbb      	ldrb	r3, [r7, #14]
 8009430:	2b80      	cmp	r3, #128	; 0x80
 8009432:	d008      	beq.n	8009446 <USBD_StdEPReq+0xfe>
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	88db      	ldrh	r3, [r3, #6]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d104      	bne.n	8009446 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800943c:	7bbb      	ldrb	r3, [r7, #14]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f001 f9ff 	bl	800a844 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fd58 	bl	8009efc <USBD_CtlSendStatus>

              break;
 800944c:	e004      	b.n	8009458 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 fc88 	bl	8009d66 <USBD_CtlError>
              break;
 8009456:	bf00      	nop
          }
          break;
 8009458:	e107      	b.n	800966a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b02      	cmp	r3, #2
 8009464:	d002      	beq.n	800946c <USBD_StdEPReq+0x124>
 8009466:	2b03      	cmp	r3, #3
 8009468:	d016      	beq.n	8009498 <USBD_StdEPReq+0x150>
 800946a:	e04b      	b.n	8009504 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00d      	beq.n	800948e <USBD_StdEPReq+0x146>
 8009472:	7bbb      	ldrb	r3, [r7, #14]
 8009474:	2b80      	cmp	r3, #128	; 0x80
 8009476:	d00a      	beq.n	800948e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009478:	7bbb      	ldrb	r3, [r7, #14]
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f001 f9e1 	bl	800a844 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009482:	2180      	movs	r1, #128	; 0x80
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f001 f9dd 	bl	800a844 <USBD_LL_StallEP>
 800948a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800948c:	e040      	b.n	8009510 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fc68 	bl	8009d66 <USBD_CtlError>
              break;
 8009496:	e03b      	b.n	8009510 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	885b      	ldrh	r3, [r3, #2]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d136      	bne.n	800950e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
 80094a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d004      	beq.n	80094b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094aa:	7bbb      	ldrb	r3, [r7, #14]
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f001 f9fe 	bl	800a8b0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 fd21 	bl	8009efc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7ff fde2 	bl	8009088 <USBD_CoreFindEP>
 80094c4:	4603      	mov	r3, r0
 80094c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094c8:	7b7b      	ldrb	r3, [r7, #13]
 80094ca:	2bff      	cmp	r3, #255	; 0xff
 80094cc:	d01f      	beq.n	800950e <USBD_StdEPReq+0x1c6>
 80094ce:	7b7b      	ldrb	r3, [r7, #13]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d11c      	bne.n	800950e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80094d4:	7b7a      	ldrb	r2, [r7, #13]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80094dc:	7b7a      	ldrb	r2, [r7, #13]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	32ae      	adds	r2, #174	; 0xae
 80094e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d010      	beq.n	800950e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094ec:	7b7a      	ldrb	r2, [r7, #13]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	32ae      	adds	r2, #174	; 0xae
 80094f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	4798      	blx	r3
 80094fe:	4603      	mov	r3, r0
 8009500:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009502:	e004      	b.n	800950e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fc2d 	bl	8009d66 <USBD_CtlError>
              break;
 800950c:	e000      	b.n	8009510 <USBD_StdEPReq+0x1c8>
              break;
 800950e:	bf00      	nop
          }
          break;
 8009510:	e0ab      	b.n	800966a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b02      	cmp	r3, #2
 800951c:	d002      	beq.n	8009524 <USBD_StdEPReq+0x1dc>
 800951e:	2b03      	cmp	r3, #3
 8009520:	d032      	beq.n	8009588 <USBD_StdEPReq+0x240>
 8009522:	e097      	b.n	8009654 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009524:	7bbb      	ldrb	r3, [r7, #14]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d007      	beq.n	800953a <USBD_StdEPReq+0x1f2>
 800952a:	7bbb      	ldrb	r3, [r7, #14]
 800952c:	2b80      	cmp	r3, #128	; 0x80
 800952e:	d004      	beq.n	800953a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fc17 	bl	8009d66 <USBD_CtlError>
                break;
 8009538:	e091      	b.n	800965e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800953a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800953e:	2b00      	cmp	r3, #0
 8009540:	da0b      	bge.n	800955a <USBD_StdEPReq+0x212>
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	3310      	adds	r3, #16
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	4413      	add	r3, r2
 8009556:	3304      	adds	r3, #4
 8009558:	e00b      	b.n	8009572 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	4413      	add	r3, r2
 8009570:	3304      	adds	r3, #4
 8009572:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2200      	movs	r2, #0
 8009578:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2202      	movs	r2, #2
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fc61 	bl	8009e48 <USBD_CtlSendData>
              break;
 8009586:	e06a      	b.n	800965e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009588:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800958c:	2b00      	cmp	r3, #0
 800958e:	da11      	bge.n	80095b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	f003 020f 	and.w	r2, r3, #15
 8009596:	6879      	ldr	r1, [r7, #4]
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	440b      	add	r3, r1
 80095a2:	3324      	adds	r3, #36	; 0x24
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d117      	bne.n	80095da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fbda 	bl	8009d66 <USBD_CtlError>
                  break;
 80095b2:	e054      	b.n	800965e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	f003 020f 	and.w	r2, r3, #15
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	4613      	mov	r3, r2
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	440b      	add	r3, r1
 80095c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d104      	bne.n	80095da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095d0:	6839      	ldr	r1, [r7, #0]
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fbc7 	bl	8009d66 <USBD_CtlError>
                  break;
 80095d8:	e041      	b.n	800965e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da0b      	bge.n	80095fa <USBD_StdEPReq+0x2b2>
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
 80095e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095e8:	4613      	mov	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	3310      	adds	r3, #16
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	4413      	add	r3, r2
 80095f6:	3304      	adds	r3, #4
 80095f8:	e00b      	b.n	8009612 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
 80095fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009600:	4613      	mov	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	4413      	add	r3, r2
 8009610:	3304      	adds	r3, #4
 8009612:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <USBD_StdEPReq+0x2d8>
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	2b80      	cmp	r3, #128	; 0x80
 800961e:	d103      	bne.n	8009628 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	e00e      	b.n	8009646 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009628:	7bbb      	ldrb	r3, [r7, #14]
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f001 f975 	bl	800a91c <USBD_LL_IsStallEP>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	e002      	b.n	8009646 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2202      	movs	r2, #2
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fbfb 	bl	8009e48 <USBD_CtlSendData>
              break;
 8009652:	e004      	b.n	800965e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fb85 	bl	8009d66 <USBD_CtlError>
              break;
 800965c:	bf00      	nop
          }
          break;
 800965e:	e004      	b.n	800966a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fb7f 	bl	8009d66 <USBD_CtlError>
          break;
 8009668:	bf00      	nop
      }
      break;
 800966a:	e005      	b.n	8009678 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800966c:	6839      	ldr	r1, [r7, #0]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fb79 	bl	8009d66 <USBD_CtlError>
      break;
 8009674:	e000      	b.n	8009678 <USBD_StdEPReq+0x330>
      break;
 8009676:	bf00      	nop
  }

  return ret;
 8009678:	7bfb      	ldrb	r3, [r7, #15]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800968e:	2300      	movs	r3, #0
 8009690:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009696:	2300      	movs	r3, #0
 8009698:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	885b      	ldrh	r3, [r3, #2]
 800969e:	0a1b      	lsrs	r3, r3, #8
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	3b01      	subs	r3, #1
 80096a4:	2b0e      	cmp	r3, #14
 80096a6:	f200 8152 	bhi.w	800994e <USBD_GetDescriptor+0x2ca>
 80096aa:	a201      	add	r2, pc, #4	; (adr r2, 80096b0 <USBD_GetDescriptor+0x2c>)
 80096ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b0:	08009721 	.word	0x08009721
 80096b4:	08009739 	.word	0x08009739
 80096b8:	08009779 	.word	0x08009779
 80096bc:	0800994f 	.word	0x0800994f
 80096c0:	0800994f 	.word	0x0800994f
 80096c4:	080098ef 	.word	0x080098ef
 80096c8:	0800991b 	.word	0x0800991b
 80096cc:	0800994f 	.word	0x0800994f
 80096d0:	0800994f 	.word	0x0800994f
 80096d4:	0800994f 	.word	0x0800994f
 80096d8:	0800994f 	.word	0x0800994f
 80096dc:	0800994f 	.word	0x0800994f
 80096e0:	0800994f 	.word	0x0800994f
 80096e4:	0800994f 	.word	0x0800994f
 80096e8:	080096ed 	.word	0x080096ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096f2:	69db      	ldr	r3, [r3, #28]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00b      	beq.n	8009710 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fe:	69db      	ldr	r3, [r3, #28]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	7c12      	ldrb	r2, [r2, #16]
 8009704:	f107 0108 	add.w	r1, r7, #8
 8009708:	4610      	mov	r0, r2
 800970a:	4798      	blx	r3
 800970c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800970e:	e126      	b.n	800995e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fb27 	bl	8009d66 <USBD_CtlError>
        err++;
 8009718:	7afb      	ldrb	r3, [r7, #11]
 800971a:	3301      	adds	r3, #1
 800971c:	72fb      	strb	r3, [r7, #11]
      break;
 800971e:	e11e      	b.n	800995e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	7c12      	ldrb	r2, [r2, #16]
 800972c:	f107 0108 	add.w	r1, r7, #8
 8009730:	4610      	mov	r0, r2
 8009732:	4798      	blx	r3
 8009734:	60f8      	str	r0, [r7, #12]
      break;
 8009736:	e112      	b.n	800995e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	7c1b      	ldrb	r3, [r3, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10d      	bne.n	800975c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009748:	f107 0208 	add.w	r2, r7, #8
 800974c:	4610      	mov	r0, r2
 800974e:	4798      	blx	r3
 8009750:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	3301      	adds	r3, #1
 8009756:	2202      	movs	r2, #2
 8009758:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800975a:	e100      	b.n	800995e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009764:	f107 0208 	add.w	r2, r7, #8
 8009768:	4610      	mov	r0, r2
 800976a:	4798      	blx	r3
 800976c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3301      	adds	r3, #1
 8009772:	2202      	movs	r2, #2
 8009774:	701a      	strb	r2, [r3, #0]
      break;
 8009776:	e0f2      	b.n	800995e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	885b      	ldrh	r3, [r3, #2]
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b05      	cmp	r3, #5
 8009780:	f200 80ac 	bhi.w	80098dc <USBD_GetDescriptor+0x258>
 8009784:	a201      	add	r2, pc, #4	; (adr r2, 800978c <USBD_GetDescriptor+0x108>)
 8009786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800978a:	bf00      	nop
 800978c:	080097a5 	.word	0x080097a5
 8009790:	080097d9 	.word	0x080097d9
 8009794:	0800980d 	.word	0x0800980d
 8009798:	08009841 	.word	0x08009841
 800979c:	08009875 	.word	0x08009875
 80097a0:	080098a9 	.word	0x080098a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00b      	beq.n	80097c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	7c12      	ldrb	r2, [r2, #16]
 80097bc:	f107 0108 	add.w	r1, r7, #8
 80097c0:	4610      	mov	r0, r2
 80097c2:	4798      	blx	r3
 80097c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097c6:	e091      	b.n	80098ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 facb 	bl	8009d66 <USBD_CtlError>
            err++;
 80097d0:	7afb      	ldrb	r3, [r7, #11]
 80097d2:	3301      	adds	r3, #1
 80097d4:	72fb      	strb	r3, [r7, #11]
          break;
 80097d6:	e089      	b.n	80098ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00b      	beq.n	80097fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	7c12      	ldrb	r2, [r2, #16]
 80097f0:	f107 0108 	add.w	r1, r7, #8
 80097f4:	4610      	mov	r0, r2
 80097f6:	4798      	blx	r3
 80097f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097fa:	e077      	b.n	80098ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fab1 	bl	8009d66 <USBD_CtlError>
            err++;
 8009804:	7afb      	ldrb	r3, [r7, #11]
 8009806:	3301      	adds	r3, #1
 8009808:	72fb      	strb	r3, [r7, #11]
          break;
 800980a:	e06f      	b.n	80098ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00b      	beq.n	8009830 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	7c12      	ldrb	r2, [r2, #16]
 8009824:	f107 0108 	add.w	r1, r7, #8
 8009828:	4610      	mov	r0, r2
 800982a:	4798      	blx	r3
 800982c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800982e:	e05d      	b.n	80098ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fa97 	bl	8009d66 <USBD_CtlError>
            err++;
 8009838:	7afb      	ldrb	r3, [r7, #11]
 800983a:	3301      	adds	r3, #1
 800983c:	72fb      	strb	r3, [r7, #11]
          break;
 800983e:	e055      	b.n	80098ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d00b      	beq.n	8009864 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009852:	691b      	ldr	r3, [r3, #16]
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	7c12      	ldrb	r2, [r2, #16]
 8009858:	f107 0108 	add.w	r1, r7, #8
 800985c:	4610      	mov	r0, r2
 800985e:	4798      	blx	r3
 8009860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009862:	e043      	b.n	80098ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fa7d 	bl	8009d66 <USBD_CtlError>
            err++;
 800986c:	7afb      	ldrb	r3, [r7, #11]
 800986e:	3301      	adds	r3, #1
 8009870:	72fb      	strb	r3, [r7, #11]
          break;
 8009872:	e03b      	b.n	80098ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00b      	beq.n	8009898 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	7c12      	ldrb	r2, [r2, #16]
 800988c:	f107 0108 	add.w	r1, r7, #8
 8009890:	4610      	mov	r0, r2
 8009892:	4798      	blx	r3
 8009894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009896:	e029      	b.n	80098ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fa63 	bl	8009d66 <USBD_CtlError>
            err++;
 80098a0:	7afb      	ldrb	r3, [r7, #11]
 80098a2:	3301      	adds	r3, #1
 80098a4:	72fb      	strb	r3, [r7, #11]
          break;
 80098a6:	e021      	b.n	80098ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00b      	beq.n	80098cc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	7c12      	ldrb	r2, [r2, #16]
 80098c0:	f107 0108 	add.w	r1, r7, #8
 80098c4:	4610      	mov	r0, r2
 80098c6:	4798      	blx	r3
 80098c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ca:	e00f      	b.n	80098ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fa49 	bl	8009d66 <USBD_CtlError>
            err++;
 80098d4:	7afb      	ldrb	r3, [r7, #11]
 80098d6:	3301      	adds	r3, #1
 80098d8:	72fb      	strb	r3, [r7, #11]
          break;
 80098da:	e007      	b.n	80098ec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 fa41 	bl	8009d66 <USBD_CtlError>
          err++;
 80098e4:	7afb      	ldrb	r3, [r7, #11]
 80098e6:	3301      	adds	r3, #1
 80098e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80098ea:	bf00      	nop
      }
      break;
 80098ec:	e037      	b.n	800995e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	7c1b      	ldrb	r3, [r3, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d109      	bne.n	800990a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fe:	f107 0208 	add.w	r2, r7, #8
 8009902:	4610      	mov	r0, r2
 8009904:	4798      	blx	r3
 8009906:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009908:	e029      	b.n	800995e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 fa2a 	bl	8009d66 <USBD_CtlError>
        err++;
 8009912:	7afb      	ldrb	r3, [r7, #11]
 8009914:	3301      	adds	r3, #1
 8009916:	72fb      	strb	r3, [r7, #11]
      break;
 8009918:	e021      	b.n	800995e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	7c1b      	ldrb	r3, [r3, #16]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10d      	bne.n	800993e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800992a:	f107 0208 	add.w	r2, r7, #8
 800992e:	4610      	mov	r0, r2
 8009930:	4798      	blx	r3
 8009932:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	3301      	adds	r3, #1
 8009938:	2207      	movs	r2, #7
 800993a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800993c:	e00f      	b.n	800995e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fa10 	bl	8009d66 <USBD_CtlError>
        err++;
 8009946:	7afb      	ldrb	r3, [r7, #11]
 8009948:	3301      	adds	r3, #1
 800994a:	72fb      	strb	r3, [r7, #11]
      break;
 800994c:	e007      	b.n	800995e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800994e:	6839      	ldr	r1, [r7, #0]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fa08 	bl	8009d66 <USBD_CtlError>
      err++;
 8009956:	7afb      	ldrb	r3, [r7, #11]
 8009958:	3301      	adds	r3, #1
 800995a:	72fb      	strb	r3, [r7, #11]
      break;
 800995c:	bf00      	nop
  }

  if (err != 0U)
 800995e:	7afb      	ldrb	r3, [r7, #11]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d11e      	bne.n	80099a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	88db      	ldrh	r3, [r3, #6]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d016      	beq.n	800999a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800996c:	893b      	ldrh	r3, [r7, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00e      	beq.n	8009990 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	88da      	ldrh	r2, [r3, #6]
 8009976:	893b      	ldrh	r3, [r7, #8]
 8009978:	4293      	cmp	r3, r2
 800997a:	bf28      	it	cs
 800997c:	4613      	movcs	r3, r2
 800997e:	b29b      	uxth	r3, r3
 8009980:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009982:	893b      	ldrh	r3, [r7, #8]
 8009984:	461a      	mov	r2, r3
 8009986:	68f9      	ldr	r1, [r7, #12]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fa5d 	bl	8009e48 <USBD_CtlSendData>
 800998e:	e009      	b.n	80099a4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f9e7 	bl	8009d66 <USBD_CtlError>
 8009998:	e004      	b.n	80099a4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 faae 	bl	8009efc <USBD_CtlSendStatus>
 80099a0:	e000      	b.n	80099a4 <USBD_GetDescriptor+0x320>
    return;
 80099a2:	bf00      	nop
  }
}
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop

080099ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	889b      	ldrh	r3, [r3, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d131      	bne.n	8009a22 <USBD_SetAddress+0x76>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	88db      	ldrh	r3, [r3, #6]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d12d      	bne.n	8009a22 <USBD_SetAddress+0x76>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	885b      	ldrh	r3, [r3, #2]
 80099ca:	2b7f      	cmp	r3, #127	; 0x7f
 80099cc:	d829      	bhi.n	8009a22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	885b      	ldrh	r3, [r3, #2]
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d104      	bne.n	80099f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f9bc 	bl	8009d66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ee:	e01d      	b.n	8009a2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	7bfa      	ldrb	r2, [r7, #15]
 80099f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 ffb9 	bl	800a974 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fa7a 	bl	8009efc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d004      	beq.n	8009a18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2202      	movs	r2, #2
 8009a12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a16:	e009      	b.n	8009a2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a20:	e004      	b.n	8009a2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a22:	6839      	ldr	r1, [r7, #0]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f99e 	bl	8009d66 <USBD_CtlError>
  }
}
 8009a2a:	bf00      	nop
 8009a2c:	bf00      	nop
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	885b      	ldrh	r3, [r3, #2]
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	4b4e      	ldr	r3, [pc, #312]	; (8009b84 <USBD_SetConfig+0x150>)
 8009a4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a4c:	4b4d      	ldr	r3, [pc, #308]	; (8009b84 <USBD_SetConfig+0x150>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d905      	bls.n	8009a60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f985 	bl	8009d66 <USBD_CtlError>
    return USBD_FAIL;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e08c      	b.n	8009b7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d002      	beq.n	8009a72 <USBD_SetConfig+0x3e>
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d029      	beq.n	8009ac4 <USBD_SetConfig+0x90>
 8009a70:	e075      	b.n	8009b5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009a72:	4b44      	ldr	r3, [pc, #272]	; (8009b84 <USBD_SetConfig+0x150>)
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d020      	beq.n	8009abc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009a7a:	4b42      	ldr	r3, [pc, #264]	; (8009b84 <USBD_SetConfig+0x150>)
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a84:	4b3f      	ldr	r3, [pc, #252]	; (8009b84 <USBD_SetConfig+0x150>)
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7fe ffb7 	bl	80089fe <USBD_SetClassConfig>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d008      	beq.n	8009aac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f962 	bl	8009d66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009aaa:	e065      	b.n	8009b78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fa25 	bl	8009efc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2203      	movs	r2, #3
 8009ab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009aba:	e05d      	b.n	8009b78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fa1d 	bl	8009efc <USBD_CtlSendStatus>
      break;
 8009ac2:	e059      	b.n	8009b78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ac4:	4b2f      	ldr	r3, [pc, #188]	; (8009b84 <USBD_SetConfig+0x150>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d112      	bne.n	8009af2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009ad4:	4b2b      	ldr	r3, [pc, #172]	; (8009b84 <USBD_SetConfig+0x150>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	461a      	mov	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ade:	4b29      	ldr	r3, [pc, #164]	; (8009b84 <USBD_SetConfig+0x150>)
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f7fe ffa6 	bl	8008a36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fa06 	bl	8009efc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009af0:	e042      	b.n	8009b78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009af2:	4b24      	ldr	r3, [pc, #144]	; (8009b84 <USBD_SetConfig+0x150>)
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d02a      	beq.n	8009b56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7fe ff94 	bl	8008a36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b0e:	4b1d      	ldr	r3, [pc, #116]	; (8009b84 <USBD_SetConfig+0x150>)
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b18:	4b1a      	ldr	r3, [pc, #104]	; (8009b84 <USBD_SetConfig+0x150>)
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7fe ff6d 	bl	80089fe <USBD_SetClassConfig>
 8009b24:	4603      	mov	r3, r0
 8009b26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b28:	7bfb      	ldrb	r3, [r7, #15]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00f      	beq.n	8009b4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f918 	bl	8009d66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7fe ff79 	bl	8008a36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2202      	movs	r2, #2
 8009b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b4c:	e014      	b.n	8009b78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f9d4 	bl	8009efc <USBD_CtlSendStatus>
      break;
 8009b54:	e010      	b.n	8009b78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f9d0 	bl	8009efc <USBD_CtlSendStatus>
      break;
 8009b5c:	e00c      	b.n	8009b78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f900 	bl	8009d66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b66:	4b07      	ldr	r3, [pc, #28]	; (8009b84 <USBD_SetConfig+0x150>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7fe ff62 	bl	8008a36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009b72:	2303      	movs	r3, #3
 8009b74:	73fb      	strb	r3, [r7, #15]
      break;
 8009b76:	bf00      	nop
  }

  return ret;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	200003a8 	.word	0x200003a8

08009b88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	88db      	ldrh	r3, [r3, #6]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d004      	beq.n	8009ba4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f8e2 	bl	8009d66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009ba2:	e023      	b.n	8009bec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	dc02      	bgt.n	8009bb6 <USBD_GetConfig+0x2e>
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	dc03      	bgt.n	8009bbc <USBD_GetConfig+0x34>
 8009bb4:	e015      	b.n	8009be2 <USBD_GetConfig+0x5a>
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d00b      	beq.n	8009bd2 <USBD_GetConfig+0x4a>
 8009bba:	e012      	b.n	8009be2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f93c 	bl	8009e48 <USBD_CtlSendData>
        break;
 8009bd0:	e00c      	b.n	8009bec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f934 	bl	8009e48 <USBD_CtlSendData>
        break;
 8009be0:	e004      	b.n	8009bec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f8be 	bl	8009d66 <USBD_CtlError>
        break;
 8009bea:	bf00      	nop
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	3b01      	subs	r3, #1
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d81e      	bhi.n	8009c4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	88db      	ldrh	r3, [r3, #6]
 8009c10:	2b02      	cmp	r3, #2
 8009c12:	d004      	beq.n	8009c1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f8a5 	bl	8009d66 <USBD_CtlError>
        break;
 8009c1c:	e01a      	b.n	8009c54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d005      	beq.n	8009c3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	f043 0202 	orr.w	r2, r3, #2
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	330c      	adds	r3, #12
 8009c3e:	2202      	movs	r2, #2
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f900 	bl	8009e48 <USBD_CtlSendData>
      break;
 8009c48:	e004      	b.n	8009c54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009c4a:	6839      	ldr	r1, [r7, #0]
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f88a 	bl	8009d66 <USBD_CtlError>
      break;
 8009c52:	bf00      	nop
  }
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	885b      	ldrh	r3, [r3, #2]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d107      	bne.n	8009c7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f940 	bl	8009efc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009c7c:	e013      	b.n	8009ca6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	885b      	ldrh	r3, [r3, #2]
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	d10b      	bne.n	8009c9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	889b      	ldrh	r3, [r3, #4]
 8009c8a:	0a1b      	lsrs	r3, r3, #8
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f930 	bl	8009efc <USBD_CtlSendStatus>
}
 8009c9c:	e003      	b.n	8009ca6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c9e:	6839      	ldr	r1, [r7, #0]
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f860 	bl	8009d66 <USBD_CtlError>
}
 8009ca6:	bf00      	nop
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b082      	sub	sp, #8
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d80b      	bhi.n	8009cde <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	885b      	ldrh	r3, [r3, #2]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d10c      	bne.n	8009ce8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f910 	bl	8009efc <USBD_CtlSendStatus>
      }
      break;
 8009cdc:	e004      	b.n	8009ce8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f840 	bl	8009d66 <USBD_CtlError>
      break;
 8009ce6:	e000      	b.n	8009cea <USBD_ClrFeature+0x3c>
      break;
 8009ce8:	bf00      	nop
  }
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b084      	sub	sp, #16
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	781a      	ldrb	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	781a      	ldrb	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f7ff fa17 	bl	8009150 <SWAPBYTE>
 8009d22:	4603      	mov	r3, r0
 8009d24:	461a      	mov	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3301      	adds	r3, #1
 8009d34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f7ff fa0a 	bl	8009150 <SWAPBYTE>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	3301      	adds	r3, #1
 8009d48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7ff f9fd 	bl	8009150 <SWAPBYTE>
 8009d56:	4603      	mov	r3, r0
 8009d58:	461a      	mov	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	80da      	strh	r2, [r3, #6]
}
 8009d5e:	bf00      	nop
 8009d60:	3710      	adds	r7, #16
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b082      	sub	sp, #8
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d70:	2180      	movs	r1, #128	; 0x80
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fd66 	bl	800a844 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d78:	2100      	movs	r1, #0
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fd62 	bl	800a844 <USBD_LL_StallEP>
}
 8009d80:	bf00      	nop
 8009d82:	3708      	adds	r7, #8
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d94:	2300      	movs	r3, #0
 8009d96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d036      	beq.n	8009e0c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009da2:	6938      	ldr	r0, [r7, #16]
 8009da4:	f000 f836 	bl	8009e14 <USBD_GetLen>
 8009da8:	4603      	mov	r3, r0
 8009daa:	3301      	adds	r3, #1
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	005b      	lsls	r3, r3, #1
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	4413      	add	r3, r2
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	7812      	ldrb	r2, [r2, #0]
 8009dc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009dc8:	7dfb      	ldrb	r3, [r7, #23]
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	4413      	add	r3, r2
 8009dce:	2203      	movs	r2, #3
 8009dd0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009dd8:	e013      	b.n	8009e02 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	4413      	add	r3, r2
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	7812      	ldrb	r2, [r2, #0]
 8009de4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	3301      	adds	r3, #1
 8009dea:	613b      	str	r3, [r7, #16]
    idx++;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	3301      	adds	r3, #1
 8009df0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009df2:	7dfb      	ldrb	r3, [r7, #23]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	4413      	add	r3, r2
 8009df8:	2200      	movs	r2, #0
 8009dfa:	701a      	strb	r2, [r3, #0]
    idx++;
 8009dfc:	7dfb      	ldrb	r3, [r7, #23]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e7      	bne.n	8009dda <USBD_GetString+0x52>
 8009e0a:	e000      	b.n	8009e0e <USBD_GetString+0x86>
    return;
 8009e0c:	bf00      	nop
  }
}
 8009e0e:	3718      	adds	r7, #24
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e24:	e005      	b.n	8009e32 <USBD_GetLen+0x1e>
  {
    len++;
 8009e26:	7bfb      	ldrb	r3, [r7, #15]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1f5      	bne.n	8009e26 <USBD_GetLen+0x12>
  }

  return len;
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2202      	movs	r2, #2
 8009e58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 fdb6 	bl	800a9e0 <USBD_LL_Transmit>

  return USBD_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	60b9      	str	r1, [r7, #8]
 8009e88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	2100      	movs	r1, #0
 8009e90:	68f8      	ldr	r0, [r7, #12]
 8009e92:	f000 fda5 	bl	800a9e0 <USBD_LL_Transmit>

  return USBD_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2203      	movs	r2, #3
 8009eb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	687a      	ldr	r2, [r7, #4]
 8009eb8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	2100      	movs	r1, #0
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f000 fdc0 	bl	800aa50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b084      	sub	sp, #16
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68ba      	ldr	r2, [r7, #8]
 8009eea:	2100      	movs	r1, #0
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f000 fdaf 	bl	800aa50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2204      	movs	r2, #4
 8009f08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	2200      	movs	r2, #0
 8009f10:	2100      	movs	r1, #0
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fd64 	bl	800a9e0 <USBD_LL_Transmit>

  return USBD_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b082      	sub	sp, #8
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2205      	movs	r2, #5
 8009f2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f32:	2300      	movs	r3, #0
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fd89 	bl	800aa50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	4912      	ldr	r1, [pc, #72]	; (8009f98 <MX_USB_DEVICE_Init+0x50>)
 8009f50:	4812      	ldr	r0, [pc, #72]	; (8009f9c <MX_USB_DEVICE_Init+0x54>)
 8009f52:	f7fe fcd7 	bl	8008904 <USBD_Init>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009f5c:	f7f6 fd01 	bl	8000962 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009f60:	490f      	ldr	r1, [pc, #60]	; (8009fa0 <MX_USB_DEVICE_Init+0x58>)
 8009f62:	480e      	ldr	r0, [pc, #56]	; (8009f9c <MX_USB_DEVICE_Init+0x54>)
 8009f64:	f7fe fcfe 	bl	8008964 <USBD_RegisterClass>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009f6e:	f7f6 fcf8 	bl	8000962 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009f72:	490c      	ldr	r1, [pc, #48]	; (8009fa4 <MX_USB_DEVICE_Init+0x5c>)
 8009f74:	4809      	ldr	r0, [pc, #36]	; (8009f9c <MX_USB_DEVICE_Init+0x54>)
 8009f76:	f7fe fc35 	bl	80087e4 <USBD_CDC_RegisterInterface>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009f80:	f7f6 fcef 	bl	8000962 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009f84:	4805      	ldr	r0, [pc, #20]	; (8009f9c <MX_USB_DEVICE_Init+0x54>)
 8009f86:	f7fe fd23 	bl	80089d0 <USBD_Start>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009f90:	f7f6 fce7 	bl	8000962 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009f94:	bf00      	nop
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	200000ac 	.word	0x200000ac
 8009f9c:	200003ac 	.word	0x200003ac
 8009fa0:	20000018 	.word	0x20000018
 8009fa4:	20000098 	.word	0x20000098

08009fa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009fac:	2200      	movs	r2, #0
 8009fae:	4905      	ldr	r1, [pc, #20]	; (8009fc4 <CDC_Init_FS+0x1c>)
 8009fb0:	4805      	ldr	r0, [pc, #20]	; (8009fc8 <CDC_Init_FS+0x20>)
 8009fb2:	f7fe fc31 	bl	8008818 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009fb6:	4905      	ldr	r1, [pc, #20]	; (8009fcc <CDC_Init_FS+0x24>)
 8009fb8:	4803      	ldr	r0, [pc, #12]	; (8009fc8 <CDC_Init_FS+0x20>)
 8009fba:	f7fe fc4f 	bl	800885c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009fbe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	20000e88 	.word	0x20000e88
 8009fc8:	200003ac 	.word	0x200003ac
 8009fcc:	20000688 	.word	0x20000688

08009fd0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009fd4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	6039      	str	r1, [r7, #0]
 8009fea:	71fb      	strb	r3, [r7, #7]
 8009fec:	4613      	mov	r3, r2
 8009fee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ff0:	79fb      	ldrb	r3, [r7, #7]
 8009ff2:	2b23      	cmp	r3, #35	; 0x23
 8009ff4:	d84a      	bhi.n	800a08c <CDC_Control_FS+0xac>
 8009ff6:	a201      	add	r2, pc, #4	; (adr r2, 8009ffc <CDC_Control_FS+0x1c>)
 8009ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ffc:	0800a08d 	.word	0x0800a08d
 800a000:	0800a08d 	.word	0x0800a08d
 800a004:	0800a08d 	.word	0x0800a08d
 800a008:	0800a08d 	.word	0x0800a08d
 800a00c:	0800a08d 	.word	0x0800a08d
 800a010:	0800a08d 	.word	0x0800a08d
 800a014:	0800a08d 	.word	0x0800a08d
 800a018:	0800a08d 	.word	0x0800a08d
 800a01c:	0800a08d 	.word	0x0800a08d
 800a020:	0800a08d 	.word	0x0800a08d
 800a024:	0800a08d 	.word	0x0800a08d
 800a028:	0800a08d 	.word	0x0800a08d
 800a02c:	0800a08d 	.word	0x0800a08d
 800a030:	0800a08d 	.word	0x0800a08d
 800a034:	0800a08d 	.word	0x0800a08d
 800a038:	0800a08d 	.word	0x0800a08d
 800a03c:	0800a08d 	.word	0x0800a08d
 800a040:	0800a08d 	.word	0x0800a08d
 800a044:	0800a08d 	.word	0x0800a08d
 800a048:	0800a08d 	.word	0x0800a08d
 800a04c:	0800a08d 	.word	0x0800a08d
 800a050:	0800a08d 	.word	0x0800a08d
 800a054:	0800a08d 	.word	0x0800a08d
 800a058:	0800a08d 	.word	0x0800a08d
 800a05c:	0800a08d 	.word	0x0800a08d
 800a060:	0800a08d 	.word	0x0800a08d
 800a064:	0800a08d 	.word	0x0800a08d
 800a068:	0800a08d 	.word	0x0800a08d
 800a06c:	0800a08d 	.word	0x0800a08d
 800a070:	0800a08d 	.word	0x0800a08d
 800a074:	0800a08d 	.word	0x0800a08d
 800a078:	0800a08d 	.word	0x0800a08d
 800a07c:	0800a08d 	.word	0x0800a08d
 800a080:	0800a08d 	.word	0x0800a08d
 800a084:	0800a08d 	.word	0x0800a08d
 800a088:	0800a08d 	.word	0x0800a08d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a08c:	bf00      	nop
  }

  return (USBD_OK);
 800a08e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a090:	4618      	mov	r0, r3
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a0a6:	6879      	ldr	r1, [r7, #4]
 800a0a8:	4807      	ldr	r0, [pc, #28]	; (800a0c8 <CDC_Receive_FS+0x2c>)
 800a0aa:	f7fe fbd7 	bl	800885c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a0ae:	4806      	ldr	r0, [pc, #24]	; (800a0c8 <CDC_Receive_FS+0x2c>)
 800a0b0:	f7fe fbf2 	bl	8008898 <USBD_CDC_ReceivePacket>
  CDC_myReceive_FS(Buf, Len);
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7f6 fb8a 	bl	80007d0 <CDC_myReceive_FS>
  return (USBD_OK);
 800a0bc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3708      	adds	r7, #8
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	200003ac 	.word	0x200003ac

0800a0cc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a0de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	371c      	adds	r7, #28
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr
	...

0800a0f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	6039      	str	r1, [r7, #0]
 800a0fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	2212      	movs	r2, #18
 800a100:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a102:	4b03      	ldr	r3, [pc, #12]	; (800a110 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a104:	4618      	mov	r0, r3
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr
 800a110:	200000cc 	.word	0x200000cc

0800a114 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	6039      	str	r1, [r7, #0]
 800a11e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	2204      	movs	r2, #4
 800a124:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a126:	4b03      	ldr	r3, [pc, #12]	; (800a134 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a128:	4618      	mov	r0, r3
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	200000ec 	.word	0x200000ec

0800a138 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	4603      	mov	r3, r0
 800a140:	6039      	str	r1, [r7, #0]
 800a142:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a144:	79fb      	ldrb	r3, [r7, #7]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d105      	bne.n	800a156 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	4907      	ldr	r1, [pc, #28]	; (800a16c <USBD_FS_ProductStrDescriptor+0x34>)
 800a14e:	4808      	ldr	r0, [pc, #32]	; (800a170 <USBD_FS_ProductStrDescriptor+0x38>)
 800a150:	f7ff fe1a 	bl	8009d88 <USBD_GetString>
 800a154:	e004      	b.n	800a160 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	4904      	ldr	r1, [pc, #16]	; (800a16c <USBD_FS_ProductStrDescriptor+0x34>)
 800a15a:	4805      	ldr	r0, [pc, #20]	; (800a170 <USBD_FS_ProductStrDescriptor+0x38>)
 800a15c:	f7ff fe14 	bl	8009d88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a160:	4b02      	ldr	r3, [pc, #8]	; (800a16c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a162:	4618      	mov	r0, r3
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	20001688 	.word	0x20001688
 800a170:	0800ac5c 	.word	0x0800ac5c

0800a174 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	6039      	str	r1, [r7, #0]
 800a17e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	4904      	ldr	r1, [pc, #16]	; (800a194 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a184:	4804      	ldr	r0, [pc, #16]	; (800a198 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a186:	f7ff fdff 	bl	8009d88 <USBD_GetString>
  return USBD_StrDesc;
 800a18a:	4b02      	ldr	r3, [pc, #8]	; (800a194 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	20001688 	.word	0x20001688
 800a198:	0800ac74 	.word	0x0800ac74

0800a19c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	6039      	str	r1, [r7, #0]
 800a1a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	221a      	movs	r2, #26
 800a1ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a1ae:	f000 f855 	bl	800a25c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a1b2:	4b02      	ldr	r3, [pc, #8]	; (800a1bc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	200000f0 	.word	0x200000f0

0800a1c0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b082      	sub	sp, #8
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	6039      	str	r1, [r7, #0]
 800a1ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d105      	bne.n	800a1de <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1d2:	683a      	ldr	r2, [r7, #0]
 800a1d4:	4907      	ldr	r1, [pc, #28]	; (800a1f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1d6:	4808      	ldr	r0, [pc, #32]	; (800a1f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1d8:	f7ff fdd6 	bl	8009d88 <USBD_GetString>
 800a1dc:	e004      	b.n	800a1e8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	4904      	ldr	r1, [pc, #16]	; (800a1f4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a1e2:	4805      	ldr	r0, [pc, #20]	; (800a1f8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a1e4:	f7ff fdd0 	bl	8009d88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1e8:	4b02      	ldr	r3, [pc, #8]	; (800a1f4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20001688 	.word	0x20001688
 800a1f8:	0800ac88 	.word	0x0800ac88

0800a1fc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	4603      	mov	r3, r0
 800a204:	6039      	str	r1, [r7, #0]
 800a206:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a208:	79fb      	ldrb	r3, [r7, #7]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d105      	bne.n	800a21a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	4907      	ldr	r1, [pc, #28]	; (800a230 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a212:	4808      	ldr	r0, [pc, #32]	; (800a234 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a214:	f7ff fdb8 	bl	8009d88 <USBD_GetString>
 800a218:	e004      	b.n	800a224 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	4904      	ldr	r1, [pc, #16]	; (800a230 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a21e:	4805      	ldr	r0, [pc, #20]	; (800a234 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a220:	f7ff fdb2 	bl	8009d88 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a224:	4b02      	ldr	r3, [pc, #8]	; (800a230 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	20001688 	.word	0x20001688
 800a234:	0800ac94 	.word	0x0800ac94

0800a238 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	6039      	str	r1, [r7, #0]
 800a242:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	220c      	movs	r2, #12
 800a248:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a24a:	4b03      	ldr	r3, [pc, #12]	; (800a258 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	200000e0 	.word	0x200000e0

0800a25c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a262:	4b0f      	ldr	r3, [pc, #60]	; (800a2a0 <Get_SerialNum+0x44>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a268:	4b0e      	ldr	r3, [pc, #56]	; (800a2a4 <Get_SerialNum+0x48>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a26e:	4b0e      	ldr	r3, [pc, #56]	; (800a2a8 <Get_SerialNum+0x4c>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4413      	add	r3, r2
 800a27a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d009      	beq.n	800a296 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a282:	2208      	movs	r2, #8
 800a284:	4909      	ldr	r1, [pc, #36]	; (800a2ac <Get_SerialNum+0x50>)
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f814 	bl	800a2b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a28c:	2204      	movs	r2, #4
 800a28e:	4908      	ldr	r1, [pc, #32]	; (800a2b0 <Get_SerialNum+0x54>)
 800a290:	68b8      	ldr	r0, [r7, #8]
 800a292:	f000 f80f 	bl	800a2b4 <IntToUnicode>
  }
}
 800a296:	bf00      	nop
 800a298:	3710      	adds	r7, #16
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	1fff7590 	.word	0x1fff7590
 800a2a4:	1fff7594 	.word	0x1fff7594
 800a2a8:	1fff7598 	.word	0x1fff7598
 800a2ac:	200000f2 	.word	0x200000f2
 800a2b0:	20000102 	.word	0x20000102

0800a2b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b087      	sub	sp, #28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	75fb      	strb	r3, [r7, #23]
 800a2ca:	e027      	b.n	800a31c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	0f1b      	lsrs	r3, r3, #28
 800a2d0:	2b09      	cmp	r3, #9
 800a2d2:	d80b      	bhi.n	800a2ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	0f1b      	lsrs	r3, r3, #28
 800a2d8:	b2da      	uxtb	r2, r3
 800a2da:	7dfb      	ldrb	r3, [r7, #23]
 800a2dc:	005b      	lsls	r3, r3, #1
 800a2de:	4619      	mov	r1, r3
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	440b      	add	r3, r1
 800a2e4:	3230      	adds	r2, #48	; 0x30
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	e00a      	b.n	800a302 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	0f1b      	lsrs	r3, r3, #28
 800a2f0:	b2da      	uxtb	r2, r3
 800a2f2:	7dfb      	ldrb	r3, [r7, #23]
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	440b      	add	r3, r1
 800a2fc:	3237      	adds	r2, #55	; 0x37
 800a2fe:	b2d2      	uxtb	r2, r2
 800a300:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	011b      	lsls	r3, r3, #4
 800a306:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a308:	7dfb      	ldrb	r3, [r7, #23]
 800a30a:	005b      	lsls	r3, r3, #1
 800a30c:	3301      	adds	r3, #1
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	4413      	add	r3, r2
 800a312:	2200      	movs	r2, #0
 800a314:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a316:	7dfb      	ldrb	r3, [r7, #23]
 800a318:	3301      	adds	r3, #1
 800a31a:	75fb      	strb	r3, [r7, #23]
 800a31c:	7dfa      	ldrb	r2, [r7, #23]
 800a31e:	79fb      	ldrb	r3, [r7, #7]
 800a320:	429a      	cmp	r2, r3
 800a322:	d3d3      	bcc.n	800a2cc <IntToUnicode+0x18>
  }
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop
 800a328:	371c      	adds	r7, #28
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
	...

0800a334 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b0b0      	sub	sp, #192	; 0xc0
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a33c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a340:	2200      	movs	r2, #0
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	605a      	str	r2, [r3, #4]
 800a346:	609a      	str	r2, [r3, #8]
 800a348:	60da      	str	r2, [r3, #12]
 800a34a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a34c:	f107 0318 	add.w	r3, r7, #24
 800a350:	2294      	movs	r2, #148	; 0x94
 800a352:	2100      	movs	r1, #0
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fc33 	bl	800abc0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a362:	d174      	bne.n	800a44e <HAL_PCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a368:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800a36a:	2300      	movs	r3, #0
 800a36c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a370:	f107 0318 	add.w	r3, r7, #24
 800a374:	4618      	mov	r0, r3
 800a376:	f7f9 fdd5 	bl	8003f24 <HAL_RCCEx_PeriphCLKConfig>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800a380:	f7f6 faef 	bl	8000962 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a384:	4b34      	ldr	r3, [pc, #208]	; (800a458 <HAL_PCD_MspInit+0x124>)
 800a386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a388:	4a33      	ldr	r2, [pc, #204]	; (800a458 <HAL_PCD_MspInit+0x124>)
 800a38a:	f043 0301 	orr.w	r3, r3, #1
 800a38e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a390:	4b31      	ldr	r3, [pc, #196]	; (800a458 <HAL_PCD_MspInit+0x124>)
 800a392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a394:	f003 0301 	and.w	r3, r3, #1
 800a398:	617b      	str	r3, [r7, #20]
 800a39a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a39c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a3a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a3b6:	230a      	movs	r3, #10
 800a3b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a3c6:	f7f7 fa6d 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800a3ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a3de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a3e8:	f7f7 fa5c 	bl	80018a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a3ec:	4b1a      	ldr	r3, [pc, #104]	; (800a458 <HAL_PCD_MspInit+0x124>)
 800a3ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3f0:	4a19      	ldr	r2, [pc, #100]	; (800a458 <HAL_PCD_MspInit+0x124>)
 800a3f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a3f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a3f8:	4b17      	ldr	r3, [pc, #92]	; (800a458 <HAL_PCD_MspInit+0x124>)
 800a3fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a400:	613b      	str	r3, [r7, #16]
 800a402:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a404:	4b14      	ldr	r3, [pc, #80]	; (800a458 <HAL_PCD_MspInit+0x124>)
 800a406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d114      	bne.n	800a43a <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a410:	4b11      	ldr	r3, [pc, #68]	; (800a458 <HAL_PCD_MspInit+0x124>)
 800a412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a414:	4a10      	ldr	r2, [pc, #64]	; (800a458 <HAL_PCD_MspInit+0x124>)
 800a416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a41a:	6593      	str	r3, [r2, #88]	; 0x58
 800a41c:	4b0e      	ldr	r3, [pc, #56]	; (800a458 <HAL_PCD_MspInit+0x124>)
 800a41e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a424:	60fb      	str	r3, [r7, #12]
 800a426:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800a428:	f7f8 fe84 	bl	8003134 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a42c:	4b0a      	ldr	r3, [pc, #40]	; (800a458 <HAL_PCD_MspInit+0x124>)
 800a42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a430:	4a09      	ldr	r2, [pc, #36]	; (800a458 <HAL_PCD_MspInit+0x124>)
 800a432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a436:	6593      	str	r3, [r2, #88]	; 0x58
 800a438:	e001      	b.n	800a43e <HAL_PCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a43a:	f7f8 fe7b 	bl	8003134 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a43e:	2200      	movs	r2, #0
 800a440:	2100      	movs	r1, #0
 800a442:	2043      	movs	r0, #67	; 0x43
 800a444:	f7f6 fec9 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a448:	2043      	movs	r0, #67	; 0x43
 800a44a:	f7f6 fee2 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a44e:	bf00      	nop
 800a450:	37c0      	adds	r7, #192	; 0xc0
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	40021000 	.word	0x40021000

0800a45c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a470:	4619      	mov	r1, r3
 800a472:	4610      	mov	r0, r2
 800a474:	f7fe faf9 	bl	8008a6a <USBD_LL_SetupStage>
}
 800a478:	bf00      	nop
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	460b      	mov	r3, r1
 800a48a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a492:	78fa      	ldrb	r2, [r7, #3]
 800a494:	6879      	ldr	r1, [r7, #4]
 800a496:	4613      	mov	r3, r2
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	4413      	add	r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	440b      	add	r3, r1
 800a4a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	78fb      	ldrb	r3, [r7, #3]
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	f7fe fb33 	bl	8008b14 <USBD_LL_DataOutStage>
}
 800a4ae:	bf00      	nop
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a4c8:	78fa      	ldrb	r2, [r7, #3]
 800a4ca:	6879      	ldr	r1, [r7, #4]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	00db      	lsls	r3, r3, #3
 800a4d0:	4413      	add	r3, r2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	440b      	add	r3, r1
 800a4d6:	3348      	adds	r3, #72	; 0x48
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	78fb      	ldrb	r3, [r7, #3]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	f7fe fbcc 	bl	8008c7a <USBD_LL_DataInStage>
}
 800a4e2:	bf00      	nop
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fe fd06 	bl	8008f0a <USBD_LL_SOF>
}
 800a4fe:	bf00      	nop
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b084      	sub	sp, #16
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a50e:	2301      	movs	r3, #1
 800a510:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	2b02      	cmp	r3, #2
 800a518:	d001      	beq.n	800a51e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a51a:	f7f6 fa22 	bl	8000962 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a524:	7bfa      	ldrb	r2, [r7, #15]
 800a526:	4611      	mov	r1, r2
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fe fcaa 	bl	8008e82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a534:	4618      	mov	r0, r3
 800a536:	f7fe fc52 	bl	8008dde <USBD_LL_Reset>
}
 800a53a:	bf00      	nop
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
	...

0800a544 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	6812      	ldr	r2, [r2, #0]
 800a55a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a55e:	f043 0301 	orr.w	r3, r3, #1
 800a562:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fc99 	bl	8008ea2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a1b      	ldr	r3, [r3, #32]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d005      	beq.n	800a584 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a578:	4b04      	ldr	r3, [pc, #16]	; (800a58c <HAL_PCD_SuspendCallback+0x48>)
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	4a03      	ldr	r2, [pc, #12]	; (800a58c <HAL_PCD_SuspendCallback+0x48>)
 800a57e:	f043 0306 	orr.w	r3, r3, #6
 800a582:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a584:	bf00      	nop
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	e000ed00 	.word	0xe000ed00

0800a590 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	6812      	ldr	r2, [r2, #0]
 800a5a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a5aa:	f023 0301 	bic.w	r3, r3, #1
 800a5ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a1b      	ldr	r3, [r3, #32]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d007      	beq.n	800a5c8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5b8:	4b08      	ldr	r3, [pc, #32]	; (800a5dc <HAL_PCD_ResumeCallback+0x4c>)
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	4a07      	ldr	r2, [pc, #28]	; (800a5dc <HAL_PCD_ResumeCallback+0x4c>)
 800a5be:	f023 0306 	bic.w	r3, r3, #6
 800a5c2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a5c4:	f000 faf6 	bl	800abb4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fe fc83 	bl	8008eda <USBD_LL_Resume>
}
 800a5d4:	bf00      	nop
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	e000ed00 	.word	0xe000ed00

0800a5e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5f2:	78fa      	ldrb	r2, [r7, #3]
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fe fcd9 	bl	8008fae <USBD_LL_IsoOUTIncomplete>
}
 800a5fc:	bf00      	nop
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	460b      	mov	r3, r1
 800a60e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a616:	78fa      	ldrb	r2, [r7, #3]
 800a618:	4611      	mov	r1, r2
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe fc95 	bl	8008f4a <USBD_LL_IsoINIncomplete>
}
 800a620:	bf00      	nop
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a636:	4618      	mov	r0, r3
 800a638:	f7fe fceb 	bl	8009012 <USBD_LL_DevConnected>
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fce8 	bl	8009028 <USBD_LL_DevDisconnected>
}
 800a658:	bf00      	nop
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d13c      	bne.n	800a6ea <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a670:	4a20      	ldr	r2, [pc, #128]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a1e      	ldr	r2, [pc, #120]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a67c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a680:	4b1c      	ldr	r3, [pc, #112]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a682:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a686:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a688:	4b1a      	ldr	r3, [pc, #104]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a68a:	2206      	movs	r2, #6
 800a68c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a68e:	4b19      	ldr	r3, [pc, #100]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a690:	2202      	movs	r2, #2
 800a692:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a694:	4b17      	ldr	r3, [pc, #92]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a696:	2202      	movs	r2, #2
 800a698:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800a69a:	4b16      	ldr	r3, [pc, #88]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a69c:	2201      	movs	r2, #1
 800a69e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a6a0:	4b14      	ldr	r3, [pc, #80]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a6a6:	4b13      	ldr	r3, [pc, #76]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800a6ac:	4b11      	ldr	r3, [pc, #68]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a6b2:	4b10      	ldr	r3, [pc, #64]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a6b8:	4b0e      	ldr	r3, [pc, #56]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a6be:	480d      	ldr	r0, [pc, #52]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a6c0:	f7f7 facc 	bl	8001c5c <HAL_PCD_Init>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a6ca:	f7f6 f94a 	bl	8000962 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a6ce:	2180      	movs	r1, #128	; 0x80
 800a6d0:	4808      	ldr	r0, [pc, #32]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a6d2:	f7f8 fc36 	bl	8002f42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a6d6:	2240      	movs	r2, #64	; 0x40
 800a6d8:	2100      	movs	r1, #0
 800a6da:	4806      	ldr	r0, [pc, #24]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a6dc:	f7f8 fbea 	bl	8002eb4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a6e0:	2280      	movs	r2, #128	; 0x80
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	4803      	ldr	r0, [pc, #12]	; (800a6f4 <USBD_LL_Init+0x94>)
 800a6e6:	f7f8 fbe5 	bl	8002eb4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	20001888 	.word	0x20001888

0800a6f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a70e:	4618      	mov	r0, r3
 800a710:	f7f7 fbc8 	bl	8001ea4 <HAL_PCD_Start>
 800a714:	4603      	mov	r3, r0
 800a716:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d816      	bhi.n	800a74c <USBD_LL_Start+0x54>
 800a71e:	a201      	add	r2, pc, #4	; (adr r2, 800a724 <USBD_LL_Start+0x2c>)
 800a720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a724:	0800a735 	.word	0x0800a735
 800a728:	0800a73b 	.word	0x0800a73b
 800a72c:	0800a741 	.word	0x0800a741
 800a730:	0800a747 	.word	0x0800a747
    case HAL_OK :
      usb_status = USBD_OK;
 800a734:	2300      	movs	r3, #0
 800a736:	73fb      	strb	r3, [r7, #15]
    break;
 800a738:	e00b      	b.n	800a752 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a73a:	2303      	movs	r3, #3
 800a73c:	73fb      	strb	r3, [r7, #15]
    break;
 800a73e:	e008      	b.n	800a752 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a740:	2301      	movs	r3, #1
 800a742:	73fb      	strb	r3, [r7, #15]
    break;
 800a744:	e005      	b.n	800a752 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a746:	2303      	movs	r3, #3
 800a748:	73fb      	strb	r3, [r7, #15]
    break;
 800a74a:	e002      	b.n	800a752 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a74c:	2303      	movs	r3, #3
 800a74e:	73fb      	strb	r3, [r7, #15]
    break;
 800a750:	bf00      	nop
  }
  return usb_status;
 800a752:	7bfb      	ldrb	r3, [r7, #15]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3710      	adds	r7, #16
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}

0800a75c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	4608      	mov	r0, r1
 800a766:	4611      	mov	r1, r2
 800a768:	461a      	mov	r2, r3
 800a76a:	4603      	mov	r3, r0
 800a76c:	70fb      	strb	r3, [r7, #3]
 800a76e:	460b      	mov	r3, r1
 800a770:	70bb      	strb	r3, [r7, #2]
 800a772:	4613      	mov	r3, r2
 800a774:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a784:	78bb      	ldrb	r3, [r7, #2]
 800a786:	883a      	ldrh	r2, [r7, #0]
 800a788:	78f9      	ldrb	r1, [r7, #3]
 800a78a:	f7f8 f872 	bl	8002872 <HAL_PCD_EP_Open>
 800a78e:	4603      	mov	r3, r0
 800a790:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a792:	7bbb      	ldrb	r3, [r7, #14]
 800a794:	2b03      	cmp	r3, #3
 800a796:	d817      	bhi.n	800a7c8 <USBD_LL_OpenEP+0x6c>
 800a798:	a201      	add	r2, pc, #4	; (adr r2, 800a7a0 <USBD_LL_OpenEP+0x44>)
 800a79a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79e:	bf00      	nop
 800a7a0:	0800a7b1 	.word	0x0800a7b1
 800a7a4:	0800a7b7 	.word	0x0800a7b7
 800a7a8:	0800a7bd 	.word	0x0800a7bd
 800a7ac:	0800a7c3 	.word	0x0800a7c3
    case HAL_OK :
      usb_status = USBD_OK;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a7b4:	e00b      	b.n	800a7ce <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ba:	e008      	b.n	800a7ce <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c0:	e005      	b.n	800a7ce <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7c6:	e002      	b.n	800a7ce <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	73fb      	strb	r3, [r7, #15]
    break;
 800a7cc:	bf00      	nop
  }
  return usb_status;
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7f2:	78fa      	ldrb	r2, [r7, #3]
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7f8 f8a3 	bl	8002942 <HAL_PCD_EP_Close>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a800:	7bbb      	ldrb	r3, [r7, #14]
 800a802:	2b03      	cmp	r3, #3
 800a804:	d816      	bhi.n	800a834 <USBD_LL_CloseEP+0x5c>
 800a806:	a201      	add	r2, pc, #4	; (adr r2, 800a80c <USBD_LL_CloseEP+0x34>)
 800a808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a80c:	0800a81d 	.word	0x0800a81d
 800a810:	0800a823 	.word	0x0800a823
 800a814:	0800a829 	.word	0x0800a829
 800a818:	0800a82f 	.word	0x0800a82f
    case HAL_OK :
      usb_status = USBD_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73fb      	strb	r3, [r7, #15]
    break;
 800a820:	e00b      	b.n	800a83a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a822:	2303      	movs	r3, #3
 800a824:	73fb      	strb	r3, [r7, #15]
    break;
 800a826:	e008      	b.n	800a83a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a828:	2301      	movs	r3, #1
 800a82a:	73fb      	strb	r3, [r7, #15]
    break;
 800a82c:	e005      	b.n	800a83a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a82e:	2303      	movs	r3, #3
 800a830:	73fb      	strb	r3, [r7, #15]
    break;
 800a832:	e002      	b.n	800a83a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a834:	2303      	movs	r3, #3
 800a836:	73fb      	strb	r3, [r7, #15]
    break;
 800a838:	bf00      	nop
  }
  return usb_status;
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a854:	2300      	movs	r3, #0
 800a856:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a85e:	78fa      	ldrb	r2, [r7, #3]
 800a860:	4611      	mov	r1, r2
 800a862:	4618      	mov	r0, r3
 800a864:	f7f8 f932 	bl	8002acc <HAL_PCD_EP_SetStall>
 800a868:	4603      	mov	r3, r0
 800a86a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a86c:	7bbb      	ldrb	r3, [r7, #14]
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d816      	bhi.n	800a8a0 <USBD_LL_StallEP+0x5c>
 800a872:	a201      	add	r2, pc, #4	; (adr r2, 800a878 <USBD_LL_StallEP+0x34>)
 800a874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a878:	0800a889 	.word	0x0800a889
 800a87c:	0800a88f 	.word	0x0800a88f
 800a880:	0800a895 	.word	0x0800a895
 800a884:	0800a89b 	.word	0x0800a89b
    case HAL_OK :
      usb_status = USBD_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73fb      	strb	r3, [r7, #15]
    break;
 800a88c:	e00b      	b.n	800a8a6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a88e:	2303      	movs	r3, #3
 800a890:	73fb      	strb	r3, [r7, #15]
    break;
 800a892:	e008      	b.n	800a8a6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a894:	2301      	movs	r3, #1
 800a896:	73fb      	strb	r3, [r7, #15]
    break;
 800a898:	e005      	b.n	800a8a6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a89a:	2303      	movs	r3, #3
 800a89c:	73fb      	strb	r3, [r7, #15]
    break;
 800a89e:	e002      	b.n	800a8a6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a8a0:	2303      	movs	r3, #3
 800a8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a4:	bf00      	nop
  }
  return usb_status;
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b084      	sub	sp, #16
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8ca:	78fa      	ldrb	r2, [r7, #3]
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7f8 f95e 	bl	8002b90 <HAL_PCD_EP_ClrStall>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d816      	bhi.n	800a90c <USBD_LL_ClearStallEP+0x5c>
 800a8de:	a201      	add	r2, pc, #4	; (adr r2, 800a8e4 <USBD_LL_ClearStallEP+0x34>)
 800a8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e4:	0800a8f5 	.word	0x0800a8f5
 800a8e8:	0800a8fb 	.word	0x0800a8fb
 800a8ec:	0800a901 	.word	0x0800a901
 800a8f0:	0800a907 	.word	0x0800a907
    case HAL_OK :
      usb_status = USBD_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8f8:	e00b      	b.n	800a912 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a8fe:	e008      	b.n	800a912 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a900:	2301      	movs	r3, #1
 800a902:	73fb      	strb	r3, [r7, #15]
    break;
 800a904:	e005      	b.n	800a912 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a906:	2303      	movs	r3, #3
 800a908:	73fb      	strb	r3, [r7, #15]
    break;
 800a90a:	e002      	b.n	800a912 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800a90c:	2303      	movs	r3, #3
 800a90e:	73fb      	strb	r3, [r7, #15]
    break;
 800a910:	bf00      	nop
  }
  return usb_status;
 800a912:	7bfb      	ldrb	r3, [r7, #15]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	460b      	mov	r3, r1
 800a926:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a92e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a934:	2b00      	cmp	r3, #0
 800a936:	da0b      	bge.n	800a950 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a938:	78fb      	ldrb	r3, [r7, #3]
 800a93a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a93e:	68f9      	ldr	r1, [r7, #12]
 800a940:	4613      	mov	r3, r2
 800a942:	00db      	lsls	r3, r3, #3
 800a944:	4413      	add	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	440b      	add	r3, r1
 800a94a:	333e      	adds	r3, #62	; 0x3e
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	e00b      	b.n	800a968 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a950:	78fb      	ldrb	r3, [r7, #3]
 800a952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a956:	68f9      	ldr	r1, [r7, #12]
 800a958:	4613      	mov	r3, r2
 800a95a:	00db      	lsls	r3, r3, #3
 800a95c:	4413      	add	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	440b      	add	r3, r1
 800a962:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a966:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3714      	adds	r7, #20
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a98e:	78fa      	ldrb	r2, [r7, #3]
 800a990:	4611      	mov	r1, r2
 800a992:	4618      	mov	r0, r3
 800a994:	f7f7 ff48 	bl	8002828 <HAL_PCD_SetAddress>
 800a998:	4603      	mov	r3, r0
 800a99a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d816      	bhi.n	800a9d0 <USBD_LL_SetUSBAddress+0x5c>
 800a9a2:	a201      	add	r2, pc, #4	; (adr r2, 800a9a8 <USBD_LL_SetUSBAddress+0x34>)
 800a9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a8:	0800a9b9 	.word	0x0800a9b9
 800a9ac:	0800a9bf 	.word	0x0800a9bf
 800a9b0:	0800a9c5 	.word	0x0800a9c5
 800a9b4:	0800a9cb 	.word	0x0800a9cb
    case HAL_OK :
      usb_status = USBD_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a9bc:	e00b      	b.n	800a9d6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c2:	e008      	b.n	800a9d6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	73fb      	strb	r3, [r7, #15]
    break;
 800a9c8:	e005      	b.n	800a9d6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9ca:	2303      	movs	r3, #3
 800a9cc:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ce:	e002      	b.n	800a9d6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9d4:	bf00      	nop
  }
  return usb_status;
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3710      	adds	r7, #16
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	607a      	str	r2, [r7, #4]
 800a9ea:	603b      	str	r3, [r7, #0]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a9fe:	7af9      	ldrb	r1, [r7, #11]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	f7f8 f831 	bl	8002a6a <HAL_PCD_EP_Transmit>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800aa0c:	7dbb      	ldrb	r3, [r7, #22]
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d816      	bhi.n	800aa40 <USBD_LL_Transmit+0x60>
 800aa12:	a201      	add	r2, pc, #4	; (adr r2, 800aa18 <USBD_LL_Transmit+0x38>)
 800aa14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa18:	0800aa29 	.word	0x0800aa29
 800aa1c:	0800aa2f 	.word	0x0800aa2f
 800aa20:	0800aa35 	.word	0x0800aa35
 800aa24:	0800aa3b 	.word	0x0800aa3b
    case HAL_OK :
      usb_status = USBD_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	75fb      	strb	r3, [r7, #23]
    break;
 800aa2c:	e00b      	b.n	800aa46 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	75fb      	strb	r3, [r7, #23]
    break;
 800aa32:	e008      	b.n	800aa46 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa34:	2301      	movs	r3, #1
 800aa36:	75fb      	strb	r3, [r7, #23]
    break;
 800aa38:	e005      	b.n	800aa46 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	75fb      	strb	r3, [r7, #23]
    break;
 800aa3e:	e002      	b.n	800aa46 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800aa40:	2303      	movs	r3, #3
 800aa42:	75fb      	strb	r3, [r7, #23]
    break;
 800aa44:	bf00      	nop
  }
  return usb_status;
 800aa46:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	607a      	str	r2, [r7, #4]
 800aa5a:	603b      	str	r3, [r7, #0]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aa6e:	7af9      	ldrb	r1, [r7, #11]
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	f7f7 ffaf 	bl	80029d6 <HAL_PCD_EP_Receive>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800aa7c:	7dbb      	ldrb	r3, [r7, #22]
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d816      	bhi.n	800aab0 <USBD_LL_PrepareReceive+0x60>
 800aa82:	a201      	add	r2, pc, #4	; (adr r2, 800aa88 <USBD_LL_PrepareReceive+0x38>)
 800aa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa88:	0800aa99 	.word	0x0800aa99
 800aa8c:	0800aa9f 	.word	0x0800aa9f
 800aa90:	0800aaa5 	.word	0x0800aaa5
 800aa94:	0800aaab 	.word	0x0800aaab
    case HAL_OK :
      usb_status = USBD_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	75fb      	strb	r3, [r7, #23]
    break;
 800aa9c:	e00b      	b.n	800aab6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa9e:	2303      	movs	r3, #3
 800aaa0:	75fb      	strb	r3, [r7, #23]
    break;
 800aaa2:	e008      	b.n	800aab6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	75fb      	strb	r3, [r7, #23]
    break;
 800aaa8:	e005      	b.n	800aab6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	75fb      	strb	r3, [r7, #23]
    break;
 800aaae:	e002      	b.n	800aab6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800aab0:	2303      	movs	r3, #3
 800aab2:	75fb      	strb	r3, [r7, #23]
    break;
 800aab4:	bf00      	nop
  }
  return usb_status;
 800aab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aad2:	78fa      	ldrb	r2, [r7, #3]
 800aad4:	4611      	mov	r1, r2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7f7 ffaf 	bl	8002a3a <HAL_PCD_EP_GetRxCount>
 800aadc:	4603      	mov	r3, r0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800aaf4:	78fb      	ldrb	r3, [r7, #3]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <HAL_PCDEx_LPM_Callback+0x18>
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d01f      	beq.n	800ab3e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800aafe:	e03b      	b.n	800ab78 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d007      	beq.n	800ab18 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ab08:	f000 f854 	bl	800abb4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab0c:	4b1c      	ldr	r3, [pc, #112]	; (800ab80 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	4a1b      	ldr	r2, [pc, #108]	; (800ab80 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab12:	f023 0306 	bic.w	r3, r3, #6
 800ab16:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	6812      	ldr	r2, [r2, #0]
 800ab26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab2a:	f023 0301 	bic.w	r3, r3, #1
 800ab2e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fe f9cf 	bl	8008eda <USBD_LL_Resume>
    break;
 800ab3c:	e01c      	b.n	800ab78 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	6812      	ldr	r2, [r2, #0]
 800ab4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab50:	f043 0301 	orr.w	r3, r3, #1
 800ab54:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fe f9a0 	bl	8008ea2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d005      	beq.n	800ab76 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab6a:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	4a04      	ldr	r2, [pc, #16]	; (800ab80 <HAL_PCDEx_LPM_Callback+0x98>)
 800ab70:	f043 0306 	orr.w	r3, r3, #6
 800ab74:	6113      	str	r3, [r2, #16]
    break;
 800ab76:	bf00      	nop
}
 800ab78:	bf00      	nop
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	e000ed00 	.word	0xe000ed00

0800ab84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab8c:	4b03      	ldr	r3, [pc, #12]	; (800ab9c <USBD_static_malloc+0x18>)
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop
 800ab9c:	20001d94 	.word	0x20001d94

0800aba0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]

}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800abb8:	f7f5 fe80 	bl	80008bc <SystemClock_Config>
}
 800abbc:	bf00      	nop
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <memset>:
 800abc0:	4402      	add	r2, r0
 800abc2:	4603      	mov	r3, r0
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d100      	bne.n	800abca <memset+0xa>
 800abc8:	4770      	bx	lr
 800abca:	f803 1b01 	strb.w	r1, [r3], #1
 800abce:	e7f9      	b.n	800abc4 <memset+0x4>

0800abd0 <__libc_init_array>:
 800abd0:	b570      	push	{r4, r5, r6, lr}
 800abd2:	4d0d      	ldr	r5, [pc, #52]	; (800ac08 <__libc_init_array+0x38>)
 800abd4:	4c0d      	ldr	r4, [pc, #52]	; (800ac0c <__libc_init_array+0x3c>)
 800abd6:	1b64      	subs	r4, r4, r5
 800abd8:	10a4      	asrs	r4, r4, #2
 800abda:	2600      	movs	r6, #0
 800abdc:	42a6      	cmp	r6, r4
 800abde:	d109      	bne.n	800abf4 <__libc_init_array+0x24>
 800abe0:	4d0b      	ldr	r5, [pc, #44]	; (800ac10 <__libc_init_array+0x40>)
 800abe2:	4c0c      	ldr	r4, [pc, #48]	; (800ac14 <__libc_init_array+0x44>)
 800abe4:	f000 f826 	bl	800ac34 <_init>
 800abe8:	1b64      	subs	r4, r4, r5
 800abea:	10a4      	asrs	r4, r4, #2
 800abec:	2600      	movs	r6, #0
 800abee:	42a6      	cmp	r6, r4
 800abf0:	d105      	bne.n	800abfe <__libc_init_array+0x2e>
 800abf2:	bd70      	pop	{r4, r5, r6, pc}
 800abf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf8:	4798      	blx	r3
 800abfa:	3601      	adds	r6, #1
 800abfc:	e7ee      	b.n	800abdc <__libc_init_array+0xc>
 800abfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac02:	4798      	blx	r3
 800ac04:	3601      	adds	r6, #1
 800ac06:	e7f2      	b.n	800abee <__libc_init_array+0x1e>
 800ac08:	0800ad1c 	.word	0x0800ad1c
 800ac0c:	0800ad1c 	.word	0x0800ad1c
 800ac10:	0800ad1c 	.word	0x0800ad1c
 800ac14:	0800ad20 	.word	0x0800ad20

0800ac18 <memcpy>:
 800ac18:	440a      	add	r2, r1
 800ac1a:	4291      	cmp	r1, r2
 800ac1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac20:	d100      	bne.n	800ac24 <memcpy+0xc>
 800ac22:	4770      	bx	lr
 800ac24:	b510      	push	{r4, lr}
 800ac26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac2e:	4291      	cmp	r1, r2
 800ac30:	d1f9      	bne.n	800ac26 <memcpy+0xe>
 800ac32:	bd10      	pop	{r4, pc}

0800ac34 <_init>:
 800ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac36:	bf00      	nop
 800ac38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3a:	bc08      	pop	{r3}
 800ac3c:	469e      	mov	lr, r3
 800ac3e:	4770      	bx	lr

0800ac40 <_fini>:
 800ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac42:	bf00      	nop
 800ac44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac46:	bc08      	pop	{r3}
 800ac48:	469e      	mov	lr, r3
 800ac4a:	4770      	bx	lr
